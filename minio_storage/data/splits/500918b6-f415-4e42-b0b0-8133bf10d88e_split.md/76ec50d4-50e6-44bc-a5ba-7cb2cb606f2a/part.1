Œ[£6=´ lÙEû9#ÄLæî©yV9öèl	èà,]∂# Split Document

**Chunk Count:** 4529

**Splitter Parameters:** {
  "splitter_type": "recursive",
  "chunk_size": 400,
  "chunk_overlap": 0,
  "keep_separator": true
}

---

## Chunk 1

# Document Information

**Title:** About Face

**Author:** Alan Cooper

**Creator:** Adobe InDesign CS6 (Macintosh)

**Pages:** 722

**File Size Mb:** 31.44

**Pages With Text:** 699

**Avg Text Per Page:** 2109.84

**Processing Method:** Direct text extraction

# Content

---

## Chunk 2

--- Page 3 ---
About Face
The Essentials of Interaction Design
Fourth Edition
Alan Cooper
Robert Reimann
David Cronin
Christopher Noessel
with Jason Csizmadi
and Doug LeMoine

---

## Chunk 3

--- Page 4 ---
About Face: The Essentials of Interaction Design, Fourth Edition
Published by
John Wiley & Sons, Inc.
10475 Crosspoint Boulevard
Indianapolis, IN 46256
www.wiley.com
Copyright ¬© 2014 by Alan Cooper
Published by John Wiley & Sons, Inc., Indianapolis, Indiana
Published simultaneously in Canada
ISBN: 978-1-118-76657-6
ISBN: 978-1-118-76640-8 (ebk)
ISBN: 978-1-118-76658-3 (ebk)

---

## Chunk 4

Manufactured in the United States of America
10 9 8 7 6 5 4 3 2 1
No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or by any means,
electronic, mechanical, photocopying, recording, scanning or otherwise, except as permitted under Sections 107 or 108

---

## Chunk 5

of the 1976 United States Copyright Act, without either the prior written permission of the Publisher, or authorization
through payment of the appropriate per-copy fee to the Copyright Clearance Center, 222 Rosewood Drive, Danvers, MA
01923, (978) 750-8400, fax (978) 646-8600. Requests to the Publisher for permission should be addressed to the Permis-

---

## Chunk 6

sions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030, (201) 748-6011, fax (201) 748-6008, or
online at http://www.wiley.com/go/permissions.
Limit of Liability/Disclaimer of Warranty: The publisher and the author make no representations or warranties with

---

## Chunk 7

respect to the accuracy or completeness of the contents of this work and specifically disclaim all warranties, including
without limitation warranties of fitness for a particular purpose. No warranty may be created or extended by sales or
promotional materials. The advice and strategies contained herein may not be suitable for every situation. This work

---

## Chunk 8

is sold with the understanding that the publisher is not engaged in rendering legal, accounting, or other professional
services. If professional assistance is required, the services of a competent professional person should be sought. Nei-
ther the publisher nor the author shall be liable for damages arising herefrom. The fact that an organization or Web site

---

## Chunk 9

is referred to in this work as a citation and/or a potential source of further information does not mean that the author
or the publisher endorses the information the organization or website may provide or recommendations it may make.
Further, readers should be aware that Internet websites listed in this work may have changed or disappeared between
when this work was written and when it is read.

---

## Chunk 10

For general information on our other products and services please contact our Customer Care Department within the
United States at (877) 762-2974, outside the United States at (317) 572-3993 or fax (317) 572-4002.
Wiley publishes in a variety of print and electronic formats and by print-on-demand. Some material included with

---

## Chunk 11

standard print versions of this book may not be included in e-books or in print-on-demand. If this book refers to media
such as a CD or DVD that is not included in the version you purchased, you may download this material at http://
booksupport.wiley.com. For more information about Wiley products, visit www.wiley.com.
Library of Congress Control Number: 2014930411

---

## Chunk 12

Trademarks: Wiley and the Wiley logo are trademarks or registered trademarks of John Wiley & Sons, Inc. and/or its
affiliates, in the United States and other countries, and may not be used without written permission. All other trade-
marks are the property of their respective owners. John Wiley & Sons, Inc. is not associated with any product or vendor
mentioned in this book.

---

## Chunk 13

--- Page 5 ---
For Sue, my best friend through all the adventures of life. ‚ÄîAlan
For Alex and Max, and for Julie. ‚ÄîRobert
For Jasper, Astrid, and Gretchen. ‚ÄîDavid
For Ben and Miles, for your patience and
inspiration. ‚ÄîChristopher
And for all the designers and engineers in our industry
who are helping to imagine and build a better future.

---

## Chunk 14

--- Page 7 ---
AbouT ThE AuThors
Alan Cooper has been a pioneer in the software world for more than 40 years, and he
continues to influence a new generation of developers, entrepreneurs, and user experi-
ence professionals.
Alan started his first company in 1976 and created what has been called ‚Äúthe first serious

---

## Chunk 15

business software for microcomputers.‚Äù In 1988, he invented a dynamically extensible
visual programming tool and sold it to Bill Gates, who released it to the world as Visual
Basic. This accomplishment earned Alan the sobriquet ‚ÄúThe Father of Visual Basic.‚Äù
In 1992, Alan and his wife, Sue, cofounded the first interaction design consulting firm,

---

## Chunk 16

Cooper. By 1997, Cooper had developed a set of core design methods now used across the
industry. Personas, which Alan invented and then popularized in his two best-selling
books, About Face and The Inmates Are Running the Asylum, are employed almost univer-
sally by user experience practitioners.
Today, Alan continues to advocate for more humane technology from his farm in the

---

## Chunk 17

rolling hills north of San Francisco.
Robert Reimann has spent over 20 years pushing the boundaries of digital products
as a designer, writer, strategist, and consultant. He has led dozens of desktop, mobile,
web, and embedded design projects in consumer, business, scientific, and professional
domains for both startups and Fortune 500 companies alike.

---

## Chunk 18

One of the first designers at Cooper, Robert led the development and refinement of many
of the Goal-Directed Design methods described in this book. In 2005, he became the
founding president of IxDA, the Interaction Design Association (www.ixda.org). He has
led user experience teams at Cooper, Bose, frog, and Sonos, and is currently Principal
Interaction Designer at PatientsLikeMe.
v

---

## Chunk 19

--- Page 8 ---
David Cronin is a Design Director at GE and a member of GE‚Äôs Design and Experience
studio leadership team. Prior to that, he was Director of Interaction Design at Smart
Design‚Äôs San Francisco studio and a former Managing Director of Interaction Design at
Cooper.
David has helped design products to serve the needs of surgeons, museum visitors,

---

## Chunk 20

investment portfolio managers, nurses, drivers, dentists, financial analysts, radiologists,
field engineers, manufacturing planners, marketers, videographers, and people with
chronic diseases. During his time at Cooper, he contributed substantially to the princi-
ples, patterns, and practices of Goal-Directed Design.

---

## Chunk 21

Christopher Noessel designs products, services, and strategy for health, financial, and
consumer domains as Cooper‚Äôs first Design Fellow. He has helped visualize the future of
counterterrorism, built prototypes of new technologies for Microsoft, and designed tele-
health devices to accommodate the crazy facts of modern health care.

---

## Chunk 22

Prior to working at Cooper, Chris cofounded a small interaction design agency, where
he developed exhibitions and environments for museums. He was also Director of Infor-
mation Design at marchFIRST, where he helped establish the Interaction Design Center
of Excellence. In 2012, he coauthored Make It So: Interaction Design Lessons from Science

---

## Chunk 23

Fiction. He publishes regularly to the Cooper Journal and continues to speak and teach
around the world.
vi About the Authors

---

## Chunk 24

--- Page 9 ---
CrEDITs
Acquisitions Editor Vice President and Executive Group
Mary James Publisher
Richard Swadley
Project Editor
Adaobi Obi Tulton Associate Publisher
Jim Minatel
Technical Editor
Christopher Noessel Project Coordinator, Cover
Todd Klemme
Senior Production Editor
Kathleen Wisor Compositor
Maureen Forys, Happenstance
Copy Editor Type-O-Rama
Gayle Johnson
Proofreader

---

## Chunk 25

Manager of Content Development Nancy Carrasco
and Assembly
Mary Beth Wakefield Indexer
Johnna VanHoose Dinse
Director of Community Marketing
David Mayhew Cover Designer
Jason Csizmadi
Marketing Manager
Carrie Sherrill Art Director
Jason Csizmadi
Business Manager
Amy Knies
vii

---

## Chunk 26

--- Page 11 ---
ACknowlEDgmEnTs
The other authors and I are extremely proud of this fourth edition. We and many oth-
ers worked hard to update, illustrate, and improve it, but without the efforts of Mary
James at Wiley, it would not exist. Mary‚Äôs quiet, insistent support made the mountainous
project seem imminently doable. Once we began, Mary continued to marshal necessary

---

## Chunk 27

resources and encourage everyone to make this book a reality. Mary recruited some
imposing talent at Wiley to wrangle the many moving pieces of a project such as this.
Project editor Adaobi Obi Tulton has done a fabulous job making the gears mesh and the
wheels turn smoothly. Marketing manager Ashley Zurcher‚Äôs early support for the project

---

## Chunk 28

helped us get the paper, color, graphics, and promotion we aspired to. Her enthusiasm
gave us confidence to do our best.
Ever since Apple changed the landscape of consumer computing with its smartphones
and tablet computers, Robert Reimann has been gently nudging me to update About
Face. When I turned the tables on him, asking him to do the lion‚Äôs share of the writing,

---

## Chunk 29

he unhesitatingly agreed. Most of the changes in this book are his, along with most of the
credit. Chris Noessel generously agreed to act as technical editor, and his contributions
can be felt throughout the manuscript. The capable writing of Dave Cronin and Doug
LeMoine added much to the depth and completeness of this new edition.

---

## Chunk 30

Visually, this edition is far advanced over its predecessors. Many individual members
of the Cooper design staff contributed their talents. Supremely talented visual designer
Jason Csizmadi led the effort, organizing and coordinating, not to mention drawing
and Photoshopping late into the night. You can see the beautiful fruits of his labor on

---

## Chunk 31

these pages, from (and including) cover to cover. Other designers whose work is featured
herein include Cale Leroy, Christina Beard, Brendan Kneram, and Gritchelle Fallesgon,
along with Martina Maleike, James Laslavic, Nick Myers, and Glen Davis.
Other Cooperistas contributed their care and talent at many points during the yearlong

---

## Chunk 32

writing effort. In particular, big props to Jayson McCauliff, Kendra Shimmell, and Susan
Dybbs, who helped immensely in keeping the project on track as work and life brought
their distractions. Similarly, Steve Calde and Karen Lemen were always ready to help as
the project evolved.
ix

---

## Chunk 33

--- Page 12 ---
We would also like to thank the following colleagues and Cooper designers for their con-
tributions to this and previous editions, to whom we are greatly indebted: Kim Goodwin,
who contributed significantly to the development and expression of the concepts and
methods described in Part I; Hugh Dubberly for his help in developing the principles

---

## Chunk 34

described at the end of Chapter 7 and for his assistance in clarifying the Goal-Directed
process with early versions of the diagrams found in Chapter 1; Gretchen Anderson
and Elaine Montgomery for their contributions on user and market research in Chap-
ter 2; Rick Bond for his many insights into usability testing featured in Chapter 5; Chris

---

## Chunk 35

Weeldreyer for his insights into the design of embedded systems in Chapter 19; Wayne
Greenwood for his contributions on control mapping in Chapter 12; and Nate Fortin
and Nick Myers for their contributions on visual interface design and branding in Chap-
ter 17. We would also like to thank Elizabeth Bacon, Steve Calde, John Dunning, David

---

## Chunk 36

Fore, Nate Fortin, Kim Goodwin, Wayne Greenwood, Noah Guyot, Lane Halley, Ernest
Kinsolving, Daniel Kuo, Berm Lee, Tim McCoy, Elaine Montgomery, Nick Myers, Ryan
Olshavsky, Angela Quail, Suzy Thompson, and Chris Weeldreyer for their contributions
to the Cooper designs and illustrations featured in this book. It should also be noted that

---

## Chunk 37

the parts of Chapter 3 concerned with cognitive processing originally appeared in an
article by Robert Reimann on UXMatters.com and are used with permission.
We are grateful to clients David West at Shared Healthcare Systems, Mike Kay and Bill
Chang at Fujitsu Softek, John Chaffins at CrossCountry, Chris Twogood at Teradata, and

---

## Chunk 38

Chris Dollar at McKesson for granting us permission to use examples from the Cooper
design projects featured in this book. We also want to thank the many other clients who
had the vision and foresight to work with us and support us in their organizations.
We would like to acknowledge the following authors and industry colleagues who have

---

## Chunk 39

influenced or clarified our thinking over the years: Christopher Alexander, Edward
Tufte, Kevin Mullet, Victor Papanek, Donald Norman, Larry Constantine, Challis Hodge,
Shelley Evenson, Clifford Nass, Byron Reeves, Stephen Pinker, and Terry Swack.
Thanks to my agent, Bill Gladstone, who again created a successful business framework
for all this to happen.

---

## Chunk 40

As always, the most long-suffering contributors to a work like this one are the authors‚Äô
families. We appreciate how much our partners and children have sacrificed so that we
could create this book.
x Acknowledgments

---

## Chunk 41

--- Page 13 ---
ConTEnTs
Foreword .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . xv
Introduction  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . xix

---

## Chunk 42

PArT I: goal-Directed Design .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 1
Ch 1: A Design Process for Digital Products  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 3
The Consequences of Poor Product Behavior ....................................................4

---

## Chunk 43

Why Digital Products Fail...............................................................................6
Planning and Designing Product Behavior......................................................10
Recognizing User Goals................................................................................13
Implementation Models and Mental Models...................................................16

---

## Chunk 44

An Overview of Goal-Directed Design ............................................................21
Ch 2: understanding the Problem: Design research  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 31
Qualitative versus Quantitative Data in Design Research..................................32
Goal-Directed Design Research.....................................................................36

---

## Chunk 45

Interviewing and Observing Users .................................................................44
Other Types of Qualitative Research ..............................................................56
Research Is Critical to Good Design...............................................................59

---

## Chunk 46

Ch 3: modeling users: Personas and goals  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 61
Why Model? ...............................................................................................61

---

## Chunk 47

The Power of Personas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .62
Why Personas Are Effective ..........................................................................66
Understanding Goals...................................................................................72

---

## Chunk 48

Constructing Personas.................................................................................81
Personas in Practice ....................................................................................93
Other Design Models ...................................................................................98

---

## Chunk 49

Ch 4: setting the Vision: scenarios and Design requirements  .  .  .  .  .  .  . 101
Bridging the Research-Design Gap ..............................................................101
Scenarios: Narrative as a Design Tool...........................................................102
Contents xi

---

## Chunk 50

--- Page 14 ---
Design Requirements: The ‚ÄúWhat‚Äù of Interaction...........................................106
The Requirements Definition Process ..........................................................109
Ch 5: Designing the Product: Framework and refinement  .  .  .  .  .  .  .  .  .  . 119
Creating the Design Framework..................................................................119

---

## Chunk 51

Refining the Form and Behavior..................................................................137
Validating and Testing the Design...............................................................139
Ch 6: Creative Teamwork  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 145

---

## Chunk 52

Small, Focused Teams ...............................................................................146
Thinking Better, Together...........................................................................146
Working across Design Disciplines..............................................................153

---

## Chunk 53

The Extended Team...................................................................................155
Establishing a Creative Culture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
Identifying Skill Levels in Designers.............................................................162

---

## Chunk 54

Collaboration Is the Key.............................................................................163
Part II: making well-behaved Products .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 165
Ch 7: A basis for good Product behavior  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 167

---

## Chunk 55

Design Values...........................................................................................167
Interaction Design Principles......................................................................173
Interaction Design Patterns........................................................................174

---

## Chunk 56

Ch 8: Digital Etiquette  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 179
Designing Considerate Products .................................................................180
Designing Smart Products..........................................................................190

---

## Chunk 57

Designing Social Products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
Ch 9: Platform and Posture  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 205

---

## Chunk 58

Product Platforms.....................................................................................205
Product Postures ......................................................................................206
Postures for the Desktop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207

---

## Chunk 59

Postures for the Web .................................................................................218
Postures for Mobile Devices........................................................................225
Postures for Other Platforms ......................................................................230

---

## Chunk 60

Give Your Apps Good Posture.....................................................................235
Ch 10: optimizing for Intermediates  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 237
Perpetual Intermediates ............................................................................238

---

## Chunk 61

Inflecting the Interface ..............................................................................240
Designing for Three Levels of Experience......................................................243
xii Acknowledgments

---

## Chunk 62

--- Page 15 ---
Ch 11: orchestration and Flow  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 249
Flow and Transparency..............................................................................249
Orchestration ...........................................................................................250

---

## Chunk 63

Harmonious Interactions...........................................................................251
Motion, Timing, and Transitions.................................................................266
The Ideal of Effortlessness ..........................................................................269

---

## Chunk 64

Ch 12: reducing work and Eliminating Excise  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 271
Goal-Directed Tasks versus Excise Tasks......................................................272
Types of Excise .........................................................................................273

---

## Chunk 65

Excise Is Contextual ..................................................................................285
Eliminating Excise.....................................................................................285
Other Common Excise Traps ......................................................................297

---

## Chunk 66

Ch 13: metaphors, Idioms, and Affordances  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 299
Interface Paradigms ..................................................................................300
Building Idioms ........................................................................................310

---

## Chunk 67

Manual Affordances ..................................................................................312
Direct Manipulation and Pliancy.................................................................315
Escape the Grip of Metaphor ......................................................................322

---

## Chunk 68

Ch 14: rethinking Data Entry, storage, and retrieval  .  .  .  .  .  .  .  .  .  .  .  .  . 325
Rethinking Data Entry ...............................................................................326
Rethinking Data Storage ............................................................................332

---

## Chunk 69

Rethinking Data Retrieval ..........................................................................345
Ch 15: Preventing Errors and Informing Decisions  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 357
Using Rich Modeless Feedback ...................................................................358

---

## Chunk 70

Undo, Redo, and Reversible Histories...........................................................363
What If: Compare and Preview....................................................................376
Ch 16: Designing for Different needs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 379

---

## Chunk 71

Learnability and Help ...............................................................................379
Customizability ........................................................................................395
Localization and Globalization ...................................................................398

---

## Chunk 72

Accessibility .............................................................................................399
Ch 17: Integrating Visual Design  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 405
Visual Art and Visual Design.......................................................................405

---

## Chunk 73

The Elements of Visual Interface Design.......................................................406
Visual Interface Design Principles ...............................................................411
Visual Information Design Principles...........................................................425

---

## Chunk 74

Consistency and Standards ........................................................................428
Contents xiii

---

## Chunk 75

--- Page 16 ---
Part III: Interaction Details  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 433
Ch 18: Designing for the Desktop  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 435
Anatomy of a Desktop App.........................................................................436

---

## Chunk 76

Windows on the Desktop ...........................................................................439
Menus .....................................................................................................448
Toolbars, Palettes, and Sidebars..................................................................455

---

## Chunk 77

Pointing, Selection, and Direct Manipulation................................................465
Ch 19: Designing for mobile and other Devices  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 507
Anatomy of a Mobile App...........................................................................508
Mobile Navigation, Content, and Control Idioms...........................................518

---

## Chunk 78

Multi-Touch Gestures................................................................................550
Inter-App Integration ................................................................................553
Other Devices ...........................................................................................555

---

## Chunk 79

Ch 20: Designing for the web  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 569
Page-Based interactions.............................................................................571
The Mobile Web........................................................................................585

---

## Chunk 80

The Future ...............................................................................................587
Ch 21: Design Details: Controls and Dialogs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 589
Controls...................................................................................................589

---

## Chunk 81

Dialogs ....................................................................................................625
Eliminating Errors, Alerts, and Confirmations ..............................................641
The Devil Is in the Details ...........................................................................653

---

## Chunk 82

APPEnDIX A: Design Principles  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 655
APPEnDIX b: bibliography  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 661

---

## Chunk 83

Index  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 667
xiv Contents

---

## Chunk 84

--- Page 17 ---
ForEworD
I began working on the first edition of this book 20 years ago. Fittingly, I wrote a manifes-
to‚Äîa challenge to frustrated practitioners to step forward and begin creating software
that users would love. In those days, few designers and precious little software didn‚Äôt
make your head hurt to use. Strong measures were called for.

---

## Chunk 85

Today, the technology landscape is much different; consequently, this fourth edition is
also much different. In 1994 the state of the art of personal software was an address book
or spreadsheet. Today, the digitization of all forms of media has put consumers neck-
deep in technology. Powerful handheld apps are now in the hands of amateurs and non-

---

## Chunk 86

technical users‚Äîapps for music listening and production; for photography, video, news,
and communications; for home security and environmental control; for health, fitness,
and personal tracking; for games and education; and for shopping.
Over a billion people have a full-fledged computer in their pocket and access to millions

---

## Chunk 87

of applications and websites. The value of making these user-facing products easier to
understand and use is clear. We interaction designers have earned our seat at the table
and are well established as an integral part of teams that produce successful, widely
used digital products.
The primary challenge of the first two decades of interaction design practice was to

---

## Chunk 88

invent the process, tools, roles, and methods needed to succeed. Now that we have
demonstrated our success, our relationship to others in our organization is chang-
ing. Each of these best practices is now evolving as we integrate our skills more deeply
into our teams. Specifically, we need to work more effectively with business people and
developers.

---

## Chunk 89

Twenty years ago, developers too had to fight for inclusion and relevance. Although
firmly embedded in the corporate hierarchy, they lacked credibility and authority. As

---

## Chunk 90

--- Page 18 ---
consumer digitization increased, developers grew dissatisfied as the agents of users‚Äô
misery. They knew they could do better.
The agile movement and, more recently, the growth of lean practices are each efforts
by software developers to have more influence on their own destiny. Developers were

---

## Chunk 91

just as frustrated as designers at the sorry state of digital interaction, and they wanted
improvements. They realized that the software construction process had been modeled
after industrial archetypes that didn‚Äôt suit the new digital medium.
A few brave developers began experimenting with unorthodox methods of creating

---

## Chunk 92

software in smaller increments while maintaining closer contact with their clients.
They wanted to avoid lengthy development efforts‚Äî‚Äúdeath marches‚Äù‚Äîthat resulted in
unhappy users. They also were motivated by a natural desire to find a process that more
reliably resulted in better products that they could be proud of.

---

## Chunk 93

Although each variant has its adherents and detractors, the course of software devel-
opment has been forever altered by these new approaches. The notion that the old ways
weren‚Äôt working well is now widely accepted, and the quest for new methods continues.
This new self-awareness in the development community is a huge opportunity for inter-

---

## Chunk 94

action designers. Before, developers saw designers as competing for scarce resources.
Now, developers see interaction designers as useful helpers, able to contribute skills,
experience, and viewpoints that developers cannot. As developers and designers have
begun to cooperate instead of competing, they have discovered that their powers are
multiplied by working side by side.

---

## Chunk 95

Every practitioner‚Äîdeveloper as well as designer‚Äîwants to create a product they can
be proud of. To improve outcomes, both groups have been rethinking the entire devel-
opment process, demanding better tools, better guidance, and better access. Histori-
cally, though, developers and interaction designers have pursued their common goal

---

## Chunk 96

separately, developing tools and processes that work in separate silos. The two practices
are quite different in many ways, and neither will work in subservience to the other.
The challenge, then, is to learn how they can work together, effectively, successfully, in
mutual support.
At the most forward-looking companies, you can already see this happening: Developers

---

## Chunk 97

and designers sit next to each other, working cooperatively and collaboratively. When
designers and developers‚Äîand the many other practitioners working with them‚Äîcol-
laborate fully, the result is far better than any other method we‚Äôve tried. The speed with
which the work gets done is much greater and the quality of the end product much
higher. And users are more delighted.
xvi Foreword

---

## Chunk 98

--- Page 19 ---
On the business side, executives often misunderstand the role of interaction design. It
sometimes seems that the only place where it is truly understood is in tiny start-ups.
Although larger companies may have many interaction designers on staff, managers
persistently fail to incorporate their design expertise into the process until it‚Äôs too late.

---

## Chunk 99

All the design skill and process in the world won‚Äôt succeed unless the corporate culture
supports interaction design and its objectives. Apple isn‚Äôt a paragon of user experience
because of its employees‚Äô design skills, but because Steve Jobs, its former (and legend-
arily autocratic) leader, was a tireless advocate of the power of design.

---

## Chunk 100

Few companies have leaders as bold as Jobs. Those that do tend to be small start-ups. You
will find it difficult to convince business people of the value of collaborative design work.
But each year will see more success stories‚Äîmore proof of the value of this new work
paradigm. I remember when Apple and Microsoft, not to mention Google and Facebook,
were tiny start-ups with many doubters.

---

## Chunk 101

The two opportunities that face interaction designers today are finding, or creating,
advocates on the business side, and learning how to collaborate with the newly sympa-
thetic development community.
What is indisputable is the awesome power of interaction design: giving technology
users a memorable, effective, easy, and rewarding experience as they work, play, and
communicate.
‚ÄîAlan Cooper

---

## Chunk 102

Foreword xvii

---

## Chunk 103

--- Page 21 ---
InTroDuCTIon To ThE
FourTh EDITIon
This book is about interaction design‚Äîthe practice of designing interactive digital
products, environments, systems, and services. Like most design disciplines, interaction
design is concerned with form. However, first and foremost, interaction design focuses
on something that traditional design disciplines do not often explore: the design of

---

## Chunk 104

behavior.
Most design affects human behavior: Architecture is concerned with how people use
physical space, and graphic design often attempts to motivate or facilitate a response.
But now, with the ubiquity of silicon-enabled products‚Äîfrom computers to cars and
phones to appliances‚Äîwe routinely create products that exhibit complex behavior.

---

## Chunk 105

Take a product as basic as an oven. Before the digital age, it was quite simple to operate
an oven: You simply turned a single knob to the correct position. There was one position
for off, and each point along which the knob could turn resulted in a unique tempera-
ture. Every time the knob was turned to a given position, the exact same thing happened.

---

## Chunk 106

You could call this a ‚Äúbehavior,‚Äù but it is certainly a simple one.
Compare this to modern ovens with microprocessors, LCD screens, and embedded oper-
ating systems. They are endowed with buttons labeled with non-cooking-related terms
such as Start, Cancel, and Program, as well as the perhaps more expected Bake and Broil.

---

## Chunk 107

What happens when you press any one of these buttons is much less predictable than
what happened when you turned the knob on your old gas range. In fact, the outcome
of pressing one of these buttons often depends on the oven‚Äôs operational state, as well as
the sequence of buttons you press before pressing the last one. This is what we mean by
complex behavior.

---

## Chunk 108

This emergence of products with complex behavior has given rise to a new discipline.
Interaction design borrows theory and technique from traditional design, usability, and
engineering disciplines. But it is greater than the sum of its parts, with its own unique

---

## Chunk 109

--- Page 22 ---
methods and practices. And to be clear, interaction design is very much a design disci-
pline, quite different from science and engineering. Although it employs an analytical
approach when required, interaction design is also very much about synthesis and imag-
ining things as they might be, not necessarily as they currently are.

---

## Chunk 110

Interaction design is an inherently humanistic enterprise. It is concerned most signifi-
cantly with satisfying the needs and desires of the people who will interact with a prod-
uct or service. These goals and needs can best be understood as narratives‚Äîlogical and
emotional progressions over time. In response to these user narratives, digital products

---

## Chunk 111

must express behavioral narratives of their own, appropriately responding not only at
the levels of logic and data entry and presentation, but also at a more human level.
In this book we describe a particular approach to interaction design that we call the
Goal-Directed Design method. We‚Äôve found that when designers focus on people‚Äôs

---

## Chunk 112

goals‚Äîthe reasons why they use a product in the first place‚Äîas well as their expecta-
tions, attitudes, and aptitudes, they can devise solutions that people find both powerful
and pleasurable to use.
As even the most casual observer of developments in technology must have noticed,
interactive products quickly can become complex. Although a mechanical device may

---

## Chunk 113

be capable of a dozen visible states, a digital product may be capable of thousands of
different states (if not more!). This complexity can be a nightmare for users and design-
ers alike. To tame this complexity, we rely on a systematic and rational approach. This
doesn‚Äôt mean that we don‚Äôt also value and encourage inventiveness and creativity. On the

---

## Chunk 114

contrary, we find that a methodical approach helps us clearly identify opportunities for
revolutionary thinking and provides a way to assess the effectiveness of our ideas.
According to Gestalt Theory, people perceive a thing not as a set of individual features
and attributes, but as a unified whole in a relationship with its surroundings. As a result,

---

## Chunk 115

it is impossible to effectively design an interactive product by decomposing it into a list
of atomic requirements and coming up with a design solution for each. Even a relatively
simple product must be considered in totality and in light of its context in the world.
Again, we‚Äôve found that a methodical approach helps provide the holistic perspective

---

## Chunk 116

necessary to create products that people find useful and engaging.
A brief history of Interaction Design
In the late 1970s and early 1980s, a dedicated and visionary set of researchers, engineers,
and designers in the San Francisco Bay area were busy inventing how people would
interact with computers in the future. At Xerox Parc, SRI, and eventually Apple Com-

---

## Chunk 117

puter, people had begun discussing what it meant to create useful and usable ‚Äúhuman
interfaces‚Äù to digital products. In the mid-1980s, two industrial designers, Bill Moggridge
xx Introduction to the Fourth Edition

---

## Chunk 118

--- Page 23 ---
and Bill Verplank, were working on the first laptop computer, the GRiD Compass. They
coined the term interaction design for what they were doing. But it would be another 10
years before other designers rediscovered this term and brought it into mainstream use.
When About Face was first published in August 1995, the landscape of interaction design

---

## Chunk 119

was still a frontier wilderness. A small cadre of people brave enough to hold the title user
interface designer operated in the shadow of software engineering, rather like the tiny,
quick-witted mammals that lurked in the shadows of hulking tyrannosaurs. ‚ÄúSoftware
design,‚Äù as the first edition of About Face called it, was poorly understood and underap-

---

## Chunk 120

preciated. When it was practiced at all, it was usually practiced by developers. A handful
of uneasy technical writers, trainers, and product support people, along with a rising
number of practitioners from another nascent field‚Äîusability‚Äîrealized that something
needed to change.
The amazing growth and popularity of the web drove that change, seemingly overnight.

---

## Chunk 121

Suddenly, the phrase ‚Äúease of use‚Äù was on everyone‚Äôs lips. Traditional design profession-
als, who had dabbled in digital product design during the short-lived popularity of ‚Äúmul-
timedia‚Äù in the early ‚Äô90s, leapt to the web en masse. Seemingly new design titles sprang
up like weeds: information designer, information architect, user experience strategist,

---

## Chunk 122

interaction designer. For the first time, C-level executive positions were established to
focus on creating user-centered products and services, such as chief experience officer.
Universities scrambled to offer programs to train designers in these disciplines. Mean-
while, usability and human-factors practitioners also rose in stature and are now recog-

---

## Chunk 123

nized as advocates for better-designed products.
Although the web knocked back interaction design idioms by more than a decade, it
inarguably placed user requirements on the radar of the corporate world permanently.
After the second edition of About Face was published in 2003, the user experience of dig-
ital products became front-page news in the likes of Time and BusinessWeek. And insti-

---

## Chunk 124

tutions such as Harvard Business School and Stanford recognized the need to train the
next generation of MBAs and technologists to incorporate design thinking into their
business and development plans. People are tired of new technology for its own sake.
Consumers are sending a clear message that they want good technology: technology that

---

## Chunk 125

is designed to provide a compelling and effective user experience.
In August 2003, five months after the second edition of About Face proclaimed the
existence of a new design discipline called interaction design, Bruce ‚ÄúTog‚Äù Tognazzini
made an impassioned plea to the nascent community to create a nonprofit professional

---

## Chunk 126

organization. A mailing list and steering committee were founded shortly thereafter by
Challis Hodge, David Malouf, Rick Cecil, and Jim Jarrett.
In September 2005, IxDA, the Interaction Design Association (www.ixda.org), was incorpo-
rated. In February 2008, less than a year after the publication of the third edition of About
Introduction to the Fourth Edition xxi

---

## Chunk 127

--- Page 24 ---
Face, IxDA hosted its first international design conference, Interaction08, in Savannah,
Georgia. In 2012, IxDA presented its first annual Interaction Awards for outstanding
designs submitted from all over the world. IxDA currently has over 70,000 members liv-
ing in more than 20 countries. We‚Äôre pleased to say that interaction design has truly

---

## Chunk 128

come into its own as both a design discipline and a profession.
IxD and user Experience
The first edition of About Face described a discipline called software design and equated
it with another discipline called user interface design. Of these two terms, user inter-
face design has enjoyed more longevity. We still use it occasionally in this book, spe-

---

## Chunk 129

cifically to connote the layout of widgets on a screen. However, this book discusses a
discipline broader than the design of user interfaces. In the world of digital technology,
form, function, content, and behavior are so inextricably linked that many of the chal-
lenges of designing an interactive product go right to the heart of what a digital product
is and does.

---

## Chunk 130

As we‚Äôve discussed, interaction designers have borrowed practices from more-estab-
lished design disciplines but also have evolved beyond them. Industrial designers have
attempted to address the design of digital products. But like their counterparts in
graphic design, their focus traditionally has been on the design of static form, not the

---

## Chunk 131

design of interactivity, or form that changes and reacts to input over time. These disci-
plines do not have a language with which to discuss the design of rich, dynamic behavior
and changing user interfaces.
A term that has gained particular popularity in the last decade is user experience (UX)
design. Many people have advocated for the use of this term as an umbrella under which

---

## Chunk 132

several different design and usability disciplines collaborate to create products, systems,
and services. This is a laudable goal with great appeal, but it does not in itself directly
address the core concern of interaction design as discussed in this book: how to spe-
cifically design the behavior of complex interactive systems. It‚Äôs useful to consider the

---

## Chunk 133

similarities and synergies between creating a customer experience at a physical store
and creating one with an interactive product. However, we believe specific methods are
appropriate for designing for the world of bits.
We also wonder whether it is truly possible to design an experience. Designers of all
stripes hope to manage and influence people‚Äôs experiences, but this is done by carefully

---

## Chunk 134

manipulating the variables intrinsic to the medium at hand. A graphic designer creating
a poster arranges fonts, photos, and illustrations to help create an experience; a furni-
ture designer working on a chair uses materials and construction techniques to help cre-
ate an experience; an interior designer uses layout, lighting, materials, and even sound
to help create an experience.

---

## Chunk 135

xxii Introduction to the Fourth Edition

---

## Chunk 136

--- Page 25 ---
Extending this thinking into the world of digital products, we find it useful to think that
we influence people‚Äôs experiences by designing the mechanisms for interacting with a
product. Therefore, we have chosen Moggridge‚Äôs term interaction design (now abbrevi-
ated by many in the industry as IxD) to denote the kind of design this book describes.

---

## Chunk 137

Of course, often a design project requires careful attention to the orchestration of a num-
ber of design disciplines to achieve an appropriate user experience, as shown in Figure 1.
It is in these situations that we feel the term user experience design is most applicable.
Content
Form
Information architects
Industrial designers Copywriters
Graphic designers Animators
Sound designers
Behavior

---

## Chunk 138

Interaction designers
Figure 1: User experience (UX) design has three overlapping concerns:
form, behavior, and content. Interaction design focuses on the design
of behavior but also is concerned with how that behavior relates to
form and content. Similarly, information architecture focuses on the
structure of content but also is concerned with behaviors that provide

---

## Chunk 139

access to content and how the content is presented to the user. Indus-
trial design and graphic design are concerned with the form of prod-
ucts and services but also must ensure that their form supports use,
which requires attention to behavior and content.
what This book Is and what It Is not
In this book, we attempt to give you effective and practical tools for interaction design.

---

## Chunk 140

These tools consist of principles, patterns, and processes. Design principles encompass
broad ideas about the practice of design, as well as rules and hints about how to best
use specific user interface and interaction design idioms. Design patterns describe sets
Introduction to the Fourth Edition xxiii

---

## Chunk 141

--- Page 26 ---
of interaction design idioms that are common ways to address specific user require-
ments and design concerns. Design processes describe how to understand and define
user requirements, how to then translate those requirements into the framework of a
design, and finally how to best apply design principles and patterns to specific contexts.

---

## Chunk 142

Although books are available that discuss design principles and design patterns, few
books discuss design processes, and even fewer discuss all three of these tools and how
they work together to create effective designs. Our goal was to create a book that unites
all three of these tools. While helping you design more effective and useful dialog boxes

---

## Chunk 143

and menus, this book also helps you understand how users comprehend and interact
with your digital product. In addition, it helps you understand how to use this knowl-
edge to drive your design.
Integrating design principles, processes, and patterns is the key to designing effective
product interactions and interfaces. There is no such thing as an objectively good user

---

## Chunk 144

interface. Quality depends on the context: who the user is, what she is doing, and what
her motivations are. Applying a set of one-size-fits-all principles makes user interface
creation easier, but it doesn‚Äôt necessarily make the end result better. If you want to create
good design solutions, there is no avoiding the hard work of really understanding the

---

## Chunk 145

people who will actually interact with your product. Only then is it useful to have at your
command a toolbox of principles and patterns to apply in specific situations. We hope
this book will both encourage you to deepen your understanding of your product‚Äôs users
and teach you how to translate that understanding into superior product designs.

---

## Chunk 146

This book does not attempt to present a style guide or set of interface standards. In fact,
you‚Äôll learn in Chapter 17 about the limitations of such tools. That said, we hope that the
process and principles described in this book are compatible companions to the style
guide of your choice. Style guides are good at answering what but generally are weak at

---

## Chunk 147

answering why. This book attempts to address these unanswered questions.
This book discusses four main steps to designing interactive systems: researching the
domain, understanding the users and their requirements, defining a solution‚Äôs frame-
work, and filling in the design details. Many practitioners would add a fifth step: vali-

---

## Chunk 148

dation‚Äîtesting a solution‚Äôs effectiveness with users. This is part of a discipline widely
known as usability.
Although this is an important and worthwhile component to many interaction design
initiatives, it is a discipline and practice in its own right. We briefly discuss design
validation and usability testing in Chapter 5. We also urge you to refer to the significant

---

## Chunk 149

and ever-growing body of usability literature for more detailed information about con-
ducting and analyzing usability tests.
xxiv Introduction to the Fourth Edition

---

## Chunk 150

--- Page 27 ---
how This book Is structured
This book is organized in a way that presents its ideas in an easy-to-use reference struc-
ture. The book is divided into three parts:
‚Ä¢ Part I introduces and describes the Goal-Directed Design process in detail, as well as
building design teams and integrating with project teams.

---

## Chunk 151

‚Ä¢ Part II deals with high-level interaction design principles that can be applied to any
interaction design problem on almost any platform.
‚Ä¢ Part III covers lower-level and platform-specific interface design principles and idioms
for mobile, desktop, the web, and more.
Changes since the Third Edition
In June 2007, just two months after the third edition of About Face was published, Apple

---

## Chunk 152

changed the digital landscape forever with the introduction of the iPhone and iOS. In
2010 Apple followed with the first commercially successful tablet computer, the iPad.
These touch-based, sensor-laden products and the competitors that followed in their
footsteps have added an entirely new lexicon of idioms and design patterns to the lan-

---

## Chunk 153

guage of interaction. This fourth edition of About Face addresses these and other modern
interaction idioms directly.
This new edition retains what still holds true, updates things that have changed, and
provides new material reflecting how the industry has changed in the last seven years. It
also addresses new concepts we have developed in our practices to address the chang-
ing times.

---

## Chunk 154

Here are some highlights of the major changes you will find in this edition of About Face:
‚Ä¢ The book has been reorganized and streamlined to present its ideas in a more concise
and easy-to-use structure and sequence. Some chapters have been rearranged for
better flow, others have been merged, a few have been condensed, and several new
chapters have been added.

---

## Chunk 155

‚Ä¢ Terminology and examples have been updated to reflect the current state of the art in the
industry. The text as a whole has been thoroughly edited to improve clarity and readability.
‚Ä¢ Part I describes the Goal-Directed Design process in additional detail and more accurately
reflects the most current practices at Cooper. It also includes additional information on

---

## Chunk 156

building a design team and integrating with development and project teams.
‚Ä¢ Part II has been significantly reorganized to more clearly present its concepts and
principles, and includes newly updated information on integrating visual design.
Introduction to the Fourth Edition xxv

---

## Chunk 157

--- Page 28 ---
Part III has been extensively rewritten, updated, and extended to reflect new mobile and
touch-based platforms and interaction idioms. It also offers more detailed coverage of
web interactions and interactions on other types of devices and systems. We hope you
will find that these additions and changes make About Face a more relevant and useful
reference than ever before.

---

## Chunk 158

Examples used in This book
This book is about designing all kinds of interactive digital products. However, because
interaction design has its roots in software for desktop computers, and the vast majority
of today‚Äôs PCs run Microsoft Windows, there is certainly a bias in the focus of our discus-
sions of desktop software. Similarly, the first focus of many developers of native mobile

---

## Chunk 159

apps is iOS, so the bulk of our mobile examples are from this platform.
Having said that, most of the material in this book transcends platform. It is equally
applicable across platforms‚ÄîMac OS, Windows, iOS, Android, and others. The majority
of the material is relevant even for more divergent platforms such as kiosks, embedded
systems, 10-foot interfaces, and the like.

---

## Chunk 160

A number of the desktop examples in this book are from the Microsoft Office suite
and from Adobe Photoshop and Illustrator. We have tried to stick with examples from
these mainstream applications for two reasons. First, you‚Äôre likely to be at least some-
what familiar with the examples. Second, it‚Äôs important to show that the user interface

---

## Chunk 161

design of even the most finely honed products can be significantly improved with a goal-
directed approach. This edition also contains many new examples from mobile apps and
the web, as well as several more-exotic applications.
A few examples in this new edition come from now-moribund software or OS versions.
These examples illustrate particular points that we felt were useful enough to retain

---

## Chunk 162

in this edition. The vast majority of examples are from contemporary software and OS
releases.
who should read This book
While the subject matter is broadly aimed at students and practitioners of interaction
design, anyone concerned about users interacting with digital technology will gain
insights from reading this book. Developers, designers of all stripes involved with dig-

---

## Chunk 163

ital product design, usability professionals, and project managers will all find some-
thing useful in this book. If you‚Äôve read earlier editions of About Face or The Inmates
xxvi Introduction to the Fourth Edition

---

## Chunk 164

--- Page 29 ---
Are Running the Asylum (Sams, 2004), you will find new and updated information about
design methods and principles here.
We hope this book informs you and intrigues you. Most of all, we hope it makes you think
about the design of digital products in new ways. The practice of interaction design is

---

## Chunk 165

constantly evolving, and it is new and varied enough to generate a wide variety of opin-
ions on the subject. If you have an interesting opinion, or if you just want to talk, we‚Äôd be
happy to hear from you. E-mail us at alan@cooper.com, rmreimann@gmail.com, davcron@gmail.
com, or chrisnoessel@gmail.com.
Introduction to the Fourth Edition xxvii

---

## Chunk 166

--- Page 31 ---
I
goal-Directed
Design
Ch 1 A Design Process for Digital Products
Ch 2 understanding the Problem: Design research
Ch 3 modeling users: Personas and goals
Ch 4 setting the Vision: scenarios and
requirements
Ch 5 Designing the Product: Framework and
Design refinement
Ch 6 Creative Teamwork

---

## Chunk 167

--- Page 33 ---
Ch 1
A DEsIgn ProCEss For
DIgITAl ProDuCTs
This book has a simple premise: If we design and develop digital products in such a way
that the people who use them can easily achieve their goals, they will be satisfied, effec-
tive, and happy. They will gladly pay for our products‚Äîand recommend that others do

---

## Chunk 168

the same. Assuming that we can do so in a cost-effective manner, this will translate into
business success.
On the surface, this premise seems obvious: Make people happy, and your products will
be a success. Why, then, are so many digital products so difficult and unpleasant to use?
Why aren‚Äôt we all happy and successful when we use them? Why, despite the steady

---

## Chunk 169

march of faster, cheaper, and more accessible technology, are we still so often frustrated?
The answer, in short, is the absence of design as a fundamental and equal part of the
product planning and development process.
Design, according to industrial designer Victor Papanek, is the conscious and intuitive
effort to impose meaningful order. We propose a somewhat more detailed definition of

---

## Chunk 170

human-oriented design activities:
‚Ä¢ Understanding the desires, needs, motivations, and contexts of people using products
‚Ä¢ Understanding business, technical, and domain opportunities, requirements, and
constraints

---

## Chunk 171

--- Page 34 ---
‚Ä¢ Using this knowledge as a foundation for plans to create products whose form, content,
and behavior are useful, usable, and desirable, as well as economically viable and
technically feasible
This definition is useful for many design disciplines, although the precise focus on form,
content, and behavior varies depending on what is being designed. For example, an

---

## Chunk 172

informational website may require particular attention to content, whereas the design
of a simple TV remote control may be concerned primarily with form. As discussed in the
Introduction, interactive digital products are uniquely imbued with complex behavior.
When performed using the appropriate methods, design can, and does, provide the

---

## Chunk 173

missing human connection in technological products. But most current approaches to
the design of digital products don‚Äôt work as advertised.
The Consequences of Poor
Product behavior
In the nearly 20 years since the publication of the first edition of About Face, software
and interactive digital products have greatly improved. Many companies have begun

---

## Chunk 174

to focus on serving people‚Äôs needs with their products and are spending the time and
money needed to support the design process. However, many more still fail to do so‚Äîat
their peril. As long as businesses continue to focus solely on technology and market data
while shortchanging design, they will continue to create the kind of products we‚Äôve all
grown to despise.

---

## Chunk 175

The following sections describe a few of the consequences of creating products that lack
appropriate design and thus ignore users‚Äô needs and desires. How many of your digital
products exhibit some of these characteristics?
Digital products are rude
Digital products often blame users for making mistakes that are not their fault, or should

---

## Chunk 176

not be. Error messages like the one shown in Figure 1-1 pop up like weeds, announcing
that the user has failed yet again. These messages also demand that the user acknowl-
edge his failure by confirming it: OK.
Digital products and software frequently interrogate users, peppering them with a
string of terse questions that they are neither inclined nor prepared to answer: ‚ÄúWhere

---

## Chunk 177

did you hide that file?‚Äù Patronizing questions like ‚ÄúAre you sure?‚Äù and ‚ÄúDid you really
want to delete that file, or did you have some other reason for pressing the Delete key?‚Äù
are equally irritating and demeaning.
4 Part I: Goal-Directed Design

---

## Chunk 178

--- Page 35 ---
Figure 1-1: Thanks for sharing. Why didn‚Äôt the application notify the library? Why did it want to notify
the library? Why is it telling us? And what are we OKing, anyway? It is not OK that the application failed!
Our software-enabled products also fail to act with a basic level of decency. They forget

---

## Chunk 179

information we tell them and don‚Äôt do a very good job of anticipating our needs. Even
the iPhone‚Äîgenerally the baseline for good user experience on a digital device‚Äîdoesn‚Äôt
anticipate that someone might not want to be pestered with a random phone call when
he is in the middle of a business meeting that is sitting right there in the iPhone‚Äôs own

---

## Chunk 180

calendar. Why can‚Äôt it quietly put a call that isn‚Äôt from a family member into voicemail?
Digital products require people to think like computers
Digital products regularly assume that people are technology literate. For example, in
Microsoft Word, if a user wants to rename a document she is editing, she must know that

---

## Chunk 181

she must either close the document or use the ‚ÄúSave As‚Ä¶‚Äù menu command (and remem-
ber to delete the file with the old name). These behaviors are inconsistent with how a nor-
mal person thinks about renaming something; rather, they require that a person change
her thinking to be more like the way a computer works.

---

## Chunk 182

Digital products are also often obscure, hiding meaning, intentions, and actions from
users. Applications often express themselves in incomprehensible jargon that cannot be
fathomed by normal users (‚ÄúWhat is your SSID?‚Äù) and are sometimes incomprehensible
even to experts (‚ÄúPlease specify IRQ.‚Äù).
Digital products have sloppy habits

---

## Chunk 183

If a 10-year-old boy behaved like some software apps or devices, he‚Äôd be sent to his room
without supper. These products forget to shut the refrigerator door, leave their shoes in
the middle of the floor, and can‚Äôt remember what you told them only five minutes ear-
lier. For example, if you save a Microsoft Word document, print it, and then try to close it,

---

## Chunk 184

the application again asks you if you want to save it! Evidently the act of printing caused
the application to think the document had changed, even though it did not. Sorry, Mom, I
didn‚Äôt hear you.
Software often requires us to step out of the main flow of tasks to perform functions that
shouldn‚Äôt require separate interfaces and extra navigation to access. Dangerous com-

---

## Chunk 185

mands, however, are often presented right up front where users can accidentally trigger
them. Dropbox, for example, sandwiches Delete between Download and Rename on its
CH 1. A Design Process for Digital Products 5

---

## Chunk 186

--- Page 36 ---
context menus, practically inviting people to lose the work they‚Äôve uploaded to the cloud
for safekeeping.
Furthermore, the appearance of software‚Äîespecially business and technical applica-
tions‚Äîcan be complex and confusing, making navigation and comprehension unneces-
sarily difficult.
Digital products require humans to do the heavy lifting

---

## Chunk 187

Computers and their silicon-enabled brethren are purported to be labor-saving devices.
But every time we go out into the field to watch real people doing their jobs with the
assistance of technology, we are struck by how much work they are forced to do simply
to manage the proper operation of software. This work can be anything from manually

---

## Chunk 188

copying (or, worse, retyping) values from one window into another, to attempting (often
futilely) to paste data between applications that otherwise don‚Äôt speak to each other, to
the ubiquitous clicking and pushing and pulling of windows and widgets around the
screen to access hidden functionality that people use every day to do their job.

---

## Chunk 189

The evidence is everywhere that digital products have a lot of explaining to do when it
comes to their poor behavior.
why Digital Products Fail
Most digital products emerge from the development process like a sci-fi monster emerg-
ing from a bubbling tank. Instead of planning and executing with a focus on satisfying

---

## Chunk 190

the needs of the people who use their products, companies end up creating solutions
that‚Äîwhile technically advanced‚Äîare difficult to use and control. Like mad scientists,
they fail because they have not imbued their creations with sufficient humanity.
Why is this? What is it about the technology industry as a whole that makes it so inept at

---

## Chunk 191

designing the interactive parts of digital products? What is so broken about the current
process of creating software-enabled products that it results in such a mess?
There are four main reasons why this is the case:
‚Ä¢ Misplaced priorities on the part of both product management and development teams
‚Ä¢ Ignorance about real users of the product and what their baseline needs are for success

---

## Chunk 192

‚Ä¢ Conflicts of interest when development teams are charged with both designing and
building the user experience
‚Ä¢ Lack of a design process that permits knowledge about user needs to be gathered,
analyzed, and used to drive the development of the end experience
6 Part I: Goal-Directed Design

---

## Chunk 193

--- Page 37 ---
misplaced priorities
Digital products come into the world subject to the push and pull of two often-oppos-
ing camps‚Äîmarketers and developers. While marketers are adept at understanding and
quantifying a marketplace opportunity, and at introducing and positioning a product
within that market, their input into the product design process is often limited to lists of

---

## Chunk 194

requirements. These requirements often have little to do with what users actually need
or desire and have more to do with chasing the competition, managing IT resources with
to-do lists, and making guesses based on market surveys‚Äîwhat people say they‚Äôll buy.
(Contrary to what you might suspect, few users can clearly articulate their needs. When

---

## Chunk 195

asked direct questions about the products they use, most tend to focus on low-level tasks
or workarounds to product flaws. And, what they think they‚Äôll buy doesn‚Äôt tell you much
about how‚Äîor if‚Äîthey will use it.)
Unfortunately, reducing an interactive product to a list of a hundred features doesn‚Äôt lend
itself to the kind of graceful orchestration that is required to make complex technology

---

## Chunk 196

useful. Adding ‚Äúeasy to use‚Äù as a checklist item does nothing to improve the situation.
Developers, on the other hand, often have no shortage of input into the product‚Äôs final
form and behavior. Because they are in charge of construction, they decide exactly what
gets built. And they too have a different set of imperatives than the product‚Äôs eventual

---

## Chunk 197

audience. Good developers are focused on solving challenging technical problems, fol-
lowing good engineering practices, and meeting deadlines. They often are given incom-
plete, myopic, confusing, and sometimes contradictory instructions and are forced to
make significant decisions about the user experience with little time or knowledge of
how people will actually use their creations.

---

## Chunk 198

Thus, the people who are most often responsible for creating our digital products rarely
take into account the users‚Äô goals, needs, or motivations. At the same time, they tend to
be highly reactive to market trends and technical constraints. This can‚Äôt help but result
in products that lack a coherent user experience. We‚Äôll soon see why goals are so import-
ant in addressing this issue.

---

## Chunk 199

The results of poor product vision are, unfortunately, digital products that irritate rather
than please, reduce rather than increase productivity, and fail to meet user needs. Fig-
ure 1-2 shows the evolution of the development process and where, if at all, design has his-
torically fit in. Most of digital product development is stuck in the first, second, or third

---

## Chunk 200

step of this evolution, where design either plays no real role or becomes a s urface-level
patch on shoddy interactions‚Äî‚Äúlipstick on the pig,‚Äù as one of our clients called it. The
core activities in the design process, as we will soon discuss, should precede coding and
testing to ensure that products truly meet users‚Äô needs.
CH 1. A Design Process for Digital Products 7

---

## Chunk 201

--- Page 38 ---
Developers
Build/Test Ship
Managers Developers
Initiate Build/Test Ship
Managers Developers QA Designers
Initiate Build Test ‚ÄúLook & Feel‚Äù Ship
Mandate Specs Code Product
Managers Designers Developers QA
Feasibility, Bug User
Users Feedback Report Input
Initiate Design Build Test Ship

---

## Chunk 202

Figure 1-2: The evolution of the software development process. The first diagram depicts the early
days of the software industry, when smart developers dreamed up products and then built and tested
them. Inevitably, professional managers were brought in to help facilitate the process by translat-
ing market opportunities into product requirements. As depicted in the third diagram, the industry

---

## Chunk 203

matured, and testing became a discipline in its own right. With the popularization of the graphical
user interface (GUI), graphic designers were brought in to create icons and other visual elements.
The final diagram shows the Goal-Directed approach to software development, where decisions about
a product‚Äôs capabilities, form, and behavior are made before the expensive and challenging construc-

---

## Chunk 204

tion phase.
Ignorance about real users
It‚Äôs an unfortunate truth that the digital technology industry doesn‚Äôt have a good under-
standing of what it takes to make users happy. In fact, most technology products get
built without much understanding of users. We might know what market segment our
users are in, how much money they make, how they like to spend their weekends, and

---

## Chunk 205

what sorts of cars they buy. We might even have a vague idea of what kind of jobs they
have and some of the major tasks they regularly perform. But does any of this tell us
how to make them happy? Does it tell us how they will actually use the product we‚Äôre
8 Part I: Goal-Directed Design

---

## Chunk 206

--- Page 39 ---
building? Does it tell us why they are doing whatever it is they might need our product
for, why they might want to choose our product over our competitors, or how we can
make sure they do? No, it does not.
However, we should not give up hope. It is possible to understand our users well enough
to make excellent products they will love. We‚Äôll see how to address the issue of under-

---

## Chunk 207

standing users and their behaviors with products in Chapters 2 and 3.
Conflicts of interest
A third problem affects the ability of vendors and manufacturers to make users happy.
The world of digital product development has an important conflict of interest: The peo-
ple who build the products‚Äîdevelopers‚Äîare often also the people who design them.

---

## Chunk 208

They are are also, quite understandably, the people who usually have the final say on
what does and doesn‚Äôt get built. Thus, developers often are required to choose between
ease of coding and ease of use. Because developers‚Äô performance is typically judged by
their ability to code efficiently and meet incredibly tight deadlines, it isn‚Äôt difficult to

---

## Chunk 209

figure out what direction most software-enabled products take. Just as we would never
permit the prosecutor in a legal trial to also adjudicate the case, we should make sure
that the people designing a product are not the same people building it. Even with appro-
priate skills and the best intentions, it simply isn‚Äôt possible for a developer (or anyone, for

---

## Chunk 210

that matter) to advocate effectively for the user, the business, and the technology all at
the same time.
We‚Äôll see how to address the issue of building design teams and fitting them into the
planning and development process in Chapter 6.
lack of a design process
The last reason the digital product industry isn‚Äôt cranking out successful, well- designed

---

## Chunk 211

products is that it has no reliable process for doing so. Or, to be more accurate, it doesn‚Äôt
have a complete process for doing so. Engineering departments follow‚Äîor should follow‚Äî
rigorous engineering methods that ensure the feasibility and quality of the technology.
Similarly, marketing, sales, and other business units follow their own well-established

---

## Chunk 212

methods for ensuring the commercial viability of new products. What‚Äôs left out is a
repeatable, predictable, and analytical process for ensuring desirability: transforming
an understanding of users into products that meet their professional, personal, and emo-
tional needs.
In the worst case, decisions about what a digital product will do and how it will commu-

---

## Chunk 213

nicate with users are simply a by-product of its construction. Developers, deep in their
thoughts of algorithms and code, end up ‚Äúdesigning‚Äù product behaviors in the same way
CH 1. A Design Process for Digital Products 9

---

## Chunk 214

--- Page 40 ---
that miners end up ‚Äúdesigning‚Äù a landscape filled with cavernous pits and piles of rub-
ble. In unenlightened development organizations, the digital product interaction design
process alternates between the accidental and the nonexistent.
Sometimes organizations do adopt a design process, but it isn‚Äôt quite up to the task.

---

## Chunk 215

Many companies embrace the notion that integrating customers (or their theoretical
proxies, domain experts) directly into the development process can solve human inter-
face design problems. Although this has the salutary effect of sharing the responsibil-
ity for design with the user, it ignores a serious methodological flaw: confusing domain
knowledge with design knowledge.

---

## Chunk 216

Customers, although they might be able to articulate the problems with an interaction,
often cannot visualize the solutions to those problems. Design is a specialized skill, just
like software development. Developers would never ask users to help them code; design
problems should be treated no differently. In addition, customers who purchase a prod-

---

## Chunk 217

uct may not be the same people who use it from day to day, a subtle but important distinc-
tion. Finally, experts in a domain may not be able to easily place themselves in the shoes
of less-expert users when defining tasks and flows. Interestingly, the two professions
that seem to most frequently confuse domain knowledge with design knowledge when

---

## Chunk 218

building information systems‚Äîlaw and medicine‚Äîhave notoriously difficult-to-use
products. Coincidence? Probably not.
Of course, designers should indeed get feedback on their proposed solutions, both from
users and the product team. But hearing about the problems is much more useful to
designers‚Äîand better for the product‚Äîthan taking proposed solutions from users at

---

## Chunk 219

face value. In interpreting feedback, the following analogy is useful: Imagine a patient
who visits his doctor with acute stomach pain. ‚ÄúDoctor,‚Äù he says, ‚Äúit really hurts. I think
it‚Äôs my appendix. You‚Äôve got to take it out as soon as possible.‚Äù A responsible physician
wouldn‚Äôt perform surgery based solely on a patient request, even an earnest one. The

---

## Chunk 220

patient can describe the symptoms, but it takes the doctor‚Äôs professional knowledge to
make the correct diagnosis and prescribe the treatment.
Planning and Designing Product behavior
The planning of complex digital products, especially ones that interact directly with
humans, requires a significant upfront effort by professional designers, just as the planning

---

## Chunk 221

of complex physical structures that interact with humans requires a significant upfront
effort by professional architects. In the case of architects, that planning involves under-
standing how the humans occupying the structure live and work, and designing spaces to
support and facilitate those behaviors. In the case of digital products, the planning involves

---

## Chunk 222

understanding how the humans using the product live and work, and designing product
behavior and form that support and facilitate the human behaviors. Architecture is an old,
10 Part I: Goal-Directed Design

---

## Chunk 223

--- Page 41 ---
well-established field. The design of product and system behavior‚Äîinteraction design‚Äî
is quite new, and only in recent years has it begun to come of age as a discipline. And this
new design has fundamentally changed how products succeed in the marketplace.
In the early days of industrial manufacturing, engineering and marketing processes

---

## Chunk 224

alone were sufficient to produce desirable products: It didn‚Äôt take much more than good
engineering and reasonable pricing to produce a hammer, diesel engine, or tube of
toothpaste that people would readily purchase. As time progressed, manufacturers of
consumer products realized that they needed to differentiate their products from func-

---

## Chunk 225

tionally identical products made by competitors, so design was introduced as a means
to increase user desire for a product. Graphic designers were employed to create more
effective packaging and advertising, and industrial designers were engaged to create
more comfortable, useful, and exciting forms.
The conscious inclusion of design heralded the ascendance of the modern triad of prod-

---

## Chunk 226

uct development concerns identified by Larry Keeley of the Doblin Group: capability,
viability, and desirability (see Figure 1-3). If any of these three foundations is weak, a
product is unlikely to stand the test of time.
Now enter the general-purpose computer, the first machine capable of almost limitless
behavior via software programming. The interesting thing about this complex behavior,

---

## Chunk 227

or interactivity, is that it completely alters the nature of the products it touches. Interac-
tivity is compelling to humans‚Äîso compelling that the other aspects of an interactive
product become marginal. Who pays attention to the black PC tower that sits under your
desk? It is the screen, keyboard, and mouse to which users pay attention. With touch-

---

## Chunk 228

screen devices like the iPad and its brethren, the only apparent hardware is the inter-
active surface. Yet the behaviors of software and other digital products, which should
receive the majority of design attention, all too frequently receive no attention.
The traditions of design that corporations have relied on to provide the critical pillar of

---

## Chunk 229

desirability for products don‚Äôt provide much guidance in the world of interactivity. Design
of behavior is a different kind of problem that requires greater knowledge of context, not
just rules of visual composition and brand. It requires an understanding of the user‚Äôs
relationship with the product from before purchase to end of life. Most important is the

---

## Chunk 230

understanding of how the user wants to use the product, in what ways, and to what ends.
Interaction design isn‚Äôt merely a matter of aesthetic choice; rather, it is based on an under-
standing of users and cognitive principles. This is good news, because it makes the design
of behavior quite amenable to a repeatable process of analysis and synthesis. It doesn‚Äôt

---

## Chunk 231

mean that the design of behavior can be automated, any more than the design of form or
content can be automated, but it does mean that a systematic approach is possible. Rules
of form and aesthetics mustn‚Äôt be discarded, of course. They must work in harmony with
the larger concern of achieving user goals via appropriately designed behaviors.
CH 1. A Design Process for Digital Products 11

---

## Chunk 232

--- Page 42 ---
abilit vy
,C
.a
e si r bdA s u c nic e ds bes usf iu dl p a b ility
What do people need? D p ir ao leu ,c t s i lr a ab l e What can we build?
a d b l e
Viability
What will sustain a business?
Designers Management Technologists
User model Business model Technology model
‚Ä¢ motivations ‚Ä¢ funding model ‚Ä¢ core technologies
‚Ä¢ behaviors ‚Ä¢ income / expense ‚Ä¢ technology components

---

## Chunk 233

‚Ä¢ attitudes and aptitudes projections, etc. ‚Ä¢ build vs. buy
Product design Business plan Technology plan
‚Ä¢ design schedule ‚Ä¢ marketing plan ‚Ä¢ engineering schedule
‚Ä¢ form and behavior spec ‚Ä¢ launch plan ‚Ä¢ engineering spec
‚Ä¢ distribution plan
User effectiveness and
Sustainable business Project delivery
customer adoption
Overall product success

---

## Chunk 234

You can apply this to companies that have struggled to find the balance:
Apple Microsoft Novell
Apple has emphasized Microsoft is one of the best run Novell emphasized technology
desirability but has made many businesses ever, but it has not and gave little attention to
business blunders. Nevertheless, been able to create highly desirability. This made it

---

## Chunk 235

it is sustained by the loyalty desirable products. This provides vulnerable to competition.
created by its attention to user an opening for competition.
experience.
Figure 1-3: Building successful digital products. Three major processes need to be followed in
tandem to create successful technology products. This book addresses the first and foremost

---

## Chunk 236

issue: how to create a product people will desire.
12 Part I: Goal-Directed Design

---

## Chunk 237

--- Page 43 ---
This book presents a set of methods to address this new kind of behavior-oriented design,
providing a complete process for understanding users‚Äô goals, needs, and motivations:
Goal-Directed Design. To understand the process of Goal-Directed Design, we first
need to understand the nature of user goals, the mental models from which they arise,

---

## Chunk 238

and how they are the key to designing appropriate interactive behavior.
recognizing user goals
So what are user goals? How can we identify them? How do we know that they are real
goals, rather than tasks users are forced to perform by poorly designed tools or business
processes? Are they the same for all users? Do they change over time? We‚Äôll try to answer

---

## Chunk 239

those questions in the remainder of this chapter.
Users‚Äô goals are often quite different from what we might guess them to be. For exam-
ple, we might think that an accounting clerk‚Äôs goal is to process invoices efficiently. This
is probably not true. Efficient invoice processing is more likely the goal of the clerk‚Äôs

---

## Chunk 240

employer. The clerk probably concentrates on goals like appearing competent at his job
and keeping himself engaged with his work while performing routine and repetitive
tasks‚Äîalthough he may not verbally (or even consciously) acknowledge this.
Regardless of the work we do and the tasks we must accomplish, most of us share these

---

## Chunk 241

simple, personal goals. Even if we have higher aspirations, they are still more personal
than work-related: winning a promotion, learning more about our field, or setting a good
example for others, for instance.
Products designed and built to achieve business goals alone will eventually fail; users‚Äô
personal goals need to be addressed. When the design meets the user‚Äôs personal goals,

---

## Chunk 242

business goals are achieved far more effectively, for reasons we‚Äôll explore in more detail
in later chapters.
If you examine most commercially available software, websites, and digital products,
you will find that their user interfaces fail to meet user goals with alarming frequency.
They routinely:
‚Ä¢ Make users feel stupid.
‚Ä¢ Cause users to make big mistakes.

---

## Chunk 243

‚Ä¢ Require too much effort to operate effectively.
‚Ä¢ Don‚Äôt provide an engaging or enjoyable experience.
CH 1. A Design Process for Digital Products 13

---

## Chunk 244

--- Page 44 ---
Most of the same software is equally poor at achieving its business purpose. Invoices
don‚Äôt get processed all that well. Customers don‚Äôt get serviced on time. Decisions don‚Äôt
get properly supported. This is no coincidence.
The companies that develop these products have the wrong priorities. Most focus far too

---

## Chunk 245

narrowly on implementation issues, which distract them from users‚Äô needs.
Even when businesses become sensitive to their users, they are often powerless to
change their products. The conventional development process assumes that the user
interface should be addressed after coding begins‚Äîsometimes even after it ends. But

---

## Chunk 246

just as you cannot effectively design a building after construction begins, you cannot
easily make an application serve users‚Äô goals as soon as a significant and inflexible code
base is in place.
Finally, when companies do focus on the users, they tend to pay too much attention to
the tasks users engage in and not enough attention to their goals in performing those

---

## Chunk 247

tasks. Software can be technologically superb and perform each business task with dili-
gence, yet still be a critical and commercial failure. We can‚Äôt ignore technology or tasks,
but they play only a part in a larger schema that includes designing to meet user goals.
goals versus tasks and activities
Goals are not the same as tasks or activities. A goal is an expectation of an end condition,

---

## Chunk 248

whereas both activities and tasks are intermediate steps (at different levels of organiza-
tion) that help someone to reach a goal or set of goals.
Donald Norman1 describes a hierarchy in which activities are composed of tasks, which
in turn are composed of actions, which are themselves composed of operations. Using

---

## Chunk 249

this scheme, Norman advocates Activity-Centered Design (ACD), which focuses first and
foremost on understanding activities. He claims humans adapt to the tools at hand and
that understanding the activities people perform with a set of tools can more favorably
influence the design of those tools. The foundation of Norman‚Äôs thinking comes from

---

## Chunk 250

Activity Theory, a Soviet-era Russian theory of psychology that emphasizes understand-
ing who people are by understanding how they interact with the world. In recent years
this theory has been adapted to the study of human-computer interaction, most notably
by Bonnie Nardi.2
Norman concludes, correctly, that the traditional task-based focus of digital product

---

## Chunk 251

design has yielded inadequate results. Many developers and usability professionals still
approach interface design by asking what the tasks are. Although this may get the job
done, it won‚Äôt produce much more than an incremental improvement: It won‚Äôt provide
a solution that differentiates your product in the market, and very often it won‚Äôt really
satisfy the user.
14 Part I: Goal-Directed Design

---

## Chunk 252

--- Page 45 ---
While Norman‚Äôs ACD takes some important steps in the right direction by highlighting
the importance of the user‚Äôs context, we do not believe it goes quite far enough. A method
like ACD can be very useful in properly breaking down the ‚Äúwhat‚Äù of user behaviors, but
it really doesn‚Äôt address the first question any designer should ask: Why is a user per-

---

## Chunk 253

forming an activity, task, action, or operation in the first place? Goals motivate people
to perform activities; understanding goals allows you to understand your users‚Äô expec-
tations and aspirations, which in turn can help you decide which activities are truly rel-
evant to your design. Task and activity analysis is useful at the detail level, but only after

---

## Chunk 254

user goals have been analyzed. Asking, ‚ÄúWhat are the user‚Äôs goals?‚Äù lets you understand
the meaning of activities to your users and thus create more appropriate and satisfactory
designs.
If you‚Äôre still unsure about the difference between goals and activities or tasks, there is
an easy way to tell the difference between them. Since goals are driven by human motiva-

---

## Chunk 255

tions, they change very slowly‚Äîif at all‚Äîover time. Activities and tasks are much more
transient, because they are based almost entirely on whatever technology is at hand.
For example, when someone travels from St. Louis to San Francisco, his goals are likely
to include traveling quickly, comfortably, and safely. In 1850, a settler wishing to travel

---

## Chunk 256

quickly and comfortably would have made the journey in a covered wagon; in the inter-
est of safety, he would have brought along his trusty rifle. Today, a businessman traveling
from St. Louis to San Francisco makes the journey in a jet and, in the interest of safety,
he is required to leave his firearms at home. The goals of the settler and businessman

---

## Chunk 257

remain unchanged, but their activities and tasks have changed so completely with the
changes in technology that they are, in some respects, in direct opposition.
Design based solely on understanding activities or tasks runs the risk of trapping the
design in a model imposed by an outmoded technology, or using a model that meets a

---

## Chunk 258

corporation‚Äôs goals without meeting the users‚Äô goals. Looking through the lens of goals
allows you to leverage available technology to eliminate irrelevant tasks and to dramat-
ically streamline activities. Understanding users‚Äô goals can help designers eliminate the
tasks and activities that better technology renders unnecessary for humans to perform.
Designing to meet goals in context

---

## Chunk 259

Many designers assume that making user interfaces and product interactions easier to
learn should always be a design target. Ease of learning is an important guideline, but
in reality, the design target really depends on the context‚Äîwho the users are, what they
are doing, and their goals. You simply can‚Äôt create good design by following rules discon-

---

## Chunk 260

nected from the goals and needs of the users of your product.
Consider an automated call-distribution system. The people who use this product are
paid based on how many calls they handle. Their most important concern is not ease of
learning, but the efficiency with which they can route calls, and the rapidity with which
CH 1. A Design Process for Digital Products 15

---

## Chunk 261

--- Page 46 ---
those calls can be completed. Ease of learning is also important, however, because it
affects employees‚Äô happiness and, ultimately, turnover rate, so both ease and throughput
should be considered in the design. But there is no doubt that throughput is the domi-
nant demand placed on the system by the users, so, if necessary, ease of learning should

---

## Chunk 262

take a backseat. An application that walks the user through the call-routing process step
by step each time merely frustrates him after he‚Äôs learned the ropes.
On the other hand, if the product in question is a kiosk in a corporate lobby helping visi-
tors find their way around, ease of use for first-time users is clearly a major goal.

---

## Chunk 263

A general guideline of interaction design that seems to apply particularly well to pro-
ductivity tools is that good design makes users more effective. This guideline takes into
account the universal human goal of not looking stupid, along with more particular goals
of business throughput and ease of use that are relevant in most business situations.

---

## Chunk 264

It is up to you as a designer to determine how you can make the users of your product
more effective. Software that enables users to perform their tasks without addressing
their goals rarely helps them be truly effective. If the task is to enter 5,000 names and
addresses into a database, a smoothly functioning data-entry application won‚Äôt sat-

---

## Chunk 265

isfy the user nearly as much as an automated system that extracts the names from the
invoicing system.
Although it is the user‚Äôs job to focus on her tasks, the designer‚Äôs job is to look beyond
the task to identify who the most important users are, and then to determine what their
goals might be and why.
Implementation models and
mental models

---

## Chunk 266

The computer industry still makes use of the term computer literacy. Pundits talk about
how some people have it and some don‚Äôt, how those who have it will succeed in the infor-
mation economy, and how those who lack it will inevitably fall between the socioeco-
nomic cracks. Computer literacy, however, is really a euphemism for forcing human

---

## Chunk 267

beings to stretch their thinking to understand the inner workings of application logic,
rather than having software-enabled products stretch to meet people‚Äôs usual ways of
thinking.
Let‚Äôs explore what‚Äôs really going on when people try to use digital products, and what the
role of design is in translating coded functions into an understandable and pleasurable
experience for users.

---

## Chunk 268

16 Part I: Goal-Directed Design

---

## Chunk 269

--- Page 47 ---
Implementation models
Any machine has a mechanism for accomplishing its purpose. A motion picture projec-
tor, for example, uses a complicated sequence of intricately moving parts to create its
illusion. It shines a very bright light through a translucent, miniature image for a fraction
of a second. It then blocks the light for a split second while it moves another miniature

---

## Chunk 270

image into place. Then it unblocks the light again for another moment. It repeats this
process with a new image 24 times per second. Software-enabled products don‚Äôt have
mechanisms in the sense of moving parts; these are replaced with algorithms and mod-
ules of code that communicate with each other. The representation of how a machine

---

## Chunk 271

or application actually works has been called the system model by Donald Norman and
others; we prefer the term implementation model because it describes the details of how
an application is implemented in code.
It is much easier to design software that reflects its implementation model. From the
developer‚Äôs perspective, it‚Äôs perfectly logical to provide a button for every function, a field

---

## Chunk 272

for every data input, a page for every transaction step, and a dialog box for every code
module. But while this adequately reflects the infrastructure of engineering efforts, it
does little to provide coherent mechanisms for a user to achieve his goals. In the end,
what is produced alienates and confuses the user, rather like the ubiquitous external

---

## Chunk 273

ductwork in the dystopian setting of Terry Gilliam‚Äôs movie Brazil (which is full of won-
derful tongue-in-cheek examples of miserable interfaces).
mental models
From the moviegoer‚Äôs point of view, it is easy to forget the nuance of sprocket holes and
light interrupters while watching an absorbing drama. Many moviegoers, in fact, have

---

## Chunk 274

little idea how the projector works, or how this differs from the way a television works.
The viewer imagines that the projector merely throws a picture that moves onto the big
screen. This is his mental model, or conceptual model.
People don‚Äôt need to know all the details of how a complex mechanism actually works

---

## Chunk 275

in order to use it, so they create a cognitive shorthand for explaining it. This explana-
tion is powerful enough to cover their interactions with it but doesn‚Äôt necessarily reflect
its actual inner mechanics. For example, many people imagine that, when they plug in
their vacuum cleaner and blender, the electricity flows like water from the wall into the

---

## Chunk 276

appliances through the little black tube of the electrical cord. This mental model is per-
fectly adequate for using household appliances. The fact that the implementation model
of household electricity involves nothing resembling a fluid traveling through a tube and
that there is a reversal of electrical potential 120 times per second is irrelevant to the

---

## Chunk 277

user, although the power company needs to know the details.
CH 1. A Design Process for Digital Products 17

---

## Chunk 278

--- Page 48 ---
In the digital world, however, the differences between a user‚Äôs mental model and the
implementation model are often quite distinct. We tend to ignore the fact that our cell
phone doesn‚Äôt work like a landline phone; instead, it is actually a radio transceiver that
might swap connections between a half-dozen different cellular base antennas in the

---

## Chunk 279

course of a two-minute call. Knowing this doesn‚Äôt help us understand how to use the
phone.
The discrepancy between implementation and mental models is particularly stark in
the case of software applications, where the complexity of implementation can make it
nearly impossible for the user to see the mechanistic connections between his actions

---

## Chunk 280

and the application‚Äôs reactions. When we use a computer to digitally edit sound or create
video special effects like morphing, we are bereft of analogy to the mechanical world, so
our mental models are necessarily different from the implementation model. Even if the
connections were visible, they would remain inscrutable to most people.
striving toward perfection: represented models

---

## Chunk 281

Software (and any digital product that relies on software) has a behavioral face it shows
to the world that is created by the developer or designer. This representation is not nec-
essarily an accurate description of what is really going on inside the computer, although
unfortunately, it frequently is. This ability to represent the computer‚Äôs functioning inde-

---

## Chunk 282

pendent of its true actions is far more pronounced in software than in any other medium.
It allows a clever designer to hide some of the more unsavory facts of how the software
really gets the job done. This disconnection between what is implemented and what
is offered as explanation gives rise to a third model in the digital world, the designer‚Äôs

---

## Chunk 283

represented model‚Äîhow the designer chooses to represent an application‚Äôs functioning
to the user. Donald Norman calls this the designer‚Äôs model.
In the world of software, an application‚Äôs represented model can (and often should) be
quite different from an application‚Äôs actual processing structure. For example, an oper-

---

## Chunk 284

ating system can make a network file server look as though it were a local disk. The
model does not represent the fact that the physical disk drive may be miles away. This
concept of the represented model has no widespread counterpart in the mechanical
world. Figure 1-4 shows the relationship between the three models.

---

## Chunk 285

The closer the represented model comes to the user‚Äôs mental model, the easier he will
find the application to use and understand. Generally, offering a represented model that
follows the implementation model too closely significantly reduces the user‚Äôs ability to
learn and use the application. This occurs because the user‚Äôs mental model of his tasks

---

## Chunk 286

usually differs from the software‚Äôs implementation model.
18 Part I: Goal-Directed Design

---

## Chunk 287

--- Page 49 ---
Implementation Model Represented Models Mental Model
reflects technology reflects user‚Äôs vision
worse better
Figure 1-4: A comparison of the implementation model, mental model, and represented
model. The way engineers must build software is often a given, dictated by various techni-
cal and business constraints. The model for how the software actually works is called the

---

## Chunk 288

implementation model. The way users perceive the jobs they need to do and how the appli-
cation helps them do so is their mental model of interaction with the software. It is based on
their own ideas of how they do their jobs and how computers might work. The way designers
choose to represent the working of the application to the user is called the represented model.

---

## Chunk 289

Unlike the other two models, it is an aspect of software over which designers have great con-
trol. One of the designer‚Äôs most important goals should be to make the represented model
match a user‚Äôs mental model as closely as possible. Therefore, it is critical that designers
understand in detail how their target users think about the work they do with the software.

---

## Chunk 290

We tend to form mental models that are simpler than reality. So, if we create represented
models that are simpler than the implementation model, we help the user achieve better
understanding. In software, we imagine that a spreadsheet scrolls new cells into view
when we click the scrollbar. Nothing of the sort actually happens. There is no sheet of cells

---

## Chunk 291

out there, but a tightly packed data structure of values, with various pointers between
them, from which the application synthesizes a new image to display in real time.
One of the most significant ways in which computers can assist human beings is present-
ing complex data and operations in a simple, easily understandable form. As a result,

---

## Chunk 292

user interfaces that are consistent with users‚Äô mental models are vastly superior to those
that are merely reflections of the implementation model.
User interfaces should be based on user mental models rather than
implementation models.
In Adobe Photoshop Express on the iPad, users can adjust a set of ten different visual

---

## Chunk 293

filters, including noise, contrast, exposure, and tint. Instead of offering numeric fields or
many banks of controls for entering filter values‚Äîthe implementation model‚Äîthe inter-
face instead shows a set of thumbnail images of the edited photo, each with a different
filter applied (see Figure 1-5). A user can tap the image that best represents the desired

---

## Chunk 294

result, and can tweak it with a single large slider. The interface more closely follows his
CH 1. A Design Process for Digital Products 19

---

## Chunk 295

--- Page 50 ---
mental model, because the user‚Äîlikely an amateur photographer‚Äîis thinking in terms
of how his photo looks, not in terms of abstract numbers.
Figure 1-5: Adobe Photoshop Express for iPad has a great example of software design to match user
mental models. The interface shows a set of thumbnail images of the photo being edited. A user can

---

## Chunk 296

tap the thumbnail that best represents the desired setting, which can then be tweaked using the sin-
gle large slider below the photo. The interface follows mental models of photographers who are after
a particular look, not a set of abstract numeric values.
If the represented model for software closely follows users‚Äô mental models, it eliminates

---

## Chunk 297

needless complexity from the user interface by providing a cognitive framework that
makes it evident to the user how his goals and needs can be met.
Goal-directed interactions reflect user mental models.
So, now we know that a missing link prevents the majority of digital products from being
truly successful. A design process translates the implementation of features into intu-

---

## Chunk 298

itive and desirable product behaviors that match how people think about performing
20 Part I: Goal-Directed Design

---

## Chunk 299

--- Page 51 ---
tasks toward achieving their goals. But how do we actually do it? How do we know what
our users‚Äô goals are and what mental models they have of their activities and tasks?
The Goal-Directed Design process, which we describe in the remainder of this chapter
and in the remainder of Part I, provides a structure for determining the answers to these

---

## Chunk 300

questions‚Äîa structure by which solutions based on this information can be systemati-
cally achieved.
An overview of goal-Directed Design
Most technology-focused companies don‚Äôt have an adequate process for product design,
if they have a process at all. But even the more enlightened organizations‚Äîthose that
can boast of an established process‚Äîcome up against some critical issues that result

---

## Chunk 301

from traditional ways of approaching the problems of research and design.
In recent years, the business community has come to recognize that user research is
necessary to create good products, but the proper nature of that research is still in
question in many organizations. Quantitative market research and market segmenta-

---

## Chunk 302

tion are quite useful for selling products but fall short of providing critical information
about how people actually use products‚Äîespecially products with complex behaviors.
(See Chapter 2 for a more in-depth discussion of this topic.) A second problem occurs
after the results have been analyzed: Most traditional methods don‚Äôt provide a means

---

## Chunk 303

of t ranslating research results into design solutions. A hundred pages of user survey data
don‚Äôt easily translate into a set of product requirements. They say even less about how
those requirements should be expressed in terms of a meaningful and appropriate inter-
face structure. Design remains a black box: ‚ÄúA miracle happens here‚Ä¶‚Äù This gap between

---

## Chunk 304

research results and the ultimate design solution is the result of a process that doesn‚Äôt
connect the dots from user to final product. We‚Äôll soon see how to address this problem
with Goal-Directed methods.
bridging the gap
As we have briefly discussed, the role of design in the development process needs to
change. We need to start thinking about design in new ways and start thinking differ-

---

## Chunk 305

ently about how product decisions are made.
Design as product definition
Design has, unfortunately, become a limiting term in the technology industry. For many
developers and managers, the word stands for what happens in the third process dia-
gram shown in Figure 1-2: a visual facelift of the implementation model. But design, when
CH 1. A Design Process for Digital Products 21

---

## Chunk 306

--- Page 52 ---
properly deployed (as in the fourth process diagram shown in Figure 1-2), both identi-
fies user requirements and defines a detailed plan for the behavior and appearance of
products. In other words, design provides true product definition, based on user goals,
business needs, and technology constraints.
Designers as researchers

---

## Chunk 307

If design is to become product definition, designers need to take on a broader role than
that assumed in traditional practice, particularly when the object in question is com-
plex, interactive systems.
One of the problems with the current development process is that roles in the process are
overspecialized: Researchers perform research, and designers perform design (see Fig-

---

## Chunk 308

ure 1-6). The results of user and market research are analyzed by the usability and market
researchers and then thrown over the transom to designers or developers. What is missing
in this model is a systematic means of translating and synthesizing the research into design
solutions. One of the ways to address this problem is for designers to learn to be researchers.
?

---

## Chunk 309

Market Research Design of Form
performed by performed by
market analysts and graphic/GUI and
ethnographers industrial designers
Figure 1-6: A problematic design process. Traditionally, research and design have
been separated, with each activity handled by specialists. Research has, until
recently, referred primarily to market research, and design is too often limited

---

## Chunk 310

to visual design or skin-deep industrial design. More recently, user research has
expanded to include qualitative, ethnographic data. Yet, without including design-
ers in the research process, the connection between research data and design
solutions remains tenuous at best.
There is a compelling reason to involve designers in the research process. One of the

---

## Chunk 311

most powerful tools designers offer is empathy: the ability to feel what others are feeling.
The direct and extensive exposure to users that proper user research entails immerses
designers in the users‚Äô world and gets them thinking about users long before they pro-
pose solutions. One of the most dangerous practices in product development is isolating

---

## Chunk 312

designers from the users, because doing so eliminates empathic knowledge.
Additionally, it is often difficult for pure researchers to know what user information
is really important from a design perspective. Involving designers directly in research
addresses both issues.
22 Part I: Goal-Directed Design

---

## Chunk 313

--- Page 53 ---
In the authors‚Äô practice, designers are trained in the research techniques described in
Chapter 2 and perform their research without further support or collaboration. This is a
satisfactory solution, provided that your team has the time and resources to train your
designers fully in these techniques. If not, a cross-disciplinary team of designers and

---

## Chunk 314

dedicated user researchers is appropriate.
Although research practiced by designers takes us part of the way to Goal-Directed
Design solutions, a translation gap still exists between research results and design
details. The puzzle is missing several pieces, as we will discuss next.
between research and blueprint: models, requirements,
and frameworks

---

## Chunk 315

Few design methods in common use today incorporate a means of effectively and sys-
tematically translating the knowledge gathered during research into a detailed design
specification. Part of the reason for this has already been identified: Designers have his-
torically been out of the research loop and have had to rely on third-person accounts of
user behaviors and desires.

---

## Chunk 316

The other reason, however, is that few methods capture user behaviors in a manner that
appropriately directs the definition of a product. Rather than providing information
about user goals, most methods provide information at the task level. This type of infor-
mation is useful for defining layout, work flow, and translation of functions into inter-

---

## Chunk 317

face controls. But it‚Äôs less useful for defining the basic framework of what a product is,
what it does, and how it should meet the user‚Äôs broad needs.
Instead, we need an explicit, systematic process to bridge the gap between research and
design for defining user models, establishing design requirements, and translating those

---

## Chunk 318

into a high-level interaction framework (see Figure 1-7). Goal-Directed Design seeks to
bridge the gap that currently exists in the digital product development process‚Äîthe
gap between user research and design‚Äîthrough a combination of new techniques and
known methods brought together in more effective ways.
Research Modeling Requirements Framework Refinement Support

---

## Chunk 319

users and of users and definition of user, definition of of behaviors, development
the domain use context business, and design structure form, and needs
technical needs and flow content
Figure 1-7: The Goal-Directed Design process
CH 1. A Design Process for Digital Products 23

---

## Chunk 320

--- Page 54 ---
A process overview
Goal-Directed Design combines techniques of ethnography, stakeholder interviews,
market research, detailed user models, scenario-based design, and a core set of inter-
action principles and patterns. It provides solutions that meet users‚Äô needs and goals
while also addressing business/organizational and technical imperatives. This process

---

## Chunk 321

can be roughly divided into six phases: Research, Modeling, Requirements Definition,
Framework Definition, Refinement, and Support (see Figure 1-7). These phases follow the
five component activities of interaction design identified by Gillian Crampton Smith and
Philip Tabor‚Äîunderstanding, abstracting, structuring, representing, and detailing‚Äî

---

## Chunk 322

with a greater emphasis on modeling user behaviors and defining system behaviors.
The remainder of this chapter provides a high-level view of the six phases of Goal-
Directed Design, and Chapters 2 through 6 provide a more detailed discussion of the
methods involved in each of these phases. Figure 1-8 shows a more detailed diagram of

---

## Chunk 323

the process, including key collaboration points and design concerns.
research
The Research phase employs ethnographic field study techniques (observation and
contextual interviews) to provide qualitative data about potential and/or actual users
of the product. It also includes competitive product audits as well as reviews of mar-

---

## Chunk 324

ket research, technology white papers, and brand strategy. It also includes one-on-one
interviews with stakeholders, developers, subject matter experts (SMEs), and technology
experts as suits the particular domain.
One of the principal outcomes of field observation and user interviews is an emergent set
of behavior patterns‚Äîidentifiable behaviors that help categorize modes of use of a poten-

---

## Chunk 325

tial or existing product. These patterns suggest goals and motivations (specific and gen-
eral desired outcomes of using the product). In business and technical domains, these
behavior patterns tend to map into professional roles; for consumer products, they tend
to correspond to lifestyle choices. Behavior patterns and the goals associated with them

---

## Chunk 326

drive the creation of personas in the Modeling phase. Market research helps select and
filter valid personas that fit business models. Stakeholder interviews, literature reviews,
and product audits deepen the designers‚Äô understanding of the domain and elucidate
business goals, brand attributes, and technical constraints that the design must support.

---

## Chunk 327

Chapter 2 provides a more detailed discussion of Goal-Directed research techniques.
24 Part I: Goal-Directed Design

---

## Chunk 328

--- Page 55 ---
Initiate Design Build Test Ship
Goal-Directed Design
Stakeholder
Activity Concerns Collaboration Deliverable
Scope Objectives, timelines, financial Meetings Document hcraeseR
Define project goals constraints, process, milestones Capabilities and Statement
and schedule Scoping of Work
Audit Business and marketing plans,
Review existing work branding strategy, market research,

---

## Chunk 329

and product product portfolio plans,
competitors, relevant technologies
Stakeholder Product vision, risks, constraints, Interviews
Interviews opportunities, logistics, users Stakeholders
Understand product and Users
vision and constrain ts
User interviews Users, potential users, behaviors, Check-in
& observations attitudes, aptitudes, motivations, Preliminary

---

## Chunk 330

Understand user environments, tools, challenges Research findings
needs and behavior
Personas Patterns in user and customer Check-in gniledoM
User and customer behaviors, attitudes, aptitudes, Personas
archetypes goals, environments,
tools, challenges
Other Models Workflows among multiple
Represent domain factors people, environments, artifacts
beyond individual users
and customers

---

## Chunk 331

Context Scenarios How the product fits into the Check-in stnemeriuqeR noitinfieD
Tell stories about persona‚Äôs life and environment, Scenarios and
ideal user and how it helps them achieve Requirements
experiences their goals
Requirements Functional and data needs, user Presentation Document
Describe necessary mental models, design imperatives, User and Domain User and

---

## Chunk 332

capabilities of the product vision, business Analysis Domain
product requirements, technology Analysis
Elements Information, functions, Check-ins krowemarF
Define manifestations mechanisms, actions, domain Design
of information object models Framework
and functionality
Framework Object relationships, conceptual ngiseD
Design overall groupings, navigation sequencing,

---

## Chunk 333

structure of user principles and patterns, flow,
experience sketches, storyboards
Key Path and How the design fits into an ideal
Validation Scenarios sequence of user behaviors, and
Describe how the accommodates a variety of likely
persona interacts with conditions Presentation
the product Design Vision
Detailed design Appearance, idioms, interface, Check-ins Document ngiseD tnemenfieR

---

## Chunk 334

Refine and specify widgets, behavior, information, Design Form and
details visualization, brand, experience, Refinement Behavior
language, storyboards Specification
Design modification Maintaining conceptual Collaborative Revision ngiseD troppuS
Accommodate new integrity of the design under Design Form and
constraints and timeline changing technology constraints Behavior
Specification

---

## Chunk 335

Figure 1-8: A more detailed look at the Goal-Directed Design process
CH 1. A Design Process for Digital Products 25

---

## Chunk 336

--- Page 56 ---
modeling
During the Modeling phase, behavior and work flow patterns discovered by analyzing
the field research and interviews are synthesized into domain and user models. Domain
models can include information flow and work flow diagrams. User models, or personas,
are detailed, composite user archetypes that represent distinct groupings of behaviors,

---

## Chunk 337

attitudes, aptitudes, goals, and motivations observed and identified during the Research
phase.
Personas are the main characters in a narrative, scenario-based approach to design.
This approach iteratively generates design concepts in the Framework Definition phase.
It provides feedback that enforces design coherence and appropriateness in the Refine-

---

## Chunk 338

ment phase. It also is a powerful communication tool that helps developers and man-
agers understand design rationale and prioritize features based on user needs. In the
Modeling phase, designers employ a variety of methodological tools to synthesize, differ-
entiate, and prioritize personas, exploring different types of goals and mapping personas

---

## Chunk 339

across ranges of behavior to ensure that no gaps or duplications exist.
Specific design targets are chosen from the cast of personas through a process of com-
paring goals and assigning priorities based on how broadly each persona‚Äôs goals encom-
pass the goals of other personas. A process of designating persona types determines how

---

## Chunk 340

much influence each persona has on the design‚Äôs eventual form and behavior.
A detailed discussion of persona and goal development can be found in Chapter 3.
requirements Definition
Design methods employed by teams during the Requirements Definition phase provide
the much-needed connection between user and other models and design‚Äôs framework.

---

## Chunk 341

This phase employs scenario-based design methods with the important innovation of
focusing the scenarios not on user tasks in the abstract, but first and foremost on meet-
ing the goals and needs of specific user personas. Personas help us understand which
tasks are truly important and why, leading to an interface that minimizes necessary

---

## Chunk 342

tasks (effort) while maximizing return. Personas become the main characters of these
scenarios, and the designers explore the design space via a form of role playing.
For each interface/primary persona, the process of design in the Requirements Defini-
tion phase involves analyzing persona data and functional needs (expressed in terms

---

## Chunk 343

of objects, actions, and contexts), prioritized and informed by persona goals, behaviors,
and interactions with other personas in various contexts.
This analysis is accomplished through an iteratively refined context scenario. It starts
with a ‚Äúday in the life‚Äù of the persona using the product, describing high-level product
26 Part I: Goal-Directed Design

---

## Chunk 344

--- Page 57 ---
touch points, and thereafter successively defining detail at ever-deepening levels. In addi-
tion to these scenario-driven requirements, designers consider the personas‚Äô skills and
physical capabilities as well as issues related to the usage environment. Business goals,
desired brand attributes, and technical constraints are also considered and balanced

---

## Chunk 345

with persona goals and needs. The output of this process is a requirements d efinition that
balances user, business, and technical requirements of the design to follow.
Chapter 4 covers the process of establishing requirements through the use of scenarios.
Framework Definition
In the Framework Definition phase, designers create the overall product concept, defin-

---

## Chunk 346

ing the basic frameworks for the product‚Äôs behavior, visual design, and, if applicable,
physical form. Interaction design teams synthesize an interaction framework by employ-
ing two other critical methodological tools in conjunction with context scenarios. The
first is a set of general interaction design principles that provide guidance in determining

---

## Chunk 347

appropriate system behavior in a variety of contexts. Part II of this book is devoted to
high-level interaction design principles appropriate to the Framework Definition phase.
The second critical methodological tool is a set of interaction design patterns that encode
general solutions (with variations dependent on context) to classes of previously ana-

---

## Chunk 348

lyzed problems. These patterns bear close resemblance to the concept of architectural
design patterns first developed by Christopher Alexander3 and more recently brought
to the programming field by Erich Gamma and others.4 Interaction design patterns are
hierarchically organized and continuously evolve as new contexts arise. Rather than sti-

---

## Chunk 349

fling designer creativity, they often provide needed leverage to approach difficult prob-
lems with proven design knowledge.
After data and functional needs are described at this high level, they are translated into
design elements according to interaction principles and then organized, using patterns
and principles, into design sketches and behavior descriptions. The output of this pro-

---

## Chunk 350

cess is an interaction framework definition, a stable design concept that provides the log-
ical and hi-level formal structure for the detail to come. Successive iterations of more
narrowly focused scenarios provide this detail in the Refinement phase. The approach
is often a balance of top-down (pattern-oriented) design and bottom-up (principle-
oriented) design.

---

## Chunk 351

When the product takes physical form, interaction designers and industrial designers
begin by collaborating closely on various input methods and approximate form factors
the product might take, using scenarios to consider the pros and cons of each. As this is
narrowed to a couple of options that seem promising, industrial designers begin produc-

---

## Chunk 352

ing early physical prototypes to ensure that the overall interaction concept will work. It‚Äôs
CH 1. A Design Process for Digital Products 27

---

## Chunk 353

--- Page 58 ---
critical at this early stage that industrial designers not create concepts independent of
the product‚Äôs behavior.
When working to design a service, we will collaborate with service designers to draft a
service map and a blueprint that coordinates touchpoints and experiences across chan-
nels, both ‚Äúbackstage‚Äù with the service providers and ‚Äúfrontstage‚Äù experiences from the

---

## Chunk 354

users‚Äô point of view.
As soon as an interaction framework begins to emerge, visual interface designers pro-
duce several options for a visual framework, which is sometimes also called a visual
language strategy. They use brand attributes as well as an understanding of the overall
interface structure to develop options for typography, color palettes, and visual style.
refinement

---

## Chunk 355

The Refinement phase proceeds similarly to the Framework Definition phase, but with
increasing focus on detail and implementation. Interaction designers focus on task
coherence, using key path scenarios (walkthroughs) and validation scenarios focused
on storyboarding paths through the interface in great detail. Visual designers define a

---

## Chunk 356

system of type styles and sizes, icons, and other visual elements that provide a compel-
ling experience with clear affordances and visual hierarchy. Industrial designers, when
appropriate, finalize materials and work closely with engineers on assembly schemes
and other technical issues. The culmination of the Refinement phase is the detailed doc-

---

## Chunk 357

umentation of the design‚Äîa form and behavior specification or blueprint, delivered in
either paper or interactive media form as the context dictates.
Chapter 5 discusses in more detail the use of personas, scenarios, principles, and pat-
terns in the Framework Definition and Refinement phases.
Development support

---

## Chunk 358

Even a very well-conceived and validated design solution can‚Äôt possibly anticipate every
development challenge and technical question. In our practice, we‚Äôve learned that it‚Äôs
important to be available to answer developers‚Äô questions as they arise during the con-
struction process. It is often the case that as the development team prioritizes their work

---

## Chunk 359

and makes trade-offs to meet deadlines, the design must be adjusted, requiring scaled-
down design solutions. If the interaction design team is not available to create these
solutions, developers are forced to do this under time pressure, which has the potential
to gravely compromise the integrity of the product‚Äôs design.

---

## Chunk 360

Chapter 6 discusses how interaction design activities and processes can be integrated
with the larger product team.
28 Part I: Goal-Directed Design

---

## Chunk 361

--- Page 59 ---
goals, not features, are the key to product success
Developers and marketers often use the language of features and functions to discuss
products. But reducing a product‚Äôs definition to a list of features and functions ignores
the real opportunity‚Äîorchestrating technological capability to serve human needs and

---

## Chunk 362

goals. Too often the features of our products are a patchwork of nifty technological inno-
vations structured around a marketing requirements document or organization of the
development team, with too little attention paid to the overall user experience.
The successful interaction designer must maintain her focus on users‚Äô goals amid the

---

## Chunk 363

pressures and chaos of the product-development cycle. Although we discuss many other
techniques and tools of interaction in this book, we always return to users‚Äô goals. They
are the bedrock upon which interaction design should be practiced.
The Goal-Directed process, with its clear rationale for design decisions, makes collab-

---

## Chunk 364

oration with developers and businesspeople easier. It also ensures that the design in
question isn‚Äôt guesswork, the whim of a creative mind, or just a reflection of the team
members‚Äô personal preferences.
Interaction design is not guesswork.
Goal-Directed Design is a powerful tool for answering the most important questions
that crop up during the definition and design of a digital product:

---

## Chunk 365

‚Ä¢ Who are my users?
‚Ä¢ What are my users trying to accomplish?
‚Ä¢ How do my users think about what they‚Äôre trying to accomplish?
‚Ä¢ What kind of experiences do my users find appealing and rewarding?
‚Ä¢ How should my product behave?
‚Ä¢ What form should my product take?
‚Ä¢ How will users interact with my product?
‚Ä¢ How can my product‚Äôs functions be most effectively organized?

---

## Chunk 366

‚Ä¢ How will my product introduce itself to first-time users?
‚Ä¢ How can my product put an understandable, appealing, and controllable face on
technology?
‚Ä¢ How can my product deal with problems that users encounter?
CH 1. A Design Process for Digital Products 29

---

## Chunk 367

--- Page 60 ---
‚Ä¢ How will my product help infrequent and inexperienced users understand how to
accomplish their goals?
‚Ä¢ How can my product provide sufficient depth and power for expert users?
The remainder of this book is dedicated to answering these questions. We share tools
tested by years of experience with hundreds of products that can help you identify key

---

## Chunk 368

users of your products, understand them and their goals, and translate this understand-
ing into effective and appealing design solutions.
Notes
1. Norman, 2005
2. Nardi, 1996
3. Alexander, 1979
4. Gamma, et al, 1994
30 Part I: Goal-Directed Design

---

## Chunk 369

--- Page 61 ---
Ch 2
unDErsTAnDIng
ThE ProblEm:
DEsIgn rEsEArCh
The outcome of any design effort ultimately must be judged by how successfully it meets
the needs of both the product‚Äôs users and the organization that commissioned it. No
matter how skillful or creative the designer, if she does not have clear and detailed

---

## Chunk 370

knowledge of the users she is designing for, the problem‚Äôs constraints, and the business
or organizational goals that are driving the design, she will have little chance of success.
Insight into these topics can‚Äôt easily be achieved by sifting through the numbers and
graphs that come from quantitative studies such as market surveys (although these can

---

## Chunk 371

be critical for answering other kinds of questions). Rather, this kind of behavioral and
organizational knowledge can best be gathered via qualitative research techniques.
There are many types of qualitative research, each of which can play an important role
in understanding a product‚Äôs design landscape. In this chapter, we‚Äôll focus on the spe-

---

## Chunk 372

cific qualitative research techniques that support the design methods we‚Äôll cover in
later chapters. We‚Äôll also discuss how qualitative research techniques can enrich and be
enriched by certain quantitative techniques. At the end of the chapter, we‚Äôll briefly cover
some supplemental qualitative techniques and the research contexts for which they are
appropriate.

---

## Chunk 373

--- Page 62 ---
Qualitative versus Quantitative Data
in Design research
‚ÄúResearch‚Äù is a term that most people associate with science and objectivity. This asso-
ciation isn‚Äôt incorrect, but it causes many people to believe that the only valid research
is the kind that yields (supposedly) objective results: quantitative data. It is a common

---

## Chunk 374

perspective in business and engineering that numbers represent truth. But numbers‚Äî
especially statistics describing human activities‚Äîare subject to interpretation and can
be manipulated just as easily as textual data.
Data gathered by the hard sciences like physics is simply different from that gathered
about human activities. Electrons don‚Äôt have moods that vary from minute to minute.

---

## Chunk 375

The tight controls physicists place on their experiments to isolate observed behaviors
are next to impossible in the social sciences. Any attempt to reduce human behavior
to statistics is likely to overlook important nuances, which can make a huge differ-
ence in the design of products. Quantitative research can only answer questions about

---

## Chunk 376

‚Äúhow much‚Äù or ‚Äúhow many‚Äù along a few reductive axes. Qualitative research can tell
you what, how, and why in rich detail that reflects the complexities of real human
situations.
Social scientists have long realized that human behaviors are too complex and subject
to too many variables to rely solely on quantitative data to understand them. Design

---

## Chunk 377

and usability practitioners, borrowing techniques from anthropology and other social
sciences, have developed many qualitative methods for gathering useful data on user
behaviors to a more pragmatic end: to help create products that better serve user
needs.
benefits of qualitative methods
Qualitative research helps us understand a product‚Äôs domain, context, and constraints

---

## Chunk 378

in different, more useful ways than quantitative research does. It also helps us identify
patterns of behavior among a product‚Äôs users and potential users much more quickly and
easily than would be possible with quantitative approaches. In particular, qualitative
research helps us understand the following:
‚Ä¢ Behaviors, attitudes, and aptitudes of potential and existing product users

---

## Chunk 379

‚Ä¢ Technical, business, and environmental contexts‚Äîthe domain‚Äîof the product to be
designed
32 Part I: Goal-Directed Design

---

## Chunk 380

--- Page 63 ---
‚Ä¢ Vocabulary and other social aspects of the domain in question
‚Ä¢ How existing products are used
Qualitative research can also help the progress of design projects:
‚Ä¢ It gives the design team credibility and authority, because design decisions can be
traced to research results.
‚Ä¢ It gives the team a common understanding of domain issues and user concerns.

---

## Chunk 381

‚Ä¢ It empowers management to make more informed decisions about product design
issues that would otherwise be based on guesswork or personal preference.
It‚Äôs our experience that, in comparison, qualitative methods tend to be faster, less expen-
sive, and more likely to provide useful answers to important questions that lead to supe-
rior design:

---

## Chunk 382

‚Ä¢ How does the product fit into the broader context of people‚Äôs lives?
‚Ä¢ What goals motivate people to use the product, and what basic tasks help people
accomplish these goals?
‚Ä¢ What experiences do people find compelling? How do these relate to the product being
designed?
‚Ä¢ What problems do people encounter with their current ways of doing things?

---

## Chunk 383

The value of qualitative studies is not limited to helping support the design process. In
our experience, spending the time to deeply understand the user population can provide
valuable business insights that are not revealed through traditional market research.
For example, a client once asked us to perform a user study for an entry-level consumer

---

## Chunk 384

video-editing product for Windows users. An established developer of video-editing and
-authoring software, the client had used traditional market research techniques to iden-
tify a significant business opportunity in developing a product for people who owned a
digital video camera and a computer but hadn‚Äôt yet connected the two.

---

## Chunk 385

In the field, we conducted interviews with a dozen users in the target market. Our first
discovery was not surprising: The people who did the most videography and had the
strongest desire to share edited versions of their videos were parents. The second discov-
ery, however, was startling: Of the 12 people whose homes we visited, only one person
CH 2. Understanding the Problem: Design Research 33

---

## Chunk 386

--- Page 64 ---
had successfully connected his video camera to his computer‚Äîand he had asked the IT
guy at work to do it. One of the necessary preconditions of the product‚Äôs success was that
people should be able to transfer videos to their computer for editing. But at the time
the project was commissioned, it was extremely difficult to make a FireWire or video-

---

## Chunk 387

capture card function properly on an Intel-based PC.
As a result of four days of research, we were able to help our client decide to put the prod-
uct on hold. This decision likely saved them a considerable amount of money.
strengths and limitations of quantitative methods
The marketing profession has taken much of the guesswork out of determining what

---

## Chunk 388

motivates people to buy. One of the most powerful tools for doing so is market segmen-
tation. Data from focus groups and market surveys is used to group potential customers
by demographic criteria such as age, gender, amount of education, and home zip code.
This helps determine what types of consumers will be most receptive to a particular

---

## Chunk 389

product or marketing message. More-sophisticated consumer data may also include
psychographics and behavioral variables, including attitudes, lifestyle, values, ideology,
risk aversion, and decision-making patterns. Classification systems such as SRI‚Äôs VALS
segmentation and Jonathan Robbin‚Äôs geodemographic PRIZM clusters can better clarify

---

## Chunk 390

the data by predicting consumers‚Äô purchasing power, motivation to buy, self-orientation,
and resources.
However, understanding if somebody wants to buy something is not the same thing as
understanding what he or she might want to do with it after buying it. Market segmen-
tation is a great tool for identifying and quantifying a market opportunity, but it‚Äôs an

---

## Chunk 391

ineffective tool for defining a product that will capitalize on that opportunity.
Similarly, quantitative measures such as web analytics and other attempts to numeri-
cally describe human behavior may certainly provide insightful answers to the what (or,
at least, the how much) of the equation. But without a robust body of primary qualitative

---

## Chunk 392

research that provides answers to the why of those behaviors, such statistical data may
simply raise more questions than it answers.
Quantitative research can help direct design research
Qualitative research is almost always the most effective means for gathering the behav-
ioral knowledge that will help designers define and design products for users. However,

---

## Chunk 393

quantitative data is not without its uses within the context of design research.
34 Part I: Goal-Directed Design

---

## Chunk 394

--- Page 65 ---
For example, market-modeling techniques can accurately forecast marketplace accep-
tance of products and services. As such, they are invaluable for assessing a product‚Äôs
viability. They can therefore be powerful tools for convincing executives to build a prod-
uct. After all, if you know X people might buy a product or service for Y dollars, it is easier

---

## Chunk 395

to evaluate the potential return on investment. Because market research can identify
and quantify the business opportunity, it is often the necessary starting point for fund-
ing a design initiative.
In addition, designers planning to interview and observe users can refer to market
research (when it exists) to help select interview targets. Particularly in the case of con-

---

## Chunk 396

sumer products and services, demographic attributes such as lifestyle choice and stage
of life more strongly influence user behaviors. We‚Äôll discuss the differences between
market segmentation models and user models (personas) in more detail in Chapter 3.
Similarly, web and other usage data analytics are an excellent way to identify design

---

## Chunk 397

problems that may be in need of solutions. If users are lingering in an area of your web-
site or are not visiting any other areas, that is critical information to have before a rede-
sign. But it will likely take qualitative research to help determine the root cause of such
statistically gathered behaviors and thus derive the potential solutions. And, of course,

---

## Chunk 398

analytics are useful only when you have an existing product to run them on.
user research can inform market research
Qualitative research is almost always the tool of choice for characterizing user behaviors
and latent needs. But there is one type of information, often seen as critical by business
stakeholders, that qualitative research can‚Äôt get you by itself: market sizing of the behav-

---

## Chunk 399

ioral models. This is an ideal place to employ quantitative techniques (such as surveys)
to fill in this missing information.
Once your users have been successfully represented by behavioral models (personas,
which you‚Äôll read more about in Chapter 3), you can construct a survey. It will distin-
guish these different user types and capture traditional market demographic data

---

## Chunk 400

that can then be correlated to the behavioral data. When this is successful, it can help
determine‚Äîespecially for consumer products‚Äîwhich user types should be prioritized
when designing features and the overall product experience. We‚Äôll discuss this kind of
persona-based market sizing a bit more in Chapter 3.
Figure 2-1 shows the relationship between various types of quantitative research and the

---

## Chunk 401

qualitative Goal-Directed Design research techniques discussed in this chapter.
CH 2. Understanding the Problem: Design Research 35

---

## Chunk 402

--- Page 66 ---
Market Research Analytics
(Quantitative) (Quantitative)
Can inform
Goal-Directed
Design Research
(Qualitative)
Drives
Behavioral Models
(Personas)
Can be used
to generate
Market Sizing Studies
(Quantitative)
Figure 2-1: The relationship between quantitative research and
qualitative, Goal-Directed design research
goal-Directed Design research

---

## Chunk 403

Social science and usability texts are full of methods and techniques for conducting
qualitative research; we encourage you to explore this literature. In this chapter, we
focus on techniques that have been proven effective in our practice over the last decade.
Occasionally we draw attention to similar techniques practiced in the design and usabil-

---

## Chunk 404

ity fields at large. We avoid getting bogged down in theory, instead presenting these tech-
niques in a succinct and pragmatic manner.
We have found the following qualitative research activities to be most useful in our
Goal-Directed design practice (in rough order of execution):
‚Ä¢ Kickoff meeting
‚Ä¢ Literature review
‚Ä¢ Product/prototype and competitive audits
‚Ä¢ Stakeholder interviews

---

## Chunk 405

36 Part I: Goal-Directed Design

---

## Chunk 406

--- Page 67 ---
‚Ä¢ Subject matter expert (SME) interviews
‚Ä¢ User and customer interviews
‚Ä¢ User observation/ethnographic field studies
Figure 2-2 shows these activities.
Kickoff Meeting
Literature Review
Product / Prototype
and Competitive Audits
Stakeholder Interviews
SME Interviews Consumer
Products
User and Customer
Interviews / Observation
Figure 2-2: An overview of the Goal-Directed

---

## Chunk 407

design research process
kickoff meeting
Although the project kickoff meeting isn‚Äôt strictly a research activity, it contains an
important component of research: It is an opportunity for designers to ask initial key
questions of some of the most important stakeholders gathered at the meeting:
‚Ä¢ What is the product?
‚Ä¢ Who will/does use it?
‚Ä¢ What do your users need most?

---

## Chunk 408

‚Ä¢ Which customers and users are the most important to the business?
CH 2. Understanding the Problem: Design Research 37

---

## Chunk 409

--- Page 68 ---
‚Ä¢ What challenges do the design team and the business face moving forward?
‚Ä¢ Who do you see as your biggest competitors? Why?
‚Ä¢ What internal and external literature should we look at to familiarize ourselves with
the product and/or business and technical domain?
Although these questions may seem basic, they give the design team insight into not

---

## Chunk 410

only the product itself, but also into how stakeholders think about their product, their
users, and the design problem ahead. They will likely provide important clues about how
to structure stakeholder and user interviews later in the process and will provide point-
ers to understanding the product domain. (This is particularly important if that domain
is narrow or technical.)
literature review

---

## Chunk 411

Prior to or in parallel with stakeholder interviews, the design team should review any
literature pertaining to the product or its domain. This can and should include the fol-
lowing types of documents:
‚Ä¢ Internal documents including product marketing plans, brand strategy, market
research studies, user surveys, technology specifications and white papers, competitive

---

## Chunk 412

research, usability studies and metrics, customer support data such as call center
statistics or transcripts, and user forum archives
‚Ä¢ Industry reports such as business and technical journal articles
‚Ä¢ Web searches for related and competing products, news items, independent user
forums, blog posts, and social media discussion topics

---

## Chunk 413

The design team should collect this literature and use it as a basis for developing ques-
tions to ask stakeholders and SMEs. Later they can use it to supply additional domain
knowledge and vocabulary and to check against compiled user data.
Product/prototype and competitive audits
Prior to or in parallel with stakeholder and SME interviews, it is helpful for the design

---

## Chunk 414

team to examine any existing version or prototype of the product, as well as its chief com-
petitors. Doing so gives the design team a sense of the state of the art and provides fuel for
questions during these interviews. Ideally, the design team should engage in an informal
or expert review (sometimes also called a heuristic review) of both the current design (if

---

## Chunk 415

any) and competitive product interfaces. They should compare each against interaction
and visual design principles (such as those found later in this book). This procedure both
familiarizes the team with the strengths and limitations of what is currently available to
users and provides a general idea of the product‚Äôs current functional scope.
38 Part I: Goal-Directed Design

---

## Chunk 416

--- Page 69 ---
stakeholder interviews
Research for any new product design should start with an understanding of the business
and technical context surrounding the product. In almost all cases, the reason a product
is being designed (or redesigned) is to achieve one or several specific business outcomes
(most commonly, to make money). It is the designers‚Äô obligation to develop solutions

---

## Chunk 417

without ever losing sight of these business goals. Therefore, it is critical that the design
team begin its work by understanding the opportunities and constraints that are behind
the design brief.
As Donald Sch√∂n so aptly puts it, ‚Äúdesign is a conversation with materials.‚Äù1 This means
that, for a designer to craft an appropriate solution, he must understand the capabilities

---

## Chunk 418

and limitations of the ‚Äúmaterials‚Äù that will be used to construct the product, whether
they be lines of code or extruded plastic. The best way to begin this understanding is by
talking to the people responsible for managing and building the product.
Generally speaking, a stakeholder is anyone with authority and/or responsibility for the

---

## Chunk 419

product being designed. More specifically, stakeholders are key members of the organi-
zation commissioning the design work. Typically they include executives, managers, and
representative contributors from development, sales, product management, marketing,
customer support, design, and usability. They may also include similar people from other

---

## Chunk 420

organizations in business partnerships with the commissioning organization.
Interviews with stakeholders should occur before user research begins. Stakeholder dis-
cussions often inform how user research is conducted.
It is most effective to interview each stakeholder in isolation, rather than in a larger,
cross-departmental group. A one-on-one setting promotes candor on the part of the

---

## Chunk 421

stakeholder and ensures that individual views are not lost in a crowd. (One of the most
interesting things you can discover in such interviews is the extent to which everyone
in a product team shares‚Äîor doesn‚Äôt share‚Äîa common vision.) Interviews need not last
longer than about an hour. Follow-up meetings may be needed if a particular stakeholder

---

## Chunk 422

is identified as an exceptionally valuable source of information.
Certain types of information are important to gather from stakeholders:
‚Ä¢ Preliminary product vision‚ÄîAs in the fable of the blind men and the elephant, you
may find that each business department has a slightly different and slightly incomplete
perspective on the product to be designed. Part of the design approach therefore must

---

## Chunk 423

involve harmonizing these perspectives with those of users and customers. If there is
a serious disconnect in vision among stakeholders, that situation is a yellow flag to
monitor and follow up on early in the process.
CH 2. Understanding the Problem: Design Research 39

---

## Chunk 424

--- Page 70 ---
‚Ä¢ Budget and schedule‚ÄîDiscussions on this topic often provide a reality check on
the scope of the design effort and give management a decision point if user research
indicates that a greater (or lesser) scope is required.
‚Ä¢ Technical constraints and opportunities‚ÄîAnother important determinant of

---

## Chunk 425

design scope is a firm understanding of what is technically feasible given budget, time,
and technology constraints. It is also often the case that a product is being developed
to capitalize on a new technology. Understanding the opportunities underlying this
technology can help shape the product‚Äôs direction.
‚Ä¢ Business drivers‚ÄîIt is important for the design team to understand what the

---

## Chunk 426

business is trying to accomplish. This again leads to a decision point, should user
research indicate a conflict between business and user needs. The design must, as
much as possible, create a win-win situation for users, customers, and providers of the
product.
‚Ä¢ Stakeholders‚Äô perceptions of their users‚ÄîStakeholders who have relationships

---

## Chunk 427

with users (such as customer support representatives) may have important insights
that will help you formulate your user research plan. You may also find that there
are significant disconnects between some stakeholders‚Äô perceptions of their users
and what you discover in your research. This information can become an important
discussion point with management later in the process.

---

## Chunk 428

Understanding these issues and their impact on design solutions helps you as a designer
better develop a successful product. Regardless of how desirable your designs are to cus-
tomers and users, if you don‚Äôt consider the viability and feasibility of the proposed solu-
tion, it‚Äôs unlikely that the product will thrive.

---

## Chunk 429

Discussing these topics is also important to developing a common language and under-
standing among the design, management, and engineering teams. As a designer, your
job is to develop a vision that the entire team believes in. If you don‚Äôt take the time to
understand everyone‚Äôs perspective, it‚Äôs unlikely that they will feel that proposed solu-

---

## Chunk 430

tions reflect their priorities. Because these people have the responsibility and authority
to deliver the product to the real world, they are guaranteed to have important knowl-
edge and opinions. If you don‚Äôt ask for it upfront, it is likely to be forced on you later, often
in the form of a critique of your proposed solutions.

---

## Chunk 431

Keep in mind that although perspectives gathered from stakeholders are obviously
important, you shouldn‚Äôt accept them at face value. As you will later discover in user
interviews, some people may express problems by trying to propose solutions. It‚Äôs the
designer‚Äôs job to read between the lines of these suggestions, root out the real problems,

---

## Chunk 432

and propose solutions appropriate to both the business and the users.
40 Part I: Goal-Directed Design

---

## Chunk 433

--- Page 71 ---
subject matter expert (smE) interviews
Early in a design project, it is often invaluable to identify and meet with several subject
matter experts (SMEs)‚Äîauthorities on the domain within which the product will oper-
ate. This is of critical importance in domains that are highly complex or very technical,

---

## Chunk 434

or for which legal considerations exist. (The healthcare domain touches all three of these
points.)
Many SMEs were users of the product or its predecessors at one time and may now be
trainers, managers, or consultants. Often they are experts hired by stakeholders, rather
than stakeholders themselves. Similar to stakeholders, SMEs can provide valuable

---

## Chunk 435

perspectives on a product and its users. But designers should be careful to recognize
that SMEs represent a somewhat skewed perspective because often, by necessity, they
are invested in their understanding of the product/domain as it currently exists. This
in-depth knowledge of product quirks and domain limitations can be at once a boon and
a hindrance to innovative design.

---

## Chunk 436

Here are some other points to consider about using SMEs:
‚Ä¢ SMEs are often expert users. Their long experience with a product or its domain
means that they may have grown accustomed to current interactions. They may
also lean toward expert controls rather than interactions designed for perpetual
intermediates. (To understand the importance of this consideration, see Chapter 10.)

---

## Chunk 437

SMEs often are not current users of the product and may have more of a management
perspective.
‚Ä¢ SMEs are knowledgeable, but they aren‚Äôt designers. They may have many
ideas on how to improve a product. Some of these may be valid and valuable, but the
most useful pieces of information to glean from these suggestions are the causative

---

## Chunk 438

problems that lead to their proposed solutions. As with users, when you encounter a
proposed solution, ask how it would help you or the user.
‚Ä¢ SMEs are necessary in complex or specialized domains. If you are designing
for a technical domain such as medical, scientific, or financial services, you will likely
need some guidance from SMEs, unless you are one yourself. Use SMEs to gather

---

## Chunk 439

information on industry best practices and complex regulations. SME knowledge
of user roles and characteristics is critical for planning user research in complex
domains.
‚Ä¢ You will want access to SMEs throughout the design process. If your product
domain requires the use of SMEs, you will need to bring them in at different stages of

---

## Chunk 440

the design to help perform reality checks on design details. Make sure that you secure
this access in your early interviews.
CH 2. Understanding the Problem: Design Research 41

---

## Chunk 441

--- Page 72 ---
Customer interviews
It is easy to confuse users with customers. With consumer products, customers are often
the same as users, but in corporate or technical domains, users and customers rarely
describe the same sets of people. Although both groups should be interviewed, each has
its own perspective on the product that needs to be factored quite differently into an

---

## Chunk 442

eventual design.
Customers of a product are those who decide to purchase it. For consumer products,
customers frequently are also users of the product. For products aimed at children or
teens, the customers are parents or other adult supervisors of children. In the case of
most enterprise, medical, or technical products, the customer is someone very different

---

## Chunk 443

from the user‚Äîoften an executive or IT manager‚Äîwith distinct goals and needs. It‚Äôs
important to understand customers and satisfy their goals to make a product viable. It
is also important to realize that customers seldom actually use the product themselves,
and when they do, they use it quite differently from how their users do.

---

## Chunk 444

When interviewing customers, you will want to understand the following:
‚Ä¢ Their goals in purchasing the product
‚Ä¢ Their frustrations with current solutions
‚Ä¢ Their decision process for purchasing a product of the type you‚Äôre designing
‚Ä¢ Their role in installing, maintaining, and managing the product
‚Ä¢ Domain-related issues and vocabulary

---

## Chunk 445

Like SMEs, customers may have many opinions about how to improve the product‚Äôs
design. It is important to analyze these suggestions, as in the case of SMEs, to determine
what issues or problems underlie the ideas offered, because better, more integrated solu-
tions may become evident later in the design process.
user interviews

---

## Chunk 446

Users of a product should be the main focus of the design effort. They are the people who
personally use the product to accomplish a goal (not their managers or support team). If
you are redesigning or refining an existing product, it is important to speak to both cur-
rent and potential users. These are people who do not currently use the product but who

---

## Chunk 447

are good candidates for using it in the future because they have needs that the product
can meet and are in the target market for the product. Interviewing both current and
potential users illuminates the effect that experience with the current version of a prod-
uct may have on how the user behaves and thinks about things.
42 Part I: Goal-Directed Design

---

## Chunk 448

--- Page 73 ---
Here is some information we are interested in learning from users:
‚Ä¢ The context of how the product (or analogous system, if no current product exists) fits
into their lives or work flow: when, why, and how the product is or will be used
‚Ä¢ Domain knowledge from a user perspective: What do users need to know to do
their jobs?

---

## Chunk 449

‚Ä¢ Current tasks and activities: both those the current product is required to accomplish
and those it doesn‚Äôt support
‚Ä¢ Goals and motivations for using their product
‚Ä¢ Mental model: how users think about their jobs and activities, as well as what
expectations users have about the product
‚Ä¢ Problems and frustrations with current products (or an analogous system if no current
product exists)

---

## Chunk 450

user observation
Most people are incapable of accurately assessing their own behaviors,2 especially when
these behaviors are removed from the context of people‚Äôs activities. It is also true that
out of fear of seeming dumb, incompetent, or impolite, many people may avoid talking
about software behaviors that they find problematic or incomprehensible.

---

## Chunk 451

It then follows that interviews performed outside the context of the situations the
designer hopes to understand will yield less-complete and less-accurate data. You can
talk to users about how they think they behave, or you can observe their behavior first-
hand. The latter route provides superior results.
Perhaps the most effective technique for gathering qualitative user data combines inter-

---

## Chunk 452

viewing and observation, allowing the designers to ask clarifying questions and direct
inquiries about situations and behaviors they observe in real time.
Many usability professionals use technological aides such as audio or video recorders to
capture what users say and do. Interviewers must take care not to make these technol-

---

## Chunk 453

ogies too obtrusive; otherwise, the users will be distracted and behave differently than
they would when not being recorded. In our practice, we‚Äôve found that a notebook and a
digital camera allow us to capture everything we need without compromising the hon-
est exchange of information. Typically, we don‚Äôt bring out the camera until we feel that

---

## Chunk 454

we‚Äôve established a good rapport with the interview subject. Then we use it to capture
elements and artifacts in the environment that are difficult to jot down in our notes.
Video, when used with care, can sometimes be a powerful rhetorical tool for achieving
stakeholder buy-in to contentious or surprising research results. Video may also prove

---

## Chunk 455

useful in situations where note-taking is difficult, such as in a moving car.
CH 2. Understanding the Problem: Design Research 43

---

## Chunk 456

--- Page 74 ---
For consumer products, it can be hard to get a true picture of people‚Äôs behaviors, espe-
cially if they will be using the product outside or in public. For these kinds of projects,
a man-on-the-street approach to user observation can be effective. Using this approach,
the design team casually observes product-related behaviors of people in public spaces.

---

## Chunk 457

This type of technique is useful for understanding brick-and-mortar commerce-related
behaviors that may translate into online behaviors, mobile-related behaviors of all sorts,
or behaviors associated with specialized types of environments, such as theme parks
and museums.
Interviewing and observing users
Drawing on years of design research in practice, we believe that a combination of obser-

---

## Chunk 458

vation and one-on-one interviews is the most effective and efficient tool in a designer‚Äôs
arsenal for gathering qualitative data about users and their goals. The technique of
ethnographic interviews is a combination of immersive observation and directed inter-
view techniques.
Hugh Beyer and Karen Holtzblatt pioneered an ethnographic interviewing technique

---

## Chunk 459

they call contextual inquiry. Their method has, for good reason, rapidly gained traction
in the industry and provides a sound basis for qualitative user research. It is described
in detail in the first four chapters of their book, Contextual Design (Morgan Kaufmann,
1998). Contextual inquiry methods closely parallel the methods described here, but with
some subtle and important differences.

---

## Chunk 460

Contextual inquiry
Contextual inquiry, according to Beyer and Holtzblatt, is based on a master-apprentice
model of learning: observing and asking questions of the user as if she is the master
craftsman, and the interviewer the new apprentice. Beyer and Holtzblatt also enumerate
four basic principles of engaging in ethnographic interviews:

---

## Chunk 461

‚Ä¢ Context‚ÄîRather than interviewing the user in a clean white room, it is important
to interact with and observe the user in her normal work environment, or whatever
physical context is appropriate for the product. Observing users as they perform
activities and questioning them in their own environments, filled with the artifacts

---

## Chunk 462

they use each day, can bring to light the all-important details of their behaviors.
‚Ä¢ Partnership‚ÄîThe interview and observation should take the tone of a collaborative
exploration with the user, alternating between observation of work and discussion of
its structure and details.
‚Ä¢ Interpretation‚ÄîMuch of the designer‚Äôs work is reading between the lines of facts

---

## Chunk 463

gathered about users‚Äô behaviors, their environment, and what they say. The designer
44 Part I: Goal-Directed Design

---

## Chunk 464

--- Page 75 ---
must take these facts together as a whole and analyze them to uncover the design
implications. Interviewers must be careful, however, to avoid assumptions based on
their own interpretation of the facts without verifying these assumptions with users.
‚Ä¢ Focus‚ÄîRather than coming to interviews with a set questionnaire or letting the

---

## Chunk 465

interview wander aimlessly, the designer needs to subtly direct the interview so as to
capture data relevant to design issues.
Improving on contextual inquiry
Contextual inquiry forms a solid theoretical foundation for qualitative research, but
as a specific method it has some limitations and inefficiencies. The following process

---

## Chunk 466

improvements, in our experience, result in a more highly leveraged research phase that
better sets the stage for successful design:
‚Ä¢ Shorten the interview process. Contextual inquiry assumes full-day interviews
with users. The authors have found that interviews as short as one hour can be
sufficient to gather the necessary user data, provided that a sufficient number of

---

## Chunk 467

interviews (about six well-selected users for each hypothesized role or type) are
scheduled. It is much easier and more effective to find a diverse set of users who will
consent to an hour with a designer than it is to find users who will agree to spend an
entire day.
‚Ä¢ Use smaller design teams. Contextual inquiry assumes a large design team that

---

## Chunk 468

conducts multiple interviews in parallel, followed by debriefing sessions in which
the full team participates. We‚Äôve found that it is more effective to conduct interviews
sequentially with the same designers in each interview. This allows the design team to
remain small (two or three designers). But even more importantly, it means that the

---

## Chunk 469

entire team interacts with all the interviewed users directly, allowing the members to
most effectively analyze and synthesize the user data.
‚Ä¢ Identify goals first. Contextual inquiry feeds a design process that is fundamentally
task-focused. We propose that ethnographic interviews identify and prioritize user
goals before determining the tasks that relate to these goals.

---

## Chunk 470

‚Ä¢ Look beyond business contexts. The vocabulary of contextual inquiry assumes
a business product and a corporate environment. Ethnographic interviews are
also possible in consumer domains, although the focus of questioning is somewhat
different, as discussed next.
Preparing for ethnographic interviews
Ethnography is a term borrowed from anthropology; it means the systematic and immer-

---

## Chunk 471

sive study of human cultures. In anthropology, ethnographic researchers spend years
living in the cultures they study and record. Ethnographic interviews take the spirit of
CH 2. Understanding the Problem: Design Research 45

---

## Chunk 472

--- Page 76 ---
this type of research and apply it on a micro level. Rather than trying to understand
behaviors and social rituals of an entire culture, the goal is to understand the behaviors
and rituals of people interacting with individual products.
Identifying candidates
Because the designers must capture an entire range of user behaviors regarding a prod-

---

## Chunk 473

uct, it is critical that the designers identify an appropriately diverse sample of users and
user types when planning a series of interviews. Based on information gleaned from
stakeholders, SMEs, and literature reviews, designers need to create a hypothesis that
serves as a starting point in determining what sorts of users and potential users to
interview.
The persona hypothesis

---

## Chunk 474

We label this starting point the persona hypothesis, because it is the first step toward
identifying and synthesizing personas‚Äîthe behavioral user models we will discuss in
detail in the next chapter. The persona hypothesis should be based on likely behavior
patterns and the factors that differentiate these patterns, not purely on demographics.

---

## Chunk 475

It is often the case with consumer products that demographics are used as screening
criteria to select interview subjects. But even in this case, they should serve as a proxy
for a hypothesized behavior pattern.
The nature of a product‚Äôs domain makes a significant difference in how a persona
hypothesis is constructed. Business users are often quite different from consumer users

---

## Chunk 476

in their behavior patterns and motivations, and different techniques are used to build
the persona hypothesis in each case.
The persona hypothesis is a first try at defining the different kinds of users (and some-
times customers) for a product. The hypothesis is the basis for initial interview planning;
as interviews proceed, new interviews may be required if the data indicates the exis-

---

## Chunk 477

tence of user types not originally identified.
The persona hypothesis attempts to address, at a high level, these three questions:
‚Ä¢ What different sorts of people might use this product?
‚Ä¢ How might their needs and behaviors vary?
‚Ä¢ What ranges of behavior and types of environments need to be explored?
46 Part I: Goal-Directed Design

---

## Chunk 478

--- Page 77 ---
roles in business and consumer domains
For business products, roles‚Äîcommon sets of tasks and information needs related to
distinct classes of users‚Äîprovide an important initial organizing principle. For exam-
ple, for an office phone system, we might find these rough roles:
‚Ä¢ People who make and receive calls from their desks

---

## Chunk 479

‚Ä¢ People who travel a lot and need to access the phone system remotely
‚Ä¢ Receptionists who answer the phone for many people
‚Ä¢ People who technically administer the phone system
In business and technical contexts, roles often map roughly to job descriptions. There-
fore, it is relatively easy to get a reasonable first cut of user types to interview by under-

---

## Chunk 480

standing the kinds of jobs held by users (or potential users) of the system.
Unlike business users, consumers don‚Äôt have concrete job descriptions, and their use of
products may cross multiple contexts. Therefore, it often isn‚Äôt meaningful to use roles
as an organizing principle for the persona hypothesis for a consumer product. Rather,

---

## Chunk 481

it is often the case that you will see the most significant patterns emerge from users‚Äô
attitudes and aptitudes, lifestyle choices, or stage of life, all of which can influence their
behaviors.
behavioral and demographic variables
In addition to roles, a persona hypothesis should be based on variables that help dif-

---

## Chunk 482

ferentiate between various kinds of users based on their needs and behaviors. This is
often the most useful way to distinguish between different types of users (and it forms
the basis for the persona-creation process described in the next chapter). Despite the
fact that these variables can be difficult to fully anticipate without research, they often

---

## Chunk 483

become the basis of the persona hypothesis for consumer products. For example, for an
online store, we might identify several ranges of behavior concerning shopping:
‚Ä¢ Frequency of shopping (from frequent to infrequent)
‚Ä¢ Desire to shop (from loves to shop to hates to shop)
‚Ä¢ Motivation to shop (from bargain hunting to searching for just the right item)

---

## Chunk 484

Although consumer user types can often be roughly defined by the combination of
behavioral variables they map to, behavioral variables are also important for identify-
ing types of business and technical users. People within a single business-role defini-
tion may have different needs and motivations. Behavioral variables can capture this,
although often not until user data has been gathered.

---

## Chunk 485

CH 2. Understanding the Problem: Design Research 47

---

## Chunk 486

--- Page 78 ---
Given the difficulty in accurately anticipating behavioral variables before user data is
gathered, another helpful approach in building a persona hypothesis is making use of
demographic variables. When planning your interviews, you can use market research to
identify ages, locations, gender, and incomes of the target markets for the product. Inter-

---

## Chunk 487

viewees should be distributed across these demographic ranges in the hope of interview-
ing a sufficiently diverse group of people to identify the significant behavior patterns.
Domain expertise versus technical expertise
One important type of behavioral distinction is the difference between technical exper-
tise (knowledge of digital technology) and domain expertise (knowledge of a specialized

---

## Chunk 488

subject area pertaining to a product). Different users will have varying amounts of tech-
nical expertise. Similarly, some users of a product may be less expert in their knowledge
of the product‚Äôs domain (for example, accounting knowledge in the case of a general
ledger application). Thus, depending on who the design target of the product is, domain

---

## Chunk 489

support may be a necessary part of the product‚Äôs design, as well as technical ease of
use. A relatively na√Øve user will likely never be able to use more than a small subset of a
domain-specific product‚Äôs functions without domain support provided in the interface.
If na√Øve users are part of the target market for a domain-specific product, care must be
taken to support domain-na√Øve behaviors.

---

## Chunk 490

Environmental considerations
A final consideration, especially in the case of business products, is the cultural differ-
ences between organizations in which the users are employed. At small companies, for
example, workers tend to have a broader set of responsibilities and more interpersonal
contact. Huge companies often have multiple layers of bureaucracy, and their workers

---

## Chunk 491

tend to be highly specialized. Here are some examples of these environmental variables:
‚Ä¢ Company size (from small to multinational)
‚Ä¢ Company location (North America, Europe, Asia, and so on)
‚Ä¢ Industry/sector (electronics manufacturing, consumer packaged goods, and so on)
‚Ä¢ IT presence (from ad hoc to draconian)
‚Ä¢ Security level (from lax to tight)

---

## Chunk 492

Like behavioral variables, these may be difficult to identify without some domain
research, because patterns vary significantly by industry and geographic region.
48 Part I: Goal-Directed Design

---

## Chunk 493

--- Page 79 ---
Putting together a plan
After you have created a persona hypothesis, complete with potential roles and behav-
ioral, demographic, and environmental variables, you need to create an interview plan
that can be communicated to the person in charge of coordinating and scheduling the
interviews.
In our practice, we‚Äôve observed that, for enterprise or professional products, each pre-

---

## Chunk 494

sumed behavioral pattern requires about a half-dozen interviews to verify or refute
(occasionally more if a domain is particularly complex). What this means in practice is
that each identified role, behavioral variable, demographic variable, and environmental
variable identified in the persona hypothesis should be explored in four to six interviews
(or occasionally more, as mentioned earlier).

---

## Chunk 495

However, these interviews can overlap. Suppose we believe that use of an enterprise
product may differ by geographic location, industry, and company size. Research at a
single small electronics manufacturer in Taiwan would allow us to cover several vari-
ables at once. By being clever about mapping variables to interviewee-screening profiles,
you can keep the interviews to a manageable number.

---

## Chunk 496

Consumer products typically have much more variation in behavior, so more inter-
views typically are required to really delineate the differences. A good rule of thumb is
to double the numbers just discussed: 8 to 12 interviews for each user type postulated
in the persona hypothesis. As before, a complex consumer product may occasionally

---

## Chunk 497

require even more interviews to accurately capture the range of behaviors and motiva-
tions. Something to keep in mind with consumer products is that lifestyle choices and
life stages (single, married, young children, older children, empty nest) can multiply the
interviews for certain kinds of products.
Conducting ethnographic interviews

---

## Chunk 498

After the persona hypothesis has been formulated and an interview plan has been
derived from it, you are ready to interview‚Äîassuming you get access to interviewees!
While formulating the interview plan, designers should work closely with project stake-
holders who have access to users. Stakeholder involvement generally is the best way to

---

## Chunk 499

make interviews happen, especially for business and technical products.
For enterprise or technical products, it is often straightforward to work with stakehold-
ers to help you get in touch with a robust set of interviewees. This can be more chal-
lenging for consumer products (especially if the company you are working with doesn‚Äôt
currently have a good relationship with its users).

---

## Chunk 500

CH 2. Understanding the Problem: Design Research 49

---

## Chunk 501

--- Page 80 ---
If stakeholders can‚Äôt help you get in touch with users, you can contact a market or usabil-
ity research firm that specializes in finding people for surveys and focus groups. These
firms are useful for reaching consumers with diverse demographics. The difficulty with
this approach is that it can sometimes be challenging to find interviewees who will per-

---

## Chunk 502

mit you to interview them in their homes or places of work.
As a last alternative for consumer products, designers can recruit friends and relatives.
This makes it easier to observe the interviewees in a natural environment but also is
quite limiting as far as diversity of demographic and behavioral variables are concerned.
Interview teams and timing

---

## Chunk 503

The authors favor a team of two designers per interview. The moderator drives the inter-
view and takes light notes, and the facilitator takes detailed notes and looks for any
holes in the questioning. These roles can switch halfway through the interview if the
team agrees. One hour per user interviewed is often sufficient, except in the case of com-

---

## Chunk 504

plex domains such as medical, scientific, and financial services. These may require more
time to fully understand what the user is trying to accomplish. Be sure to budget travel
time between interview sites. This is especially true of consumer interviews in residen-
tial neighborhoods, or interviews that involve ‚Äúshadowing‚Äù users as they interact with

---

## Chunk 505

a (usually mobile) product while moving from place to place. Teams should try to limit
interviews to six per day. This will give them adequate time for debriefing and strategiz-
ing between interviews and will keep the interviewers from getting fatigued.
Phases of ethnographic interviews
A complete set of ethnographic interviews for a project can be grouped into three dis-

---

## Chunk 506

tinct, chronological phases. The approach of the interviews in each successive phase is
subtly different from the previous one, reflecting the growing knowledge of user behav-
iors that results from each additional interview. Focus tends to be broad at the start,
aimed at gross structural and goal-oriented issues, and more narrow for interviews at

---

## Chunk 507

the end of the cycle, zooming in on specific functions and task-oriented issues.
‚Ä¢ Early interviews are exploratory in nature and focus on gathering domain
knowledge from the user‚Äôs point of view. Broad, open-ended questions are common,
with a lesser degree of drilldown into details.
‚Ä¢ Middle interviews are where designers begin to see patterns of use and ask open-

---

## Chunk 508

ended and clarifying questions to help connect the dots. Questions in general are more
focused on domain specifics, now that the designers have absorbed the domain‚Äôs basic
rules, structures, and vocabularies.
50 Part I: Goal-Directed Design

---

## Chunk 509

--- Page 81 ---
‚Ä¢ Late interviews confirm previously observed patterns, further clarifying user
roles and behaviors and making fine adjustments to assumptions about task and
information needs. More closed-ended questions are used, tying up loose ends in the
data.
After you have an idea who your interviewees will be, it can be useful to work with stake-

---

## Chunk 510

holders to schedule individuals most appropriate for each phase in the interview cycle.
For example, in a complex, technical domain it is often a good idea to perform early
interviews with more patient and articulate interview subjects. In some cases, you may
also want to loop back and interview this particularly knowledgeable and articulate

---

## Chunk 511

subject again at the end of the interview cycle to address any topics you were unaware of
during your initial interview.
basic methods
The basic methods of ethnographic interviewing are simple, straightforward, and very
low-tech. Although the nuances of interviewing subjects take some time to master, any
practitioner should, if he or she follows these suggestions, be rewarded with a wealth of

---

## Chunk 512

useful qualitative data:
‚Ä¢ Interview where the interaction happens.
‚Ä¢ Avoid a fixed set of questions.
‚Ä¢ Assume the role of an apprentice, not an expert.
‚Ä¢ Use open-ended and closed-ended questions to direct the discussion.
‚Ä¢ Focus on goals first and tasks second.
‚Ä¢ Avoid making the user a designer.
‚Ä¢ Avoid discussing technology.
‚Ä¢ Encourage storytelling.
‚Ä¢ Ask for a show-and-tell.

---

## Chunk 513

‚Ä¢ Avoid leading questions.
We describe each of these methods in more detail in the following sections.
Interview where the interaction happens
Following the first principle of contextual inquiry, it is of critical importance that sub-
jects be interviewed in the places where they actually use the products. Not only does this

---

## Chunk 514

allow the interviewers to witness the product being used, but it also gives the interview
CH 2. Understanding the Problem: Design Research 51

---

## Chunk 515

--- Page 82 ---
team access to the environment in which the interaction occurs. This can give you tre-
mendous insight into product constraints and user needs and goals.
Observe the environment closely: It is likely to be crawling with clues about tasks the
interviewee might not have mentioned. Notice, for example, the kind of information he

---

## Chunk 516

needs (papers on his desk or adhesive notes on his screen border), inadequate systems
(cheat sheets and user manuals), the frequency and priority of tasks (inbox and outbox),
and the kind of work flows he follows (memos, charts, calendars). Don‚Äôt snoop without
permission, but if you see something that looks interesting, ask your interviewee to dis-
cuss it.
Avoid a fixed set of questions

---

## Chunk 517

If you approach ethnographic interviews with a fixed questionnaire, you not only run the
risk of alienating the interview subject, but you also can cause the interviewers to miss
out on a wealth of valuable user data. The entire premise of ethnographic interviews
(and contextual inquiry) is that we as interviewers don‚Äôt know enough about the domain

---

## Chunk 518

to presuppose the questions that need asking. We must learn what is important from
the people we talk to. That said, it‚Äôs certainly useful to have types of questions in mind.
Depending on the domain, it may also be useful to have a standardized set of topics you
want to be sure to cover during your interview. This list of topics may evolve over the

---

## Chunk 519

course of your interviews, but it will help you ensure that you gather enough details from
each interview that you can recognize significant behavior patterns.
Here are some goal-oriented questions to consider:
‚Ä¢ Goals‚ÄîWhat makes a good day? A bad day?
‚Ä¢ Opportunity‚ÄîWhat activities currently waste your time?
‚Ä¢ Priorities‚ÄîWhat is most important to you?
‚Ä¢ Information‚ÄîWhat helps you make decisions?

---

## Chunk 520

Another useful type of question is the system-oriented question:
‚Ä¢ Function‚ÄîWhat are the most common things you do with the product?
‚Ä¢ Frequency‚ÄîWhat parts of the product do you use most?
‚Ä¢ Preference‚ÄîWhat are your favorite aspects of the product? What drives you crazy?
‚Ä¢ Failure‚ÄîHow do you work around problems?
‚Ä¢ Expertise‚ÄîWhat shortcuts do you employ?
52 Part I: Goal-Directed Design

---

## Chunk 521

--- Page 83 ---
For business products, work flow-oriented questions can be helpful:
‚Ä¢ Process‚ÄîWhat did you do when you first came in today? What did you do after that?
‚Ä¢ Occurrence and recurrence‚ÄîHow often do you do this? What things do you do
weekly or monthly, but not every day?
‚Ä¢ Exception‚ÄîWhat constitutes a typical day? What would be an unusual event?

---

## Chunk 522

To better understand user motivations, you can employ attitude-oriented questions:
‚Ä¢ Aspiration‚ÄîWhat do you see yourself doing five years from now?
‚Ä¢ Avoidance‚ÄîWhat would you prefer not to do? What do you procrastinate on?
‚Ä¢ Motivation‚ÄîWhat do you enjoy most about your job (or lifestyle)? What do you
always tackle first?
Assume the role of an apprentice, not an expert

---

## Chunk 523

During your interviews, you want to shed your expert designer or consultant cap and
take on the role of the apprentice. Your goal is to omnivorously and nonjudgmentally
absorb everything your interviewees want to tell you and to encourage them to actively
engage in detailed, thoughtful explanations. Don‚Äôt be afraid to ask na√Øve questions. They

---

## Chunk 524

put people at ease, and you‚Äôd be surprised how often seemingly silly questions end up
pushing past assumptions and lead to real insights. Be a sympathetic and receptive lis-
tener, and you‚Äôll find that people will be willing to share almost any kind of information
with you.
use open-ended and closed-ended questions to direct the discussion

---

## Chunk 525

As Kim Goodwin discusses in her excellent book, Designing for the Digital Age (Wiley,
2009), the use of open-ended and closed-end questions allows interviewers to help keep
user interviews productive and on the right track.
Open-ended questions encourage detailed responses from the interviewee. Use these
types of questions to elicit more detail about a topic on which you need to gather more

---

## Chunk 526

information. Typical open-ended questions begin with ‚ÄúWhy,‚Äù ‚ÄúHow,‚Äù or ‚ÄúWhat.‚Äù
Closed-ended questions encourage a brief response. Use closed-ended questions to shut
down a line of inquiry or to get an interviewee back on track if he has begun to take the
interview in an unproductive direction. Closed-ended questions generally expect a yes

---

## Chunk 527

or no answer and typically begin with ‚ÄúDid you,‚Äù ‚ÄúDo you,‚Äù or ‚ÄúWould you.‚Äù
CH 2. Understanding the Problem: Design Research 53

---

## Chunk 528

--- Page 84 ---
After an interviewee answers your closed-ended question, usually a natural pause in the
conversation occurs. Then you can redirect the discussion to a new line of questioning
using a new open-ended question.
Focus on goals first and tasks second
Unlike contextual inquiry and the majority of other qualitative research methods, the

---

## Chunk 529

first priority of ethnographic interviewing is understanding the why of users. You need to
know what motivates the behaviors of individuals in different roles and how they hope to
ultimately accomplish this goal, not the what of the tasks they perform. Understanding
the tasks is important, and the tasks must be recorded diligently. But these tasks will

---

## Chunk 530

ultimately be restructured to better match user goals in the final design.
Avoid making the user a designer
Guide the interviewee toward examining problems and away from expressing solu-
tions. Most of the time, those solutions reflect the interview subject‚Äôs personal priorities.
Although they sound good to him, they tend to be shortsighted and idiosyncratic. They

---

## Chunk 531

also lack the balance and refinement that an interaction designer can bring to a solu-
tion based on adequate research and years of experience. That said, a proposed design
solution can be a useful jumping-off point to discuss a user‚Äôs goals and the problems he
encounters with the current systems. If a user blurts out an interesting idea, ask, ‚ÄúWhat

---

## Chunk 532

problem would that solve for you?‚Äù or ‚ÄúWhy would that be a good solution?‚Äù
Avoid discussing technology
Just as you don‚Äôt want to treat the user like a designer, you also don‚Äôt want to treat him
like a software engineer. Discussing technology is meaningless without first understand-
ing the purpose underlying any technical decisions. In the case of technical or scientific

---

## Chunk 533

products, where technology is always an issue, distinguish between domain-related
technology and product-related technology, and steer away from the latter. If an inter-
view subject insists on talking about how the product should be implemented, return to
his goals and motivations by asking, ‚ÄúHow would that help you?‚Äù
Encourage storytelling

---

## Chunk 534

Far more useful than asking users for design advice is encouraging them to tell specific
stories about their experiences with a product (whether an old version of the one you‚Äôre
redesigning, or an analogous product or process). Ask them how they use it, what they
think of it, who else they interact with when using it, where they go with it, and so forth.

---

## Chunk 535

Detailed stories of this kind usually are the best way to understand how users relate to
54 Part I: Goal-Directed Design

---

## Chunk 536

--- Page 85 ---
and interact with products. Encourage stories that deal with typical cases and also more
exceptional ones.
Ask for a show-and-tell
After you have a good idea of the flow and structure of a user‚Äôs activities and interac-
tions, and you have exhausted other questions, it is often useful to ask the interviewee

---

## Chunk 537

for a show-and-tell or grand tour of artifacts related to the design problem. These can
be domain-related artifacts, software interfaces, paper systems, tours of the work envi-
ronment, or ideally all of these. Be sure not to just record the artifacts themselves (dig-
ital or video cameras are handy at this stage); also pay attention to how the interviewee

---

## Chunk 538

describes them. Be sure to ask plenty of clarifying questions as well.
As you look to capture artifacts from the user‚Äôs environment, be on particular lookout
for signs of unmet needs or failures in the existing design. For example, in one of our
past projects, we were engaged to redesign the software interface as an expensive piece

---

## Chunk 539

of scientific equipment. As we interviewed users‚Äîwho were primarily chemists‚Äîwe
observed that next to every machine we looked at was a notebook filled with details of
every experiment run on that machine: which scientist did it, what it was about, and
when it was run. It turned out that although the equipment recorded detailed results

---

## Chunk 540

for each experiment, it recorded no other information about the experiment other than
a sequential ID number. If the paper notebook were lost, the experimental results would
be nearly useless, because the ID number meant nothing to the users. This was clearly
an unmet user need!
Avoid leading questions
One important thing to avoid in interviews is the use of leading questions. Just as in a

---

## Chunk 541

courtroom, where lawyers can, by virtue of their authority, bias witnesses by suggesting
answers to them, designers can inadvertently bias interview subjects by implicitly (or
explicitly) suggesting solutions or opinions about behaviors. Here are some examples of
leading questions:
‚Ä¢ Would feature X help you?
‚Ä¢ You like X, don‚Äôt you?
‚Ä¢ Do you think you‚Äôd use feature X if it were available?

---

## Chunk 542

‚Ä¢ Does X seem like a good idea to you?
CH 2. Understanding the Problem: Design Research 55

---

## Chunk 543

--- Page 86 ---
After the interviews
After each interview, teams compare notes and discuss any particularly interesting
trends observed or specific points brought up in the most recent interview. If they have
the time, they should also look back at old notes to see whether unanswered questions
from other interviews and research have been answered properly. This information

---

## Chunk 544

should be used to strategize about the approach to take in subsequent interviews.
After the interview process is finished, the design team should make a pass through all
the notes, marking or highlighting trends and patterns in the data. This is very useful
for the next step of creating personas from the cumulative research. This marking, when

---

## Chunk 545

it also involves organizing the marked responses into topic groups, is called coding by
serious ethnographers. Although that level of organization usually is overkill, it may be
useful in particularly complex or nuanced domains.
If it is helpful, the team can create a binder of the notes, review any video recordings, and

---

## Chunk 546

print artifact images to place in the binder or on a public surface, such as a wall, where
they are all visible simultaneously. This will be useful in later design phases.
other Types of Qualitative research
The majority of this chapter has focused on the qualitative research techniques we
employ to construct the robust user and domain models described in the next chapter.

---

## Chunk 547

Design and usability professionals incorporate many other forms of research, ranging
from detailed task analysis to focus groups and usability tests. While these activities
may indeed contribute to the creation of useful and desirable products, we have found
that the Goal-Directed approach described earlier in this chapter provides the most

---

## Chunk 548

value to the process of digital product design. Put simply, the Goal-Directed approach
helps answer questions about the product at both the big-picture and functional-detail
level with a relatively small amount of effort and expense. No other research technique
we‚Äôre aware of can claim this.
If you‚Äôre interested in exploring alternative design research techniques, Observing the

---

## Chunk 549

User Experience (Morgan Kaufmann, 2012) by Elizabeth Goodman, Mike Kuniavsky, and
Andrea Moed is an excellent resource. It describes a wide range of user research meth-
ods that can be used at many points in the design and development process.
In the remainder of this chapter, we‚Äôll discuss a few of the more prominent of these

---

## Chunk 550

research methods and how they can fit into the overall design and development effort.
56 Part I: Goal-Directed Design

---

## Chunk 551

--- Page 87 ---
Focus groups
Marketing organizations are particularly fond of gathering user data via focus groups.
Representative users, usually chosen to match previously identified demographic seg-
ments of the target market, are gathered in a room and asked a structured set of ques-
tions and provided a structured set of choices. Often the meeting is recorded on audio

---

## Chunk 552

or video media for later reference. Focus groups are a standard technique in traditional
product marketing. They are also quite useful for gauging initial reactions to a product‚Äôs
form‚Äîits visual appearance or industrial design. Focus groups can also gather reactions
to a product that the respondents have been using for some time.

---

## Chunk 553

Although focus groups may appear to provide the requisite user contact, the method is
in many ways inappropriate as an interaction design tool. Focus groups excel at eliciting
information about products that people own or are willing (or unwilling) to purchase,
but they are weak at gathering data about what people actually do with those products,

---

## Chunk 554

or how and why they do it. Also, because they are a group activity, focus groups tend to
end up at consensus. The majority or loudest opinion often becomes the group opin-
ion. This is counterproductive for an interaction design process, where designers must
understand all the different patterns of behavior a product must address. Focus groups

---

## Chunk 555

tend to stifle exactly the diversity of behavior and opinion that interaction designers
must accommodate.
usability testing
Usability testing (also known, somewhat unfortunately, as ‚Äúuser testing‚Äù) is a collection
of techniques used to measure characteristics of a user‚Äôs interaction with a product. The
goal usually is to assess that product‚Äôs usability. Typically, usability testing is focused

---

## Chunk 556

on measuring how well users can complete specific, standardized tasks, as well as what
problems they encounter in doing so. Results often reveal areas where users have prob-
lems understanding and using the product, as well as places where users are more likely
to be successful.
Usability testing requires a fairly complete and coherent design artifact to test against.

---

## Chunk 557

Whether you are testing production software, a clickable prototype, or even a paper pro-
totype, the point of the test is to validate a product design. This means that the appro-
priate place for usability testing is quite late in the design cycle, after there is a coherent
concept and sufficient detail to generate such prototypes. We discuss evaluative usabil-

---

## Chunk 558

ity testing as part of design refinement in Chapter 5.
A case could be made for usability testing at the beginning of a redesign effort. The tech-
nique is certainly capable of finding opportunities for improvement in such a project.
However, we find that we can better assess product inadequacies through our qualitative
CH 2. Understanding the Problem: Design Research 57

---

## Chunk 559

--- Page 88 ---
studies. Perhaps the budget is limited in a way that allows usability testing only once in a
product design initiative. If so, we find much more value in performing the tests after we
have a candidate solution, as a means of testing the specific elements of the new design.
Card sorting
Popularized by information architects, card sorting is a technique to understand how

---

## Chunk 560

users organize information and concepts. Although the technique has a number of vari-
ations, it is typically performed by asking users to sort a deck of cards, each containing a
piece of functionality or information related to the product or website. The tricky part is
analyzing the results, either by looking for trends or using statistical analysis to uncover
patterns and correlations.

---

## Chunk 561

While this can be a valuable tool to uncover one aspect of a user‚Äôs mental model, the
technique assumes that the subject has refined organizational skills and that how he
sorts a group of abstract topics will correlate to how he will end up wanting to use your
product. In our experience, this is not always the case.

---

## Chunk 562

One way to overcome these potential challenges is to ask the users to sequence the cards
based on the completion of tasks that the product is being designed to support. Another
way to enhance the value of a card sort study is to debrief the subject afterwards to
understand any organizational principles he has employed in his sort (again, attempting
to understand his mental model).

---

## Chunk 563

Ultimately, we believe that properly conducted open-ended interviews can explore these
aspects of the user‚Äôs mental model more effectively. By asking the right questions and
paying close attention to how a subject explains his activities and the domain, you can
decipher how he mentally associates different bits of functionality and information.
Task analysis

---

## Chunk 564

Task analysis refers to a number of techniques that involve using either questionnaires
or open-ended interviews to develop a detailed understanding of how people currently
perform specific tasks. Such a study is concerned with the following:
‚Ä¢ Why the user is performing the task (that is, the underlying goal)
‚Ä¢ The frequency and importance of the task

---

## Chunk 565

‚Ä¢ Cues‚Äîwhat initiates or prompts the execution of the task
‚Ä¢ Dependencies‚Äîwhat must be in place to perform the task, as well as what is dependent
on the completion of the task
‚Ä¢ People who are involved, and their roles and responsibilities
58 Part I: Goal-Directed Design

---

## Chunk 566

--- Page 89 ---
‚Ä¢ Specific actions that are performed
‚Ä¢ Decisions that are made
‚Ä¢ Information that is used to support decisions
‚Ä¢ What goes wrong‚Äîerrors and exception cases
‚Ä¢ How errors and exceptions are corrected
Once the questionnaires are compiled or the interviews are completed, tasks are for-
mally decomposed and analyzed. Typically they are incorporated into a flowchart or

---

## Chunk 567

similar diagram that communicates the relationships between actions and often the
relationships between people and processes.
We‚Äôve found that this type of inquiry should be incorporated into ethnographic user
interviews. Furthermore, as we‚Äôll discuss in the next chapter, the analysis activities are
a useful part of our modeling activities. Task analysis is a critical way of understanding

---

## Chunk 568

how users currently do something, as well as identifying pain points and opportunities
for improvement. However, task analysis does little to illuminate users‚Äô goals. How peo-
ple do things today is often a product of the obsolete systems and organizations they are
forced to interact with. How people do things often bears little resemblance to how they

---

## Chunk 569

would like to do things or how they can be most effective.
research Is Critical to good Design
User research is the critical foundation on which your designs are built. Take the time to
plan your user research and match the appropriate technique to the appropriate place
in your development cycle. Your product will benefit, and you‚Äôll avoid wasting time and

---

## Chunk 570

resources. Putting a product to the test in a lab to see whether it passes or fails may pro-
vide a lot of data, but not necessarily a lot of value. Using ethnographic interviews at the
beginning of the process allows you, as a designer, to truly understand your users, their
needs, and their motivations. Once you have a solid design concept based on qualitative

---

## Chunk 571

user research and the models that research feeds, your usability testing will become an
even more efficient tool for judging the effectiveness of design choices you have made.
Goal-Directed design research allows you to do the heavy lifting early in the process.
Notes
1. Sch√∂n, D. and Bennett, J., 1996
2. Pinker, 1999
CH 2. Understanding the Problem: Design Research 59

---

## Chunk 572

--- Page 91 ---
Ch 3
moDElIng usErs:
PErsonAs AnD goAls
Once you have spent some time out in the field investigating your users‚Äô lives, motiva-
tions, and environs, the question naturally arises: How do you use all this great research
data to forge a successful product design? You have notebooks full of conversations and

---

## Chunk 573

observations, and it is very likely that each person you spoke to was slightly different
from the others. It is hard to imagine digging through hundreds of pages of notes every
time you need to make a design decision. Even if you had the time to do so, it isn‚Äôt entirely
obvious how these notes should inform your thinking. How do you make sense of them
and prioritize?

---

## Chunk 574

We solve this problem by applying the powerful concept of a model.
why model?
Models are used in the natural and social sciences to represent complex phenomena
with a useful abstraction. Good models emphasize the salient features of the structures
and relationships they represent and de-emphasize the less significant details. Because

---

## Chunk 575

we are designing for users, it is important that we can understand and visualize the
salient aspects of their relationships with each other, what they want, with their social
and physical environments, and, of course, with the products we hope to design.

---

## Chunk 576

--- Page 92 ---
Thus, much as economists create models to describe the behavior of markets, and phys-
icists create models to describe the behavior of subatomic particles, we have found that
using our research to create descriptive models of users is a uniquely powerful tool for
interaction design. We call these user models personas.

---

## Chunk 577

Personas provide us with a precise way of thinking and communicating about how
groups of users behave, how they think, what they want to accomplish, and why. Per-
sonas are not real people, but they are assembled from the behaviors and motivations
of the many actual users we encounter in our research. In other words, personas are

---

## Chunk 578

composite archetypes based on behavior patterns uncovered during the course of our
research, which we formalize for the purpose of informing the product design. By using
personas, we can develop an understanding of our users‚Äô goals in specific contexts‚Äîa
critical tool for ideating and validating design concepts.

---

## Chunk 579

Personas, like many powerful tools, are simple in concept but must be applied with con-
siderable nuance and sophistication. It is not enough to whip up a couple of user profiles
based on stereotypes and generalizations, nor is it particularly useful to attach a stock
photograph to a job title and call it a ‚Äúpersona.‚Äù For personas to be effective tools for

---

## Chunk 580

design, considerable rigor and finesse must be applied during the process of identifying
the significant and meaningful patterns in user behavior and determining how these
behaviors translate into archetypes that accurately represent the appropriate cross sec-
tion of users.
Although other useful models can serve as tools for the interaction designer, such as

---

## Chunk 581

work flow models and physical models, we‚Äôve found that personas are the most effective
and fundamental of these tools. Also, it is often possible to incorporate the best of these
other modeling techniques into the structure of your personas.
This chapter focuses primarily on personas and their goals. Other models are considered
briefly at the end of the chapter.
The Power of Personas

---

## Chunk 582

To create a product that must satisfy a diverse audience of users, logic might tell you to
make its functionality as broad as possible to accommodate the most people. This logic,
however, is flawed. The best way to successfully accommodate a variety of users is to
design for specific types of individuals with specific needs.

---

## Chunk 583

When you broadly and arbitrarily extend a product‚Äôs functionality to include many
constituencies, you increase the cognitive load and navigational overhead for all users.
Facilities that may please some users will likely interfere with the satisfaction of others,
as shown in Figure 3-1.
62 Part I: Goal-Directed Design

---

## Chunk 584

--- Page 93 ---
Figure 3-1: If you try to design an automobile that pleases every possible driver, you end up with a
car with every possible feature that pleases nobody. Software today is too often designed to please
too many users, resulting in low user satisfaction. Figure 3-2 provides an alternative approach.
Alesandro‚Äôs goals Marge‚Äôs goals Dale‚Äôs goals
‚Ä¢ Go fast ‚Ä¢ Be safe ‚Ä¢ Haul big loads

---

## Chunk 585

‚Ä¢ Have fun ‚Ä¢ Be comfortable ‚Ä¢ Be reliable
Figure 3-2: By designing different cars for different people with different specific goals, we can cre-
ate designs that other people with needs similar to our target drivers also find satisfying. The same
holds true for the design of digital products and software.
CH 3. Modeling Users: Personas and Goals 63

---

## Chunk 586

--- Page 94 ---
The key to this approach is to first choose the right individuals to design for‚Äîusers whose
needs best represent the needs of a larger set of key constituents (see Figure 3-2). Then you
prioritize these individuals so that the needs of the most important users are met with-
out compromising our ability to meet the needs of secondary users. Personas provide a

---

## Chunk 587

powerful tool for communicating about different types of users and their needs and then
deciding which users are the most important to target in the design of form and behavior.
strengths of personas as a design tool
The persona is a powerful, multipurpose design tool that helps overcome several problems
that plague the development of digital products. Personas help designers do the following:

---

## Chunk 588

‚Ä¢ Determine what a product should do and how it should behave. Persona goals and
tasks provide the foundation for the design effort.
‚Ä¢ Communicate with stakeholders, developers, and other designers. Personas provide
a common language for discussing design decisions and also help keep the design
centered on users at every step in the process.

---

## Chunk 589

‚Ä¢ Build consensus and commitment to the design. With a common language comes a
common understanding. Personas reduce the need for elaborate diagrammatic models;
it‚Äôs easier to understand the many nuances of user behavior through the narrative
structures that personas employ. Put simply, because personas resemble real people,
they‚Äôre easier to relate to than feature lists and flowcharts.

---

## Chunk 590

‚Ä¢ Measure the design‚Äôs effectiveness. Design choices can be tested on a persona in the
same way that they can be shown to a real user during the formative process. Although
this doesn‚Äôt replace the need to test with real users, it provides a powerful reality-check
tool for designers trying to solve design problems. This allows design iteration to occur

---

## Chunk 591

rapidly and inexpensively at the whiteboard, and it results in a far stronger design
baseline when it‚Äôs time to test with actual people.
‚Ä¢ Contribute to other product-related efforts such as marketing and sales plans. The authors
have seen personas repurposed across their clients‚Äô organizations, informing marketing
campaigns, organizational structure, customer support centers, and other strategic

---

## Chunk 592

planning activities. Business units outside of product development want sophisticated
knowledge of a product‚Äôs users and typically view personas with great interest.
Design pitfalls that personas help avoid
Personas also can resolve three design issues that arise during product development:
‚Ä¢ The elastic user
‚Ä¢ Self-referential design
‚Ä¢ Edge cases
64 Part I: Goal-Directed Design

---

## Chunk 593

--- Page 95 ---
The elastic user
Although satisfying the users of our products is our goal, the term user causes trouble
when applied to specific design problems and contexts. Its imprecision makes it danger-
ous as a design tool, because every person on a product team has his own conceptions
of who the user is and what the user needs. When it‚Äôs time to make product decisions,

---

## Chunk 594

this ‚Äúuser‚Äù becomes elastic, conveniently bending and stretching to fit the opinions and
presuppositions of whoever is talking.
If the product development team finds it convenient to use a confusing tree control con-
taining nested, hierarchical folders to provide access to information, they might define
the user as a computer-literate ‚Äúpower user.‚Äù Other times, when it is more convenient

---

## Chunk 595

to step through a difficult process with a wizard, they define the user as an unsophisti-
cated first-time user. Designing for the elastic user gives a product team license to build
what it pleases, while still apparently serving ‚Äúthe user.‚Äù Of course, our goal should be to
design products that appropriately meet the needs of real users. Real users‚Äîand the per-

---

## Chunk 596

sonas representing them‚Äîare not elastic, but instead have specific requirements based
on their goals, abilities, and contexts.
Even focusing on user roles or job titles rather than specific archetypes can introduce
unproductive elasticity to the focus of design activities. For example, in designing clin-
ical products, it might be tempting to lump together all nurses as having similar needs.

---

## Chunk 597

However, if you have any experience in a hospital, you know that trauma nurses, pediat-
ric intensive-care nurses, and operating room nurses are quite different from each other,
each with their own attitudes, aptitudes, needs, and motivations. Nurses new to the role
look at their work differently than nurses who are veteran to the job. A lack of precision

---

## Chunk 598

about the user can lead to a lack of clarity about how the product should behave.
self-referential design
Self-referential design occurs when designers or developers project their own goals, moti-
vations, skills, and mental models onto a product‚Äôs design. Many ‚Äúcool‚Äù product designs
fall into this category. The audience doesn‚Äôt extend beyond people like the designer. This

---

## Chunk 599

is fine for a narrow range of products but is inappropriate for most others. Similarly,
developers apply self-referential design when they create implementation-model prod-
ucts. They understand perfectly how the data is structured and how software works and
are comfortable with such products. Few non-developers would concur.
Edge cases

---

## Chunk 600

Another syndrome that personas help prevent is designing for edge cases‚Äîsituations
that might happen but that usually won‚Äôt for most people. Typically, edge cases must be
designed and programmed for, but they should never be the design focus. Personas provide
CH 3. Modeling Users: Personas and Goals 65

---

## Chunk 601

--- Page 96 ---
a reality check for the design. We can ask, ‚ÄúWill Julie want to perform this operation very
often? Will she ever?‚Äù With this knowledge, we can prioritize functions with great clarity.
why Personas Are Effective
Personas are user models that are represented as specific, individual human beings. As

---

## Chunk 602

we‚Äôve discussed, they are not actual people but are synthesized directly from research
and observations of real people. One of the reasons personas are so successful as user
models is that they are personifications1: They engage the empathy of the design and
development team around the users‚Äô goals.
Empathy is critical for the designers, who will be making their decisions about design

---

## Chunk 603

frameworks and details based on the persona‚Äôs cognitive and emotional dimensions, as
typified by the persona‚Äôs goals. (We will discuss the important connections between goals,
behaviors, and personas later in this chapter.) However, the power of empathy should not be
discounted for other team members. Not only do personas help make our design solutions

---

## Chunk 604

better at serving real user needs, but they also make these solutions more compelling to
stakeholders. When personas have been carefully and appropriately crafted, stakeholders
and engineers begin to think about them as if they are real human beings and become much
more interested in creating a product that will give this person a satisfying experience.

---

## Chunk 605

We‚Äôre all aware of the power of fictional characters in books, movies, and television pro-
grams to engage viewers. Jonathan Grudin and John Pruitt have discussed how this can
relate to interaction design.2 They also note the power of Method acting as a tool that
actors use to understand and portray realistic characters. In fact, the process of creating

---

## Chunk 606

personas from user observation, and then imagining and developing scenarios from the
perspective of these personas, is in many ways analogous to Method acting. Our col-
league Jonathan Korman used to call the Goal-Directed use of personas the Stanislavski
Method of interaction design.
Personas are based on research

---

## Chunk 607

Personas, like any models, should be based on real-world observation. As discussed in
the preceding chapter, the primary source of data used to synthesize personas should be
in-context interviews borrowing from ethnographic techniques, contextual inquiry, or
other similar dialogues with and observation of actual and potential users. The quality

---

## Chunk 608

of the data gathered following the process (outlined in Chapter 2) impacts the efficacy of
personas in clarifying and directing design activities. Other data can support and sup-
plement the creation of personas (listed in rough order of effectiveness):
‚Ä¢ Interviews with users outside of their use contexts
‚Ä¢ Information about users supplied by stakeholders and subject matter experts (SMEs)

---

## Chunk 609

66 Part I: Goal-Directed Design

---

## Chunk 610

--- Page 97 ---
‚Ä¢ Market research data such as focus groups and surveys
‚Ä¢ Market-segmentation models
‚Ä¢ Data gathered from literature reviews and previous studies
However, none of this supplemental data can take the place of direct user interviews and
observation. Almost every aspect of a well-developed persona can be traced back to sets
of user statements or behaviors.

---

## Chunk 611

Personas represent types of users of a specific
product
Although personas are depicted as specific individuals, because they function as arche-
types, they represent a class or type of user of a specific interactive product. A persona
encapsulates a distinct set of behavior patterns regarding the use of a particular prod-

---

## Chunk 612

uct (or analogous activities if a product does not yet exist). You identify these behaviors
by analyzing interview data. They are supported by supplemental data (qualitative or
quantitative) as appropriate. These patterns, along with specific motivations or goals,
define our personas. Personas are also occasionally called composite user archetypes

---

## Chunk 613

because personas are, in a sense, composites assembled by grouping related usage pat-
terns observed across individuals in similar roles during the Research phase.3
Personas used across multiple products
Organizations with more than one product often want to reuse the same personas. How-
ever, to be effective, personas must be context-specific: They should focus on the behaviors

---

## Chunk 614

and goals related to the specific domain of a particular product. Personas, because they
are constructed from specific observations of users interacting in specific contexts, can-
not easily be reused across products, even when those products form a closely linked suite.4
For a set of personas to be an effective design tool for multiple products, the personas

---

## Chunk 615

must be based on research concerning the usage contexts for all these products. In addi-
tion to broadening the scope of the research, an even larger challenge is to identify man-
ageable and coherent sets of behavior patterns across all the contexts. You shouldn‚Äôt
assume that just because two users exhibit similar behaviors in regard to one product,

---

## Chunk 616

those two users would behave similarly with respect to a different product.
As the focus expands to encompass more and more products, it becomes increasingly
difficult to create a concise and coherent set of personas that represents the diversity
of real-world users. We‚Äôve found that, in most cases, personas should be researched and
developed individually for different products.

---

## Chunk 617

CH 3. Modeling Users: Personas and Goals 67

---

## Chunk 618

--- Page 98 ---
Archetypes versus stereotypes
Don‚Äôt confuse persona archetypes with stereotypes. Stereotypes are, in most respects,
the antithesis of well-developed personas. Stereotypes usually are the result of designer
or product team biases and assumptions, rather than factual data. Personas developed
by drawing on inadequate research (or synthesized with insufficient empathy and sen-

---

## Chunk 619

sitivity to interview subjects) run the risk of degrading to caricatures. Personas must
be developed and treated with dignity and respect for the people they represent. If the
designer doesn‚Äôt respect his personas, nobody else will either.
Personas sometimes bring issues of social and political consciousness to the forefront.5

---

## Chunk 620

Because personas provide a precise design target and also serve as a communication
tool for the development team, the designer must choose particular demographic char-
acteristics with care. Ideally, persona demographics should be a composite reflection
of what researchers have observed in the interview population, modulated by broader

---

## Chunk 621

market research. Personas should be typical and believable, but not stereotypical. If the
data is inconclusive or the characteristic is unimportant to the design or its acceptance,
we prefer to err on the side of gender, ethnic, age, and geographic diversity.
Personas explore ranges of behavior
The target market for a product describes demographics as well as lifestyles and some-

---

## Chunk 622

times job roles. What it does not describe are the ranges of different behaviors exhibited
by members of that target market regarding the product and related situations. Ranges
are distinct from averages: Personas do not seek to establish an average user; they express
exemplary or definitive behaviors within these identified ranges.

---

## Chunk 623

Because products must accommodate ranges of user behavior, attitudes, and aptitudes,
designers must identify a persona set associated with any given product. Multiple per-
sonas carve ranges of behavior into discrete clusters. Different personas represent differ-
ent correlated behavior patterns. You arrive at these correlations by analyzing research

---

## Chunk 624

data. This process of identifying behaviors is discussed in greater detail later in this
chapter.
Personas have motivations
All humans have motivations that drive their behaviors; some are obvious, but many
are subtle. It is critical that personas capture these motivations in the form of goals.
The goals we enumerate for our personas (discussed at length later in this chapter) are

---

## Chunk 625

shorthand for motivations that not only point to specific usage patterns but also provide
a reason why those behaviors exist. Understanding why a user performs certain tasks
68 Part I: Goal-Directed Design

---

## Chunk 626

--- Page 99 ---
gives designers great power to improve or even eliminate tasks yet still accomplish the
same goals. We can‚Äôt overemphasize how important goals are for personas. In fact, we
would go so far as to say that if your user model doesn‚Äôt have any goals, what you have is
not a persona.
Personas can represent relevant nonusers

---

## Chunk 627

The users and potential users of a product should always be an interaction designer‚Äôs pri-
mary concern. However, sometimes it is useful to represent the needs and goals of people
who do not use the product but nevertheless must be considered in the design process.
For example, it is commonly the case with enterprise software (and children‚Äôs toys) that

---

## Chunk 628

the person who purchases the product is not the same person who uses it. In these cases,
it may be useful to create one or more customer personas, distinct from the set of user
personas. Of course, these should also be based on behavior patterns observed through
ethnographic research, just as user personas are.
Similarly, for many medical products, patients do not interact directly with the user

---

## Chunk 629

interface, but they have motivations and objectives that may be very different from those
of the clinician using the product. Creating a served persona to represent patients‚Äô
needs can be useful in these cases. We discuss served and customer personas in greater
depth later in this chapter.
Nearly all networked software products have to take into account potential pranksters

---

## Chunk 630

and malicious hackers. And sometimes for political reasons you need to embody a per-
sona for whom the product specifically does not intend to serve. Each of these types of
nonusers can be embodied in an anti-persona to have on hand in strategy, security, and
design discussions.
Personas are more appropriate design tools than other
user models

---

## Chunk 631

Many other user models are commonly employed in the design of interactive products,
including user roles, user profiles, and market segments. These are similar to personas
in that they seek to describe users and their relationship to a product. However, personas
and the methods by which they are created and employed as a design tool differ signifi-

---

## Chunk 632

cantly from these other user models in several key ways.
user roles
A user role or role model, as defined by Larry Constantine, is an abstraction‚Äîa defined
relationship between a class of users and their problems, including needs, interests,
CH 3. Modeling Users: Personas and Goals 69

---

## Chunk 633

--- Page 100 ---
expectations, and patterns of behavior.6 Agile development processes similarly reduce
its users to their role.7 As abstractions (generally taking the form of a list of attributes),
they are not imagined as people and typically do not attempt to convey broader human
motivations and contexts.
Holtzblatt and Beyer‚Äôs use of roles in consolidated flow and cultural, physical, and

---

## Chunk 634

sequence models is similar. It attempts to abstract various attributes and relationships
from the people possessing them.8
We find these methods limiting for several reasons:
‚Ä¢ It is more difficult to clearly communicate human behaviors and relationships in the
abstract, isolated from the people who possess them. The human power of empathy

---

## Chunk 635

cannot easily be brought to bear on abstract classes of people.
‚Ä¢ Both methods focus myopically on tasks almost exclusively and neglect the use of goals
as an organizing principle for design thinking and synthesis.
‚Ä¢ Holtzblatt and Beyer‚Äôs consolidated models, although useful and encyclopedic in scope,
are difficult to bring together as a coherent tool for developing, communicating, and

---

## Chunk 636

measuring design decisions.
Personas address each of these problems. Well-developed personas describe the same
types of behaviors and relationships that user roles do, but they express them in terms of
goals and examples in narrative. This makes it possible for designers and stakeholders to
understand the implications of design decisions in human terms. Describing a persona‚Äôs

---

## Chunk 637

goals provides context and structure for tasks, incorporating how culture and work flow
influence behavior.
In addition, focusing on user roles rather than on more complex behavior patterns can
oversimplify important distinctions and similarities between users. It is possible to
create a persona that represents the needs of several user roles. (For example, when a

---

## Chunk 638

mobile phone is designed, a traveling salesperson might also represent the needs of a
busy executive who‚Äôs always on the road.) It is also possible that there are several people
in the same role who think and act differently. (Perhaps a procurement planner in the
chemical industry thinks about her job very differently from a procurement planner in

---

## Chunk 639

the consumer electronics industry.) In consumer domains, roles are next to useless. If
you‚Äôre designing a website for a car company, ‚Äúcar buyer‚Äù is meaningless as a design tool.
Different people approach the task in very different ways.
In general, personas provide a more holistic model of users and their contexts, whereas

---

## Chunk 640

many other models seek to be more reductive. Personas can certainly be used in
70 Part I: Goal-Directed Design

---

## Chunk 641

--- Page 101 ---
combination with these other modeling techniques. As we‚Äôll discuss at the end of the
chapter, some other models make extremely useful complements to personas.
Personas versus user profiles
Many usability practitioners use the terms persona and user profile synonymously.
There is no problem with this if the profile is synthesized from first-hand ethnographic

---

## Chunk 642

data and encapsulates the depth of information the authors have described. Unfortu-
nately, all too often, the authors have seen user profiles that reflect Webster‚Äôs definition
of profile as a ‚Äúbrief biographical sketch.‚Äù In other words, user profiles often consist of
a name and picture attached to a short, mostly demographic description, along with

---

## Chunk 643

a short paragraph of information unrelated to the design task at hand, for example,
describing the kind of car this person drives, how many kids he has, where he lives, and
what he does for a living. This kind of user profile is likely to be based on a stereotype.
Although we give our personas names, and sometimes even cars and family members,

---

## Chunk 644

these are employed sparingly. Supporting fictive detail plays only a minor part in per-
sona creation. It is used just enough to make the persona come to life in the minds of the
designers and product team.
Personas versus market segments
Marketing professionals may be familiar with a process similar to persona development

---

## Chunk 645

because it shares some process similarities with market definition. The main difference
between market segments and design personas is that the former are based on demo-
graphics, distribution channels, and purchasing behavior, whereas the latter are based
on usage behavior and goals. The two are not the same and don‚Äôt serve the same purpose.

---

## Chunk 646

Marketing personas shed light on the sales process, whereas design personas shed light
on the product definition and development process.
However, market segments play a role in persona development. They can help determine
the demographic range within which to frame the persona hypothesis (see Chapter 2).
Personas are segmented along ranges of usage behavior, not demographics or buying

---

## Chunk 647

behavior, so there is seldom a one-to-one mapping of market segments to personas.
Rather, market segments can act as an initial filter to limit the scope of interviews to
people within target markets (see Figure 3-3). Also, we typically use the prioritization of
personas as a way to make strategic product definition decisions (see the discussion of

---

## Chunk 648

persona types later in this chapter). These decisions should incorporate market intelli-
gence; understanding the relationship between user personas and market segments can
be an important consideration here.
CH 3. Modeling Users: Personas and Goals 71

---

## Chunk 649

--- Page 102 ---
Personas derived
Market segments Pool of interviewees from behavior patterns
Segment 1 Kate and Sara are
in Segment 1
Segment 2 Bob overlaps
Segments 2 and 3
Segment 3 Ann is in Segment 3
Figure 3-3: Personas versus market segments. Market segments can be used in the Research
phase to limit the range of personas to target markets. However, there is seldom a one-to-one

---

## Chunk 650

mapping between market segments and personas.
understanding goals
If personas provide the context for sets of observed behaviors, goals are the drivers
behind those behaviors. User goals serve as a lens through which designers must con-
sider a product‚Äôs functions. The product‚Äôs function and behavior must address goals via

---

## Chunk 651

tasks‚Äîtypically, as few tasks as necessary. Remember, tasks are only a means to an end;
goals are that end.
goals motivate usage patterns
People‚Äôs or personas‚Äô goals motivate them to behave as they do. Thus, goals don‚Äôt just
provide an answer to why and how personas want to use a product. They also can serve
as shorthand in the designer‚Äôs mind for the sometimes complex behaviors in which a

---

## Chunk 652

persona engages and, therefore, for their tasks as well.
goals should be inferred from qualitative data
You usually can‚Äôt ask a person what his goals are directly. Either he‚Äôll be unable to artic-
ulate them, or he‚Äôll be inaccurate or even imperfectly honest. People simply are unpre-
pared to answer such self-reflective questions accurately. Therefore, designers and

---

## Chunk 653

researchers need to carefully reconstruct goals from observed behaviors, answers to
72 Part I: Goal-Directed Design

---

## Chunk 654

--- Page 103 ---
other questions, nonverbal cues, and clues from the environment, such as the titles of
books on shelves. One of the most critical tasks in the modeling of personas is identi-
fying goals and expressing them succinctly: Each goal should be expressed as a simple
sentence.
user goals and cognitive processing

---

## Chunk 655

Don Norman‚Äôs book Emotional Design (Basic Books, 2005) introduced the idea that prod-
uct design should address three different levels of cognitive and emotional processing:
visceral, behavioral, and reflective. Norman‚Äôs ideas, based on years of cognitive research,
provide an articulated structure for modeling user responses to product and brand and

---

## Chunk 656

a rational context for many intuitions long held by professional designers:
‚Ä¢ Visceral is the most immediate level of processing. Here we react to a product‚Äôs
visual and other sensory aspects that we can perceive before significant interaction
occurs. Visceral processing helps us make rapid decisions about what is good, bad,

---

## Chunk 657

safe, or dangerous. This is one of the most exciting types of human behavior, and
one of the most challenging to effectively support with digital products. Malcolm
Gladwell explores this level of cognitive processing in his book Blink (Little, Brown
and Company, 2005). For an even more in-depth study of intuitive decision making, see

---

## Chunk 658

Gary Klein‚Äôs Sources of Power (MIT Press, 1998) or Hare Brain, Tortoise Mind by Guy
Claxton (Ecco, 1999).
‚Ä¢ Behavioral is the middle level of processing. It lets us manage simple, everyday
behaviors. According to Norman, these constitute the majority of human activity.
Norman states‚Äîand rightly so‚Äîthat historically, interaction design and usability

---

## Chunk 659

practices have nearly exclusively addressed this level of cognitive processing.
Behavioral processing can enhance or inhibit both lower-level visceral reactions and
higher-level reflective responses. Conversely, both visceral and reflective processing
can enhance or inhibit behavioral processing.
‚Ä¢ Reflective is the least immediate level of processing. It involves conscious

---

## Chunk 660

consideration and reflection on past experiences. Reflective processing can enhance or
inhibit behavioral processing but has no direct access to visceral reactions. This level
of cognitive processing is accessible only via memory, not through direct interaction or
perception. The most interesting aspect of reflective processing as it relates to design

---

## Chunk 661

is that, through reflection, we can integrate our experiences with designed artifacts
into our broader life experiences and, over time, associate meaning and value with the
artifacts themselves.
Designing for visceral response
Designing for the visceral level means designing what the senses initially perceive, before

---

## Chunk 662

any deeper involvement with a product or artifact occurs. For most of us, that means
CH 3. Modeling Users: Personas and Goals 73

---

## Chunk 663

--- Page 104 ---
designing visual appearance and motion, although sound can also play a role‚Äîthink
of the distinctive Mac power-up chord. People designing devices may design for tactile
sensations as well.
A misconception often arises when visceral-level design is discussed: that design-
ing for visceral response is about designing beautiful things. Battlefield software and

---

## Chunk 664

radiation-therapy systems are just two examples where designing for beauty may not be
the proper focus. Visceral design is actually about designing for affect‚Äîthat is, eliciting
the appropriate psychological or emotional response for a particular context‚Äîrather
than for aesthetics alone. Beauty‚Äîand the feelings of transcendence and pleasure it

---

## Chunk 665

evokes‚Äîis really only a small part of the possible affective design palette. For example,
an MP3 player and an online banking system require very different affects. We can learn
a great deal about affect from architecture, the cinema and stage, and industrial design.
However, in the world of consumer products and services, attractive user interfaces are

---

## Chunk 666

typically appropriate. Interestingly, usability researchers have demonstrated that users
initially judge attractive interfaces to be more usable, and that this belief often persists
long after a user has gained sufficient experience with an interface to have direct evi-
dence to the contrary.9 Perhaps the reason for this is that users, encouraged by perceived

---

## Chunk 667

ease of use, make a greater effort to learn what may be a challenging interface and are
then unwilling to consider their investment ill spent. For the scrupulous designer, this
means that, when a user interface promises ease of use at the visceral level‚Äîor whatever
else the visceral promise of an interaction may be‚Äîit should then be sure to deliver on
that promise at the behavioral level.

---

## Chunk 668

Designing for behavior
Designing for the behavioral level means designing product behaviors that complement
the user‚Äôs own behaviors, implicit assumptions, and mental models. Of the three levels of
design Norman contemplates, behavioral design is perhaps the most familiar to interac-
tion designers and usability professionals.

---

## Chunk 669

One intriguing aspect of Norman‚Äôs three-level model as it relates to design is his asser-
tion that behavioral processing, uniquely among his three levels, has direct influence
on and is influenced directly by both of the other two levels of processing. This would
seem to imply that the day-to-day behavioral aspects of interaction design should be the

---

## Chunk 670

primary focus of our design efforts, with visceral and reflective considerations playing
a supporting role. Getting behavior design right‚Äîassuming that we also pay adequate
attention to the other levels‚Äîprovides our greatest opportunity to positively influence
how users construct their experience with products.

---

## Chunk 671

Not following this line of reasoning can cause users‚Äô initial impressions to be out of sync
with reality. Also, it is difficult to imagine designing for reflective meaning in memory
74 Part I: Goal-Directed Design

---

## Chunk 672

--- Page 105 ---
without a solid purpose and set of behaviors in place for the here and now. The user expe-
rience of a product or artifact, therefore, should ideally harmonize elements of visceral
design and reflective design with a focus on behavioral design.
Designing for reflection
Reflective processing‚Äîand, particularly, what it means for design‚Äîis perhaps the most

---

## Chunk 673

challenging aspect of the three levels of processing that Norman discusses. What is clear
is that designing for the reflective level means designing to build long-term product rela-
tionships. What is unclear is the best way to ensure success‚Äîif that‚Äôs even possible‚Äîat
the reflective level. Does chance drive success here‚Äîbeing in the right place at the right

---

## Chunk 674

time‚Äîor can premeditated design play a part in making it happen?
In describing reflective design, Norman uses several high-concept designs for commodity
products as examples, such as impractically configured teapots and the striking Phillipe
Starck juicer that graces the cover of his book. It is easy to see how such products‚Äî

---

## Chunk 675

whose value and purpose are, in essence, the aesthetic statements they make‚Äîcould
appeal strongly to people‚Äôs reflective desire for uniqueness or cultural sophistication
that perhaps may come from an artistic or stylish self-image.
It is more difficult to see how products that also serve a truly useful purpose need to

---

## Chunk 676

balance the stylistic and the elegant with the functional. The Apple iPhone comes very
close to achieving this balance. Its direct manipulation touch interface merges almost
seamlessly with its sleek industrial design. Its reflective potential is also significant,
because of the powerful emotional connection people experience with their personal

---

## Chunk 677

communications and their music (the iPhone is, of course, also an iPod). It‚Äôs a winning
combination that no single competitor has been able to challenge.
Few products become iconic in people‚Äôs lives in the way that, say, the Sony Walkman or
the iPhone has. Clearly some products stand little chance of ever becoming symbolic in

---

## Chunk 678

people‚Äôs lives‚Äîlike Ethernet routers, for instance‚Äîno matter how wonderful they look
or how well they behave. However, when the design of a product or service addresses
users‚Äô goals and motivations‚Äîpossibly going beyond the product‚Äôs primary purpose, yet
somehow connected to it via personal or cultural associations‚Äîthe opportunity to cre-
ate reflective meaning is greatly enhanced.

---

## Chunk 679

The three types of user goals
In Emotional Design, Norman presents his three-level theory of cognitive processing
and discusses its potential importance to design. However, Norman does not suggest a
method for systematically integrating his model of cognition and affect into the prac-
tice of design or user research. In our practice, we‚Äôve found that the key to doing so lies

---

## Chunk 680

CH 3. Modeling Users: Personas and Goals 75

---

## Chunk 681

--- Page 106 ---
in properly delineating and modeling three specific types of user goals as part of each
persona‚Äôs definition.10
Three types of user goals correspond to Norman‚Äôs visceral, behavioral, and reflective pro-
cessing levels (see Figure 3-4):
‚Ä¢ Experience goals
‚Ä¢ End goals
‚Ä¢ Life goals
Life Goals Who the user
(Reflective) wants to be
End Goals What the user
(Behavioral) wants to do

---

## Chunk 682

Experience Goals How the user
wants to feel
(Visceral)
Figure 3-4: The three types of user goals
Experience goals
Experience goals are simple, universal, and personal. Paradoxically, this makes them
difficult for many people to talk about, especially in the context of impersonal business.
Experience goals express how someone wants to feel while using a product, or the quality

---

## Chunk 683

of his or her interaction with the product. These goals provide focus for a product‚Äôs visual
and aural characteristics, its interactive feel‚Äîsuch as animated transitions, latency,
touch response, and a button‚Äôs snap ratio (clickiness)‚Äî its physical design, and its micro-
interactions. These goals also offer insights into persona motivations that express them-
selves at the visceral level:

---

## Chunk 684

‚Ä¢ Feel smart and in control
‚Ä¢ Have fun
‚Ä¢ Feel reassured about security and sensitivity
‚Ä¢ Feel cool or hip or relaxed
‚Ä¢ Remain focused and alert
76 Part I: Goal-Directed Design

---

## Chunk 685

--- Page 107 ---
When products make users feel stupid or uncomfortable, it‚Äôs unpleasant, and their effec-
tiveness and enjoyment plummets, regardless of their other goals. Their level of resent-
ment also increases. If they experience enough of this type of treatment, users will be
primed to subvert the system. Any product that egregiously violates experience goals

---

## Chunk 686

will ultimately fail, regardless of how well it purports to achieve other goals.
Interaction, visual, and industrial designers must translate persona experience goals
into form, behavior, motion, and auditory elements that communicate the proper feel,
affect, emotion, and tone. Visual language studies, as well as mood or inspiration boards,

---

## Chunk 687

which attempt to establish visual themes based on persona attitudes and behaviors, are
a useful tool for defining personas‚Äô tonal expectations.
End goals
End goals represent the user‚Äôs motivation for performing the tasks associated with using
a specific product. When you pick up a cell phone or open a document with a word pro-

---

## Chunk 688

cessor, you likely have an outcome in mind. A product or service can help accomplish
such goals directly or indirectly. These goals are the focus of a product‚Äôs interaction
design and information architecture and the functional aspects of industrial design.
Because behavioral processing influences both visceral and reflective responses, end

---

## Chunk 689

goals should be among the most significant factors in determining the overall product
experience. End goals must be met for users to think that a product is worth their time
and money.
Here are some examples of end goals:
‚Ä¢ Be aware of problems before they become critical.
‚Ä¢ Stay connected with friends and family.
‚Ä¢ Clear my to-do list by 5:00 p.m. every day.
‚Ä¢ Find music that I‚Äôll love.

---

## Chunk 690

‚Ä¢ Get the best deal.
Interaction designers must use end goals as the foundation for a product‚Äôs behaviors,
tasks, look, and feel. Context or day-in-the-life scenarios and cognitive walkthroughs
are effective tools for exploring users‚Äô goals and mental models, which, in turn, facilitate
appropriate behavioral design.
life goals

---

## Chunk 691

Life goals represent the user‚Äôs personal aspirations that typically go beyond the context
of the product being designed. These goals represent deep drives and motivations that
CH 3. Modeling Users: Personas and Goals 77

---

## Chunk 692

--- Page 108 ---
help explain why the user is trying to accomplish the end goals he seeks to accomplish.
Life goals describe a persona‚Äôs long-term desires, motivations, and self-image attributes,
which cause the persona to connect with a product. These goals are the focus of a prod-
uct‚Äôs overall design, strategy, and branding:
‚Ä¢ Live the good life.
‚Ä¢ Succeed in my ambitions to‚Ä¶

---

## Chunk 693

‚Ä¢ Be a connoisseur of‚Ä¶
‚Ä¢ Be attractive, popular, and respected by my peers.
Interaction designers must translate life goals into high-level system capabilities, formal
design concepts, and brand strategy. Mood boards and context scenarios can be helpful
in exploring different aspects of product concepts, and broad ethnographic research and

---

## Chunk 694

cultural modeling are critical for discovering users‚Äô behavior patterns and deeper moti-
vations. Life goals rarely figure directly into the design of an interface‚Äôs specific elements
or behaviors. However, they are very much worth keeping in mind. A product that the
user discovers will take him closer to his life goals, not just his end goals, will win him

---

## Chunk 695

over more decisively than any marketing campaign. Addressing users‚Äô life goals makes
the difference (assuming that other goals are also met) between a satisfied user and a
fanatically loyal user.
user goals are user motivations
In summary, it‚Äôs important to remember that understanding personas is more about
understanding motivations and goals than it is about understanding specific tasks or

---

## Chunk 696

demographics. Linking persona goals with Norman‚Äôs model, top-level user motivations
include the following:
‚Ä¢ Experience goals, which are related to visceral processing: how the user wants to feel
‚Ä¢ End goals, which are related to behavior: what the user wants to do
‚Ä¢ Life goals, which are related to reflection: who the user wants to be

---

## Chunk 697

Using personas, goals, and scenarios (as you‚Äôll learn in upcoming chapters) provides
the key to unlocking the power of visceral, behavioral, and reflective design and bring-
ing these together into a harmonious whole. While some of our best designers seem to
understand and act on these aspects of design almost intuitively, consciously designing

---

## Chunk 698

for all levels of human cognition and emotion offers tremendous potential for creating
more satisfying and affective user experiences.
78 Part I: Goal-Directed Design

---

## Chunk 699

--- Page 109 ---
nonuser goals
User goals are not the only type of goals that designers need to take into account. Cus-
tomer goals, business goals, and technical goals are all nonuser goals. Typically, these
goals must be acknowledged and considered, but they do not form the basis of the design
direction. Although these goals do need to be addressed, they must not be addressed at

---

## Chunk 700

the user‚Äôs expense.
Customer goals
Customers, as already discussed, have different goals than users. The exact nature of
these goals varies quite a bit between consumer and enterprise products. Consumer cus-
tomers often are parents, relatives, or friends who often have concerns about the safety
and happiness of the people for whom they are purchasing the product. Enterprise cus-

---

## Chunk 701

tomers typically are IT managers or procurement specialists, and they often have con-
cerns about security, ease of maintenance, ease of customization, and price. Customer
personas also may have their own life, experience, and especially end goals in relation to
the product if they use it in any capacity. Customer goals should never trump end goals

---

## Chunk 702

but need to be considered within the overall design.
business and organizational goals
Businesses and other organizations have their own requirements for products, services,
and systems, which you also should model and consider when devising design solutions.
The goals of businesses, where users and customers work, are captured in user and cus-

---

## Chunk 703

tomer personas, as well as organizational ‚Äúpersonas‚Äù (discussed later in this chapter). It
is important to identify the business goals of the organization commissioning the design
and developing and selling (or otherwise distributing) the product early in the design
process. Clearly, these organizations are hoping to accomplish something with the prod-

---

## Chunk 704

uct (which is why they are willing to spend money and effort on design and development).
Business goals include the following:
‚Ä¢ Increase profit.
‚Ä¢ Increase market share.
‚Ä¢ Retain customers.
‚Ä¢ Defeat the competition.
‚Ä¢ Use resources more efficiently.
‚Ä¢ Offer more products or services.
‚Ä¢ Keep its IP secure.
CH 3. Modeling Users: Personas and Goals 79

---

## Chunk 705

--- Page 110 ---
You may find yourself designing on behalf of an organization that is not necessarily a
business, such as a museum, nonprofit, or school (although many such organizations are
run as businesses these days). These organizations also have goals that must be consid-
ered, such as the following:
‚Ä¢ Educate the public.
‚Ä¢ Raise enough money to cover overhead.
Technical goals

---

## Chunk 706

Most of the software-based products we use every day are created with technical goals
in mind. Many of these goals ease the task of software creation, maintenance, scalability,
and extensibility, which are developers‚Äô goals. Unfortunately meeting these goals often
comes at the expense of user goals. Technical goals include the following:
‚Ä¢ Run in a variety of browsers.
‚Ä¢ Safeguard data integrity.

---

## Chunk 707

‚Ä¢ Increase application execution efficiency.
‚Ä¢ Use a particular development language or library.
‚Ä¢ Maintain consistency across platforms.
Technical goals in particular are essential to the development staff. It is important to
stress early in the education process that these goals must ultimately serve user and

---

## Chunk 708

business goals. Technical goals are not terribly meaningful to a product‚Äôs success unless
they are derived from the need to meet other, more human-oriented goals. It might be a
software company‚Äôs task to use new technology, but it is rarely the user‚Äôs goal for them to
do so. In most cases, users don‚Äôt care if their job is accomplished with hierarchical data-

---

## Chunk 709

bases, relational databases, object-oriented databases, flat-file systems, or black magic.
What we care about is getting our job done swiftly, effectively, and with a modicum of
ease and dignity.
successful products meet user goals first
‚ÄúGood design‚Äù has meaning only for someone who uses a product for a particular pur-

---

## Chunk 710

pose. You cannot have purposes without people. The two are inseparable. This is why
personas are such an important tool in the process of designing behavior: They represent
specific people with specific purposes or goals.
The most important purposes or goals to consider when designing a product are the
goals of the individuals who actually use the product, not necessarily the goals of its

---

## Chunk 711

purchasers or its developers. A real person, not a corporation or even an IT manager,
80 Part I: Goal-Directed Design

---

## Chunk 712

--- Page 111 ---
interacts with your product. Therefore, you must regard her personal goals as more sig-
nificant than those of the corporation that employs her, the IT manager who supports
her, or the developer who builds for her. Your users will do their best to achieve their
employer‚Äôs business goals, while at the same time looking after their own personal goals.

---

## Chunk 713

The user‚Äôs most important goal is always to retain her human dignity and not feel stupid.
We can reliably say that we make the user feel stupid if we let her make big mistakes,
keep her from getting an adequate amount of work done, or bore her.
Don‚Äôt make the user feel stupid.
This is probably the most important interaction design guideline. This book examines

---

## Chunk 714

numerous ways in which existing software makes the user feel stupid, and we explore
ways to avoid that trap.
The essence of good interaction design is devising interactions that achieve the goals of
the manufacturer or service provider and its partners while supporting user goals.
Constructing Personas
As previously discussed, personas are derived from qualitative research‚Äîespecially the

---

## Chunk 715

behavioral patterns observed during interviews with and observations of a product‚Äôs
users and potential users (and sometimes customers). Gaps in this data are filled by sup-
plemental research and data provided by SMEs, stakeholders, quantitative research, and
other available literature. Our goal in constructing a set of personas is to represent the

---

## Chunk 716

diversity of observed motivations, behaviors, attitudes, aptitudes, constraints, mental
models, work or activity flows, environments, and frustrations with current products or
systems.
Creating believable and useful personas requires an equal measure of detailed analysis
and creative synthesis. A standardized process aids both of these activities significantly.

---

## Chunk 717

The process described in this section is the result of an evolution in practice over the
span of hundreds of interaction design projects, developed by industry veterans Robert
Reimann, Kim Goodwin, and Lane Halley during their tenure at Cooper.
There are a number of effective methods for identifying behavior patterns in research

---

## Chunk 718

and turning these into useful user archetypes. We‚Äôve found the transparency and rigor
of this process to be an ideal way for designers new to personas to learn how to properly
CH 3. Modeling Users: Personas and Goals 81

---

## Chunk 719

--- Page 112 ---
construct personas. It also helps experienced designers to stay focused on actual behav-
ior patterns, especially in consumer domains. Figure 3-5 shows the principle steps:
1 Group interview subjects by role.
2 Identify behavioral variables.
3 Map interview subjects to behavioral variables.
4 Identify significant behavior patterns.
5 Synthesize characteristics and define goals.

---

## Chunk 720

6 Check for completeness and redundancy.
7 Designate persona types.
8 Expand the description of attributes and behaviors.
Group interview subjects by role
Identify behavioral variables
Map interview subjects to
behavioral variables
Identify significant behavior patterns
Synthesize characteristics
and define goals
Check for redundancy
and completeness
Designate persona types

---

## Chunk 721

Expand description of attributes
and behaviors
Figure 3-5: Overview of the persona creation process
step 1: group interview subjects by role
After you have completed your research and performed a cursory organization of the
data, group your interviewees according to their roles. For enterprise applications, roles
82 Part I: Goal-Directed Design

---

## Chunk 722

--- Page 113 ---
are easy to delineate, because they usually map to job roles or descriptions. Consumer
products have more subtle role divisions, including family roles, attitudes or approaches
to relevant activities, or interests and aptitudes regarding lifestyle choices.
step 2: Identify behavioral variables
Once you‚Äôve grouped your interviewees by role, list the distinct aspects of observed

---

## Chunk 723

behavior for each role as a set of behavioral variables. Demographic variables such as
age or geographic location may sometimes seem to affect behavior. But be wary of focus-
ing on demographics, because behavioral variables will be far more useful in developing
effective user archetypes.
Generally, we see the most important distinction between behavior patterns emerge by

---

## Chunk 724

focusing on the following types of variables:
‚Ä¢ Activities‚ÄîWhat the user does; frequency and volume
‚Ä¢ Attitudes‚ÄîHow the user thinks about the product domain and technology
‚Ä¢ Aptitudes‚ÄîWhat education and training the user has; ability to learn
‚Ä¢ Motivations‚ÄîWhy the user is engaged in the product domain
‚Ä¢ Skills‚ÄîUser abilities related to the product domain and technology

---

## Chunk 725

Although the number of variables will differ from project to project, it is typical to find
15 to 30 variables per role.
These variables may be very similar to those you identified as part of your persona
hypothesis. Compare behaviors identified in the data to the assumptions made in the
persona hypothesis. Were the possible roles that you identified truly distinct? Were the

---

## Chunk 726

behavioral variables (see Chapter 2) you identified valid? Were there additional, unantic-
ipated ones, or ones you anticipated that weren‚Äôt supported by data?
List the complete set of behavioral variables observed. If your data is at variance with
your assumptions, you need to add, subtract, or modify the roles and behaviors you

---

## Chunk 727

anticipated. If the variance is significant enough, you may consider additional inter-
views to cover any gaps in the new behavioral ranges you‚Äôve discovered.
step 3: map interview subjects to behavioral variables
After you are satisfied that you have identified the set of significant behavioral variables
exhibited by your interview subjects, the next step is to map each interviewee against

---

## Chunk 728

each variable. Some of these variables will represent a continuous range of behavior,
CH 3. Modeling Users: Personas and Goals 83

---

## Chunk 729

--- Page 114 ---
such as confidence in using technology. Others will represent multiple discrete choices,
such as using a digital camera versus using a film camera.
Mapping the interviewee to a precise point in the range isn‚Äôt as critical as identifying the
placement of interviewees in relationship to each other. In other words, it doesn‚Äôt matter

---

## Chunk 730

if an interviewee falls at precisely 45 or 50 percent on the scale. There‚Äôs often no good way
to measure this precisely; you must rely on your gut feeling based on your observations
of the subject. The desired outcome of this step is to accurately represent how multiple
subjects cluster with respect to each significant variable, as shown in Figure 3-6.
Service-oriented Price-oriented

---

## Chunk 731

(cid:31) (cid:31) (cid:31)(cid:31)(cid:31)
User 3 User 2 User 1, 4, 5
Necessity only Entertainment
(cid:31)(cid:31) (cid:31) (cid:31) (cid:31)
User 1, 4 User 2 User 5 User 3
Figure 3-6: Mapping interview subjects to behavioral variables. This example is from
an online store. Interview subjects are mapped across each behavioral axis. Precision

---

## Chunk 732

of the absolute position of an individual subject on an axis is less important than its
relative position to other subjects. Clusters of subjects across multiple axes indicate
significant behavior patterns.
step 4: Identify significant behavior patterns
After you have mapped your interview subjects, look for clusters of subjects that occur

---

## Chunk 733

across multiple ranges or variables. A set of subjects who cluster in six to eight different
variables will likely represent a significant behavior pattern that will form the basis of
a persona. Some specialized roles may exhibit only one significant pattern, but typically
you will find two or even three such patterns.

---

## Chunk 734

For a pattern to be valid, there must be a logical or causative connection between the
clustered behaviors, not just a spurious correlation. For example, there is clearly a logical
connection if data shows that people who regularly purchase CDs also like to download
MP3 files. But there is probably no logical connection if the data shows that interviewees

---

## Chunk 735

who frequently purchase CDs online are also vegetarians.
84 Part I: Goal-Directed Design

---

## Chunk 736

--- Page 115 ---
step 5: synthesize characteristics and define goals
We derive a persona‚Äôs goals and other attributes from their behaviors. These behaviors
are synthesized from what was observed/identified in the research process as represent-
ing meaningful, typical use of the product over a period of time that adequately cap-

---

## Chunk 737

tures the relevant set of user actions. We call this a ‚Äúday in the life,‚Äù but the period of
time really depends on the product or service being used and exactly what the persona
does with it. Executive personas, for example, often have particular behaviors associated
with quarterly and yearly earnings reports. Consumers often have behaviors particular

---

## Chunk 738

to their culture‚Äôs holidays that should be investigated.
For each significant behavior pattern you identify, you must synthesize details from your
data. These details should include the following at a minimum:
‚Ä¢ The behaviors themselves (activities and the motivations behind them)
‚Ä¢ The use environment(s)
‚Ä¢ Frustrations and pain points related to the behavior using current solutions

---

## Chunk 739

‚Ä¢ Demographics associated with the behavior
‚Ä¢ Skills, experience, or abilities relating to the behavior
‚Ä¢ Attitudes and emotions associated with the behavior
‚Ä¢ Relevant interactions with other people, products, or services
‚Ä¢ Alternate or competing ways of doing the same thing, especially analog techniques
At this point, brief bullet points describing the behavior‚Äôs characteristics are sufficient.

---

## Chunk 740

Stick to observed behaviors as much as possible. A description or two that sharpens the
personalities of your personas can help bring them to life. However, too much fictional
biography, especially if it includes quirky details, is a distraction and makes your perso-
nas distracting. Remember that you are creating a design tool, not a character sketch for

---

## Chunk 741

a novel. Only concrete data can support the design and business decisions your team will
ultimately make.
One fictional detail at this stage is important: the personas‚Äô first and last name. The name
should evoke the type of person the persona is without tending toward distracting unique-
ness, caricature, or stereotype. We use a number of techniques to help create persona

---

## Chunk 742

names, but a standard go-to is the app and site http://random-name-generator.info/. You
can also, at this time, add some demographic information such as age, geographic loca-
tion, relative income (if appropriate), and job title. This information primarily helps you
visualize the persona better as you assemble the behavioral details. From this point on, you

---

## Chunk 743

should refer to the persona by his or her name.
CH 3. Modeling Users: Personas and Goals 85

---

## Chunk 744

--- Page 116 ---
Defining goals
Goals are the most critical detail to synthesize from your interviews and observations
of behaviors. Goals are best derived by analyzing the behavior patterns comprising each
persona. By identifying the logical connections between each cluster of interviewees‚Äô
behaviors, you can begin to infer the goals that lead to those behaviors. You can infer

---

## Chunk 745

goals both by observing actions (what interview subjects in each persona cluster are try-
ing to accomplish and why) and by analyzing subject responses to goal-oriented inter-
view questions (see Chapter 2).
To be effective as design tools, goals must always relate directly, in some way, to the prod-
uct being designed. Typically, the majority of useful goals for a persona are end goals. You

---

## Chunk 746

can expect most personas to have three to five end goals associated with them. Life goals
are most useful for personas of consumer-oriented products, but they can also make
sense for enterprise personas in transient job roles. Zero or one life goal is appropriate
for most personas. General experience goals such as ‚ÄúDon‚Äôt feel stupid‚Äù and ‚ÄúDon‚Äôt waste

---

## Chunk 747

time‚Äù can be taken as implicit for almost any persona. Occasionally, a specific domain
may dictate the need for more specific experience goals; zero to two experience goals is
appropriate for most personas.
Personas and social relationships
It sometimes makes sense for a product‚Äôs set of personas to be part of the same family or

---

## Chunk 748

team within an organization and to have interpersonal or social relationships with each
other.
When considering whether it makes sense for personas to have business or social rela-
tionships, think about these two points:
‚Ä¢ Whether you observed any behavioral variations in your interview subjects related to
variations in company size, industry, or family/social dynamic (In this case, you‚Äôll want

---

## Chunk 749

to make sure that your persona set represents this diversity by being situated in at least
a couple of different businesses or social settings.)
‚Ä¢ If it is critical to illustrate workflow or social interactions between coworkers or
members of a family or social group
If you create personas that work for the same company or that have social relation-

---

## Chunk 750

ships with each other, you might run into difficulties if you need to express a signif-
icant goal that doesn‚Äôt belong with the pre-established relationship. A single social
relationship between your set of personas is easier to define than several different,
unrelated social relationships between individual personas and minor players outside

---

## Chunk 751

the persona set. However, it can be much better to put the initial effort into developing
86 Part I: Goal-Directed Design

---

## Chunk 752

--- Page 117 ---
diverse personas than to risk the temptation of bending more diverse scenarios to fit
a single social dynamic.
step 6: Check for completeness and redundancy
At this point, your personas should be starting to come to life. You should check your
mappings and personas‚Äô characteristics and goals to see if any important gaps need fill-

---

## Chunk 753

ing. This again may point to the need to perform additional research to find particular
behaviors that are missing from your behavioral axes. You might also want to check your
notes to see if you need to add any political personas to satisfy stakeholder assumptions
or requests. We‚Äôve occasionally had to add personas with identical goals but different

---

## Chunk 754

locales to satisfy branches of the client organization in those locales, that their constitu-
ents‚Äô voices were heard and are represented in the design.
If you find that two personas seem to vary only by demographics, you may choose to
eliminate one of the redundant personas or tweak your personas‚Äô characteristics to

---

## Chunk 755

make them more distinct. Each persona should vary from all the others in at least one
significant behavior. If you‚Äôve done a good job of mapping, this shouldn‚Äôt be an issue.
By making sure that your persona set is complete and that each persona is meaningfully
distinct, you ensure that your personas sufficiently represent the diversity of behaviors

---

## Chunk 756

and needs in the real world. You also ensure that you have as compact a design target as
possible, which reduces work when you begin designing interactions.
step 7: Designate persona types
By now, your personas should feel very much like a set of real people you know. The next
part of persona construction is a key step in the process of turning your qualitative

---

## Chunk 757

research into a powerful set of design tools.
Design requires a target‚Äîthe audience upon whom the design is focused. The more spe-
cific the target, the better. Trying to create a design solution that simultaneously serves
the needs of even three or four personas can be an overwhelming task.
What we must do then is prioritize our personas to determine which should be the pri-

---

## Chunk 758

mary design target. The goal is to find a single persona from the set whose needs and
goals can be completely and happily satisfied by a single interface without disenfran-
chising any of the other personas. We accomplish this through a process of designat-
ing persona types. There are six types of personas, and they are typically designated in
roughly the order listed here:

---

## Chunk 759

CH 3. Modeling Users: Personas and Goals 87

---

## Chunk 760

--- Page 118 ---
‚Ä¢ Primary
‚Ä¢ Secondary
‚Ä¢ Supplemental
‚Ä¢ Customer
‚Ä¢ Served
‚Ä¢ Negative
We discuss each of these persona types and their significance from a design perspective
in the following sections.
Primary personas
Primary personas are the main target of interface design. A product can have only one
primary persona per interface, but it is possible for some products (especially enterprise

---

## Chunk 761

products) to have multiple distinct interfaces, each targeted at a distinct primary per-
sona. For example, a healthcare information system might have separate clinical and
financial interfaces, each targeted at a different persona. It should be noted that we use
the term interface in an abstract sense here. In some cases, two separate interfaces might

---

## Chunk 762

be two separate applications that act on the same data. In other cases, the two interfaces
might simply be two different sets of functionality served to two different users based on
their role or customization.
A primary persona will not be satisfied by a design targeted at any other persona in the
set. However, if the primary persona is the target, all other personas will not, at least, be

---

## Chunk 763

dissatisfied. (As you‚Äôll see, we will then figure out how to satisfy these other personas
without disturbing the primary.)
Focus the design for each interface on a single primary persona.
Choosing the primary persona is a process of elimination: You must test each persona by
comparing its goals against goals of the others. If no clear primary persona is evident, it

---

## Chunk 764

could mean one of two things: Either the product needs multiple interfaces, each with a
suitable primary persona (which is often the case for enterprise and technical products),
or the product is trying to accomplish too much. If a consumer product has multiple
primary personas, its scope may be too broad.
Avoid the trap of simply selecting the persona who maps to the largest market segment.

---

## Chunk 765

The OXO Good Grips line of products was originally designed to be easy to use for people
88 Part I: Goal-Directed Design

---

## Chunk 766

--- Page 119 ---
with arthritis. It turns out that satisfying this user with the most constraints (and a tiny
portion of the total market) satisfies the bulk of customers greatly. The largest segment
may not be your primary or most leveraged persona.
secondary personas
A secondary persona is mostly satisfied with the primary persona‚Äôs interface. However,

---

## Chunk 767

it has specific additional needs that can be accommodated without upsetting the prod-
uct‚Äôs ability to serve the primary persona. We do not always have a secondary persona.
More than three or four secondary personas can be a sign that the proposed product‚Äôs
scope may be too large and unfocused. As you work through solutions, your approach

---

## Chunk 768

should be to first design for the primary, and then to adjust the design to accommodate
the secondary.
supplemental personas
User personas that are not primary or secondary are supplemental personas. Their needs
are completely represented by a combination of primary and secondary personas and
are completely satisfied by the solution we devise for one of our primaries. Any number

---

## Chunk 769

of supplemental personas can be associated with an interface. Often political personas‚Äî
the ones added to the cast to address stakeholder assumptions‚Äîbecome supplemental
personas.
Customer personas
Customer personas address the needs of customers, not end users, as discussed earlier
in this chapter. Typically, customer personas are treated like secondary personas. How-

---

## Chunk 770

ever, in some enterprise environments, some customer personas may be primary perso-
nas for their own administrative interface.
served personas
Served personas are somewhat different from the persona types already discussed. They
are not users of the product, but they are directly affected by the use of the product. A

---

## Chunk 771

patient being treated by a radiation therapy machine is not a user of the machine‚Äôs inter-
face, but she is very much served by a good interface. Served personas provide a way to
track second-order social and physical ramifications of products. These are treated like
secondary personas.
CH 3. Modeling Users: Personas and Goals 89

---

## Chunk 772

--- Page 120 ---
negative personas
Negative personas (also sometimes called anti-personas) are used to communicate to
stakeholders and product team members that the product is not being built to serve spe-
cific types of users. Like served personas, they aren‚Äôt users of the product. Their use is
purely rhetorical: to help communicate to other members of the team that a persona

---

## Chunk 773

should definitely not be the product‚Äôs design target. Good candidates for negative per-
sonas are often technology-savvy early-adopter personas for consumer products, crimi-
nals, less-harmful pranksters and ‚Äútrolls,‚Äù and IT specialists for business-user enterprise
products.
step 8: Expand the description of attributes
and behaviors

---

## Chunk 774

Your list of bullet-point characteristics and goals arrived at in Step 5 points to the essence
of complex behaviors but leaves much implied. Third-person narrative is far more pow-
erful at conveying the persona‚Äôs attitudes, needs, and problems to other team members.
It also deepens the designer/authors‚Äô connection to and empathy for the personas and
their motivations.
The persona narrative

---

## Chunk 775

A typical persona description should be a synthesis of the most important details
observed during research, relevant to this persona. This becomes an effective commu-
nication tool. Ideally, the majority of your user research findings should be contained
in your persona description. This will be the manner in which your research directly

---

## Chunk 776

informs design activities (as you will see in the upcoming chapters).
This narrative should be no longer than one or two pages of prose (or Powerpoint slides).
(A paragraph for every one or two bullet points from the characteristics in Step 5 is
appropriate.) The persona narrative does not need to contain every observed detail. Ide-

---

## Chunk 777

ally, the designers also performed the research, and most people outside the design team
do not require more detail than this.
The narrative must, by nature, contain some fictional situations, but, as previously dis-
cussed, it is not a short story. The best narrative quickly introduces the persona in terms

---

## Chunk 778

of his job or lifestyle. It briefly sketches a day in his life, including peeves, concerns, and
interests that have direct bearing on the product. Details should be an expansion of your
list of characteristics, with additional data derived from your observations and inter-
views. The narrative should express what the persona is looking for in the product by
way of a conclusion.

---

## Chunk 779

90 Part I: Goal-Directed Design

---

## Chunk 780

--- Page 121 ---
Be careful about the amount of detail in your descriptions. The detail should not exceed
the depth of your research. In scientific disciplines, if you record a measurement of 35.421
meters, this implies that your measurements are accurate to .001 meters. A detailed per-
sona description implies a similar level of observation in your research.

---

## Chunk 781

Also be sure not to introduce hints about design solutions into the persona description.
This narrative is about describing the persona‚Äôs behaviors and pain points, not about
how you plan to address them. That is the next step in the design process and is covered
in Chapter 4.
In summary:
‚Ä¢ Do include summarizing descriptions of all significant behavior patterns in your
narrative.

---

## Chunk 782

‚Ä¢ Do not include excessive fictional descriptions. Include just enough detail to cover
basic demographics and to weave the behavior patterns into a story.
‚Ä¢ Do not add levels of detail to your behavioral descriptions that you did not observe.
‚Ä¢ Do not introduce solutions into your persona narrative. Rather, highlight pain points.

---

## Chunk 783

Finally, never list ranges or averages as details for personas. Personas are individuals,
and would never have 1.5 kids making $35,000-45,000 per year. Those are values for mar-
ket segments. If these details are important to your persona, pick specifics.
The persona photo
When you start developing your narrative, choose photographs for your personas. Pho-

---

## Chunk 784

tographs make them feel more real as you create the narrative and engage others on the
team when you are finished. You should take great care in choosing a photograph. The best
photos capture demographic information, hint at the environment (a persona for a nurse
should be wearing a nurse‚Äôs uniform and be in a clinical setting, perhaps with a patient),

---

## Chunk 785

and capture the persona‚Äôs general attitude (a photo for a clerk overwhelmed by paperwork
might look harried). The authors keep handy several searchable databanks of stock pho-
tography as well as sources of Creative-Commons licensed repositories to help us find the
right persona pictures. Here are some other things to watch for with persona photos:

---

## Chunk 786

‚Ä¢ Do not use photos with unusual camera angles or distortions. This is distracting and
makes the persona look like a caricature.
‚Ä¢ Do not use photos with exaggerated expressions. These also will look like a caricature.
‚Ä¢ Do not use photos in which people are obviously posed and smiling for the camera.
‚Ä¢ Do use photos where the subjects look like average people, rather than models.

---

## Chunk 787

CH 3. Modeling Users: Personas and Goals 91

---

## Chunk 788

--- Page 122 ---
‚Ä¢ Do use photos in which the subject is engaged in an appropriate activity against a
realistic background.
‚Ä¢ Try to keep photos across persona sets similar in style and crop.
We have also found it sometimes useful to create photographic collages for each persona
to convey more emotional and experiential forces that drive the persona (see Figure 3-7).

---

## Chunk 789

Numerous small images juxtaposed have the potential to convey things that are difficult
to describe in words. There are also times that we find it useful to create models of the
personas‚Äô environments (for example, in the form of a floor plan). Again, this helps make
these environmental considerations more tangible.

---

## Chunk 790

Figure 3-7: Collages such as this, combined with carefully written narratives, are an effective way to
convey the emotional and experiential aspects of a persona.
When creating such communication aides, it‚Äôs important to remember that personas
are design and decision-making tools, not an end in themselves. While power can come

---

## Chunk 791

from creating a holistic image of a persona, too much embellishment and theater can
potentially make personas seem like a fluffy waste of time. This can ultimately reduce
their usefulness as user models.
92 Part I: Goal-Directed Design

---

## Chunk 792

--- Page 123 ---
Personas in Practice
Over the last decade, since the persona creation process was described in the second
edition of this book, questions have arisen about the proper use of personas. This section
endeavors to answer some of the criticisms leveled at persona-based design methods. It
also discusses additional persona-related concepts we‚Äôve used in our practice.

---

## Chunk 793

misconceptions about personas
The Inmates Are Running the Asylum first introduced personas as an approach to gen-
erating Goal-Directed design concepts back in 1998. Since that time, personas have
remained a topic of controversy among some designers and user researchers. Unfortu-
nately, many of the sometimes strenuous objections to the persona method are the result

---

## Chunk 794

of misunderstandings about how personas should be constructed, confusion about what
they are best used to accomplish, or a reaction to the misapplication of persona meth-
ods. We‚Äôll try to set the record straight by clarifying some of these misapprehensions.
Designers ‚Äúmake up‚Äù personas
Perhaps the biggest criticism we have heard about personas is that they are just made

---

## Chunk 795

up. Nothing could be further from the truth when personas are constructed correctly.
The behavior patterns that are captured using personas are real and ideally come from
actual ethnographic data‚Äîfrom user interviews and firsthand observations. Persona
goals are constructed from inferences and deductions made by the designer when inter-
preting this data.

---

## Chunk 796

This misconception most likely comes from the fact that fictional names, superficial (but
true to actual gathered data) demographic information, and narrative storytelling tech-
niques are overlaid onto the behavioral data. This is done to better engage the empathy
of designers and to communicate user needs to product team members. These narrative

---

## Chunk 797

constructs are communication aids only. They do not affect the real behavioral data used
to characterize the personas, and upon which design decisions will ultimately be made.
Unfortunately, not everyone claiming to use personas follows the detailed data gath-
ering process outlined in Chapter 2, or the persona creation process described in this

---

## Chunk 798

chapter. Sometimes demographic user profiles may be presented as personas with little
more than a bit of narrative window dressing. If you are involved with a product team,
design team, or client who claims to be using personas, ask them how their personas
were constructed, what user data was gathered, and how it was analyzed to create them.

---

## Chunk 799

An immediate yellow flag is a ‚Äúpersona‚Äù that does not have any goals associated with it.
While demographic information alone may help teams communicate a little about the
CH 3. Modeling Users: Personas and Goals 93

---

## Chunk 800

--- Page 124 ---
makeup of their user base, that information is insufficient to build personas that will be
of use in generating detailed design concepts.
Personas aren‚Äôt as useful as involving real people
Personas are purposely constructed from aggregated data gathered from real (and
potential) users. Over the years, some practitioners have questioned whether bringing

---

## Chunk 801

actual users with real photos, real demographics, and real, particular behaviors into the
design process wouldn‚Äôt be more effective and ‚Äútrue.‚Äù
This approach, known as participatory design, seems to solve some problems from a phil-
osophical and political standpoint, because you can‚Äôt argue about what a real user would

---

## Chunk 802

do when you have one there to consult. In reality, however, it actually creates some sig-
nificant problems for the conceptualization of the design. Clustering and analyzing the
behaviors of many people serves an essential purpose: It allows the designers to sepa-
rate critical behaviors and needs that are common across a broad set of users from the

---

## Chunk 803

idiosyncratic behaviors that are particular to a given user. Focusing on individual users
rather than aggregated sets of user behaviors also makes it more likely that you may miss
key behaviors that your individual user (with his idiosyncratic behaviors) just doesn‚Äôt
happen to do‚Äîor does differently than most users.

---

## Chunk 804

If your client or product team insists on involving real users, you can first explain to
them that personas are created from observations of real users. Then offer to provide
them with audio or video transcripts of your interview sessions (make sure that at least
some of your interviewees are open to this). Or you can invite a stakeholder along on an

---

## Chunk 805

interview. Once your team has some proof that your personas are based on actual user
behavior patterns, you may find that such objections settle themselves.
If that doesn‚Äôt work, you‚Äôll need to convince them that any individual user feedback has
to be synthesized against broader patterns in research, or aggregated with other users
providing feedback in the same session.
People don‚Äôt do tasks

---

## Chunk 806

Especially with consumer products and social systems, it is fair to say that people rarely
think in terms of tasks. Few people hop on Facebook, turn on a television, or visit a news
site to accomplish a particular thing that they have in mind. It can be more to ‚Äújust see
what‚Äôs happening,‚Äù and respond. Some designers have subsequently advocated that a

---

## Chunk 807

task-based approach will not serve these domains, and argue to get rid of personas and
design just from inspiration. While it might be correct to say that not all users think in
terms of tasks, don‚Äôt throw the baby out with the bathwater. Tasks aren‚Äôt the beating
94 Part I: Goal-Directed Design

---

## Chunk 808

--- Page 125 ---
heart of personas. Goals are, and ‚ÄúBe caught up on what‚Äôs happening‚Äù is a perfectly rea-
sonable goal.
Personas are traceable
While every major persona trait should be derived from research, some designers try to
only include persona traits if that exact trait was seen in a user interview. This is use-

---

## Chunk 809

ful for organizations that want to ensure that a strong user-centered methodology was
followed and that designers ‚Äúaren‚Äôt just making it up.‚Äù But few interviewees state their
goals succinctly out loud. Many times, the best quote is one that embodies what many
interviewees said, but that no one particular interviewee said. If you receive pressure

---

## Chunk 810

to ensure traceability, counter that personas are traceable to the patterns seen across
research, not from specific, idiosyncratic interviews.
Quantifying personas
Some design practitioners believe quantitative data is needed to validate personas. In
fact, if you follow the process described in Chapter 2 and this chapter closely, you should

---

## Chunk 811

have all the validation you need, in the form of detailed qualitative information.
The typical response to this from stakeholders or teams very wed to quantitative data
is ‚ÄúHow do you know that these personas truly represent the majority of users?‚Äù This
question comes from a confusion of personas with market segments. Market segmenta-

---

## Chunk 812

tion divides potential customers into groups based on demographic and psychographic
differences. Personas, on the other hand, represent behaviors using a product and, in
terms of the interface, do not always represent exclusive groupings. A given interface
design may support the needs of one or more secondary personas (as well as supple-

---

## Chunk 813

mental personas) in addition to the primary persona that determines the structure of
that interface. So, while the primary persona may not represent a majority of the market
alone, the combination of primary, secondary, and supplemental personas served by an
interface typically does.
That said, it can be useful to understand the market sizing of your personas. This is true

---

## Chunk 814

especially when it‚Äôs time for the development team to prioritize features at the detail
level (taking into account the information about non-exclusive persona groupings). As
mentioned in the preceding chapter, it is possible to construct ‚Äúpersona personality‚Äù sur-
veys that identify which persona each participant has the closest affinity to. The process
for doing so is as follows:

---

## Chunk 815

CH 3. Modeling Users: Personas and Goals 95

---

## Chunk 816

--- Page 126 ---
1 Revisit your behavioral variables and interviewee mappings to them.
2 For each variable, construct a multiple-choice question, the answer to which will
distinguish between the different personas. (Note that sometimes multiple personas
will have similar behaviors for a given variable.)
3 Construct two to four more questions for each variable that ask the same question in

---

## Chunk 817

a different way. This helps ensure that participants are answering accurately.
4 Arrange the survey questions in random order.
5 Field the survey to participants. Sample size is important: You can use an online
calculator such as http://www.surveysystem.com/sscalc.htm to find the appropriate
sample size for your product.

---

## Chunk 818

6 Tabulate each participant‚Äôs responses, tracking how many answers match each
persona. The persona with the most responses for a given participant is the persona that
participant has an affinity to.
7 Tabulate how many participants have an affinity to each persona, and divide this
number by the number of total participants. This is the market size (percentage) for
your personas.

---

## Chunk 819

Remember, it‚Äôs okay if your primary persona isn‚Äôt the largest segment; you also need to
figure the effect of secondary and supplemental personas, all of whom will be using a
single design.
organizational ‚Äúpersonas‚Äù
Personas are a tool for characterizing people‚Äôs behavior patterns. However, we have found
that a similar but much simpler concept is also useful for describing the behaviors of

---

## Chunk 820

organizations that our personas are employed by or affiliated with. For example, if you are
designing a payroll system, the needs of a small business and how the personas in it inter-
act are different from those of a multinational corporation. The personas are likely dif-
ferent (perhaps with more specialized roles than in a small business), and so is how they

---

## Chunk 821

interact, and so, in addition, are the rules and behaviors of the business itself. You can
imagine that this would also be true for other types of organizations for which you may
need to design‚Äîperhaps even for social units such as families at different stages of life.
As you gathered information for your personas, you undoubtedly captured information

---

## Chunk 822

about the organizations they worked for or were otherwise associated with. It is often
helpful to develop aggregate, fictional organizational ‚Äúpersonas‚Äù with which to affili-
ate your personas, using similar narrative approaches. Usually an evocative organiza-
tion name and one or two paragraphs describing the organization‚Äôs behaviors and pain

---

## Chunk 823

points regarding the product or service being designed are enough to provide the neces-
sary context. In place of a photo, our designers have created logos for these companies
for use in presentation materials.
96 Part I: Goal-Directed Design

---

## Chunk 824

--- Page 127 ---
when resources are limited: provisional personas
Although it is highly desirable that personas be based on detailed qualitative data, some-
times there is simply not enough time, resources, budget, or corporate buy-in to perform the
necessary fieldwork. In these cases, provisional personas (or, as Don Norman calls them, ‚Äúad

---

## Chunk 825

hoc‚Äù personas) can be useful rhetorical tools to clearly communicate assumptions about
who the important users are and what they need. These personas also can enforce rigorous
thinking about serving specific user needs (even if these needs are not validated).
Provisional personas are structured much like real personas but rely on available data

---

## Chunk 826

and designer best guesses about behaviors, motivations, and goals. They are typically
based on a combination of stakeholder and subject matter expert knowledge of users
(when available), as well as what is understood about users from existing market data.
Provisional personas are, in fact, a more fleshed-out persona hypothesis (as described in
Chapter 2).

---

## Chunk 827

Our experience is that, regardless of a lack of research, using provisional personas yields
better results than no user models. Like real personas, provisional personas can help
focus the product team and build consensus around product features and behaviors.
There are caveats, however. Provisional personas are called this because they should be

---

## Chunk 828

recognized as stand-ins for personas based on definitive qualitative data. While provi-
sional personas may help focus your design and product team, if you do not have data to
back up your assumptions, you may do the following:
‚Ä¢ Focus on the wrong design target.
‚Ä¢ Focus on the right target but miss key behaviors that could differentiate your product.

---

## Chunk 829

‚Ä¢ Have a difficult time getting buy-in from individuals and groups who did not
participate in their creation.
‚Ä¢ Discredit the value of personas, causing your organization to reject the use of personas
in the long term.
If you are using provisional personas, it‚Äôs important to do the following:
‚Ä¢ Clearly label and explain them as such. We often give them only first names.

---

## Chunk 830

‚Ä¢ Represent them visually with sketches, not photos, to reinforce their provisional
nature.
‚Ä¢ Try to use as much existing data as possible (market surveys, domain research, subject
matter experts, field studies, or personas for similar products).
‚Ä¢ Document what data was used and what assumptions were made.
‚Ä¢ Steer clear of stereotypes (which is more difficult to do without field data).

---

## Chunk 831

‚Ä¢ Focus on behaviors and goals, not demographics.
CH 3. Modeling Users: Personas and Goals 97

---

## Chunk 832

--- Page 128 ---
other Design models
Personas are extremely useful tools, but they certainly are not the only tool to help
model users and their environment. Holtzblatt and Beyer‚Äôs Contextual Design (Morgan
Kaufmann, 1993) provides a wealth of information on the models briefly discussed here.
work flow models
Work flow or sequence models are useful for capturing information flow and deci-

---

## Chunk 833

sion-making processes inside organizations. They usually are expressed as flow charts
or directed graphs that capture several phenomena:
‚Ä¢ A process‚Äôs goal or desired outcome
‚Ä¢ The frequency and importance of the process and each action
‚Ä¢ What initiates or prompts the execution of the process and each action
‚Ä¢ Dependencies‚Äîwhat must be in place to perform the process and each action, as well

---

## Chunk 834

as what is dependent on the completion of the process and each action
‚Ä¢ People who are involved, and their roles and responsibilities
‚Ä¢ Specific actions that are performed
‚Ä¢ Decisions that are made
‚Ä¢ Information that is used to support decisions
‚Ä¢ What can go wrong‚Äîerrors and exception cases
‚Ä¢ How errors and exceptions are corrected

---

## Chunk 835

A well-developed persona should capture individual work flows, but work flow mod-
els are still necessary for capturing exhaustive, interpersonal, or organizational work
flows. Interaction design based primarily on work flows often fails in the same way as
‚Äúimplementation model‚Äù software whose interaction is based primarily on its internal

---

## Chunk 836

technical structure. Because work flow is to business what structure is to programming,
work flow-based design typically yields a kind of ‚Äúbusiness implementation model‚Äù that
captures all of the functionality but little of the humanity.
Artifact models
As the name suggests, artifact models represent different artifacts that users employ

---

## Chunk 837

in their tasks and work flows. Often these artifacts are online or paper forms. Artifact
models typically capture commonalities and significant differences between similar
artifacts for the purpose of extracting and replicating best practices in the eventual
design. Artifact models can be useful later in the design process. Remember that direct
98 Part I: Goal-Directed Design

---

## Chunk 838

--- Page 129 ---
translation of paper systems to digital systems, without a careful analysis of goals and
application of design principles (found in Part II of this book), usually leads to usability
issues.
Physical models
Physical models, like artifact models, endeavor to capture elements of the user‚Äôs envi-
ronment. Physical models focus on capturing the layout of physical objects that com-

---

## Chunk 839

prise the user‚Äôs workspace, which can provide insight into frequency-of-use issues and
physical barriers to productivity. Good persona descriptions incorporate some of this
information. But it may be helpful in complex physical environments (such as hospi-
tal floors and assembly lines) to create discrete, detailed physical models (maps or floor
plans) of the user environment.

---

## Chunk 840

Personas and other models make sense of otherwise overwhelming and confusing user
data. Now that you are empowered with sophisticated models as design tools, the next
chapter will show you how to employ these tools to translate user goals and needs into
workable design solutions.
Notes
1. Constantine and Lockwood, 2002
2. Grudin and Pruitt, 2002
3. Mikkelson and Lee, 2000

---

## Chunk 841

4. Grudin and Pruitt, 2002
5. Grudin and Pruitt, 2002
6. Constantine and Lockwood, 1999
7. Steinberg and Palmer, 2003
8. Beyer and Holtzblatt, 1998
9. Dillon, 2001
10. Goodwin, 2001
CH 3. Modeling Users: Personas and Goals 99

---

## Chunk 842

--- Page 131 ---
Ch 4
sETTIng ThE VIsIon:
sCEnArIos AnD DEsIgn
rEQuIrEmEnTs
In the two previous chapters, we talked about how to gather qualitative information
about users and create models using that information. By carefully analyzing user
research and synthesis of personas and other models, we create a clear picture of our

---

## Chunk 843

users and their respective goals, as well as their current situation. This brings us, then, to
the crux of the whole method: how we use this understanding of people to create design
solutions that satisfy and inspire users, while simultaneously addressing business goals
and technical constraints.
bridging the research-Design gap

---

## Chunk 844

Product teams often encounter a serious hurdle soon after they begin a new project.
Things start out great. They gather a bunch of research data‚Äîor, more typically, hire
someone to gather it for them‚Äîbe it market research, user research, or competitive
product research. Or perhaps they dispense with research, and brainstorm and collect a
set of ideas that seem particularly cool or useful.

---

## Chunk 845

Conducting research certainly yields insights about users, and having brainstorming
sessions is fun and gets the team inspired. But when it‚Äôs time to make detailed design

---

## Chunk 846

--- Page 132 ---
and development decisions, the team rapidly realizes that they are missing a critical
link between the research and the actual product design. Without a compass pointing
the way through the research, without an organizing principle that highlights features
and functions that are relevant to real users and describes how they all fit together into a

---

## Chunk 847

coherent product that satisfies both user and business needs, no clear solution is in sight.
This chapter describes the first half of a process for bridging this research-design gap.
It employs personas as the main characters in a set of techniques that rapidly arrive at
design solutions in an iterative, repeatable, and testable fashion. This process has four
major activities:

---

## Chunk 848

‚Ä¢ Developing stories or scenarios as a means of imagining ideal user interactions
‚Ä¢ Using those scenarios to extract design requirements
‚Ä¢ Using these requirements in turn to define the product‚Äôs fundamental interaction
framework
‚Ä¢ Filling in that framework with ever-increasing amounts of design detail
The glue that holds this process together, the compass in the wilderness of research data

---

## Chunk 849

and potential product features, is narrative: using personas to create stories that point
to user satisfaction.
scenarios: narrative as a Design Tool
Narrative, or storytelling, is one of the oldest human activities. Much has been written
about the power of narrative to communicate ideas. However, narrative is also one of our

---

## Chunk 850

most powerful creative methods. From a very young age, we are accustomed to using
stories to think about possibilities, and this is an incredibly effective way to imagine a
new and better future for our users. Imagining a story about a person using our product
leverages our creativity to a greater power than when we just imagine a better form fac-

---

## Chunk 851

tor or configuration of screen elements. Furthermore, because of the intrinsically social
aspect of narrative, it is a very effective and compelling way to share good ideas among
team members and stakeholders. Ultimately, experiences designed around narrative
tend to be more comprehensible and engaging for users because they are structured
around a story.

---

## Chunk 852

Evidence of the effectiveness of narrative as a design tool is all around us. The famous
Disney Imagineers would be lost without the modern-day myths they use as the founda-
tion for the experiences they build. The experiences we create for digital products have
their own (perhaps more grounded) narratives from which interactions can be built.
102 Part I: Goal-Directed Design

---

## Chunk 853

--- Page 133 ---
Much has been written about this idea. Brenda Laurel explored the concept of structur-
ing interaction around dramatic principles in her book Computers as Theatre, in which
she urges us to ‚Äú‚Ä¶focus on designing the action. The design of objects, environments,
and characters is all subsidiary to this central goal.‚Äù1 John Rheinfrank and Shelley Even-

---

## Chunk 854

son also talk about the power of ‚Äústories of the future‚Äù for developing conceptually com-
plex interactive systems,2 and John Carroll has created a substantial body of work about
scenario-based design, which we discuss later in this chapter.
Narrative also lends itself to effective visual depictions of interactive products. Interac-

---

## Chunk 855

tion design is first and foremost the design of behavior that occurs over time. Therefore,
a narrative structure combined with the support of fast and flexible visualization tools
(such as the humble whiteboard) is perfectly suited for motivating, envisioning, repre-
senting, and validating interaction concepts.

---

## Chunk 856

Interaction design narratives are quite similar to the comic-book-like sequences called
storyboards that are used in the motion picture industry. They share two significant
characteristics: plot and brevity. Just as storyboards breathe life into a movie script,
design solutions should be created and rendered to follow a plot‚Äîa story. Putting too

---

## Chunk 857

much detail into the storyboards simply wastes time and money and has a tendency to
tie us to suboptimal ideas simply because drawing them consumes significant resources
(leaving less time for concept- and behavior-level refinement).
In the earliest phases of the process, we focus only on the ‚Äúplot points,‚Äù which allows us

---

## Chunk 858

to be fluid as we explore design concepts. Because they are enough to convey the action
and the potential experience, many millions of Hollywood dollars have been invested on
the basis of simple pencil sketches or line drawings. By focusing on the narrative, we can
quickly and flexibly arrive at a high-level design solution without getting bogged down

---

## Chunk 859

by the inertia and expense inherent in high-production-value renderings. (However,
such renderings are certainly appropriate once a working design framework is in place.)
scenarios versus use cases and user stories
Scenarios and use cases are both methods of describing the user‚Äôs interaction with a
system. However, they serve very different functions. Goal-Directed scenarios are an

---

## Chunk 860

iterative means of defining a product‚Äôs behavior from the standpoint of specific users
(personas). This includes not only the system‚Äôs functionality, but the priority of functions
and how those functions are expressed in terms of what the user sees and how she inter-
acts with the system.
Use cases, on the other hand, are a technique based on exhaustive descriptions of the sys-

---

## Chunk 861

tem‚Äôs functional requirements, often of a transactional nature, focusing on low-level user
action and accompanying system response.3 The system‚Äôs precise behavior‚Äîexactly how
the system responds‚Äîtypically is not part of a conventional or concrete use case; many
CH 4. Setting the Vision: Scenarios and Design Requirements 103

---

## Chunk 862

--- Page 134 ---
assumptions about the form and behavior of the system to be designed remain implicit.4
Use cases permit a complete cataloging of user tasks for different classes of users but
say little or nothing about how these tasks are presented to the user or how they should
be prioritized in the interface. In our experience, the biggest shortcoming of traditional

---

## Chunk 863

use cases as a basis for interaction design is their tendency to treat all possible user
interactions as equally likely and important. This is indicative of their origin in software
engineering rather than interaction design. They may be useful in identifying edge cases
and for determining that a product is functionally complete, but they should be deployed

---

## Chunk 864

only in the later stages of design validation.
User stories are used in agile programming methods, but typically they aren‚Äôt actual sto-
ries or narratives. Rather, they are short sentences phrased like this: ‚ÄúAs a user, I would
like to log in to my online banking account.‚Äù Typically this is followed by another couple

---

## Chunk 865

of sentences briefly describing the necessary interface to accomplish the interaction.
User stories are much more like informally phrased requirements than they are like sce-
narios; they don‚Äôt describe the user‚Äôs entire flow at a big-picture level or describe what
the user‚Äôs end goal is. Both of these are critical for stripping away unnecessary interac-

---

## Chunk 866

tions and targeting what users really need (see Chapter 12 for more on this topic).
Scenarios are more akin to epics as described by agile methods. Like scenarios, epics do
not describe task-level interactions, but rather broader and more far-reaching clusters
of interactions that are intended to meet user goals. Epics focus more on function and

---

## Chunk 867

presentation of user interfaces and interactions than they do on user behaviors. But in
terms of scope and appropriate level of granularity, they have much more in common
with scenarios than user stories do.
scenario-based design
In the 1990s, substantial work was done by the HCI (human-computer interaction) com-
munity around the idea of use-oriented software design. From this work came the con-

---

## Chunk 868

cept of the scenario, commonly used to describe a method of design problem solving by
concretization: using a specific story to both construct and illustrate design solutions.
These concepts are discussed by John M. Carroll in his book Making Use:
Scenarios are paradoxically concrete but rough, tangible but flexible ‚Ä¶ they implicitly

---

## Chunk 869

encourage ‚Äúwhat-if?‚Äù thinking among all parties. They permit the articulation of
design possibilities without undermining innovation ‚Ä¶ Scenarios compel attention to
the use that will be made of the design product. They can describe situations at many
levels of detail, for many different purposes, helping to coordinate various aspects of
the design project.5
104 Part I: Goal-Directed Design

---

## Chunk 870

--- Page 135 ---
Carroll‚Äôs use of scenario-based design describes how users accomplish tasks. It consists of
an environmental setting and includes agents or actors who are abstracted stand-ins for
users, with role-based names such as Accountant or Programmer.
Although Carroll certainly understands the power and importance of scenarios in the

---

## Chunk 871

design process, we‚Äôve found two shortcomings with scenarios as he approaches them:
‚Ä¢ Carroll‚Äôs concept of the actor as an abstracted, role-oriented model is insufficiently
concrete to provide understanding of or empathy with users. It is impossible to design
appropriate behaviors for a system without understanding its users in detail.

---

## Chunk 872

‚Ä¢ Carroll‚Äôs scenarios jump too quickly to the elaboration of tasks without considering
the user‚Äôs goals and motivations that drive and filter these tasks. Although Carroll does
briefly discuss goals, he refers only to goals of the scenario. These goals are circularly
defined as the completion of specific tasks. In our experience, user goals must be

---

## Chunk 873

considered before user tasks can be identified and prioritized. Without addressing
the motivation of human behavior, high-level product definition can be difficult and
misguided.
The missing ingredient in Carroll‚Äôs scenario-based design methods is the use of perso-
nas. A persona is a tangible representation of the user that acts as a believable agent in

---

## Chunk 874

the setting of a scenario. In addition to reflecting current behavior patterns and moti-
vations, personas let you explore how user motivations should influence and prioritize
tasks in the future. Because personas model goals and not simply tasks, the scope of the
problems addressed by scenarios can be broadened to include those related to product

---

## Chunk 875

definition. They help answer the questions ‚ÄúWhat should this product do?‚Äù and ‚ÄúHow
should this product look and behave?‚Äù
Persona-based scenarios
Persona-based scenarios are concise narrative descriptions of one or more personas
using a product or service to achieve specific goals. They allow us to start our designs

---

## Chunk 876

from a story describing an ideal experience from the persona‚Äôs perspective, focusing on
people and how they think and behave, rather than on technology or business goals.
Scenarios can capture the nonverbal dialog6 between the user and a product, environ-
ment, or system over time, as well as the structure and behavior of interactive functions.

---

## Chunk 877

Goals serve as a filter for tasks and as a guide for structuring the display of information
and controls during the iterative process of constructing the scenarios.
Scenario content and context are derived from information gathered during the Research
phase and analyzed during the Modeling phase. Designers perform a type of role play

---

## Chunk 878

in creating these scenarios, walking the personas through their future interactions with
CH 4. Setting the Vision: Scenarios and Design Requirements 105

---

## Chunk 879

--- Page 136 ---
the product or service,7 almost similar to actors performing improvisation. This process
leads to real-time synthesis of structure and behavior‚Äîtypically at a whiteboard or on
tablets‚Äîand later informs the detailed look and feel. Finally, personas and scenarios are
used to test the validity of design ideas and assumptions throughout the process.
Three types of scenarios

---

## Chunk 880

The Goal-Directed Design method employs three types of persona-based scenarios at
different points in the design process, each with a successively more interface-specific
focus. The first‚Äîthe context scenario‚Äîis used to explore, at a high level, how the product
can best serve the needs of the personas. The context scenarios are created before any

---

## Chunk 881

design sketching is performed. They are written from the persona‚Äôs perspective, focusing
on human activities, perceptions, and desires. It is when developing this kind of scenario
that the designer has the most leverage to imagine an ideal user experience. More details
about creating this type of scenario can be found in the section ‚ÄúStep 4: Construct con-
text scenarios.‚Äù

---

## Chunk 882

Once the design team has defined the product‚Äôs functional and data elements and devel-
oped a Design Framework (as described in Chapter 5), a context scenario is revised. It
becomes a key path scenario by more specifically describing user interactions with the
product and by introducing the design‚Äôs vocabulary. These scenarios focus on the most

---

## Chunk 883

significant user interactions, always paying attention to how a persona uses the product
to achieve its goals. Key path scenarios are iteratively refined along with the design as
more and more detail is developed.
Throughout this process, the design team uses validation scenarios to test the design
solution in a variety of situations. These scenarios tend to be less detailed and typically

---

## Chunk 884

take the form of a number of what-if questions about the proposed solutions. Chapter 5
covers development and use of key path and validation scenarios.
Design requirements: The ‚Äúwhat‚Äù
of Interaction
The Requirements Definition phase determines the what of the design: what information
and capabilities our personas require to accomplish their goals. It is critical to define

---

## Chunk 885

and agree on the what before we move on to the next question: how the product looks,
behaves, operates, and feels. Conflating these two questions can be one of the biggest pit-
falls in the design of an interactive product. Many designers are tempted to jump right
into detailed design and render possible solutions. Regardless of how creative and skill-

---

## Chunk 886

ful you are, we urge you not to do this. It runs the risk of leading to a never-ending cycle
of iteration. Proposing a solution without clearly defining and agreeing on the problem
106 Part I: Goal-Directed Design

---

## Chunk 887

--- Page 137 ---
leaves you without a clear, objective method of evaluating the design‚Äôs fitness. This in
turn can lead to ‚ÄúI like‚Äù versus ‚Äúyou like‚Äù subjective differences within the product team
and stakeholders, with no easy way to converge to consensus.
In lieu of such a method, you, your stakeholders, and your clients are likely to resort to

---

## Chunk 888

taste and gut instinct, which have a notoriously low success rate with something as com-
plex as an interactive product.
In other creative fields, the importance of defining the what first is well understood.
Graphic novelists don‚Äôt start with inking and coloring; they explore their characters
and then outline and storyboard, roughly sketching both the narrative and form. That is

---

## Chunk 889

exactly what we will do as we define our digital concepts.
Define what the product will do before you design how the product will do it.
Design requirements aren‚Äôt features
It‚Äôs important to note that our concept of a ‚Äúrequirement‚Äù here is different from how
the term is commonly used (and, we believe, misused) in the industry. In many

---

## Chunk 890

product-development organizations, ‚Äúrequirement‚Äù has become synonymous with ‚Äúfea-
ture‚Äù or ‚Äúfunction.‚Äù There is clearly a relationship between requirements and functions
(which we leverage as a key part of our design process, as you will see in the next chap-
ter). But we suggest that you think of design requirements as being synonymous with

---

## Chunk 891

needs. Put another way, at this point, you want to rigorously define the human and busi-
ness needs your product must satisfy.
Design requirements aren‚Äôt specifications
Another industry use of the term ‚Äúrequirements‚Äù refers to a laundry list of capabilities
generated, typically by product managers. These marketing requirements documents

---

## Chunk 892

(MRDs) or product requirements documents (PRDs) are, when well executed, an attempt
to describe the what of a product, but there are a few pitfalls. First, these lists are often
only loosely connected to any kind of user research and quite frequently are generated
without any serious exploration of user needs. Although the what described in these doc-

---

## Chunk 893

uments might (if you‚Äôre lucky) reflect a coherent product, there‚Äôs little guarantee that it
will be a product the users find desirable.
Second, many MRDs and PRDs fall into the trap of confusing the what of the product
with the how. Detailed descriptions of interfaces, such as ‚ÄúThere should be a menu con-
taining‚Ä¶,‚Äù presuppose a solution that may be inappropriate for the user or his work flow.

---

## Chunk 894

CH 4. Setting the Vision: Scenarios and Design Requirements 107

---

## Chunk 895

--- Page 138 ---
Mandating solutions before the design process is a recipe for trouble, because it can eas-
ily lead to clunky and disjointed interactions and products.
For example, think about designing a data analytics tool to help an executive better
understand the state of his business. If you jump right to the how without understanding

---

## Chunk 896

the what, you might assume that the tool‚Äôs output should be reports. It would be easy
to come to this conclusion. If you performed user research, you probably would have
noticed that reports are a widespread and accepted solution. However, if you imagine
some scenarios and analyze your users‚Äô actual requirements, you might realize that your

---

## Chunk 897

executive actually needs a way to recognize exceptional situations before opportunities
are missed or problems arise. He or she also needs a way to understand emerging trends
in the data. From here, it isn‚Äôt difficult to see that static, flat reports are hardly the best
way to meet these needs. With such a solution, your executive has to do the hard work of

---

## Chunk 898

scrutinizing several of these reports to find the significant data underlying such excep-
tions and trends. Much better solutions might include data-driven exception reporting
or real-time trend monitors.
The final problem with this kind of requirements document is that in itself it is of little
use to either business stakeholders or developers. Without a way for them to visualize

---

## Chunk 899

the contents of these lists‚Äîto see a design that reflects what the lists describe‚Äîneither
stakeholders nor developers will have an easy time making decisions based on what is
described.
Design requirements are strategic
In figuring out the best way to meet particular human needs by starting with require-
ments rather than solutions, interaction designers have an extraordinary amount of

---

## Chunk 900

leverage to create powerful and compelling products. Separating problem and solution
is an approach that provides maximum flexibility in the face of changing technologi-
cal constraints and rising opportunities. By clearly defining user needs, designers can
work with technologists to find the best viable and feasible solutions without compro-

---

## Chunk 901

mising the product‚Äôs ability to help people achieve their goals. Working in this manner,
the product definition is not at risk when the implementation runs into problems. Also,
it becomes possible to plan long-term technology development so that it can provide
increasingly sophisticated ways of meeting user needs.
Design requirements come from multiple sources

---

## Chunk 902

We‚Äôve already talked about personas and scenarios as a primary source of design
requirements. While that may be the most important part of the requirements equa-
tion, other requirements also factor into the design. Business needs and constraints, as
well as technical and legal constraints, typically are gathered during interviews with the
108 Part I: Goal-Directed Design

---

## Chunk 903

--- Page 139 ---
product‚Äôs business and technical stakeholders. The next sections offer a more elaborate
list of requirements.
The requirements Definition Process
The translation of robust models into design solutions consists of two major phases. The
Requirements Definition, shown in Figure 4-1, answers the broad questions about what

---

## Chunk 904

a product is and what it should do. The Framework Definition answers questions about
how a product behaves and how it is structured to meet user goals.
1,2,3
Create Explore and Identify Construct Identify
Problem and Vision Brainstorm Persona Context Design
Statements Expectations Scenarios Requirements
Figure 4-1: An overview of the Requirements Definition process

---

## Chunk 905

In this section, we‚Äôll discuss the Requirements Definition in detail. The Framework Defini-
tion is covered in Chapter 5. The methods described here are based on the persona-based
scenario methodology developed by Robert Reimann, Kim Goodwin, Lane Halley, David
Cronin, and Wayne Greenwood, and refined over the last decade by design practitioners
at Cooper.

---

## Chunk 906

The Requirements Definition process consists of the following five steps (which are
described in detail in the remainder of this chapter):
1 Create problem and vision statements
2 Explore/brainstorm
3 Identify persona expectations
4 Construct context scenarios
5 Identify design requirements
Although these steps proceed in roughly chronological order, they represent an iterative

---

## Chunk 907

process. Designers can expect to cycle through Steps 3 through 5 several times until
the requirements are stable. This is a necessary part of the process and shouldn‚Äôt be
short-circuited. A detailed description of each of these steps follows.
CH 4. Setting the Vision: Scenarios and Design Requirements 109

---

## Chunk 908

--- Page 140 ---
step 1: Create problem and vision statements
Before beginning the process of ideation, it‚Äôs important for designers to have a clear
mandate for moving forward. While the Goal-Directed method aims to define products
and services via personas, scenarios, and design requirements, it is often useful at this

---

## Chunk 909

point to define in what direction these scenarios and requirements should be headed.
We already have a sense of which users we‚Äôre targeting and what their goals are, but
lacking a clear product mandate, there is still considerable room for confusion. Problem
and vision statements provide just such a mandate and are extremely helpful in building

---

## Chunk 910

consensus among stakeholders before the design process moves forward.
At a high level, the problem statement defines the purpose of the design initiative.8 A
design problem statement should concisely reflect a situation that needs changing,
for both the personas and the business providing the product to the personas. Often a

---

## Chunk 911

cause-and-effect relationship exists between business concerns and persona concerns.
For example:
Company X‚Äôs customer satisfaction ratings are low. Market share has diminished by
10 percent over the past year because users have inadequate tools to perform tasks X,
Y, and Z that would help them meet their goal of G.

---

## Chunk 912

Connecting business issues to usability issues is critical to drive stakeholders‚Äô buy-in to
design efforts and to frame the design effort in terms of both user and business goals.
The vision statement is an inversion of the problem statement that serves as a high-level
design objective or mandate. In the vision statement, you lead with the user‚Äôs needs, and

---

## Chunk 913

you transition from those to how the design vision meets business goals. Here‚Äôs a sample
template for the preceding example‚Äôs product redesign (similar wording works for new
products as well):
The new design of Product X will help users achieve G by allowing them to do X, Y,
and Z with greater [accuracy, efficiency, and so on], and without problems A, B, and C

---

## Chunk 914

that they currently experience. This will dramatically improve Company X‚Äôs customer
satisfaction ratings and lead to increased market share.
The content of both the problem and vision statements should come directly from
research and user models. User goals and needs should be derived from the primary
and secondary personas, and business goals should be extracted from stakeholder
interviews.

---

## Chunk 915

Problem and vision statements are useful when you are redesigning an existing product.
They also are useful for new-technology products or products being designed for unex-
plored market niches. With these tasks, formulating user goals and frustrations into
110 Part I: Goal-Directed Design

---

## Chunk 916

--- Page 141 ---
problem and vision statements helps establish team consensus and focus attention on
the priorities of design activity to follow.
step 2: Explore and brainstorm
At the early stages of the Requirements Definition, exploration, or brainstorming,
assumes a somewhat ironic purpose. At this point in the project, we have been research-

---

## Chunk 917

ing and modeling users and the domain for days or even months, and it is almost impos-
sible to avoid having developed some preconceptions about what the solution looks like.
However, ideally we‚Äôd like to create context scenarios without these prejudgments, and
instead really focus on how our personas would likely want to engage with the product.

---

## Chunk 918

We brainstorm at this stage to get these ideas out of our heads so that we can record
them and thereby ‚Äúlet them go‚Äù for the time being.
The primary purpose here is to eliminate as much preconception as possible. Doing so
allows designers to be open-minded and flexible as they use their imagination to con-
struct scenarios and to use their analytical skills to derive requirements from these sce-

---

## Chunk 919

narios. A side benefit of brainstorming at this point in the process is that it switches your
brain into ‚Äúsolution mode.‚Äù Much of the work performed in the Research and Modeling
phases is analytical in nature, and it takes a different mindset to come up with inventive
designs.
Exploration, as the term suggests, should be unconstrained and uncritical. Air all the

---

## Chunk 920

wacky ideas you‚Äôve been considering (plus some you haven‚Äôt), and be prepared to record
them and file them for safekeeping until much later in the process. You don‚Äôt know if any
of them will be useful in the end, but you might find the germ of something wonderful
that will fit into the design framework you later create.

---

## Chunk 921

It‚Äôs also useful to cherry-pick some exploratory concepts to share with stakeholders or
clients as a means to discover their true appetite for creative solutions and time hori-
zons. If the stakeholders say they want ‚Äúblue-sky thinking,‚Äù you can use carefully selected
exploratory concepts to test your blue-sky ideas and watch their reactions. If the discus-

---

## Chunk 922

sion seems negative, you know to calibrate your thinking a bit more conservatively as
you move forward with your scenarios.
Karen Holtzblatt and Hugh Beyer describe a facilitated method for brainstorming that
can be useful for getting an exploration session started, especially if your team includes
stakeholders, clients, or even developers who are eager to get started thinking about
solutions.9

---

## Chunk 923

Don‚Äôt spend too much time on the brainstorming step. A few hours for simple projects
to a couple of days for a project of significant scope or complexity should be more than
sufficient for you and your teammates to get all those crazy ideas out of your systems. If
CH 4. Setting the Vision: Scenarios and Design Requirements 111

---

## Chunk 924

--- Page 142 ---
you find your ideas getting repetitious, or the popcorn stops popping, that‚Äôs a good time
to stop.
step 3: Identify persona expectations
As we discussed in Chapter 1, a person‚Äôs mental model is her own internal representation
of reality‚Äîhow she thinks about or explains something to herself. Mental models are

---

## Chunk 925

deeply ingrained, are almost subliminal in terms of a person‚Äôs self-awareness of them,
and are frequently the result of a lifetime of cumulative experiences. People‚Äôs expecta-
tions about a product and how it works are highly informed by their mental model.
It is therefore important that the represented model of our interfaces‚Äîhow the

---

## Chunk 926

design behaves and presents itself‚Äîshould match what we understand about users‚Äô
mental models as much as possible. The represented model should not reflect the
implementation model‚Äîhow the product is actually constructed internally.
To accomplish this, we formally record these expectations. They are an important

---

## Chunk 927

source of design requirements. For each primary and secondary persona, we identify the
following:
‚Ä¢ Attitudes, experiences, aspirations, and other social, cultural, environmental, and
cognitive factors that influence the persona‚Äôs expectations
‚Ä¢ General expectations and desires the persona may have about the experience of using
the product

---

## Chunk 928

‚Ä¢ Behaviors the persona will expect or want from the product
‚Ä¢ How that persona thinks about basic elements or units of data (For example, in an
e-mail application, the basic elements of data might be messages and people.)
Your persona descriptions may contain enough information to answer these questions
directly; however, your research data will remain a rich resource. Use it to analyze how

---

## Chunk 929

interview subjects define and describe objects and actions that are part of their usage
patterns, along with the language and grammar they use. Here are some things to
look for:
‚Ä¢ What do the interview subjects mention first?
‚Ä¢ Which action words (verbs) do they use? What nouns?
‚Ä¢ Which intermediate steps, tasks, or objects in a process don‚Äôt they mention? (Hint:

---

## Chunk 930

These might not be terribly important to how they think about things.)
112 Part I: Goal-Directed Design

---

## Chunk 931

--- Page 143 ---
step 4: Construct context scenarios
All scenarios are stories about people and their activities, but context scenarios are the
most storylike of the three types we employ.
A context scenario tells the story of a particular user persona, with various motivations,
needs, and goals, using the future version of your product in the way that is most typical

---

## Chunk 932

for that persona. It describes the broad context in which that persona‚Äôs usage patterns
are exhibited. It includes environmental and organizational (in the case of enterprise
systems) considerations.10 A successful context scenario captures all of these attributes
and addresses them in the extrapolated work flow narrative you create.

---

## Chunk 933

As we‚Äôve discussed, this is where design begins. As you develop context scenarios, you
should focus on how the product you are designing can best help your personas achieve
their goals. Context scenarios establish the primary touch points that each primary
and secondary persona has with the system (and possibly with other personas) over the
course of a day or some other meaningful length of time.

---

## Chunk 934

Context scenarios should be broad and relatively shallow in scope. They should not
describe product or interaction detail but rather should focus on high-level actions from
the user‚Äôs perspective. It is important to map out the big picture first so that we can
systematically identify design requirements. Only then can we design appropriate inter-
actions and interfaces.

---

## Chunk 935

Context scenarios address questions such as the following:
‚Ä¢ In what setting(s) will the product be used?
‚Ä¢ Will it be used for extended amounts of time?
‚Ä¢ Is the persona frequently interrupted?
‚Ä¢ Do several people use a single workstation or device?
‚Ä¢ With what other products will it be used?
‚Ä¢ What primary activities does the persona need to perform to meet her goals?

---

## Chunk 936

‚Ä¢ What is the expected end result of using the product?
‚Ä¢ How much complexity is permissible, based on persona skill and frequency of use?
Context scenarios should not represent product behaviors as they currently are. These
scenarios represent the brave new world of Goal-Directed products, so, especially in the

---

## Chunk 937

initial phases, focus on addressing the personas‚Äô goals. Don‚Äôt yet worry about exactly
how things will get accomplished. Initially you should treat the design as a bit of a magic
black box.
CH 4. Setting the Vision: Scenarios and Design Requirements 113

---

## Chunk 938

--- Page 144 ---
In most cases, more than one context scenario is necessary. This is true especially when
there are multiple primary personas, but sometimes even a single primary persona may
have two or more distinct contexts of use.
Context scenarios are also entirely textual. We are not yet discussing form, only the

---

## Chunk 939

behaviors of the user and the system. This discussion is best accomplished as a textual
narrative, saving the ‚Äúhow‚Äù for later refinement steps.
A sample context scenario
The following is the first iteration of a context scenario for a primary persona for a per-
sonal digital assistant (PDA) type phone, including both the device and its service. Our

---

## Chunk 940

persona is Vivien Strong, a real-estate agent in Indianapolis, whose goals are to balance
work and home life, close the deal, and make each client feel like he or she is her only
client.
Here is Vivien‚Äôs context scenario:
1 While getting ready in the morning, Vivien uses her phone to check her e-mail.
Because it has a relatively large screen and quick connection time, it‚Äôs more convenient

---

## Chunk 941

than booting up a computer as she rushes to make her daughter, Alice, a sandwich for
school.
2 Vivien sees an e-mail from her newest client, Frank, who wants to look at a house
this afternoon. The device has his contact info, so she can call him with a simple action
right from the e-mail.
3 While on the phone with Frank, Vivien switches to speakerphone so she can view

---

## Chunk 942

the screen while talking. She looks at her appointments to see when she‚Äôs free. When
she creates a new appointment, the phone automatically makes it an appointment with
Frank, because it knows with whom she is talking. She quickly enters the address of the
property into the appointment as she finishes her conversation.

---

## Chunk 943

4 After sending Alice to school, Vivien heads into the real-estate office to gather
some papers for another appointment. Her phone has already updated her Outlook
appointments, so the rest of the office knows where she‚Äôll be in the afternoon.
5 The day goes by quickly, and eventually Vivien is running a bit late. As she heads

---

## Chunk 944

toward the property she‚Äôll be showing Frank, the phone alerts her that her appointment
is in 15 minutes. When she flips open the phone, she sees not only the appointment, but
also a list of all documents related to Frank, including e-mails, memos, phone messages,
and call logs to Frank‚Äôs number. Vivien initiates a call, and the phone automatically

---

## Chunk 945

connects to Frank because it knows her appointment with him is soon. She lets him
know she‚Äôll be there in 20 minutes.
114 Part I: Goal-Directed Design

---

## Chunk 946

--- Page 145 ---
6 Vivien knows the address of the property but is unsure exactly where it is. She
pulls over and taps the address she put into the appointment. The phone downloads
directions along with a thumbnail map showing her location relative to the destination.
7 Vivien gets to the property on time and starts showing it to Frank. She hears

---

## Chunk 947

the phone ring from her purse. Normally while she is in an appointment, the phone
automatically goes to voicemail, but Alice has a code she can press to get through. The
phone knows it‚Äôs Alice calling, so it uses a distinctive ringtone.
8 Vivien takes the call. Alice missed the bus and needs to be picked up. Vivien calls her

---

## Chunk 948

husband to see if he can do it. She gets his voicemail; he must be out of service range.
She tells him she‚Äôs with a client and asks if he can get Alice. Five minutes later the phone
sounds a brief tone. Vivien recognizes it as her husband‚Äôs; she sees he‚Äôs sent her an
instant message: ‚ÄúI‚Äôll get Alice; good luck on the deal!‚Äù

---

## Chunk 949

Notice how the scenario remains at a fairly high level, without getting too specific about
interfaces or technologies. It‚Äôs important to create scenarios that are within the realm
of technical possibility, but at this stage the details of reality are unimportant. We want
to leave the door open for truly novel solutions, and it‚Äôs always possible to scale back; we

---

## Chunk 950

are ultimately trying to describe an optimal, yet still feasible, experience. Also notice
how the activities in the scenario tie back to Vivien‚Äôs goals and try to eliminate as many
tasks as possible.
Pretending it‚Äôs magic
A powerful tool in the early stages of developing scenarios is to pretend the interface
is magic. If your persona has goals and the product has magic powers to meet them,

---

## Chunk 951

how simple could the interaction be? This kind of thinking is useful in helping designers
think outside the box. Magic solutions obviously won‚Äôt suffice, but figuring out creative
ways to technically accomplish interactions that are as close to magic solutions as pos-
sible (from the personas‚Äô perspective) is the essence of great interaction design. Products

---

## Chunk 952

that meet goals with a minimum of hassle and intrusion seem almost magical to users.
Some of the interactions in the preceding scenario may seem a bit magical, but all are
possible with technology available today. It‚Äôs the goal-directed behavior, not the technol-
ogy alone, that provides the magic.
In the early stages of design, pretend the interface is magic.

---

## Chunk 953

CH 4. Setting the Vision: Scenarios and Design Requirements 115

---

## Chunk 954

--- Page 146 ---
step 5: Identify design requirements
After you are satisfied with an initial draft of your context scenario, you can analyze it
to extract the personas‚Äô needs or design requirements. These design requirements can
be thought of as consisting of objects, actions, and contexts.11 And remember, as we‚Äôve

---

## Chunk 955

discussed, we prefer not to think of requirements as identical to features or tasks. Thus,
a requirement from the preceding scenario might read as follows:
Call (action) a person (object) directly from an appointment (context).
If you are comfortable extracting needs in this format, it works quite well. Otherwise,

---

## Chunk 956

you may find it helpful to separate them into data, functional, and contextual require-
ments, as described in the following sections.
Data requirements
Personas‚Äô data needs are the objects and information that must be represented in the
system. Using the semantics just described, it is often useful to think of data require-

---

## Chunk 957

ments as the objects and adjectives related to those objects. Common examples include
accounts, people, addresses, documents, messages, songs, and images, as well as attri-
butes of those, such as status, dates, size, creator, and subject.
Functional requirements
Functional needs are the operations or actions that need to be performed on the system‚Äôs

---

## Chunk 958

objects and that typically are translated into interface controls. These can be thought of
as the product‚Äôs actions. Functional needs also define places or containers where objects
or information in the interface must be displayed. (These clearly are not actions in and of
themselves but usually are suggested by actions.)
Contextual requirements

---

## Chunk 959

Contextual requirements describe relationships or dependencies between sets of objects
in the system. This can include which objects in the system need to be displayed together
to make sense for work flow or to meet specific persona goals. (For example, when choos-
ing items for purchase, a summed list of items already selected for purchase should

---

## Chunk 960

probably be visible.) Other contextual requirements may include considerations regard-
ing the physical environment the product will be used in (an office, on the go, in harsh
conditions) and the skills and capabilities of the personas using the product.
116 Part I: Goal-Directed Design

---

## Chunk 961

--- Page 147 ---
other requirements
After you‚Äôve gone through the exercise of pretending it‚Äôs magic, it‚Äôs important to get a
firm idea of the realistic requirements of the business and technology you are designing
for. (But we hope that designers have some influence over technology choices when the
choice directly affects user goals.)

---

## Chunk 962

‚Ä¢ Business requirements can include stakeholder priorities, development timelines,
budgetary and resource constraints, regulations and legal considerations, pricing
structures, and business models.
‚Ä¢ Brand and experience requirements reflect attributes of the experience you want
users and customers to associate with your product, company, or organization.

---

## Chunk 963

‚Ä¢ Technical requirements can include weight, size, form factor, display, power
constraints, and software platform choices.
‚Ä¢ Customer and partner requirements can include ease of installation,
maintenance, configuration, support costs, and licensing agreements.
Having followed Steps 1 through 5, you should now have a rough, creative overview of

---

## Chunk 964

how the product will address user goals in the form of context scenarios, as well as a
reductive list of needs and requirements extracted from your research, user models, and
the scenarios. These design requirements not only provide a design and development
direction but also provide a scope of work to communicate to stakeholders. Any new

---

## Chunk 965

design requirements after this point must necessarily change the scope of work.
Now you are ready to delve deeper into the details of your product‚Äôs behaviors and begin
to consider how the product and its functions will be represented. You are ready to define
the framework of the interaction.
Notes
1. Laurel, 2013
2. Rheinfrank and Evenson, 1996
3. Wirfs-Brock, 1993

---

## Chunk 966

4. Constantine and Lockwood, 1999
5. Carroll, 2001
6. Buxton, 1990
7. Verplank, et al, 1993
8. Newman and Lamming, 1995
9. Holtzblatt and Beyer, 1998
10. Kuutti, 1995
11. Shneiderman, 1998
CH 4. Setting the Vision: Scenarios and Design Requirements 117

---

## Chunk 967

--- Page 149 ---
Ch 5
DEsIgnIng ThE ProDuCT:
FrAmEwork AnD
rEFInEmEnT
In the preceding chapter, we talked about the first part of the design process: developing
scenarios to imagine ideal user interactions and then defining requirements from these
scenarios and other sources. Now we‚Äôre finally ready to design.
Creating the Design Framework

---

## Chunk 968

Rather than jump into the nuts and bolts right away, we want to stay at a high level and
concern ourselves with the overall structure of the user interface and associated behav-
iors. We call this phase of the Goal-Directed process the Design Framework. If we were
designing a house, at this point we‚Äôd be concerned with what rooms the house should

---

## Chunk 969

have, where they should be positioned, and roughly how big they should be. We would
not be worried about the precise measurements of each room or things like the door-
knobs, faucets, and countertops.
The Design Framework defines the overall structure of the users‚Äô experience. This
includes the underlying organizing principles and the arrangement of functional ele-

---

## Chunk 970

ments on the screen, work flows, interactive behaviors and the visual and form lan-
guages used to express information, functionality, and brand identity. In our experience,

---

## Chunk 971

--- Page 150 ---
form and behavior must be designed in concert; the Design Framework is made up of an
interaction framework, a visual design framework, and sometimes an industrial design
framework. At this phase in a project, interaction designers use scenarios and require-
ments to create rough sketches of screens and behaviors that make up the interaction

---

## Chunk 972

framework. Concurrently, visual designers use visual language studies to develop a
visual design framework that is commonly expressed as a detailed rendering of a single
screen archetype.
Other specialists on the team may be working on frameworks of their own. Industrial
designers execute form language studies to work toward a rough physical model and

---

## Chunk 973

industrial design framework. Service designers build models of the information exchange
for each touch point in a service framework. Each of these processes is addressed in this
chapter.
When it comes to the design of complex behaviors and interactions, we‚Äôve found that
focusing too early on pixel pushing, widget design, and specific interactions can get in

---

## Chunk 974

the way of effectively designing a comprehensive framework in which all the product‚Äôs
behaviors can fit. Instead we should take a top-down approach, concerning ourselves
first with the big picture and rendering our solutions without specific detail in a low-fi-
delity manner. Doing so can ensure that we and our stakeholders focus initially on the

---

## Chunk 975

fundamentals: serving the personas‚Äô goals and requirements.
Revision is a fact of life in design. Typically, the process of representing and presenting
design solutions helps designers and stakeholders refine their vision and understanding
of how the product can best serve human needs. The trick, then, is to render the solution

---

## Chunk 976

in only enough detail to provoke engaged consideration, without spending too much
time or effort elaborating details that are certain to be modified or abandoned. We‚Äôve
found that sketch-like storyboards of context and screens, accompanied by narrative in
the form of scenarios, are a highly effective way to explore and discuss design solutions
without creating undue overhead and inertia.

---

## Chunk 977

Research about the usability of architectural renderings supports this notion. A study
of people‚Äôs reactions to different types of CAD images found that pencil-like sketches
encouraged discourse about a proposed design and also increased understanding of
the renderings as representing work in progress.1 Carolyn Snyder covers this concept at

---

## Chunk 978

length in Paper Prototyping (Morgan Kaufmann, 2003), where she discusses the value of
such low-fidelity presentation techniques in gathering user feedback. While we believe
that usability testing and user feedback are often most constructive during design
refinement, sometimes they are useful as early as the Framework phase. (More discus-

---

## Chunk 979

sion of usability testing can be found later in this chapter.)
120 Part I: Goal-Directed Design

---

## Chunk 980

--- Page 151 ---
Defining the interaction framework
The interaction framework defines not only the high-level structure of screen layouts but
also the product‚Äôs flow, behavior, and organization. The following six steps describe the
process of defining the interaction framework (see Figure 5-1):
1 Define form factor, posture, and input methods.
2 Define functional and data elements.

---

## Chunk 981

3 Determine functional groups and hierarchy.
4 Sketch the interaction framework.
5 Construct key path scenarios.
6 Check designs with validation scenarios.
Define form factor, posture,
and input methods
Determine functional
and data elements
Determine functional groups
and hierarchy
Sketch the interaction framework
iterate detail
Construct key path scenarios
Check designs with

---

## Chunk 982

validation scenarios
Figure 5-1: The Framework Definition process
Even though we‚Äôve broken the process into numerically sequenced steps, typically this
is not a linear effort. Rather, it occurs in iterative loops. In particular, Steps 3 through 5
may be switched, depending on the designer‚Äôs thought process (more on this later). The
six steps are described in the following sections.

---

## Chunk 983

step 1: Define form factor, posture, and input methods
The first step in creating a framework is to define the form factor of the product you‚Äôll
be designing. Is it a web application that will be viewed on a high-resolution computer
screen? Is it a phone that must be small, light, low-resolution, and visible in both bright
CH 5. Designing the Product: Framework and Refinement 121

---

## Chunk 984

--- Page 152 ---
sunlight and the dark? Is it a kiosk that must be rugged to withstand a public environment
while accommodating thousands of distracted novice users? What constraints does each
of these form factors imply for any design? Each has clear implications for the product‚Äôs
design, and answering this question sets the stage for all subsequent design efforts. If the

---

## Chunk 985

answer isn‚Äôt obvious, look to your personas and scenarios to better understand the ideal
usage context and environment. Where a product requires the design of both hardware
and software, these decisions also involve industrial design considerations. Later in the
chapter we discuss how to coordinate interaction design with industrial design.

---

## Chunk 986

As you define the form, you should also define the product‚Äôs basic posture and deter-
mine the system‚Äôs input method(s). A product‚Äôs posture is related to how much attention
the user will devote to interacting with the product and how the product‚Äôs behaviors
respond to the kind of attention the user will devote to it. This decision should be based

---

## Chunk 987

on usage contexts and environments, as described in your context scenarios (see Chap-
ter 4). We discuss the concept of posture in greater depth in Chapter 9.
The input method is how users will interact with the product. This is driven by the form
factor and posture, as well as by your personas‚Äô attitudes, aptitudes, and preferences.

---

## Chunk 988

Choices include keyboard, mouse, keypad, thumb-board, touchscreen, voice, game
controller, remote control, dedicated hardware buttons, and many other possibilities.
Decide which combination is appropriate for your primary and secondary personas. If
you need to use a combination of input methods (such as the common website or desk-

---

## Chunk 989

top application that relies on both mouse and keyboard input), decide on the product‚Äôs
primary input method.
step 2: Define functional and data elements
Functional and data elements represent functionality and information that are revealed
to the user in the interface. These are the concrete manifestations of the functional and

---

## Chunk 990

data requirements identified during the Requirements Definition phase, as described in
Chapter 4. Whereas the requirements were purposely described in general terms, from
the personas‚Äô perspective, functional and data elements are described in the language of
user-interface representations. It is important to note that each element must be defined

---

## Chunk 991

in response to specific requirements defined earlier. This is how we ensure that every
aspect of the product we are designing has a clear purpose that can be traced back to a
usage scenario or business goal.
Data elements typically are the fundamental subjects of interactive products. These
objects‚Äîsuch as photos, e-mail messages, customer records, or orders‚Äîare the basic

---

## Chunk 992

units to be referred to, responded to, and acted on by the people using the product.
Ideally they should fit with the personas‚Äô mental models. At this point, it is critical to
comprehensively catalog the data objects, because the product‚Äôs functionality is com-
monly defined in relation to them. We are also concerned with the objects‚Äô significant
122 Part I: Goal-Directed Design

---

## Chunk 993

--- Page 153 ---
attributes, such as the sender of an e-mail message or the date a photo was taken. But it
is less important to be comprehensive about the attributes at this point, as long as you
have an idea whether the personas care about a few attributes or a lot. It can be helpful
at this point to involve your team‚Äôs software architect, who can use this Goal-Directed

---

## Chunk 994

data model to create a more formal data object model for later use by developers. We‚Äôll
discuss development touch points more in Chapter 6.
It‚Äôs useful to consider the relationships between data elements. Sometimes a data object
may contain other data objects; other times there may be a more associative relationship

---

## Chunk 995

between objects. Examples of such relationships include a photo within an album, a song
within a playlist, or an individual bill within a customer record. These relationships can
be documented as simply as creating indented bulleted lists. For more complex relation-
ships, more elaborate ‚Äúbox and arrow‚Äù diagrams may be appropriate.

---

## Chunk 996

Functional elements are the operations that can be done to the data elements and their
representations in the interface. Generally speaking, they include tools to act on and
ways to visually and structurally manage data elements. The translation of functional
requirements into functional elements is where we start making the design concrete.

---

## Chunk 997

While the context scenario is the vehicle to imagine the overall experience we will create
for our users, this is where we begin to make that experience real.
It is common for a single requirement to necessitate multiple interface elements. For
example, Vivien, our persona for a smartphone from Chapter 4, needs to be able to call
her contacts. The following functional elements meet that need:

---

## Chunk 998

‚Ä¢ Voice activation (voice data associated with the contact)
‚Ä¢ Assignable quick-dial buttons
‚Ä¢ Selecting a contact from a list
‚Ä¢ Selecting a contact from an e-mail header, appointment, or memo
‚Ä¢ Auto-assigning a call button in the appropriate context (for example, for an upcoming
appointment)
Again, it is imperative to return to context scenarios, persona goals, and mental models

---

## Chunk 999

to ensure that your solutions are appropriate for the situation at hand. This is also where
design principles and patterns begin to become a useful way to arrive at effective solutions
without reinventing the wheel. You also must exercise your creativity and design judgment
here. In response to any identified user requirement, typically a number of solutions are

---

## Chunk 1000

possible. Ask yourself which of the possible solutions is most likely to do the following:
‚Ä¢ Accomplish user goals most efficiently.
‚Ä¢ Best fit your design principles.
CH 5. Designing the Product: Framework and Refinement 123

---

## Chunk 1001

--- Page 154 ---
‚Ä¢ Fit within technology or cost parameters.
‚Ä¢ Possibly differentiate the interaction from the competition.
‚Ä¢ Best fit other requirements.
Pretend the product is human
As you saw in Chapter 4, pretending that a tool, product, or system is magic is a powerful
way to imagine the ideal user experience to be reflected in concept-level context scenar-

---

## Chunk 1002

ios. In the same way, pretending that the system is human is a powerful way to structure
interaction-level details. This simple principle is discussed in detail in Chapter 8. In a
nutshell, interactions with a digital system should be similar in tone and helpfulness
to interactions with a polite, considerate human.2 As you determine the interactions

---

## Chunk 1003

and behavior along with the functional elements and groupings, you should ask yourself
these questions: What would a helpful human do? What would a thoughtful, considerate
interaction feel like? Does the product treat the primary persona humanely? How can
the software offer helpful information without getting in the way? How can it minimize
the persona‚Äôs effort in reaching his goals?

---

## Chunk 1004

For example, a mobile phone that behaves like a considerate person knows that, after
you‚Äôve completed a call with a number that isn‚Äôt in your contacts, you may want to save
the number. Therefore, the phone provides an easy and obvious way to do so. An incon-
siderate phone forces you to scribble the number on the back of your hand as you go into
your contacts to create a new entry.

---

## Chunk 1005

Apply principles and patterns
Critical to translating requirements into functional elements (as well as grouping these
elements and exploring detailed behavior in scenarios and storyboards) is applying gen-
eral interaction principles and specific interaction patterns. These tools leverage years
of interaction design experience of designers working on similar problems. Neglecting to

---

## Chunk 1006

take advantage of such knowledge means wasting time on problems whose solutions are
well known. Additionally, deviating from standard design patterns can create a product
where the users must learn every interaction idiom from scratch, rather than recogniz-
ing behaviors from other products and leveraging their own experience. (We discuss the

---

## Chunk 1007

idea of design patterns in Chapter 7.) Of course, sometimes it is appropriate to invent
new solutions to common problems. But as we discuss further in Chapter 17, you should
obey standards unless you have a good reason not to.
Scenarios provide an inherently top-down approach to interaction design. They iterate
through successively more detailed design structures, from main screens down to tiny

---

## Chunk 1008

subpanes or dialogs. Principles and patterns add a more bottom-up approach to balance
the process. Principles and patterns can be used to organize elements at all levels of the
124 Part I: Goal-Directed Design

---

## Chunk 1009

--- Page 155 ---
design. Chapter 7 discusses the uses and types of principles and patterns in detail. Part
II of this book provides a wealth of useful interaction principles appropriate to this step
in the process.
step 3: Determine functional groups and hierarchy
After you have a good list of top-level functional and data elements, you can begin to

---

## Chunk 1010

group them into functional units and determine their hierarchy.3 Because these ele-
ments facilitate specific tasks, the idea is to group elements to best facilitate the perso-
na‚Äôs flow (see Chapter 11) both within a task and between related tasks. Here are some
issues to consider:
‚Ä¢ Which elements need a large amount of screen real estate, and which do not?

---

## Chunk 1011

‚Ä¢ Which elements are containers for other elements?
‚Ä¢ How should containers be arranged to optimize flow?
‚Ä¢ Which elements are used together, and which are not?
‚Ä¢ In what sequence will a set of related elements be used?
‚Ä¢ What data elements would be useful for the persona to know or reference at each decision?
‚Ä¢ What interaction patterns and principles apply?

---

## Chunk 1012

‚Ä¢ How do the personas‚Äô mental models affect organization?
At this point it‚Äôs important to organize data and functions into top-level container ele-
ments, such as screens, frames, and panes. These groupings may change somewhat as
the design evolves (particularly as you sketch the interface), but it‚Äôs still useful to pro-

---

## Chunk 1013

visionally sort elements into groups. This will speed up the process of creating initial
sketches. Again, indented lists or simple Venn diagrams are appropriate at this point for
documenting these relationships.
Consider which primary screens or states (which we‚Äôll call views) the product requires.
Initial context scenarios give you a feel for what these might be. If you know that the

---

## Chunk 1014

user has several end goals where data and functionality don‚Äôt overlap, it might be rea-
sonable to define separate views to address them. On the other hand, if you see a cluster
of related needs (for example, to make an appointment, or to review nearby restaurants,
or if your persona needs to see a calendar and contacts), you might consider defining a
view that incorporates all these.

---

## Chunk 1015

When grouping functional and data elements, consider how they should be arranged
given the product‚Äôs platform, posture, screen size, form factor, and input methods. Con-
tainers for objects that must be compared or used together should be adjacent. Objects
representing steps in a process should, in general, be adjacent and ordered sequentially.

---

## Chunk 1016

CH 5. Designing the Product: Framework and Refinement 125

---

## Chunk 1017

--- Page 156 ---
Using detailed interaction design principles and patterns is extremely helpful at this
juncture. Part III of this book provides many principles that can be of assistance at this
stage of organization.
step 4: sketch the interaction framework
Now we‚Äôre ready to sketch the interface. This visualization of the interface should be sim-

---

## Chunk 1018

ple at first. Around the studio, we often call this the rectangles phase. Our sketches start
by subdividing each view into rough rectangular areas corresponding to panes, control
components (such as toolbars), and other top-level containers, as shown in Figure 5-2.
Label the rectangles, and illustrate and describe how one grouping or element affects oth-

---

## Chunk 1019

ers. Draw arrows from one set of rectangles to others to represent flows or state changes.
Figure 5-2: An early framework sketch from designs Cooper created for Cross Country TravCorps, an
online portal for traveling nurses. Framework sketches should be simple, starting with rectangles,
names, and brief descriptions of relationships between functional areas. Details can be visually

---

## Chunk 1020

hinted at to give an idea of the contents, but don‚Äôt fall into the trap of designing detail at this stage.
126 Part I: Goal-Directed Design

---

## Chunk 1021

--- Page 157 ---
You may want to sketch different ways of fitting together top-level containers in the
interface. This visualization of the interface should be simple at first: boxes representing
each functional group and/or container with names and descriptions of the relation-
ships between the different areas (see Figure 5-2).

---

## Chunk 1022

Be sure to look at the entire top-level framework first. Don‚Äôt become distracted by the
details of a particular area of the interface (although imagining what goes into each con-
tainer will help you decide how to arrange elements and allocate real estate). You will
have plenty of time to explore the design at the widget level later. Trying to do so too

---

## Chunk 1023

soon may risk creating a lack of coherence in the design as you move forward. At this
high-level ‚Äúrectangle phase,‚Äù it‚Äôs easy to explore a variety of ways to present information
and functionality and to perform radical reorganizations if necessary. It‚Äôs often useful
to try several arrangements, running through validation scenarios (see the later sec-

---

## Chunk 1024

tion describing Step 6), before landing on the best solution. Spending too much time and
effort on intricate details early in the design process discourages designers from chang-
ing course to what might be a superior solution. It‚Äôs easier to discard your work and try
another approach when you don‚Äôt have a lot of effort invested.

---

## Chunk 1025

Sketching the framework is an iterative process that is best performed with a small,
collaborative group. This group includes one or two interaction designers (or ideally an
interaction designer and a ‚Äúdesign communicator‚Äù‚Äîsomeone who thinks in terms of
the design narrative) and a visual or industrial designer.
We‚Äôve found a few tool choices that work well during the sketching phase. Working at a

---

## Chunk 1026

whiteboard promotes collaboration and discussion‚Äîand, of course, everything is easy
to erase and redraw. A digital camera provides a quick and easy means to capture ideas
for later reference.
In recent years we‚Äôve also grown fond of using tablet computers with OneNote connected
to a shared monitor for our initial sketches. Whatever tool you use, it needs to be fast,

---

## Chunk 1027

collaborative, visible to everyone on the team, and easy to iterate and share.
Once the sketches reach a reasonable level of detail, it becomes useful to start rendering
in a computer-based tool. Each tool has its strengths and weaknesses, but those com-
monly used to render high-level interface sketches currently include Adobe Fireworks,

---

## Chunk 1028

Adobe Illustrator, Microsoft Visio, Microsoft PowerPoint, Axure, and Omni Group‚Äôs
OmniGraffle. The key is to find the tool that is most comfortable for you so that you can
work quickly, roughly, and at a high level. We‚Äôve found it useful to render drawings in a
visual style that suggests the sketchiness of the proposed solutions. (Recall that rough

---

## Chunk 1029

sketches tend to do a better job of promoting discourse about design.) It is also critical
to be able to easily render several related, sequential screen states to depict the product‚Äôs
behavior in the key path scenario. (The ‚Äústates‚Äù construct in Fireworks makes it a partic-
ularly good tool for doing this.)
CH 5. Designing the Product: Framework and Refinement 127

---

## Chunk 1030

--- Page 158 ---
step 5: Construct key path scenarios
A key path scenario describes how the persona interacts with the product, using the
vocabulary of the interaction framework. These scenarios depict the primary pathways
through the interface that the persona takes with the greatest frequency, often on a
daily basis. For example, in an e-mail application, key path activities include viewing

---

## Chunk 1031

and composing mail, not configuring a new mail server.
These scenarios typically evolve from the context scenarios, but here we specifically
describe the persona‚Äôs interaction with the various functional and data elements that
make up the interaction framework. As we add more and more detail to the interaction

---

## Chunk 1032

framework, we iterate the key path scenarios to reflect this detail in greater specificity
around user actions and product responses.
Unlike the goal-oriented context scenarios, key path scenarios are more task-oriented,
focusing on task details broadly described and hinted at in the context scenarios. (In
this way they are similar to Agile use cases.) This doesn‚Äôt mean that we can ignore goals.

---

## Chunk 1033

Goals and persona needs are the constant measuring stick throughout the design pro-
cess, used to trim unnecessary tasks and streamline necessary ones. However, key path
scenarios must describe in detail the behavior of each major interaction and provide a
walkthrough of each major pathway.
storyboarding
By using a sequence of low-fidelity sketches accompanied by the narrative of the key

---

## Chunk 1034

path scenario, you can richly portray how a proposed design solution helps personas
accomplish their goals, as shown in Figure 5-3. This technique of storyboarding is bor-
rowed from filmmaking and cartooning, where a similar process is used to plan and
evaluate ideas without having to deal with the cost and labor of shooting actual film.

---

## Chunk 1035

Each interaction between the user and the product can be portrayed on one or more
frames or slides. Advancing through them provides a reality check of the interactions‚Äô
coherence and flow.
Process variations and iteration
Because creative human activities are rarely a sequential, linear process, the steps in the
Framework phase shouldn‚Äôt be thought of as a simple sequence. It is common to move

---

## Chunk 1036

back and forth between steps and to iterate the whole process several times until you
have a solid design solution. Depending on how you think, you have a couple of different
ways to approach Steps 3 through 5. You may find that one works better for you than
another.
128 Part I: Goal-Directed Design

---

## Chunk 1037

--- Page 159 ---
Figure 5-3: A more evolved Framework rendering from the Cross Country TravCorps job search web
application
Verbal thinkers may want to use the scenario to drive the process and approach Steps 3
through 5 in the following sequence:
1 Key path scenarios
2 Work out the groupings verbally
3 Sketch

---

## Chunk 1038

Visual thinkers may find that starting from the illustration will help them make sense of
the other parts of the process. They may find this easier:
1 Sketch
2 Key path scenarios
3 See if your groupings work with the scenarios.
CH 5. Designing the Product: Framework and Refinement 129

---

## Chunk 1039

--- Page 160 ---
step 6: Check designs with validation scenarios
After you have storyboarded your key path scenarios and adjusted the interaction
framework until the scenario flows smoothly and you‚Äôre confident that you‚Äôre headed
in the right direction, it is time to shift focus to less frequent or less important inter-

---

## Chunk 1040

actions. These validation scenarios typically are not developed in as much detail as key
path scenarios. Rather, this phase consists of asking a series of what-if questions. The
goal is to poke holes in the design and adjust it as needed (or throw it out and start over).
You should address three major categories of validation scenarios, in the following order:

---

## Chunk 1041

‚Ä¢ Alternative scenarios are alternative or less-traveled interactions that split off from
key pathways at some point along the persona‚Äôs decision tree. These could include
commonly encountered exceptions, less frequently used tools and views, and variations
or additional scenarios based on the goals and needs of secondary personas. Returning

---

## Chunk 1042

to our smartphone scenario from Chapter 4, an example of a key path variant would be
if Vivien decided to respond to Frank by e-mail in Step 2 instead of calling him.
‚Ä¢ Necessary-use scenarios include actions that must be performed, but only
infrequently. Purging databases, upgrading a device, configuring, and making other

---

## Chunk 1043

exceptional requests might fall into this category. Necessary-use interactions demand
pedagogy because they are seldom encountered: Users may forget how to access the
function or how to perform tasks related to it. However, this rare use means that users
won‚Äôt require parallel interaction idioms such as keyboard equivalents‚Äînor do such

---

## Chunk 1044

functions need to be user-customizable. An example of a necessary-use scenario for the
design of a smartphone is if the phone was sold secondhand, requiring the removal of
all personal information associated with the original owner.
‚Ä¢ Edge-case use scenarios, as the name implies, describe atypical situations that the

---

## Chunk 1045

product must nevertheless be able to handle, albeit infrequently. Developers focus on
edge cases because they often represent sources of system instability and bugs and
typically require significant attention and effort. Edge cases should never be the focus
of the design effort. Designers can‚Äôt ignore edge-case functions and situations, but the

---

## Chunk 1046

interaction needed for them is of much lower priority and usually is buried deep in
the interface. Although the code may succeed or fail on its capability to successfully
handle edge cases, the product will succeed or fail on its capability to successfully
handle daily use and necessary cases. Returning again to Vivien‚Äôs smartphone (in

---

## Chunk 1047

Chapter 4), an example of an edge-case scenario would be if Vivien tried to add two
different contacts who have the same name. This is not something she is likely to do,
but it is something the phone should handle if she does.
Defining the visual design framework
As the interaction framework establishes an overall structure for product behavior, and

---

## Chunk 1048

for the form as it relates to behavior, a parallel process focused on the visual and indus-
trial design is also necessary to prepare for detailed design unless you‚Äôre working with a
130 Part I: Goal-Directed Design

---

## Chunk 1049

--- Page 161 ---
well-established visual style. This process follows a trajectory similar to the interaction
framework, in that the solution is first considered at a high level and then narrows to an
increasingly granular focus. Chapter 17 provides further details on the integration of
visual design and interaction design.
The visual design framework typically follows this process:

---

## Chunk 1050

1 Develop experience attributes.
2 Develop visual language studies.
3 Apply the chosen visual style to the screen archetype.
step 1: Develop experience attributes
The first step in defining a visual design framework to choose a set of three to five adjec-
tives that will be used to help define the tone, voice, and brand promise of the product.

---

## Chunk 1051

(There is a strategy discussion to have if these attributes don't fit the persona's goals and
interests.) This set of descriptive keywords are collectively called experience attributes.
Visual designers usually lead the development of experience attributes, as interaction
designers are more accustomed to thinking about product behavior than brand. It's

---

## Chunk 1052

often a good idea to involve stakeholders in this process, or at least to get their input at
the onset. The process used at Cooper for generating experience attributes is as follows:
1 G ather any existing brand guidelines. Familiarize yourself with them. If the company
has clear brand guidelines built around one product‚Äîthe product you're designing‚Äî

---

## Chunk 1053

much of your work may have already been done for you.
2 G ather together examples of strongly branded products, interfaces, objects,
and services. Including multiple examples from particular domains will help
stakeholders think about their differences. If we include images of cars, for instance,
we might include examples from BMW, Toyota, Ferrari, and Tesla.

---

## Chunk 1054

3 W ork with stakeholders to identify direct and indirect competition. Gather examples
of these products and services' products and interfaces to include in your examples.
4 P ull relevant terms mentioned by interviewees in the course of your qualitative
research. Pay particular attention to any pain points mentioned. For instance,

---

## Chunk 1055

if many mention that a competitor or the existing version of the product is hard
to use or "unintuitive," you may want to discuss whether "friendly," "easy," or
"understandable" should be an attribute.
5 W ith the brand guidelines, example products, competition, and user notes on display
to reference, have a discussion with stakeholders about the sub-brand of the product

---

## Chunk 1056

you're designing. We often ask stakeholders to vote for and against examples by
CH 5. Designing the Product: Framework and Refinement 131

---

## Chunk 1057

--- Page 162 ---
placing red or green stickers on them, and then discuss any clear winners, losers, or
controversial examples.
6 F rom the outcomes of this discussion, identify the minimum number of adjectives
that define and distinguish the product.
7 I f any of the words have multiple meanings, document the exact sense intended.

---

## Chunk 1058

"Sharp," for instance, could refer to precision and sleekness, or it could mean
intelligence and wit.
8 C onsider competitors. If your set of attributes does not distinguish the brand from
competitors, refine them until they do. Also make sure that individual attributes are
aspirational. "Smart" is good. "Brilliant" is better.

---

## Chunk 1059

9 C heck back with the stakeholders (and especially any marketers) on your proposed
attribute set to discuss and finalize them before moving forward.
step 2: Develop visual language studies
The next step is to explore a variety of visual treatments through visual language studies,
as shown in Figure 5-4. These studies are based on the experience attributes and include

---

## Chunk 1060

color, type, and widget treatments. They also include the overall dimensionality and any
‚Äúmaterial‚Äù properties of the interface (for example, does it feel like glass or paper?).
These studies should show these aspects abstractly and independent of the interaction
design, because our goal is to assess the overall tone and suitability for general interac-

---

## Chunk 1061

tions. We also want to avoid possibly distracting our stakeholders with highly rendered
versions of rough interaction designs.
Visual language studies should relate to the personas‚Äô experience goals, as well as to
any experience or brand keywords that were developed in the Requirements Definition
phase (see Chapter 4). Commonly, a company‚Äôs brand guidelines form a good starting

---

## Chunk 1062

point for this activity. But it should be noted that brand guidelines rarely consider the
interactive experience and may not account for the differences in multiple software
products. ‚ÄúBrand guidelines‚Äù commonly consist of a document explaining how a compa-
ny‚Äôs brand identity should be conveyed visually and textually.

---

## Chunk 1063

Substantial work is often required to translate a style guide for marketing collateral
into a meaningful look and feel for an interactive product or website. It‚Äôs also important
to consider environmental factors and persona aptitudes when devising visual styles.
Screens that must be visible under bright lights or from a distance require high contrast

---

## Chunk 1064

and more saturated colors. The elderly and other sight-impaired users require larger and
more readable typefaces.
132 Part I: Goal-Directed Design

---

## Chunk 1065

--- Page 163 ---
Figure 5-4: Visual language studies are used to explore a variety of visual styles abstractly and
somewhat independent of the interaction design. This is useful because it allows us to have initial
discussions about visual language without getting hung up on interaction design details. Of course,
eventually visual design and interaction design must be conducted in lockstep.

---

## Chunk 1066

We typically show between three and five different approaches during our initial review
with stakeholders, most often using each one to optimize a particular experience attri-
bute. This is a little different from our approach to interaction design, in which a prod-
uct usually has one optimal behavioral framework. Visually, several different styles all

---

## Chunk 1067

can be consistent with experience keywords and goals. Using experience attributes to
develop these approaches helps move stakeholders away from personal tastes and biases
by providing a vocabulary for an experience that is in sync with the brand‚Äôs meaning.
It is often useful to develop one or two extreme options that push the look and feel a bit

---

## Chunk 1068

too far in one direction. Doing this makes it easier to differentiate between the various
approaches and helps stakeholders choose an appropriate direction. You will have ample
opportunity later in the process to tame a particularly extreme visual style. That said,
all the choices you present to your stakeholders should be reasonable and appropriate.

---

## Chunk 1069

It‚Äôs almost an unwritten rule that if there‚Äôs one direction you don‚Äôt want your client or
stakeholders to choose, that‚Äôs the one they‚Äôre guaranteed to like.
CH 5. Designing the Product: Framework and Refinement 133

---

## Chunk 1070

--- Page 164 ---
Never show a design approach you‚Äôre unhappy with; stakeholders just might like it.
Once you‚Äôve developed a good spectrum of visual language studies reflecting persona
experience goals, brand guidelines, and experience keywords, it‚Äôs time to present them
to stakeholders for feedback. It‚Äôs important to contextualize them in terms of these goals

---

## Chunk 1071

and keywords and to describe the rationale for each direction and its relative merits. We
ask stakeholders to first give us their initial emotional reaction and then talk through
things in a more rational fashion. By the end of this presentation, we usually have con-
sensus to move forward with some aspects of several of the visual styles. It is common to

---

## Chunk 1072

iterate the visual language studies before moving on to the next step.
step 3: Apply the chosen visual style to the screen archetype
The final step is to apply one or two selected visual styles to key screens. We typically
coordinate our visual and interaction design efforts so that this step is performed close

---

## Chunk 1073

to the end of the interaction framework. At that point the design has begun to stabilize,
and sufficient specific detail reflects the visual style. This further refines the visual style
so that it reflects key behaviors and information. By making the design more concrete,
you can better assess the feasibility of the proposed solution without the overhead of

---

## Chunk 1074

updating numerous screens for each minor change. Additionally, it‚Äôs easier to elicit feed-
back from stakeholders.
Defining the industrial design framework
We develop the industrial design framework in much the same manner as the visual
design framework. But because the form factor and input method have significant impli-

---

## Chunk 1075

cations for both the industrial and interaction design, it‚Äôs useful to collaborate early on
to identify relevant issues.
The industrial design framework typically follows this process:
1 Collaborate with interaction designers about form factor and input methods.
2 Develop rough prototypes.
3 Develop form language studies.
134 Part I: Goal-Directed Design

---

## Chunk 1076

--- Page 165 ---
step 1: Collaborate with interaction designers about form
factor and input methods
If the product you are designing relies on custom hardware (as with a cell phone or med-
ical device), it is important for interaction designers and industrial designers to agree on
a general physical form and input methods. While the course of the design framework

---

## Chunk 1077

will certainly help refine the design, decisions need to be made at this point. These deci-
sions include the product‚Äôs general size and shape; the screen size (if any); the number
and general orientation of hard and soft buttons; and whether the product has a touch
or multitouch screen, keyboard, voice recognition, motion/position tracking, and so on.

---

## Chunk 1078

This collaboration typically starts with a couple of days at the whiteboard and a con-
densed set of scenarios.
Important things to consider when making these decisions include persona experience
goals (see Chapter 3), attitudes, aptitudes, and environmental factors, as well as brand
and experience keywords, market research, manufacturing costs, and pricing targets.

---

## Chunk 1079

Because the cost of a hinge can make or break the margin on hardware, and because
internal components (such as a battery) can have a tremendous impact on form, an early
sanity check with mechanical and electrical engineers is critical.
There is only one user experience, and it comes from the combination of the physical form

---

## Chunk 1080

and the product‚Äôs interactive behavior. The two must be designed in concert and, accord-
ing to the adage of Modern architecture, form should follow function. The demands of
interaction must guide the industrial design, but concerns about fabrication and cost
will also impact the possibilities available to interaction design.

---

## Chunk 1081

There is only one user experience: Form and behavior must be designed in
concert.
step 2: Develop rough prototypes
It is often the case that even after the overall form and input methods are defined, the
industrial designer still can take a variety of approaches. For example, when we‚Äôve
designed office phones and medical devices, it‚Äôs often been asked whether the screen

---

## Chunk 1082

angle should be fixed or if it should be adjustable and, if so, how that will be accom-
plished. Industrial designers sketch and create rough prototypes from foam board and
other materials. In many cases, we‚Äôll show several to stakeholders because each one has
different cost and ergonomic considerations.
CH 5. Designing the Product: Framework and Refinement 135

---

## Chunk 1083

--- Page 166 ---
step 3: Develop form language studies
In a fashion similar to the visual language studies described earlier, the next step is to
explore a variety of physical styles. Unlike the visual language studies, these are not
abstract composites. Instead, they represent various looks applied to the specific form

---

## Chunk 1084

factors and input mechanisms determined in Steps 1 and 2. These studies include shape,
dimensionality, materials, color, and finish.
As with visual style studies, form language studies should be informed by persona goals,
attitudes, aptitudes, experience keywords, environmental factors, and manufacturing
and pricing constraints. Typically these studies require several rounds of iteration to

---

## Chunk 1085

find a feasible and desirable solution.
Defining the service design framework
Because service design often affects organizations‚Äô business models, the service design
framework may be conducted before other areas of design.
The service design framework typically follows this process:
1 Describe customer journeys.
2 Create a service blueprint.
3 Create experience prototypes.

---

## Chunk 1086

The book Service Design by Polane, L√∏vlie, and Reason (Rosenfeld Media, 2013) contains
a much more thorough treatment of this subject, with examples.
step 1: Describe customer journeys
Similar to the context scenarios of interaction design, customer journeys describe an
individual persona‚Äôs use of a service as a descriptive narrative, from first exposure to

---

## Chunk 1087

final transaction. Different journeys stress different aspects of the service, accounting
for different personas‚Äô goals. Each customer journey also provides an opportunity for
the designer to take personas through secondary paths where the service helps them
recover from a nuanced problem.
step 2: Create a service blueprint

---

## Chunk 1088

A service blueprint is the service‚Äôs ‚Äúbig picture.‚Äù It describes the collection of touch
points by which the persona uses the service, such as a mobile site or a storefront. It also
136 Part I: Goal-Directed Design

---

## Chunk 1089

--- Page 167 ---
describes the ‚Äúbackstage‚Äù processes by which service is delivered, such as the interface
used by a customer service representative handling a phone call.
Early blueprints were flowcharts that described the connections between touch points.
More recent trends draw these as swimlane diagrams that place the user at the top, the

---

## Chunk 1090

service organization at the bottom, and its channels‚Äîlike marketing, sales, and cus-
tomer service‚Äîacross the page.
A horizontal ‚Äúline of visibility‚Äù on the blueprint often distinguishes onstage and back-
stage touch points.
Some designers may prefer to begin with the service blueprint instead of the customer

---

## Chunk 1091

journeys. While each influences the other and is iterated across the project, the authors
believe it is usually best (unless this is an update to an existing, mature service) to start
with the customers via their design proxies‚Äîpersonas. Starting with the customer expe-
rience may help identify unexpected touch points in the service map that may otherwise
be ignored.

---

## Chunk 1092

step 3: Create experience prototypes
Although the exhaustive design of a particular channel may most properly belong to
interaction or visual designers, service designers illustrate a persona‚Äôs individual expe-
rience (and the continuity between touch points) through experience prototypes. They
almost certainly include mock-ups of key touch points like mobile apps and websites, but

---

## Chunk 1093

they can include much more. Often these are created as short video scenes that illustrate
the experience cinematically.
These prototypes take many forms at many different degrees of fidelity, from simple
interviews with potential customers focused on mock-ups to full-scale pilots of the pro-
spective service.
refining the Form and behavior

---

## Chunk 1094

When a solid, stable framework definition is reached, designers see the remaining pieces
of the design begin to fall smoothly into place: Each iteration of the key path scenarios
adds detail that strengthens the product‚Äôs overall coherence and flow. At this stage, a
transition is made into the Refinement phase, where the design is translated into a final,
concrete form.

---

## Chunk 1095

In this phase, principles and patterns remain important in giving the design a fine for-
mal and behavioral finish. Parts II and III of this book provide useful principles for the
CH 5. Designing the Product: Framework and Refinement 137

---

## Chunk 1096

--- Page 168 ---
Refinement phase. It is also critical for the programming team to be intimately involved
throughout the Refinement phase. Now that the design has a solid conceptual and behav-
ioral basis, developer input is critical to creating a finished design that can and will be
built, while remaining true to concept.

---

## Chunk 1097

The Refinement phase is marked by the translation of the sketched storyboards into
full-resolution screens that depict the user interface at the pixel level, as shown in
Figure 5-5.
Figure 5-5: Full-resolution bitmap screens for Cross Country TravCorps based on the Framework
illustration from Figure 5-3. Note that minor changes to the layout naturally result from the realities

---

## Chunk 1098

of pixels and screen resolution. Visual and interaction designers need to work together closely at this
stage to ensure that visual changes to the design continue to reinforce appropriate product behaviors
and meet the goals of the primary personas.
The basic process of design refinement follows the same steps we used to develop the

---

## Chunk 1099

design framework, this time at deeper and deeper levels of detail. (Of course, it isn‚Äôt nec-
essary to revisit the form factor and input methods unless an unexpected cost or man-
ufacturing issue crops up with the hardware.) After following Steps 2 through 6 at the
view and pane levels, while incorporating the increasingly refined visual and industrial

---

## Chunk 1100

designs, use scenarios to motivate and address the product‚Äôs more granular components.
During this phase, you should address every primary view and dialog possible. Through-
out the refinement phase, visual designers should develop and maintain a visual style
guide. Developers use this guide to apply visual design elements consistently when they

---

## Chunk 1101

create low-priority parts of the interface that the designers typically don‚Äôt have the time
138 Part I: Goal-Directed Design

---

## Chunk 1102

--- Page 169 ---
and resources to complete themselves. At the same time, industrial designers work with
mechanical engineers to finalize components and assembly.
While the end product of the design process can be any one of a variety of outputs,
we often create a printable Form and Behavior Specification. This document includes

---

## Chunk 1103

screen renderings with callouts sufficiently detailed for a developer to code from, as well
as detailed storyboards to illustrate behaviors over time. It can also be valuable to pro-
duce an interactive prototype in HTML or Flash that can augment your documenta-
tion to better illustrate complex interactions. However, keep in mind that prototypes

---

## Chunk 1104

alone are rarely sufficient to communicate underlying patterns, principles, and ratio-
nale, which are vital concepts to communicate to developers. Regardless of your choice
of design deliverable, your team should continue to work closely with the construction
team throughout implementation. Vigilance is required to ensure that the design vision

---

## Chunk 1105

is faithfully and accurately translated from the design document into a final product.
Validating and Testing the Design
In the course of an interaction design project, it‚Äôs often desirable to evaluate how well
you‚Äôve hit the mark by going beyond your personas and validation scenarios to put your
solutions in front of actual users. You should do this after the solution is detailed enough

---

## Chunk 1106

to give users something concrete to respond to, and with enough time allotted to make
alterations to the design based on your findings.
In our experience, user feedback sessions and usability tests are good at identifying
major problems with the interaction framework and at refining things like button labels
and activity order and priority. They‚Äôre also essential for fine-tuning such behaviors as

---

## Chunk 1107

how quickly a screen scrolls in response to turning a hardware knob. Unfortunately, it‚Äôs
difficult to craft a test that assesses anything beyond first-time ease of learning. There
are a number of techniques for evaluating a product‚Äôs usability for intermediate or expert
users, but this can be quite time-consuming and is imprecise at best.

---

## Chunk 1108

You have a variety of ways to validate your design with users. You can hold informal feed-
back sessions where you explain your ideas and drawings and see what the user thinks.
Or you can give a more rigorous usability test, in which users are asked to complete a pre-
determined set of tasks. Each approach has advantages. The more informal style can be

---

## Chunk 1109

done spontaneously and requires less preparation. The downside to this approach is that
the designer can unintentionally ‚Äúlead the witness‚Äù by explaining things in a persuasive
manner. In general, we‚Äôve found this approach to be acceptable for a technical audience
that can imagine how a few drawings might represent a product interface. It can be a

---

## Chunk 1110

useful alternative to usability testing when the design team doesn‚Äôt have time to prepare
for formal usability testing.
CH 5. Designing the Product: Framework and Refinement 139

---

## Chunk 1111

--- Page 170 ---
Given sufficient time, more formal usability testing has some advantages. Usability
tests determine how well a design allows users to accomplish their tasks. If the test‚Äôs
scope is sufficiently broad, it can also tell you how well the design helps users reach their
end goals.
To be clear, usability testing is, at its core, a means to evaluate, not create. It is not an

---

## Chunk 1112

alternative to interaction design, and it will never be the source of that great idea that
makes a compelling product. Rather, it is a method to assess the effectiveness of ideas
you‚Äôve already had and to smooth over the rough edges.
Usability testing is also not the same as user research. For some practitioners, ‚Äútests‚Äù can

---

## Chunk 1113

include research activities such as interviews, task analyses, and even creative ‚Äúpartici-
patory design‚Äù exercises. This conflates a variety of needs and steps in the design process
into a single activity.
User research must occur before ideation; user feedback and usability testing must follow
it. In fact, when project constraints force us to choose between ethnographic research

---

## Chunk 1114

and usability testing, we find that time spent on research gives us much more leverage to
create a compelling product. Likewise, given limited days and dollars, we‚Äôve found that
spending time on design provides more value to the product design process than testing.
It‚Äôs much more important to spend time making considered design decisions based on a

---

## Chunk 1115

solid research foundation than to test a half-baked design created without the benefit of
clear, compelling models of the target users and their goals and needs.
what to test
Because the findings of usability testing are often quantitative, usability research is
especially useful in comparing specific design variants to choose the most effective solu-

---

## Chunk 1116

tion. Customer feedback gathered from usability testing is most useful when you need
to validate or refine particular interaction mechanisms or the form and expression of
specific design elements.
Usability testing is especially effective at validating the following:
‚Ä¢ Naming‚ÄîDo section/button labels make sense? Do certain words resonate better
than others?

---

## Chunk 1117

‚Ä¢ Organization‚ÄîIs information grouped into meaningful categories? Are items
located in the places customers might look for them?
‚Ä¢ First-time use and discoverability‚ÄîAre common items easy for new users to find?
Are instructions clear? Are instructions necessary?
‚Ä¢ Effectiveness‚ÄîCan customers efficiently complete specific tasks? Are they making
missteps? Where? How often?

---

## Chunk 1118

140 Part I: Goal-Directed Design

---

## Chunk 1119

--- Page 171 ---
It is also worth noting that usability testing, by its nature, focuses on assessing a prod-
uct‚Äôs first-time use. It is often quite difficult (and always laborious) to measure how
effective a solution is on its 50th use‚Äîin other words, for the most common target: the
perpetual intermediate user. This is quite a conundrum when you are optimizing a

---

## Chunk 1120

design for intermediate or expert users. One technique for accomplishing this is using a
diary study, in which subjects keep diaries detailing their interactions with the product.
Elizabeth Goodman, et al, provide a good explanation of this technique in Observing the
User Experience (Morgan Kaufmann, 2012).
When performing usability testing, be sure that what you are testing can actually be

---

## Chunk 1121

measured, that the test is administered correctly, that the results will be useful in cor-
recting design issues, and that the resources necessary to fix the problems observed in a
usability study are available.
when to test: summative and formative evaluations
In his 1993 book Usability Engineering (Morgan Kaufmann, 2012), Jakob Nielsen distin-

---

## Chunk 1122

guishes between summative evaluations, which are tests of completed products, and for-
mative evaluations, conducted during design as part of an iterative process. This is an
important distinction.
Summative evaluations are used in product comparisons, to identify problems prior to
a redesign, and to investigate the causes of product returns and requests for training

---

## Chunk 1123

and support. Summative studies generally are conducted and thoroughly documented
by professional third-party evaluators. In some cases, particularly in competitive prod-
uct comparisons, summative studies are designed to yield quantitative data that can be
tested for statistical significance.
Unfortunately, summative evaluations are often used as part of the quality assurance

---

## Chunk 1124

process near the end of the development process. At this point, it‚Äôs usually too late to
make meaningful design changes. Design should be evaluated before the coding begins
(or at least early enough that you have time to change the implementation as designs
are adjusted). However, if you need to convince stakeholders or developers that the cur-

---

## Chunk 1125

rent product does have a usability problem, nothing beats watching real users struggle
through basic tasks.
Formative evaluations do just this. These quick, qualitative tests are conducted during
the design process, generally during the Refinement phase. When effectively devised
and moderated, a formative evaluation opens a window to the user‚Äôs mind, allowing the

---

## Chunk 1126

designers to see how (and, with interviews, why) their target audience responds to the
information and tools they‚Äôve provided to help them accomplish their tasks.
CH 5. Designing the Product: Framework and Refinement 141

---

## Chunk 1127

--- Page 172 ---
Although summative evaluations have their uses, they are product- and application-
management activities conducted to inform product life cycle planning. They can be
useful ‚Äúdisaster checks‚Äù during development, but the costs of changes at this point‚Äîin
time, money, and morale‚Äîcan be high.
Conducting formative usability tests

---

## Chunk 1128

There are a wide variety of perspectives on how to conduct and interpret usability tests.
Unfortunately, we‚Äôve found that many of these approaches either presume to replace
active design decision making or are overly quantitative, resulting in nonactionable
data about things like ‚Äútime to task.‚Äù A good reference for usability testing methods that

---

## Chunk 1129

we‚Äôve found to be compatible with Goal-Directed interaction design methods is Carolyn
Snyder‚Äôs Paper Prototyping (Morgan Kaufmann, 2003). It doesn‚Äôt discuss every testing
method or the relationship between testing and design, but it covers the fundamentals
well and provides some relatively easy techniques for usability testing.

---

## Chunk 1130

In brief, we‚Äôve found the following to be essential components of successful formative
usability tests:
‚Ä¢ Test late enough in the process that there is a substantially concrete design to test, and
early enough to allow adjustments in the design and implementation.
‚Ä¢ Test tasks and aspects of the user experience appropriate to the product at hand.

---

## Chunk 1131

‚Ä¢ Recruit participants from the target population, using your personas as a guide.
‚Ä¢ Ask participants to perform explicitly defined tasks while thinking aloud.
‚Ä¢ Have participants interact directly with a low-tech prototype (except when testing
specialized hardware where a paper prototype can‚Äôt reflect nuanced interactions).
‚Ä¢ Moderate the sessions to identify issues and explore their causes.

---

## Chunk 1132

‚Ä¢ Minimize bias by using a moderator who has not previously been involved in the
project.
‚Ä¢ Focus on participant behaviors and their rationale.
‚Ä¢ Debrief observers after tests are conducted to identify the reasons behind observed
issues.
‚Ä¢ Involve designers throughout the study process.
Designer involvement in usability studies

---

## Chunk 1133

Misunderstanding between an uninformed designer and the user is a common cause of
usability problems. Personas help designers understand their users‚Äô goals, needs, and
points of view, creating a foundation for effective communication. A usability study, by
142 Part I: Goal-Directed Design

---

## Chunk 1134

--- Page 173 ---
opening another window on the user‚Äôs mind, allows designers to see how their verbal,
visual, and behavioral messages are received. They also learn what users intend when
interacting with the designed affordances and constraints.
Designers (or, more broadly, design decision makers) are the primary consumers of

---

## Chunk 1135

usability study findings. Although few designers can moderate a session with sufficient
neutrality, their involvement in the study planning, direct observation of study sessions,
and participation in the analysis and problem-solving sessions are critical to a study‚Äôs
success. We‚Äôve found it important to involve designers in the following ways:

---

## Chunk 1136

‚Ä¢ Planning the study to focus on important questions about the design
‚Ä¢ Using personas and their attributes to define recruiting criteria
‚Ä¢ Using scenarios to develop user tasks
‚Ä¢ Observing the test sessions
‚Ä¢ Collaboratively analyzing study findings
Notes
1. Schumann et al., 1996
2. Cooper, 1999
3. Shneiderman, 1998
CH 5. Designing the Product: Framework and Refinement 143

---

## Chunk 1137

--- Page 175 ---
Ch 6
CrEATIVE TEAmwork
In the Introduction to this book, we described the Goal-Directed method as consist-
ing of three p‚Äôs: principles, patterns, and processes. However, there‚Äôs a fourth ‚Äúp‚Äù worth
mentioning‚Äî practices. This book mostly concerns itself with the first three, but in this
chapter we‚Äôd like to share a few thoughts about the practice of Goal-Directed design and

---

## Chunk 1138

how design teams integrate into the larger product team.
In design and business, teams are common, but rarely are they successful or produc-
tive. The finer points of teamwork are not commonly taught or communicated. Teams
require meeting time and discussion, and they add layers of communication. These are
not inherently disadvantages, but when teamwork is not undertaken with care, its out-

---

## Chunk 1139

comes can be mere compromises. Team members can be too polite to dismiss others‚Äô
ideas or too stubborn to let go of their own.
If you‚Äôve ever worked on a highly productive team, you know that working together can
produce outcomes that would be very hard, and sometimes impossible, for a single indi-
vidual. In software and service development, we need teammates to ensure that the

---

## Chunk 1140

appropriate problems are addressed, ideas flow, solutions are effectively evaluated, and
dead ends are quickly recognized. Well-functioning teams can actually make the prod-
uct development process more efficient and its outcomes more effective for users.
This chapter discusses strategies for working together, complementary approaches to

---

## Chunk 1141

product development, and tactics for assembling teams across an organization. Some of
the most interesting and important design problems are too big to solve alone‚Äîand too
often, going it alone also can be rather lonely.

---

## Chunk 1142

--- Page 176 ---
small, Focused Teams
The following discussion addresses the team concept at two levels:
‚Ä¢ Core teams are small and focused. Often they are arranged around a specific kind
of expertise, such as engineering know-how, creativity, marketing savvy, or business
leadership. But they could also be small, cross-functional teams in a startup or a small-
scale product organization.

---

## Chunk 1143

‚Ä¢ Extended teams are large and sometimes geographically distributed. These can
include stakeholders, whose work depends on the results of the project but who
aren‚Äôt responsible for the design itself. In almost any product development effort, the
extended product team includes separate core teams for (at least) marketing, design,
and engineering.

---

## Chunk 1144

Even in large-scale product organizations, most of the actual work is done within the
context of the core teams; therefore, this chapter covers techniques that can improve
work within small teams. Whether that team is cross-functional or focused on a specific
aspect of product development, the strategies in this chapter can help organize team-

---

## Chunk 1145

work around a set of simple practices. These practices can help ensure that ideas flow,
work is efficient, and critiques are timely.
Thinking better, Together
Small teams continually prioritize and address items on their work list. Some are minor;
some merely seem minor; all must be prioritized and considered at their proper depth.

---

## Chunk 1146

Effective functional or cross-functional teams do more than ‚Äúdivide and conquer‚Äù when
confronting the never-ending queue; they harness the sparky, sometimes chaotic, ener-
gies of their members in a collaborative effort that we‚Äôll call ‚Äúthought partnership.‚Äù
You can think of a thought partner as an intellectual complement‚Äîa collaborator who

---

## Chunk 1147

shares your goals but who comes at problems from a different angle, with a different set
of skills. In Thinking, Fast and Slow, author Daniel Kahneman describes his partnership
in his academic work with Amos Tversky in a way that looks to us like good thought
partnership:
The pleasure we found in working together made us exceptionally patient; it is much

---

## Chunk 1148

easier to strive for perfection when you are never bored. Both Amos and I were critical
and argumentative ‚Ä¶ but during the years of the collaboration, neither of us ever
rejected out of hand anything the other said.1
146 Part I: Goal-Directed Design

---

## Chunk 1149

--- Page 177 ---
How did thought partnership evolve? In the early days of Cooper‚Äôs consulting practice,
one of the meeting rooms came to be known as The Yelling Room. (The name was evi-
dence that simply hiring like-minded people didn‚Äôt always guarantee harmony around
the whiteboard.) In those days, it was common for designers to campaign, loudly, for their

---

## Chunk 1150

design ideas. The spirit was collaborative and feisty, but the output was often unclear.
‚ÄúWhat did we decide, again?‚Äù ‚ÄúWhose idea won?‚Äù ‚ÄúWhat do we need to tackle now?‚Äù
Over time, a new collaboration strategy emerged. One designer was given responsibility
for marshaling the conversation, and the other focused on ideating and exploring. In our

---

## Chunk 1151

practice today, we‚Äôve applied a much deeper definition and distinction to each of the two
approaches:
‚Ä¢ Generation‚ÄîIn a generation-based approach, invention is undertaken boundlessly,
and outcomes are most successful when people have space to generate freely, think
laterally, and explore openly.
‚Ä¢ Synthesis‚ÄîIn a synthesis-based approach, invention is most fruitful when it is guided

---

## Chunk 1152

and focused, and outcomes are assured only when they‚Äôve addressed the user need.
Teams that blend these approaches make quick progress through complicated problems.
Whatever role you play in the product development process, you can use the following
practices to find a teammate who will help you do your best thinking.
generators and synthesizers

---

## Chunk 1153

In our hiring process at Cooper, we seek to identify individuals who will make powerful
thought partners, and we specifically try to find designers with complementary skills
and dispositions. We call these roles ‚ÄúGenerator‚Äù and ‚ÄúSynthesizer.‚Äù We‚Äôve found that
these two styles of creativity strike a powerful balance when we tackle complicated

---

## Chunk 1154

design problems. Generators and Synthesizers share responsibility for delighting users
with simple solutions, and they have different responsibilities during the process. In the
best cases, they allow their partners to fully inhabit the creative roles they‚Äôre most com-
fortable playing.
Generation and synthesis live on the same spectrum of creativity, as shown in Figure 6-1.

---

## Chunk 1155

Most designers sit on one side of the spectrum, favoring either synthetic or genera-
tive skills. A strong Generator typically needs a partner of equal strength in synthesis
to strike a healthy balance. When working alone, strong Generators may zoom in too
quickly on an incomplete solution or spend too much time casting about in the muddi-

---

## Chunk 1156

ness of a brainstorm. They need a Synthesizer to help make decisions at the right level at
the right times and to keep the design moving forward.
CH 6. Creative Teamwork 147

---

## Chunk 1157

--- Page 178 ---
< >
Generation Synthesis
Figure 6-1: Generation and synthesis form a creative spectrum.
Synthesizers initiate dialog within their teams. Instead of proposing new ideas and solu-
tions, Synthesizers ask questions to locate the intent and value within ideas that have
already been proposed. As the conversations proceed, Synthesizers seek clarity, expose

---

## Chunk 1158

gaps, and draw connections. When working alone, strong Synthesizers can struggle to
move beyond list-making and scenario thinking. They need a Generator to pull ideas
into concrete, connected form.
The dialog between these two balances inspires ideation with evaluation and sense-mak-
ing. It lays the foundation for a powerful partnership in confronting complex interaction

---

## Chunk 1159

problems. A generated idea can emerge as a vague or inspired idea, and capable syn-
thesis can quickly reveal its inherent value or ensure that dead ends and darlings are
quickly recognized and dispatched.
The following sections outline the qualities, characteristics, and interplay between the
roles. Use the comparisons as a way to find your own creative disposition and to describe

---

## Chunk 1160

the kind of person who could bring out the best in you.
In a typical design meeting, the distinction between roles often manifests itself from
the first moment, as shown in Figure 6-2. Who instinctively reaches for the marker and
heads to the whiteboard when confronted with a design problem?
Generator Synthesizer

---

## Chunk 1161

Most frequently found... At the whiteboard, marker in hand Formulating questions, scratching chin
When addressing a design problem... Draws a picture Makes lists
When considering a design solution... Imagines new directions Asks questions
Figure 6-2: Generators and synthesizers complement each other.
148 Part I: Goal-Directed Design

---

## Chunk 1162

--- Page 179 ---
Each role tends to inhabit a specific physical and mental space during design meetings.
Successful Generators tend to grab the marker to visualize ideas, as shown in Figure 6-3.
Synthesizers tend to organize, listing the qualities of a good solution or refreshing their
understanding of the problem, the user‚Äôs goals, and the usage context.
Generator Synthesizer

---

## Chunk 1163

Articulates the experience as... A set of concrete ideas A story with concrete plot points
Offers input in the form of... Invention Clarification
Figure 6-3: Generators and synthesizers approach design problems from different angles.
Generators tend to be relentlessly concrete thinkers, whereas the best Synthesizers lead
with storytelling and prompting.

---

## Chunk 1164

Here‚Äôs a sample discussion from an imaginary project:
Generator: I have an idea for adding something new to the list. (Begins drawing the
screen on the whiteboard.) It‚Äôs a gesture. When you‚Äôre in the main list, you pull down,
and you start to see the control for adding a new thing. It‚Äôs just an empty field.
Synthesizer: Great. It might feel sort of hidden, though. In Jeff‚Äôs scenario, he only adds

---

## Chunk 1165

a new thing every few weeks, right?
Generator: Yeah, true. He might forget it‚Äôs there.
Synthesizer: I like the idea of keeping the focus on information rather than UI widgets,
though.
Generator: Hmmm. How about we show the field with the help text ‚ÄúAdd a new thing‚Äù
when this main screen loads, and then the screen snaps up to cover it? So you see it,
but then you focus on the list.

---

## Chunk 1166

Synthesizer: I like it. It might get annoying if it happens a bunch of times in the same
session, but I think we can come up with some rules.
As a design meeting progresses, the Generator and Synthesizer work together to explore
solutions and develop ideas. The Synthesizer should help shape the discussion, gently

---

## Chunk 1167

tightening the depth of field. The conversation usually begins with a wide-angle discus-
sion of the problem and from there drills ever tighter into the details of a solution.
CH 6. Creative Teamwork 149

---

## Chunk 1168

--- Page 180 ---
As shown in Figure 6-4, creative minds often disagree, especially when they‚Äôre coming
at the problem from different directions. Early on in a creative partnership, trust must
be established. Generators must take the lead in concept direction. This means that Syn-
thesizers must cede both the literal and figurative whiteboard marker. At the same time,

---

## Chunk 1169

Generators must trust Synthesizers to steer the discussion, to keep from getting mired
in details, and to reframe the problem when necessary. This means that Generators must
feel comfortable with introducing newly formed ideas and not feel threatened when their
partner evaluates and critiques these ideas. Most ideas are bad, after all, and a primary

---

## Chunk 1170

goal in a thought partnership is to identify an idea‚Äôs quality or promise early on and dis-
pense with the cruft.
Generator Synthesizer
Takes responsibility for... Driving the concept direction Ensuring that concept is
coherent and consistent
Can easily slip into... Excessive detail Pre-emptive analysis

---

## Chunk 1171

When the creative balance is off... Falls in love with a solution and Blocks an idea or direction before
defends it to the death it has a chance to develop
Freely experiments with ideas and Is open to ideas that might seem jarringly
When the creative balance is perfect... explores varieties of solutions contrary to convention, probes for
detail and nurtures their development

---

## Chunk 1172

Figure 6-4: Generators and synthesizers have different responsibilities, strengths, and pitfalls.
In the detailed design phase, the team often spends the morning working together and
then separates to document details, as shown in Figure 6-5. The Generator typically
opens a drawing tool and begins capturing decisions in the form of drawings. The Syn-

---

## Chunk 1173

thesizer captures decisions, either in schematics that help explain the flow or in text
that explains the rationale. The details that the team documents can be communicated
in a variety of ways, depending on the team‚Äôs size and needs. In our practice, we favor
frequent, lightweight, informal notes over formal documentation milestones.
Generator Synthesizer

---

## Chunk 1174

After the meeting... Draws the interactive structure and flow Captures the rationale for decisions in
rough schematics and text
Focuses on understanding... Flow, and the implications of Development of a pattern language
design decisions
Figure 6-5: Generators and synthesizers perform different tasks away from the whiteboard.
150 Part I: Goal-Directed Design

---

## Chunk 1175

--- Page 181 ---
getting started with thought partnership
If you want to establish thought partnership in your practice, you could begin by creat-
ing Generator or Synthesizer roles and then finding people to fill them. You could also
start leaner, finding small ways to apply elements of the practice that are appropriate to

---

## Chunk 1176

your work. It can take a while to determine what kind of partnership you need, but you
can start with simple steps.
Finding a partner who generates
‚Ä¢ Before you begin, clarify the problem you want to solve.
‚Ä¢ Appeal to the generative capabilities of a colleague or friend: ‚ÄúI need someone to help
kick-start some ideas.‚Äù

---

## Chunk 1177

‚Ä¢ If things don‚Äôt work at first in the meeting, walk up to the board and draw a bad idea. If
your partner is a good Generator, he or she will leap up and begin building on the bad
idea or offer a counterproposal.
Finding a partner who synthesizes
‚Ä¢ Before you begin, make sure you‚Äôre designing for a higher-level ‚Äústory‚Äù or scenario. This

---

## Chunk 1178

will help give your partner a rubric from which to work during the meeting.
‚Ä¢ Appeal to your partner‚Äôs evaluative capabilities: ‚ÄúCan you help me figure out whether
this idea is any good?‚Äù
‚Ä¢ If things don‚Äôt immediately go well in the meeting, work on the story. Make sure you‚Äôre
both clear on what the user is doing and why.
switching roles on the fly

---

## Chunk 1179

Establish ground rules at the beginning of your partnership. Synthesizers should probe
and guide; Generators should explore and ideate. You can swap roles within a meeting,
but it‚Äôs a good idea to make this switch explicit. When a Synthesizer comes up with a
great idea, he must resist the urge to wrest the marker away from the Generator. Instead,

---

## Chunk 1180

he can simply offer to switch roles: ‚ÄúMind if I generate for a bit?‚Äù
getting unstuck (the 15-minute rule)
Small groups of creative people sometimes hit a wall. Ideas won‚Äôt flow; conversations
swirl or get mired in detail. In our practice, we encourage teams to bring in another
designer if the discussion doesn‚Äôt advance for 15 minutes. The core team should brief

---

## Chunk 1181

this outsider on simple contextual details: the user, the scenario, and the ideas under
CH 6. Creative Teamwork 151

---

## Chunk 1182

--- Page 182 ---
consideration. The outsider should, in turn, probe the designers for rationale: Why is
this good? How does this help? Almost invariably, this simple conversation helps lift the
designers out of the details and move beyond the impasse in a matter of minutes.
rightsizing core teams
If two are good, three must be better, four would be amazing, and ten could bend space

---

## Chunk 1183

and time. Right? Organizations large and small fall victim to an additive urge when
building teams. In our experience, teams are most effective when the members have
clear roles and when the teams are small and nimble. This is why we have applied the
moniker ‚Äúcore team‚Äù to the unit responsible for getting work done.

---

## Chunk 1184

In Scaling Up Excellence, Stanford business professors Robert Sutton and Huggy Rao cite
numerous examples in which bigger teams actually produce worse outcomes; they call
this phenomenon ‚ÄúThe Problem of More‚Äù:
Employees in bigger teams gave others less support and help because it was harder to
maintain so many social relationships and to coordinate with more people ‚Ä¶ The key

---

## Chunk 1185

challenges are how to add rules, tools and people without creating [bloat].2
In our practice at Cooper, we steer clear of bloat by insisting on four things: small
teams, clear roles, tight decision-making loops, and minimal ‚Äúwork about work.‚Äù That
last phrase describes any activities that are not directly tied to making progress on the

---

## Chunk 1186

core objectives of product development: coming up with great ideas and shipping great
products. Status e-mails and quick, noncritical check-ins are examples of ‚Äúsmall‚Äù tasks
that can accumulate and end up requiring significant effort and coordination. If you‚Äôre
reading this book while you‚Äôre in a nonessential meeting, you‚Äôre sinking in the quicksand
of ‚Äúwork about work.‚Äù

---

## Chunk 1187

By localizing decision-making and being proactive about planning milestones and
check-ins, we carve out space for a small set of creative teammates to flourish. In specific
numeric terms, our rule of thumb for the rightsized core team to focus on an individual
problem is no more than four, and no fewer than two. A minimum of two enables rapid

---

## Chunk 1188

evaluation and iteration. Teams with more than four members have too much overhead,
too many people to please, and too much opportunity to lose momentum.
Finally, remember that a small team can be nimble only when roles are clear, responsi-
bility for success is shared, and abilities are complementary. The following sections dis-

---

## Chunk 1189

cuss the various participants in teams large and small and provide some tips for getting
the most out of them.
152 Part I: Goal-Directed Design

---

## Chunk 1190

--- Page 183 ---
working Across Design Disciplines
The Synthesis-Generation model can be applied to any professionals engaged in creative
discussion. In our practice, it provides structure when any two individual designers
are collaborating‚Äîvisual designer and interaction designer, two interaction designers,

---

## Chunk 1191

designer and developer, interaction designer and creative lead. While the practice of user
experience design has become more established, practitioners often find themselves in
new collaborative situations with creative professionals from many backgrounds. This
model can be usefully applied in many core team situations, with participants from var-
ious disciplines.

---

## Chunk 1192

Over a product‚Äôs lifetime, designers across disciplines must do more than merely com-
municate. Interaction designers must coordinate and cooperate with visual and indus-
trial designers, staging decision-making so that each discipline is equipped with the
material it needs to work most effectively. The following sections offer a framework for

---

## Chunk 1193

understanding the distinct responsibilities of each discipline, along with a summary of
how the disciplines can work together effectively.
Interaction design
Interaction designers are responsible for understanding and specifying how the product
should behave. This work overlaps with the work of both visual and industrial designers

---

## Chunk 1194

in a couple of important ways. When designing physical products, interaction designers
must work with industrial designers early on to specify the requirements for physical
inputs and to understand the behavioral impacts of the mechanisms behind them. Inter-
action designers cross paths with visual designers throughout the project. In our prac-

---

## Chunk 1195

tice, their collaboration begins early, as visual designers guide discussions of the brand
and emotive aspects of the experience in discussions with users and the extended team.
Visual interface design
In our practice, we‚Äôve come to recognize that visual interface design is a critical and dis-
tinct discipline that must be conducted in concert with interaction design and‚Äîwhen

---

## Chunk 1196

appropriate‚Äîindustrial design. It has great power to influence a product‚Äôs effectiveness
and appeal. But for this potential to be fully realized, visual design must not be an after-
thought‚Äîit isn‚Äôt a ‚Äúcoat of paint.‚Äù It should be regarded as one of the essential tools for
satisfying user and business needs.
Visual interface designers‚Äô work emphasizes the organizational aspects of the design

---

## Chunk 1197

and how visual cues and affordances communicate behavior to users. These designers
must work closely with interaction designers to understand the priority of information,
flow, and functionality in the interface and to identify and strike the right emotive tones.
CH 6. Creative Teamwork 153

---

## Chunk 1198

--- Page 184 ---
Visual interface designers focus on how to match the interface‚Äôs visual structure to the
logical structure of both the users‚Äô mental models and the application‚Äôs behaviors. They
are also concerned with communicating application states to users (such as read-only
versus editable) and with cognitive issues surrounding user perception of functions (lay-

---

## Chunk 1199

out, visual hierarchy, figure-ground issues, and so on).
Visual interface designers must have command of basic visual properties‚Äîcolor, typog-
raphy, form, and composition‚Äîand must know how these can be used to effectively con-
vey affordances, information hierarchy, and mood. Visual interface designers should be
aware of brand psychology, know the history of graphic design, and be familiar with

---

## Chunk 1200

current trends. They must know accessibility principles and the science of human per-
ception. Visual interface designers also need a fundamental understanding of interface
conventions, standards, and common idioms. (Read more about Goal-Directed visual
interface design in Chapter 17.)
graphic design
Until the last 20 years or so, the discipline of graphic design was dominated by the

---

## Chunk 1201

medium of printed ink, as applied to packaging, advertising, environmental graphics,
and document design. These traditional practices were not developed to address the
demands of pixel-based output. However, the discipline has evolved considerably in the
last two decades, and graphic design has become rigorous and eloquent in its approach
to digital, screen-based media.

---

## Chunk 1202

Talented, digitally fluent graphic designers excel at providing rich, aesthetically pleas-
ing, exciting interfaces. They can create beautiful and appropriate surfaces for the inter-
face that establish a mood or connection to a corporate brand. For them, design is often
first about the tone, style, and framework that communicate a brand experience, sec-

---

## Chunk 1203

ondarily about legibility and readability of information, and finally about communicat-
ing behavior through affordances (see Chapter 13).
Visual information design
Visual information design is concerned with the visualization of data, content, and nav-
igation, rather than interactive functions. It is distinguished from information design in

---

## Chunk 1204

that it is less concerned with the content‚Äôs editorial and information architecture issues,
focusing instead on the graphical presentation. This skill set is particularly important in
designing data-intensive applications, where users spend much of their time with com-
plex content.
The primary goal of visual information design is to present data in a way that promotes

---

## Chunk 1205

understanding. This is accomplished by controlling the information hierarchy through
154 Part I: Goal-Directed Design

---

## Chunk 1206

--- Page 185 ---
the use of visual properties such as typography, color, shape, position, and scale, as well
as how these attributes change over time. It can also include microinteractions with
information displays that expose details or connections to additional information. Com-
mon applications of visual information design include charts, graphs, sparklines, and

---

## Chunk 1207

other means of displaying quantitative information. Edward Tufte has written several
seminal books that cover this topic in detail, including The Visual Display of Quantitative
Information (Graphic Press, 1993).
Industrial design
When designing a convergent product, industrial designers must define the form of the
physical product, embodying the brand with shape and material. For the purposes of

---

## Chunk 1208

interaction design, they specify physical input mechanisms. Interaction designers can
perform research into the users‚Äô overall needs and the device‚Äôs goals as a whole. Indus-
trial designers lay the groundwork for their concepts with competitive analysis and
materials research. The input mechanisms should not be specified before the desired

---

## Chunk 1209

interaction paradigms are known. Interaction iterations of the software‚Äôs primary ele-
ments should be conducted in parallel with industrial design concepts so that the out-
comes of each can inform subsequent phases. Throughout, interaction designers benefit
from the materials expertise and ergonomic acumen of industrial designers, and the

---

## Chunk 1210

industrial designers benefit from the holistic experience vision created by the interac-
tion designers.
Much like the difference in skills between graphic designers and visual interface and
information designers, a similar split occurs among the ranks of industrial designers.
Some are more adept at creating arresting and appropriate forms for objects, and oth-

---

## Chunk 1211

ers emphasize logical and ergonomic mapping of physical controls in a manner that
matches user goals and communicates device behaviors. The increase in software-en-
abled devices that use rich visual displays demands a concerted effort on the part of
interaction designers, visual interface designers, and industrial designers to produce
complete and effective solutions.

---

## Chunk 1212

The interplay of these roles involves much more subtlety, and many great resources
explore this topic in detail. Kim Goodwin‚Äôs book, Designing for the Digital Age (Wiley,
2011), offers practical techniques and tips for defining roles and establishing thought
partnership in the context of a design project.
The Extended Team

---

## Chunk 1213

The preceding discussion covered practices that allow great design to happen among a
small core team. But for design to transform into a shipping product, the design must
CH 6. Creative Teamwork 155

---

## Chunk 1214

--- Page 186 ---
enter the minds and hearts of many more people. Will the rest of the extended team
understand its value? Will they indulge it long enough to give it the kind of critique that
makes it better? Even if it survives early whiteboard sessions, will it survive a presen-
tation to the product owner? If the product owner gets behind it, will it be understood,

---

## Chunk 1215

implemented, and extended effectively by the production engineers?
The following discussion is intended to outline a few simple strategies for integrating
design in large-scale product-focused teams. It‚Äôs not intended to be a comprehensive
accounting of the best practices in product or service design and development. Very few

---

## Chunk 1216

ideas are truly great. This is why you need timely, candid feedback from capable collab-
orators, both among your core team and across the extended product team. This section
discusses the frequent major participants within product teams. Emphasis is placed on
how and when to collaborate with them so that your ideas get the kinds of critiques they
need, at the appropriate time.

---

## Chunk 1217

Areas of responsibility and authority
Designers are never the sole participants in creating a great interactive experience.
Within digital product organizations, the expertise of engineers, marketers, and busi-
ness stakeholders must be interwoven with the work of design in a product‚Äôs creation
and evolution. The following list describes a division of responsibilities, balanced by an

---

## Chunk 1218

equal division of authority among those different disciplines:
‚Ä¢ Design is responsible for users‚Äô goals for the product. Many organizations currently
do not hold any specific person, or team, responsible for goals. To carry out this
responsibility, designers must have the authority to decide how the product will look,

---

## Chunk 1219

feel, and behave. They also need access to information. They must observe and speak to
potential users about their needs, to engineers about technological opportunities and
constraints, to marketing about opportunities and requirements, and to management
about the kind of product to which the organization will commit and the results they
expect.

---

## Chunk 1220

‚Ä¢ Usability is responsible for validating that users respond to the design as intended
and that the overall experience and detailed interactions have the desired effect‚Äî
being useful, usable, and desirable. To be effective, usability should be independent
from but collaborative with the design group, and both usability and design should

---

## Chunk 1221

report to a decision-maker who can weigh the results from an informed and objective
standpoint, and has the authority to have any necessary corrections to the design or
implementation enforced. Usability‚Äôs strength is in identifying problems, while design‚Äôs
strength is in identifying solutions. Collaboration works best when this division of
labor is maintained.

---

## Chunk 1222

‚Ä¢ Engineering is responsible for construction. This means that they must have
authority over the raw materials and construction processes‚Äîdevelopment platforms
156 Part I: Goal-Directed Design

---

## Chunk 1223

--- Page 187 ---
and libraries, for example‚Äîalong with the relative difficulty ratings and cost of
the items in their backlog. The engineering and design teams must stay in touch
when those items are being prioritized. Designers must review and react to the
implementation of form and behaviors, and both teams must evaluate the success or

---

## Chunk 1224

failure of the overall experience as it is developed and tested. Designers should rely on
engineers to provide guidance on technical constraints and opportunities, as well as
the feasibility of proposed design solutions.
‚Ä¢ Marketing is responsible for defining the market opportunity as a set of customer
needs, preferences, and motivations. This team also eventually must convince

---

## Chunk 1225

customers to purchase the product. To do this, the marketing team must have the
authority to advocate for the most lucrative, or beneficial, customer segments. Its
members must provide guidance in targeting design research with the appropriate
users, and the team must have access to the outcomes of that design research. (It‚Äôs

---

## Chunk 1226

worth noting that, as we discuss in Chapter 3, customers and users are often different
people with different needs.)
‚Ä¢ Business leads are responsible for defining the business opportunity, because they‚Äôre
also accountable for the product‚Äôs profitability. This group must drive decision-making
around where opportunities for differentiation exist, and what features and functions

---

## Chunk 1227

must be prioritized across the extended team. To make those decisions, business leads
need to receive clear information from the other groups: design‚Äôs research and product
definition, marketing‚Äôs research and sales projections, and engineering‚Äôs estimations of
the time and cost to create the product.
Collaboration among these teams best happens in two venues: at frequent, informal

---

## Chunk 1228

working meetings where new ideas are explored, evaluated, and elaborated on; and at
checkpoints that correspond to the end of each phase in established processes. Working
meetings are particularly important for engineers once the design has begun to gel, and
they are critical for marketing in the project‚Äôs early and late stages.

---

## Chunk 1229

As the product vision evolves, each team must continually seek to address its core
concern:
‚Ä¢ Designers‚ÄîWhat are the simplest, most coherent, most delight-inspiring
mechanisms for crafting the experience?
‚Ä¢ Usability professionals‚ÄîDoes the design deliver on its promise of usefulness,
usability, and desirability? Do users really use the product as assumed in the design?

---

## Chunk 1230

‚Ä¢ Engineers‚ÄîHow do we deliver the experience in a way that is fast, robust, scalable,
and extendable?
‚Ä¢ Marketers‚ÄîHow can we inspire adoption?
‚Ä¢ Business leaders‚ÄîWhere is the most evident overlap of product function and
market need?
CH 6. Creative Teamwork 157

---

## Chunk 1231

--- Page 188 ---
When team members focus on those questions and ensure that they‚Äôre prioritized appro-
priately, extended team interactions are clear and direct.
Collaborating with agile developers
Designers imagine and specify the right experience: a form that delights users, an expe-
rience that feels right, behaviors that fit use. Developers offer a corollary: The right expe-

---

## Chunk 1232

rience should be built in the right way. We once believed that all design work should be
completed before coding begins, but we‚Äôve come to learn that this is neither desirable
nor practical. Clear benefits arise from methodically testing and proving the feasibility
of design hypotheses along the way.
Agile development methods arose as a response to the very real drawbacks of ‚Äúwaterfall‚Äù

---

## Chunk 1233

methods, which are characterized by years-long development timelines, hundred-page
requirements documents, processes with various ‚Äúgates‚Äù to ensure ‚Äúquality,‚Äù and doz-
ens of participants. Agile methods seek to optimize time and energy, reduce waste, and
ensure that concepts actually deliver value to users. They encourage many of the same

---

## Chunk 1234

principles discussed early in this chapter‚Äîsmall teams, focused work, and frequent
discussion. Yet although they have evolved the practice of software development, agile
methods also complicate‚Äîand, in some cases, short-circuit‚Äîdesign work.
This section discusses ways to ensure that the work of designers informs and shapes the

---

## Chunk 1235

development of products developed with agile methods. Let‚Äôs first understand a couple
of fundamental perspectives on agile methods:
‚Ä¢ Business stakeholders tend to love the idea of agile development because it sounds
economical and efficient. Yet business stakeholders often don‚Äôt realize until much later
that building fast means thinking fast, and fast thinking requires a solid foundation

---

## Chunk 1236

of assumptions and expected outcomes. If no underlying foundation or shared vision
exists for what should be built and tested, agile work is aimless and, contrary to
promises, wastes time.
‚Ä¢ Developers tend to love agile methods because such methods support more of what
they love (coding) and less of what they don‚Äôt (sitting in meetings, interpreting

---

## Chunk 1237

requirements documents). When misapplied, however, this way of working can result
in heads-down sprinting toward hazily specified destinations, resulting in just as many
frustrating dead ends as classic waterfall methods.
In our experience, agile development is highly successful when core product elements
are clearly rendered, widely understood, and implemented so that they can be tested

---

## Chunk 1238

well. Thus, we have found that the primary elements of an experience should be planned,
visualized, and discussed before they are built. Even in a highly iterative process, informed
planning should precede construction. You must think before you do. This is a much
158 Part I: Goal-Directed Design

---

## Chunk 1239

--- Page 189 ---
messier reality than the neat sequential compartmentalization of design and construc-
tion, but it can initiate a productive dialog between designers, developers, and business
decision-makers.
The remainder of this section covers a couple of simple questions at a high level:
‚Ä¢ What does design mean in an agile context?

---

## Chunk 1240

‚Ä¢ How should designers adapt their practice in fast-paced, agile ways?
The work of designers on an agile team
Interaction designers seek simplicity and cohesion, knowing that cohesive solutions
won‚Äôt appear fully formed on day one. They emerge over time, hewing to the spirit of
Antoine de Saint-Exup√©ry‚Äôs oft-cited design aphorism: ‚Äú...Perfection is attained not when

---

## Chunk 1241

there is no longer anything to add, but when there is no longer anything to take away.‚Äù5
Waterfall methods are friendlier to this way of working, because they provide time for
ideas to develop and for their flaws to be revealed and removed. Agile methods value
speed and focus on small iterations, but they reward designers with a chance to under-
stand how users interpret design in progress.

---

## Chunk 1242

In agile contexts, designers must prioritize and visualize; they can bring clarity and con-
creteness to desired outcomes and facilitate conversations around what elements must
be developed to achieve them. This sounds similar to the work of design in many other
contexts, but there are two important differences:

---

## Chunk 1243

‚Ä¢ There can be tension, or outright disagreement, in how the experience is defined when
people work in agile teams. Designers must be able to define the critical elements of the
user experience while working in concert with developers who may reveal constraints
on or obstacles to that definition.
‚Ä¢ Designers must think differently about the inputs to, and outcomes of, their practice.

---

## Chunk 1244

Agile development allows for feedback from users early on and often. This is an
opportunity, and designers should appreciate it as such.
Designers rarely get a chance to fully visualize and perfect a user experience vision in an
agile environment. But they must advocate for goal-directedness in the definition of the
product and in the prioritizing of items in development.

---

## Chunk 1245

Defining the user experience on agile teams
At the beginning of a collaborative effort with agile developers, designers will want to
quickly assess how much of the experience has already been defined, specified, or implied.
CH 6. Creative Teamwork 159

---

## Chunk 1246

--- Page 190 ---
This definition could be explicit‚Äîin the form of a wireframe created by a lead architect
or business stakeholder‚Äîor implicit, in the form of shared assumptions about how it
will work, the implementation technologies used, and so on. Designers should expect to
shape the primary elements of the user experience‚Äîlayout and navigational metaphors,

---

## Chunk 1247

the information architecture, transitions and animations that establish a sense of polish.
Therefore, it‚Äôs important to reckon with predetermined implications and constraints.
On the best agile teams, the designers specify the foundation of the experience while the
developers lay the non-user-facing technical foundation. In less-optimal cases, designers

---

## Chunk 1248

need to move quickly to confront assumed specifications, especially those that prema-
turely determine an important aspect of the experience. These conversations can be dif-
ficult, but the whole point of user experience design is to express the product hypothesis
through the user interface.
In our practice, agile developers can be capable thought partners at this stage. Talented

---

## Chunk 1249

developers think deeply about the infrastructure and connective tissue of interactive
products, and they bring a healthy perspective on where the true engineering complica-
tions lie. In the best cases, they provide useful direction toward the right level to apply
design and ensure that the work of design is useful and readily implemented. In the worst

---

## Chunk 1250

cases, neither developers nor designers understand the value of the others‚Äô expertise.
Doing valuable work on an agile team is much like doing it in other contexts. It always
comes down to articulating users‚Äô goals, context, and flows; visualizing and iterating the
desired experience; and prompting, gathering, and interpreting frequent user feedback.

---

## Chunk 1251

On agile teams, designers must be able to quickly determine where the biggest user
experience challenges lie and to ensure that related elements flows are defined before
development begins.
For case studies in the collaboration of user experience designers and agile developers,
read the Smashing Magazine article Lean UX: Getting Out of the Deliverables Business

---

## Chunk 1252

by Jeff Gothelf and Josh Seiden.3 It‚Äôs a fine primer on the ways in which user experience
design can be applied in specific agile development contexts.
Incorporating user feedback
For designers, the most valuable by-product of agile processes is feedback on the user
experience‚Äîand lots of it. This feedback can be highly useful, as long as it is prompted,

---

## Chunk 1253

gathered, and interpreted appropriately. When you‚Äôre a designer, it‚Äôs critical to deter-
mine what you want to learn about the user experience during each release of new fea-
tures or functions.
Feedback in an agile context is fast-paced but familiar. Early on, the prompts should be
directed toward understanding whether the fundamental user hypothesis is correct. Do

---

## Chunk 1254

160 Part I: Goal-Directed Design

---

## Chunk 1255

--- Page 191 ---
the expected users derive the expected value? How well do the primary elements serve
them? It‚Äôs also important to look for what is working, independent of what you hoped
would work. What are people using? Why?
As development continues, feedback can be more focused: Do the primary elements
flow well? How are they accessed? What isn‚Äôt used? Where do users stumble? What

---

## Chunk 1256

surprises users?
Establishing a Creative Culture
Establishing teams is essential, but a team full of capable people doesn‚Äôt guarantee good
output. Great teams emerge and develop because they‚Äôre placed in environments‚Äî
physical and virtual‚Äîthat nourish them. In our experience, the team‚Äôs cultural and
social dynamics are as important as clarity around roles. Does the team enjoy work-

---

## Chunk 1257

ing together? Do they have fun together? Do they have compatible schedules? Interests?
Ways of working? Senses of humor?
Renowned record producer Steve Albini once laid out his expectations in a letter to a
band before they entered the recording studio:
I have worked on hundreds of records, and I have seen a direct correlation between

---

## Chunk 1258

the quality of the end result and the mood of the band throughout the process. If the
record takes a long time, and everyone gets bummed and scrutinizes every step ‚Ä¶ the
end result is seldom flattering.4
A famous recording studio doesn‚Äôt guarantee a good record, nor does a great producer.
These ingredients are important, but those investments are wasted if the session is

---

## Chunk 1259

unproductive. Process can provide structure, but the ideas themselves need light and life
to emerge and develop. Creating a positive, productive organizational culture is a topic
that is too big to fully explore in this space, but it‚Äôs too important to omit. Here is some of
the raw material of an organizational culture; consider how you can use these elements

---

## Chunk 1260

to promote the cultural oxygen required to fuel the spark of creativity:
‚Ä¢ Environmental serendipity‚ÄîCreative organizations can go overboard with
environmental design, but there‚Äôs a method in what may seem like madness: Casual
interactions with people, artifacts, or architectural moments set the tone for creativity.

---

## Chunk 1261

Small environmental surprises‚Äîa bold color, a new texture, an interesting surface‚Äî
offer external encouragement for sparky ideation.
‚Ä¢ Small workspaces‚ÄîAn ideal workroom announces itself as a place that is friendly to
creativity, providing surfaces and tools for sketching, along with room to move around.
Nothing kills momentum more often than distraction, so a workroom should block out

---

## Chunk 1262

CH 6. Creative Teamwork 161

---

## Chunk 1263

--- Page 192 ---
as much of the outside world as possible. A door is the typical architectural method of
achieving this goal, but doors can be rare in open floor plan workplaces. Find a corner,
erect barriers, and keep out the rest of the world as you dive deep into a problem.
‚Ä¢ A collaborative code of conduct‚ÄîThe team should agree on how they‚Äôll work

---

## Chunk 1264

together. Clarity and trust in one another‚Äôs roles, responsibilities, and work habits are
essential. Small rituals are the foundation of good teamwork. Meeting start times,
durations, breaks, and agendas can seem inconsequential, but small problems can
accumulate. Focus must be established together, so turn off your phone and close your

---

## Chunk 1265

laptop. Like a growing pile of dirty dishes in the kitchen sink, minor inattentions can
easily overwhelm good intentions. Do your dishes, hold your teammates accountable,
and get to work.
‚Ä¢ Space for positive digression‚ÄîDigressions can seem egregious until they deliver
you to unexpected insight. When a team is pressed for time, a digression can feel

---

## Chunk 1266

wasteful and sap energy. Teams who are open to digression tend to have more wide-
ranging discussions and arrive at more interesting and more carefully considered
solutions. The moral: Leave some time to stray.
Paying attention to the social dynamic is critical throughout the lifetime of the part-
nership. When there‚Äôs conflict within the team, progress slows, quality decreases, and

---

## Chunk 1267

the end result flatters no one. For a design team, a solution of poor quality should be the
ultimate bummer.
Identifying skill levels in Designers
Designers‚Äô skills must meet the scale or depth of a design problem. Craftspeople get
bored with simple problems; apprentices may end up with subtle, sophisticated prob-

---

## Chunk 1268

lems that their skills can‚Äôt match. In both cases, the product suffers, and the reputation
of the design organization can take a hit. Design leaders must ensure that problems are
rightsized to the abilities of the designers in their practices. This requires a keen sense of
a problem‚Äôs location, size, and impact before the design work even begins.

---

## Chunk 1269

Here‚Äôs a quick guide to how we think about the levels of experience and the skills required
at each level:
‚Ä¢ Apprentices are early career designers who must be matched with mentors to guide
their skill development. It can take considerable time and effort to develop the design
judgment that allows apprentices to reliably provide solid, sound ideas that truly fit the

---

## Chunk 1270

task of the design problem. In the process of developing these skills, apprentices must
be allowed to stretch to solve problems beyond their skill levels, but they need strong
support and guidance from senior teammates while doing so.
162 Part I: Goal-Directed Design

---

## Chunk 1271

--- Page 193 ---
‚Ä¢ Craftsmen‚ÄîWith time, designers achieve more and more independence as they
master their craft. This allows them to take a leadership role within a core team and
drive a creative vision every day. Many designers spend their entire career at this
level, especially if they‚Äôre less inclined to take on the responsibilities of organizational
leadership.

---

## Chunk 1272

‚Ä¢ Leaders possess high levels of design craft, along with the willingness and aptitude to
provide organizational leadership. In large-scale product companies, a design leader
is essential in providing guidance and structure for the design team, advocating for
budget and authority, scoping and prioritizing projects, promoting the cause of design,
and hiring designers.

---

## Chunk 1273

Progressing up the ladder of design skill comes down to developing design judgment.
How quickly can a designer recognize the fitness of a solution to its task? And how reli-
ably can she guide a team toward a better solution or a deeper understanding of the
problem? Leaders must supplement hard skills in design judgment with mentorship

---

## Chunk 1274

skills and organizational savvy. Not every designer aspires to develop these capabilities,
and ‚Äúleadership‚Äù is by no means the only, or most optimal, endpoint for highly talented
craftsmen.
Collaboration Is the key
There is no recipe for creative vision or good design judgment. Even when you believe
you have the right concept, it takes considerable hard work, diligence, and skill to exe-

---

## Chunk 1275

cute it well. One of the most challenging and chaotic but ultimately rewarding aspects
of this hard work is collaborating with the rest of the product and business team. The
vertigo caused by these struggles and challenges has motivated us to take a methodical
approach.
We have found that designers should be able to collaborate with all the other people

---

## Chunk 1276

on the project team whose work impacts the overall user experience. Depending on the
project, this may include design strategists, user and market researchers, user documen-
tation writers, packaging designers, and possibly even store and point-of-sale designers.
The point of this collaboration is to ensure that all aspects of the user experience are in

---

## Chunk 1277

harmony. They shouldn‚Äôt work at cross purposes or use different design languages that
could ultimately confuse the user or muddy the product‚Äôs message.
Ultimately, the successful delivery of a product that meets people‚Äôs needs requires the
careful coordination of the efforts of a large number of people. We‚Äôve found that to be

---

## Chunk 1278

effective, designers must ultimately assume considerable responsibility for orchestrat-
ing a fine balance between the numerous forces pushing and pulling on a product. We
CH 6. Creative Teamwork 163

---

## Chunk 1279

--- Page 194 ---
hope that the tools described in this chapter will help you create great digital products
that truly satisfy your users and customers.
Notes
1. Kahneman, 2011, p 5
2. Sutton and Rao, 2014
3. http://www.smashingmagazine.com/2011/03/07/lean-ux-getting-out-of-the-deliverables-business/
4. h ttp://dontpaniconline.com/magazine/music/steve-albinis-letter-to-nirvana-before-he-

---

## Chunk 1280

produced-in-utero
5. Saint-Exup√©ry, 2002
164 Part I: Goal-Directed Design

---

## Chunk 1281

--- Page 195 ---
II
Designing behavior
and Form
Ch 7 A basis for good Product behavior
Ch 8 Digital Etiquette
Ch 9 Platform and Posture
Ch 10 orchestration and Flow
Ch 11 optimizing for Intermediates
Ch 12 reducing work and Eliminating Excise
Ch 13 metaphors, Idioms, and Affordances
Ch 14 rethinking Data Discovery, storage, and
retrieval
Ch 15 Preventing Errors and Informing
Decisions

---

## Chunk 1282

Ch 16 Designing for Different needs
Ch 17 Integrating Visual Design

---

## Chunk 1283

--- Page 197 ---
Ch 7
A bAsIs For gooD
ProDuCT bEhAVIor
In Part I, we discussed how to appropriately sequence the decisions to define and design
a desirable and effective product. But how do we make these decisions? What makes a
design solution good? As we‚Äôve already discussed, a product‚Äôs ability to meet the goals

---

## Chunk 1284

and needs of users while also accommodating business goals and technical constraints
is one measure of design quality. But does a product solution have recognizable attri-
butes that enable it to accomplish this successfully? Can we generalize common solu-
tions to apply to similar problems? Must a design possess universally applicable features
to make it a ‚Äúgood‚Äù design?

---

## Chunk 1285

The answers to these questions lie in the use of interaction design values, principles,
and patterns. Design values are guidelines for the successful and appropriate practice of
design. Design principles are guidelines for the design of useful and desirable products,
systems, and services. Design patterns are exemplary, generalizable solutions to specific
classes of design problems.
Design Values

---

## Chunk 1286

Design values describe imperatives for the effective and ethical practice of design. They
inform and motivate the principles and patterns that are discussed later in this chapter.

---

## Chunk 1287

--- Page 198 ---
Values are rules that govern action, and typically they are based at their core on a set of
beliefs. The following set of design values was developed by Robert Reimann, Hugh Dub-
berly, Kim Goodwin, David Fore, and Jonathan Korman to apply to interaction design in
particular, but they also readily apply to any design discipline that aims to serve people‚Äôs
needs.

---

## Chunk 1288

Designers should create design solutions that are:
‚Ä¢ Ethical (considerate, helpful)
‚Ä¢ Do no harm
‚Ä¢ Improve human situations
‚Ä¢ Purposeful (useful, usable)
‚Ä¢ Help users achieve their goals and aspirations
‚Ä¢ Accommodate user contexts and capacities
‚Ä¢ Pragmatic (viable, feasible)
‚Ä¢ Help commissioning organizations achieve their goals
‚Ä¢ Accommodate business and technical requirements

---

## Chunk 1289

‚Ä¢ Elegant (efficient, artful, affective)
‚Ä¢ Represent the simplest complete solution
‚Ä¢ Possess internal (self-revealing, understandable) coherence
‚Ä¢ Appropriately accommodate and stimulate cognition and emotion
Let‚Äôs explore each of these values in a bit more detail.
Ethical interaction design
Interaction designers face ethical questions when they are asked to design a system

---

## Chunk 1290

that has fundamental effects on people‚Äôs lives. These may be direct effects on users of
a product, or second-order effects on other people whose lives the product touches in
some way. This can become a particular issue for interaction designers because, unlike
graphic designers, the product of their design work is not simply the persuasive commu-

---

## Chunk 1291

nication of a policy or the marketing of a product. It is, in fact, the means of executing
policy or the creation of a product itself. In a nutshell, interactive products do things, and
as designers, we must be sure that the results of our labor do good things. It is relatively
straightforward to design a product that does well by its users, but the effect that prod-

---

## Chunk 1292

uct has on others is sometimes more difficult to calculate.
168 Part II: Making Well-Behaved Products

---

## Chunk 1293

--- Page 199 ---
Do no harm
Products shouldn‚Äôt harm anyone. Or, given the complexities of life in the real world, they
should, at the very least, minimize harm. Interactive systems could be a party to several
possible types of harm:
‚Ä¢ Interpersonal harm (loss of dignity, insult, humiliation)
‚Ä¢ Psychological harm (confusion, discomfort, frustration, coercion, boredom)

---

## Chunk 1294

‚Ä¢ Physical harm (pain, injury, deprivation, death, compromised safety)
‚Ä¢ Economic harm (loss of profits, loss of productivity, loss of wealth or savings)
‚Ä¢ Social and societal harm (exploitation, creation, or perpetuation of injustice)
‚Ä¢ Environmental harm (pollution, elimination of biodiversity)
Avoiding the first two types of harm requires a deep understanding of the user audi-

---

## Chunk 1295

ence, as well as buy-in from stakeholders that these issues are within a scope that can
be addressed by the project. Many of the concepts discussed in Parts II and III can help
designers craft solutions that support human intelligence and emotions. Avoiding phys-
ical harm requires a solid understanding of ergonomic principles and appropriate use

---

## Chunk 1296

of interface elements. Physical harm can result from something as simple as repetitive
stress injury due to excessive mouse usage. Far more serious issues of poor design can
result in death, as is possible with overly complex and distracting in-car navigation
systems.
Outside the realm of consumer products, it is easier to imagine examples that are rele-

---

## Chunk 1297

vant to the last three types of harm, such as a stock-trading application, an electronic
voting system, or the control system for an offshore oil-drilling platform or nuclear
power plant.
Design of military or gambling applications, or other applications that are in some sense
deliberately harmful‚Äîor applications that, by virtue of their success at increasing work-

---

## Chunk 1298

force efficiency, allow employers to reduce their workforce‚Äîpose a different challenge,
one for the designer‚Äôs conscience. Such ethical gray areas have no easy answers.
Although on the surface environmental and societal harm may not seem like issues
related to most consumer products, a deeper consideration exposes important issues

---

## Chunk 1299

of sustainability. Designers should be mindful of the full life cycle of the products they
design, even after they are disposed of. They should also be aware of how the behaviors
of people using products may affect the broader environment. For example, the iPhone
and its associated ecosystem have resulted in dramatic increases in data usage on cel-

---

## Chunk 1300

lular and other networks. This in turn has resulted in the building of more cellular tow-
ers, vast expansions of server farms, and a dramatic increase in the demand for power.
CH 7. A Basis for Good Product Behavior 169

---

## Chunk 1301

--- Page 200 ---
Environmental impacts may be second- or third-order effects of consumer products,
and may be difficult to predict, but the ultimate consequences may nonetheless be very
significant.
In her book, User Experience in the Age of Sustainability (Morgan Kaufmann, 2012),
Kem-Laurin Kramer identifies the following key phases of a product‚Äôs life cycle that have

---

## Chunk 1302

a bearing on sustainability:
‚Ä¢ Manufacturing, wherein the source, type, extraction, and refinement processes, and
use of materials, begin to define the product‚Äôs environmental footprint
‚Ä¢ Transportation, wherein the modes of transport used to get products to market, and
their associated power sources, are added to the environmental footprint

---

## Chunk 1303

‚Ä¢ Usage and energy consumption, wherein energy used to produce and power
products as well as maintain services is added to the environmental footprint
‚Ä¢ Recyclability, wherein reuse of materials, ease of repair/servicing, upgrade paths, and
availability of replacement parts are factored into the environmental footprint

---

## Chunk 1304

‚Ä¢ Facilities, wherein the environmental requirements of manufacturing, R&D, sales,
warehousing, server farms, and other physical support locations round out the
remainder of the product‚Äôs environmental footprint
These five phases may seem like a lot to consider when thinking about designing a new
product, much less a digital product. Only a few of them really apply to software prod-

---

## Chunk 1305

ucts, such as energy consumption and facilities for a typical web service. But we can look
to companies like Apple, which are taking such factors into account. Many of Apple‚Äôs
recent products have been specifically designed to minimize materials, maximize recy-
clability, and reduce power consumption. Whether Apple has been able to match this

---

## Chunk 1306

forward-thinking sustainable hardware approach on the software side (think of the
giant, power-hungry server farms that support the iCloud and iTunes services, for exam-
ple) is perhaps an open question. Google, Facebook, and the entire web-service industry
need to address this issue.
Improve human situations
Not doing harm is, of course, insufficient for a truly ethical design; improving things

---

## Chunk 1307

should be a goal as well. Here are some types of situations that interactive systems might
improve:
‚Ä¢ Increasing understanding (individual, social, cultural)
‚Ä¢ Increasing the efficiency and effectiveness of individuals and groups
‚Ä¢ Improving communication between individuals and groups
170 Part II: Making Well-Behaved Products

---

## Chunk 1308

--- Page 201 ---
‚Ä¢ Reducing sociocultural tensions between individuals and groups
‚Ä¢ Improving equity (financial, social, legal)
‚Ä¢ Balancing cultural diversity with social cohesion
Designers should always keep such broad issues at the back of their minds as they engage
in new design projects. Opportunities to do good should always be considered, even if
they are slightly outside the box.

---

## Chunk 1309

Purposeful interaction design
The primary theme of this book is purposeful design based on an understanding of user
goals and motivations. If nothing else, the Goal-Directed process described in Part I
should help you achieve purposeful design. Part of purposefulness, however, is not only
understanding users‚Äô goals but also understanding their limitations. User research and

---

## Chunk 1310

personas serve well in this regard. The behavior patterns you observe and communi-
cate should describe your users‚Äô strengths as well as their weaknesses and blind spots.
Goal-Directed Design helps designers create products that support users where they are
weak and empower them where they are strong.
Pragmatic interaction design

---

## Chunk 1311

Design specifications that gather dust on a shelf are of no use to anyone: A design must
get built to be of value. After it is built, it needs to be deployed in the world. And after
it is deployed, it needs to provide benefits to its owners. It is critical that business goals
and technical issues and requirements be taken into account in the course of design.

---

## Chunk 1312

This doesn‚Äôt imply that designers necessarily need to take at face value everything their
stakeholders and developers tell them. An active dialog must occur among the busi-
ness, engineering, and design groups about where firm boundaries exist and what areas
of the product definition are flexible. Developers often state that a proposed design is

---

## Chunk 1313

impossible when what they mean is that it is impossible given the current schedule. Mar-
keting organizations may create business plans based on aggregated and statistical data
without fully understanding how individual users and customers are likely to behave.
Designers, who have gathered detailed, qualitative research on users, may have insight

---

## Chunk 1314

into the business model from a unique perspective. Design works best when a relation-
ship of mutual trust and respect exists among design, business, and engineering.
Elegant interaction design
Elegance is defined in the dictionary as both ‚Äúgracefulness and restrained beauty of
style‚Äù and ‚Äúscientific precision, neatness, and simplicity.‚Äù We believe that elegance in

---

## Chunk 1315

design, or at least interaction design, incorporates both of these ideals.
CH 7. A Basis for Good Product Behavior 171

---

## Chunk 1316

--- Page 202 ---
represent the simplest complete solution
One of the classic elements of good design is economy of form: using less to accomplish more.
In interface design, this means using only the screens and widgets necessary to accomplish
the task. This economy extends to behavior: a simple set of tools for the user that allows

---

## Chunk 1317

him to accomplish great things. In visual design, this means using the smallest number of
visual distinctions that clearly conveys the desired meaning. Less is more in good design,
and designers should endeavor to solve design problems with the fewest additions of form
and behavior, in conformance to the mental models of your personas. This concept is well

---

## Chunk 1318

known to developers, who recognize that better algorithms are clearer and shorter.
Yvon Chounard, famed outdoorsman and founder of outdoor clothing company Patago-
nia, puts it best when he quotes French writer and aviator Antoine de St. Exup√©ry, who
said, ‚Äúin anything at all, perfection is finally attained not when there is no longer any-

---

## Chunk 1319

thing to add, but when there is no longer anything to take away.‚Äù
Possess internal coherence
Good design has the feeling of a unified whole, in which all parts are in balance and har-
mony. Products that are poorly designed, or not designed at all, often look and feel like
they are cobbled together from disparate pieces haphazardly knit together. Often this is

---

## Chunk 1320

the result of implementation model construction, where different development teams
work on different interface modules without communicating with each other, or where
hardware and software are designed independently of each other. This is the antithesis
of what we want to achieve. The Goal-Directed Design process, in which product con-

---

## Chunk 1321

cepts are conceived of as a whole at the top level and then iteratively refined to detail,
provides an ideal environment for creating internally coherent designs. Specifically, the
use of scenarios to motivate and test designs ensures that solutions are unified by a sin-
gle narrative thread.
Appropriately accommodate and stimulate cognition and emotion

---

## Chunk 1322

Many traditionally trained designers speak frequently of desire and its importance in the
design of communications and products. They‚Äôre not wrong, but we feel that in placing
such emphasis on a single (albeit complex) emotion, they may sometimes be seeing only
part of the picture.
Desire is a narrow emotion to appeal to when designing a product that serves a pur-

---

## Chunk 1323

pose, especially when that product is located in an enterprise, or its purpose is highly
technical or specialized. One would hardly want to make a technician operating a radi-
ation therapy system feel desire for the system. We instead want her to feel cautious and
perhaps reverent of the rather dangerous energies the system controls. Therefore, we do

---

## Chunk 1324

everything we can as designers to keep her focus on the patient and his treatment. Thus,
172 Part II: Making Well-Behaved Products

---

## Chunk 1325

--- Page 203 ---
in place of what we might call desire, the authors believe that elegance (in the sense
of gracefulness) means that the user is stimulated and supported both cognitively and
emotionally in whatever context she is in.
The remaining chapters of this book enumerate what we view as the most critical inter-

---

## Chunk 1326

action and visual interface design principles. No doubt you will discover many more, but
this set will more than get you started. The chapters in Part I provided the process and
concepts behind the practice of Goal-Directed interaction design. The chapters to come
provide a healthy dose of design insight that will help you transform this knowledge into
excellent design, whatever your domain.

---

## Chunk 1327

Interaction Design Principles
Interaction design principles are generally applicable guidelines that address issues of
behavior, form, and content. They encourage the design of product behaviors that sup-
port the needs and goals of users and create positive experiences with the products we
design. These principles are, in effect, a set of rules based on our values as designers and

---

## Chunk 1328

our experiences in trying to live up to those values. At the core of these values is the
notion that technology should serve human intelligence and imagination, rather than
the opposite. Also, people‚Äôs experiences with technology should be structured in accor-
dance with their abilities of perception, cognition, and movement.

---

## Chunk 1329

Principles are applied throughout the design process, helping us translate tasks and
requirements that arise from scenarios into formalized structures and behaviors in the
interface.
Principles operate at different levels of detail
Design principles operate at several levels of granularity, ranging from the general prac-

---

## Chunk 1330

tice of interaction design down to the specifics of interface design. The lines between
these categories are fuzzy, to say the least, but interaction design principles can be gen-
erally thought of as falling into the following categories:
‚Ä¢ Conceptual principles help define what digital products should be like and how

---

## Chunk 1331

they fit structurally into the broad context of use required by their users. Chapters 8
through 13 discuss conceptual-level design principles.
‚Ä¢ Behavioral principles describe how a product should behave‚Äîin general and in
specific contexts. Chapters 14 through 17 discuss general behavior-level principles.
‚Ä¢ Interface-level principles describe effective strategies for the organization,

---

## Chunk 1332

navigation, and communication of behavior and information. Chapters 18 through
21 discuss interface-level principles (and patterns) of interaction design.
CH 7. A Basis for Good Product Behavior 173

---

## Chunk 1333

--- Page 204 ---
Most interaction and visual design principles are cross-platform. But some platforms,
such as mobile devices and embedded systems, require special consideration because of
constraints imposed by factors like screen size, input method, and use context.
behavioral and interface-level principles minimize work

---

## Chunk 1334

One of the primary purposes that design principles serve is to optimize the experience
of the user when she engages with a product. In the case of productivity tools and most
non-entertainment-oriented products, this optimization usually means minimizing work.
Most of the design principles described in this book attempt to minimize work one way

---

## Chunk 1335

or another while giving the user greater levels of feedback and contextually useful infor-
mation. The different types of work to be minimized, as well as some specific strategies
for accomplishing this, are the subject of Chapter 12.
Games and other similar kinds of entertainment products require a somewhat different

---

## Chunk 1336

approach than simple minimization of work. They can engage as a result of requiring
users to do just the right amount of a certain kind of work and then rewarding them for
doing so. Social games, such as Farmville, have been immensely popular because their
players became addicted to the work required to manage and grow their virtual farm

---

## Chunk 1337

(and the pride of sharing their successes with others). Of course, too much work or too
little reward turns a game into a chore, as does a clunky interface that puts up road-
blocks to easily performing the ‚Äúfun‚Äù work of the game. This kind of gaming interaction
design requires a fine touch.
Interaction Design Patterns

---

## Chunk 1338

Design patterns are a means of capturing useful design solutions and generalizing them
to address similar problems. This effort to formalize design knowledge and record best
practices can serve several vital purposes:
‚Ä¢ Reduce design time and effort on new projects
‚Ä¢ Improve the quality of design solutions
‚Ä¢ Facilitate communication between designers and developers
‚Ä¢ Educate designers

---

## Chunk 1339

Although the application of patterns in design pedagogy and efficiency is certainly
important, we find the development of interaction design patterns to be particularly
exciting. They can represent optimal interactions for the user and the class of activity
that the pattern addresses.
174 Part II: Making Well-Behaved Products

---

## Chunk 1340

--- Page 205 ---
Architectural patterns and interaction design
The idea of capturing interaction design patterns has its roots in the work of Christopher
Alexander, who first described architectural design patterns in his seminal books A Pat-
tern Language (Oxford University Press, 1977) and The Timeless Way of Building (Oxford

---

## Chunk 1341

University Press, 1979). By defining a rigorous set of architectural features, Alexander
sought to describe the essence of architectural design that creates a feeling of well-being
on the part of the inhabitants of structures.
This last aim of Alexander‚Äôs project resonates so closely with the needs of interaction
designers. The focus on the human aspects of each pattern differentiates architec-

---

## Chunk 1342

tural and interaction design patterns from engineering patterns, which are primarily
intended as a way to reuse and standardize programming code.
There is one important difference between interaction design patterns and architectural
design patterns. Interaction design patterns are concerned not only with structure and

---

## Chunk 1343

organization of elements but also with dynamic behaviors and changes in elements in
response to user activity. It is tempting to view the distinction simply as one of change
over time, but these changes are interesting because they occur in response to both
application state and human activity. This differentiates them from preordained tempo-

---

## Chunk 1344

ral transitions that can be found in mechanical products and TV and film media (which
each have their own distinct set of design patterns).
recording and using interaction design patterns
Patterns are always context-specific: They are defined to be applicable to common design
situations that share similar contexts, constraints, tensions, and forces. When capturing

---

## Chunk 1345

a pattern, it is important to record the context to which the solution applies, one or more
specific examples of the solution, the abstracted features common to all the examples,
and the rationale behind the solution (why it is a good solution).
For a set of patterns to be useful, they must be meaningfully organized in terms of the

---

## Chunk 1346

contexts in which they are applicable. Such a set is commonly called a pattern library
or catalog. If this set is rigorously defined and specified, and sufficiently complete to
describe all the solutions in a domain, it is called a pattern language. (But considering the
pace of innovation in all types of digital products, it seems unlikely that such a language
will stabilize anytime soon.)

---

## Chunk 1347

Design patterns are not recipes or plug-and-play solutions. In her book, Designing
Interfaces, a broad and useful collection of interaction design patterns, Jenifer Tidwell
provides the following caveat: ‚Äú[Patterns] aren‚Äôt off-the-shelf components; each imple-
mentation of a pattern differs a little from every other.‚Äù1
CH 7. A Basis for Good Product Behavior 175

---

## Chunk 1348

--- Page 206 ---
It can be tempting in the world of software design to imagine that a comprehensive cat-
alog of patterns could, given a clear idea of user needs, permit even novice designers
to assemble coherent design solutions rapidly and easily. Although we have observed
that there is some truth to this notion in the case of seasoned interaction designers, it

---

## Chunk 1349

is simply never the case that patterns can be mechanically assembled in cookie-cutter
fashion, without knowledge of the context in which they will be used. As Christopher
Alexander is swift to point out, architectural patterns are the antithesis of prefab build-
ing, because context is of absolute importance in defining the manifest form of the pat-

---

## Chunk 1350

tern in the world. The environment where the pattern is deployed is critical, as are the
other patterns that compose it, contain it, and abut it. The same is true for interaction
design patterns. The core of each pattern lies in the relationships between represented
objects and between those objects and the user‚Äôs goals. (This is one reason why a gen-

---

## Chunk 1351

eral style guide can never be a substitute for a context-specific design solution.) The pat-
tern‚Äôs precise form is certain to be somewhat different for each instance, and the objects
that define it will naturally vary from domain to domain, but the relationships between
objects remain essentially the same.
Types of interaction design patterns

---

## Chunk 1352

Like most other design patterns, interaction design patterns can be hierarchically
organized from the system level down to the level of individual interface widgets. Like
principles, they can be applied at different levels of organization (and, as with design
principles, the distinctions between these different levels are sometimes quite fuzzy):

---

## Chunk 1353

‚Ä¢ Postural patterns can be applied at the conceptual level and help determine the
overall product stance in relation to the user. An example of a postural pattern is
‚Äútransient,‚Äù which means that a person uses it for only brief periods of time so that a
larger goal can be achieved elsewhere. The concept of product posture and its most
significant patterns are discussed at length in Chapter 9.

---

## Chunk 1354

‚Ä¢ Structural patterns solve problems that relate to the arrangement of information
and functional elements on the screen. Structural patterns have become increasingly
documented, especially with the rise in popularity of mobile user interfaces and
platforms such as iOS and Android. They consist of views, panes, and other element
groupings, discussed in Part III.

---

## Chunk 1355

‚Ä¢ Behavioral patterns solve wide-ranging problems relating to specific interactions
with functional or data elements. What most people think of as widget behaviors fall
into this category, and many such lower-level patterns are discussed in Part III.
Building a mental catalog of patterns is one of the most critical aspects of the education

---

## Chunk 1356

of an interaction designer. As we all become aware of the best parts of each other‚Äôs work,
we can collectively advance the interaction idioms we provide to our users. By leveraging
existing work, we can focus on solving new problems, rather than reinventing the wheel.
176 Part II: Making Well-Behaved Products

---

## Chunk 1357

--- Page 207 ---
sample interaction design patterns
The following sections describe a couple of interaction design patterns; others are dis-
cussed in more detail in Part III of this book.
Desktop: organizer-workspace
One of the most commonly used high-level structural patterns in the desktop applica-
tion universe is apparent in Microsoft Outlook. Its navigational (organizer) pane is on

---

## Chunk 1358

the left. Its workspace is on the right; it consists of an overview pane at the top and a
detail pane at the bottom (see Figure 7-1).
This pattern is optimal for full-screen applications that require user access to many dif-
ferent kinds of objects, manipulation of those objects in groups, and display of detailed

---

## Chunk 1359

content or attributes of individual objects or documents. The pattern permits all this
to be done smoothly in a single screen without the need for additional windows. Many
e-mail clients use this pattern, and variations of it appear in many authoring and infor-
mation management tools where rapid access to and manipulation of various types of
objects is common.
Overview
Organizer
manipulation of

---

## Chunk 1360

index to objects
objects
Detail
display of content or
attributes of individual
objects
Figure 7-1: The primary structural pattern used by Microsoft Outlook is widely used throughout the
industry, across many diverse product domains. The left-vertical pane provides navigation and drives
the content of the overview pane in the upper right. A selection in this pane populates the lower-right

---

## Chunk 1361

pane with detail or document content.
CH 7. A Basis for Good Product Behavior 177

---

## Chunk 1362

--- Page 208 ---
mobile: Double Drawer
Pioneered by Facebook and Path mobile apps, drawers that are exposed by swiping the
main content view to the right (to expose the left drawer) or left (to expose the right
drawer) are now common in many mobile apps on iOS and Android (see Figure 7-2). The
left drawer typically contains primary navigation for the mobile app. The right drawer,

---

## Chunk 1363

when it exists, typically is used for access to an ancillary list of objects (such as friends
in the case of Facebook).
Figure 7-2: Facebook‚Äôs Double Drawer is another structural pattern that has become nearly as ubiq-
uitous for mobile apps as the Organizer-Workspace pattern has for desktop apps. The drawer on the

---

## Chunk 1364

left provides navigation and drives the app‚Äôs content view. The pane on the right is used for rapid
global access to a list of ancillary objects‚Äîin this case, your Facebook friends.
Like the Organizer-Workspace pattern, the Double Drawer is almost perfectly optimized
for its context‚Äîin this case, mobile rather than desktop. Swiping across the main con-

---

## Chunk 1365

tent pane to reveal lists of navigation or communications options is a simple gross motor
action, ideal for one-handed use. Selecting from the open drawers is similarly easy to do
with the thumb, and the animated opening and shutting of the drawers is aesthetically
satisfying as well. It‚Äôs no wonder this pattern has been so quickly and widely adopted.
Notes
1. Tidwell, 2006

---

## Chunk 1366

178 Part II: Making Well-Behaved Products

---

## Chunk 1367

--- Page 209 ---
Ch 8
DIgITAl ETIQuETTE
In The Media Equation (Cambridge University Press, 1996), Stanford sociologists Clifford
Nass and Byron Reeves make a compelling case that humans treat and respond to com-
puters and other interactive products as if they were people. We should thus pay real
attention to the ‚Äúpersonality‚Äù projected by our digital products. Are they quietly compe-

---

## Chunk 1368

tent and helpful, or do they whine, nag, badger, and make excuses?
Nass and Reeves‚Äô research suggests that humans have instincts that tell them how to
behave around other sentient beings. As soon as an object exhibits sufficient levels of
interactivity‚Äîsuch as that found in your average software application‚Äîthese instincts

---

## Chunk 1369

are activated. Our reaction to software as sentient is both unconscious and unavoidable.
The implication of this research is profound: If we want users to like our products, we
should design them to behave in the same manner as a likeable person. If we want users
to be productive with our software, we should design it to behave like a supportive

---

## Chunk 1370

human colleague. To this end, it‚Äôs useful to consider the appropriate working relation-
ship between human beings and computers.
The computer does the work, and the person does the thinking.
The ideal division of labor in the digital age is very clear: The computer should do the
work, and the person should do the thinking. Science fiction writers and computer

---

## Chunk 1371

--- Page 210 ---
scientists tantalize us with visions of artificial intelligence‚Äîcomputers that think for
themselves. However, humans don‚Äôt really need that much help in the thinking depart-
ment. Our ability to identify patterns and solve complex problems creatively is currently
unmatched in the world of silicon. We do need a lot of help with the work of information

---

## Chunk 1372

management‚Äîactivities like accessing, analyzing, organizing, and visualizing infor-
mation. But the actual decisions made from that information are best made by us‚Äîthe
‚Äúwetware.‚Äù
Designing Considerate Products
Nass and Reeves suggest that software-enabled products should be polite, but we prefer
the term considerate. Although politeness could be construed as a matter of manners

---

## Chunk 1373

and protocol‚Äîsaying ‚Äúplease‚Äù and ‚Äúthank you,‚Äù but doing little else that is helpful‚Äîbeing
truly considerate means being concerned with the needs of others. Above and beyond
performing basic functions, considerate software has the goals and needs of its users as
a concern.
If an interactive product is stingy with information, obscures its processes, forces users

---

## Chunk 1374

to hunt around for common functions, and is quick to blame people for its own failings,
users are sure to have an unpleasant and unproductive experience. This will happen
regardless of how polite, cute, visually metaphoric, anthropomorphic, or full of interest-
ing content the software is.
On the other hand, interactions that are respectful, generous, and helpful will go a long

---

## Chunk 1375

way toward creating a positive experience for people using your product.
Software should behave like a considerate human being.
Building considerate products is not necessarily more difficult than building rude or
inconsiderate products, but it requires that you envision interactions that emulate the
qualities of a sensitive and caring person. Humans have many wonderful characteristics

---

## Chunk 1376

that make them considerate, and some of these can be emulated to a greater or lesser
degree by interactive products. We think the following are some of the most important
characteristics of considerate interactive products (and humans):
‚Ä¢ Take an interest
‚Ä¢ Are deferential
‚Ä¢ Are forthcoming
180 Part II: Making Well-Behaved Products

---

## Chunk 1377

--- Page 211 ---
‚Ä¢ Use common sense
‚Ä¢ Use discretion
‚Ä¢ Anticipate people‚Äôs needs
‚Ä¢ Are conscientious
‚Ä¢ Don‚Äôt burden you with their personal problems
‚Ä¢ Keep you informed
‚Ä¢ Are perceptive
‚Ä¢ Are self-confident
‚Ä¢ Don‚Äôt ask a lot of questions
‚Ä¢ Fail gracefully
‚Ä¢ Know when to bend the rules
‚Ä¢ Take responsibility
‚Ä¢ Help you avoid awkward mistakes

---

## Chunk 1378

None of these characteristics, by the way, is at odds with more pragmatic goals of func-
tional data processing (which lies at the core of all silicon-enabled products). Let‚Äôs dis-
cuss them in more detail.
Considerate products take an interest
A considerate friend wants to know more about you. He remembers your likes and dis-

---

## Chunk 1379

likes so that he can please you in the future. Everyone appreciates being treated accord-
ing to his or her personal tastes.
Most software, on the other hand, doesn‚Äôt know or care who is using it. Little, if any, of
the personal software on our personal computers seems to remember anything personal
about us, in spite of the fact that we use it constantly, repetitively, and exclusively. A

---

## Chunk 1380

good example of this behavior is how browsers such as Firefox and Microsoft Internet
Explorer remember information that users routinely enter into forms on websites, such
as a shipping address or username. Google Chrome even remembers these details across
devices and sessions.
Software should work hard to remember our habits and, particularly, everything we tell

---

## Chunk 1381

it. From the perspective of a developer writing an application, it can be tempting to think
about gathering a bit of information from a person as being similar to gathering a bit of
information from a database. Every time the information is needed, the product asks the
user for it. The application then discards that tidbit, assuming that it might change and

---

## Chunk 1382

that it can merely ask for it again if necessary. Not only are digital products better suited
to recording things in memory than humans are, but our products also show they are
CH 8. Digital Etiquette 181

---

## Chunk 1383

--- Page 212 ---
inconsiderate when they forget. Remembering humans‚Äô actions and preferences is one
of the best ways to create a positive experience with a software-enabled product. We‚Äôll
discuss the topic of memory in detail later in this chapter.
Considerate products are deferential
A good service provider defers to her client. She understands that the person she is serv-

---

## Chunk 1384

ing is the boss. When a restaurant host shows us to a table in a restaurant, we consider his
choice of table to be a suggestion, not an order. If we politely request another table in an
otherwise empty restaurant, we expect to be accommodated. If the host refuses, we are
likely to choose a different restaurant where our desires take precedence over the host‚Äôs.

---

## Chunk 1385

Inconsiderate products supervise and pass judgment on human actions. Software is
within its rights to express its opinion that we are making a mistake, but it is presump-
tuous for it to judge or limit our actions. Software can suggest that we not ‚Äúsubmit‚Äù our
entry until we‚Äôve typed in our telephone number, and it should explain the consequences

---

## Chunk 1386

if we do so, but if we want to ‚Äúsubmit‚Äù without the number, we expect the software to do
as it is told. The very word submit is a reversal of the deferential relationship we should
expect from interactive products. Software should submit to users. Any application that
proffers a ‚Äúsubmit‚Äù button is being rude, as well as oblique and confusing.
Considerate products are forthcoming

---

## Chunk 1387

If you ask a good retail sales associate for help locating an item, he will not only answer
your question, but also volunteer useful collateral information. For example, he might
tell you that a more expensive, higher-quality item than the one you requested is cur-
rently on sale for a similar price.
Most software doesn‚Äôt attempt to provide related information. Instead, it narrowly

---

## Chunk 1388

answers the precise questions we ask it and typically is not forthcoming about other infor-
mation, even if it is clearly related to our goals. When we tell our word processor to print a
document, it doesn‚Äôt tell us when the paper supply is low, or when 40 other documents are
queued before us, or when another nearby printer is free. A helpful human would.

---

## Chunk 1389

Figuring out the right way to offer potentially useful information can require a deli-
cate touch. Microsoft‚Äôs Office Assistant ‚ÄúClippy‚Äù was almost universally despised for his
smarty-pants comments like ‚ÄúIt looks like you‚Äôre writing a letter. Would you like help?‚Äù
While we applauded his sentiment, we wished he weren‚Äôt so obtrusive and could take a

---

## Chunk 1390

hint when it was clear we didn‚Äôt want his help. After all, a good waiter doesn‚Äôt interrupt
your conversation to ask you if you want more water. He just refills your glass when it‚Äôs
empty, and he knows better than to linger when it‚Äôs clear that you‚Äôre in the middle of an
intimate moment.
182 Part II: Making Well-Behaved Products

---

## Chunk 1391

--- Page 213 ---
Considerate products use common sense
Offering inappropriate functions in inappropriate places is a hallmark of poorly designed
interactive products. Many interactive products put controls for constantly used func-
tions right next to never-used controls. You can easily find menus offering simple, harm-

---

## Chunk 1392

less functions adjacent to irreversible ejector-seat-lever expert functions. It‚Äôs like being
seated at a dining table right next to an open grill.
Horror stories also abound of customers offended by computer systems that repeatedly
sent them checks for $0.00 or bills for $957,142,039.58. One would think that the system

---

## Chunk 1393

might alert a human in the Accounts Receivable or Payable departments when an event
like this happens, especially more than once, but common sense remains a rarity in most
information systems.
Considerate products use discretion
Generally speaking, we want our software to remember what we do and what we tell it.

---

## Chunk 1394

But there are some things our that software probably shouldn‚Äôt remember unless we spe-
cifically direct it, such as credit card numbers, tax IDs, bank accounts, and passwords.
Furthermore, it should help us protect this kind of private data by helping us choose
secure passwords, and reporting any possible improprieties, such as accounts accessed
from an unrecognized computer or location.

---

## Chunk 1395

Considerate products anticipate people‚Äôs needs
A human assistant knows that you will require a hotel room when you travel to another
city, even when you don‚Äôt ask explicitly. She knows the kind of room you like and reserves
one without any request on your part. She anticipates your needs.
A web browser spends most of its time idling while we peruse web pages. It could easily

---

## Chunk 1396

anticipate our needs and prepare for them while we are reading. It could use that idle
time to preload all the links that are visible. Chances are good that we will soon ask the
browser to examine one or more of those links. It is easy to abort an unwanted request,
but it is always time-consuming to wait for a request to be filled. We‚Äôll discuss more ways

---

## Chunk 1397

for software to use idle time to our advantage later in this chapter.
Considerate products are conscientious
A conscientious person has a larger perspective on what it means to perform a task.
Instead of just washing the dishes, for example, a conscientious person also wipes down
the counters and empties the trash, because those tasks are also related to the larger
CH 8. Digital Etiquette 183

---

## Chunk 1398

--- Page 214 ---
goal: cleaning up the kitchen. A conscientious person, when drafting a report, also puts
a handsome cover page on it and makes enough photocopies for the entire department.
Here‚Äôs an example: If we hand our imaginary assistant, Rodney, a manila folder and tell
him to file it, he checks the writing on the folder‚Äôs tab‚Äîlet‚Äôs say it reads MicroBlitz Con-

---

## Chunk 1399

tract‚Äîand proceeds to find the correct place for it in the filing cabinet. Under M, he
finds, to his surprise, a manila folder already there with the same name. Rodney notices
the discrepancy and finds that the existing folder contains a contract for 17 widgets
delivered four months ago. The new folder, on the other hand, is for 34 sprockets slated

---

## Chunk 1400

for production and delivery in the next quarter. Conscientious Rodney changes the name
on the old folder to read MicroBlitz Widget Contract, 7/13 and then changes the name of
the new folder to read MicroBlitz Sprocket Contract, 11/13. This type of initiative is why
we think Rodney is conscientious.
Our former imaginary assistant, Elliot, was a complete idiot. He was not conscientious

---

## Chunk 1401

at all. If he were placed in the same situation, he would have dumped the new MicroBlitz
Contract folder next to the old MicroBlitz Contract folder without a second thought.
Sure, he got it safely filed, but he could have done a better job that would have improved
our ability to find the right contract in the future. That‚Äôs why Elliot isn‚Äôt our imaginary
assistant anymore.

---

## Chunk 1402

If we rely on a typical word processor to draft the new sprocket contract and then try to
save it in the MicroBlitz folder, the application offers the choice of either overwriting and
destroying the old widget contract or not saving it at all. The application not only isn‚Äôt
as capable as Rodney, it isn‚Äôt even as capable as Elliot. The software is dumb enough to

---

## Chunk 1403

assume that because two folders have the same name, we meant to throw away the old one.
The application should, at the very least, mark the two files with different dates and save
them. Even if the application refuses to take this ‚Äúdrastic‚Äù action unilaterally, it could
at least show us the old file (letting us rename that one) before saving the new one. The

---

## Chunk 1404

application could take numerous actions that would be more conscientious.
Considerate products don‚Äôt burden you with their
personal problems
At a service desk, the agent is expected to keep mum about her problems and to show a
reasonable interest in yours. It might not be fair to be so one-sided, but that‚Äôs the nature

---

## Chunk 1405

of the service business. An interactive product, too, should keep quiet about its prob-
lems and show interest in the people who use it. Because computers don‚Äôt have egos or
tender sensibilities, they should be perfect in this role, but they typically behave the
opposite way.
184 Part II: Making Well-Behaved Products

---

## Chunk 1406

--- Page 215 ---
Software whines at us with error messages, interrupts us with confirmation dialog
boxes, and brags to us with unnecessary notifiers (‚ÄúDocument Successfully Saved!‚Äù How
nice for you, Mr. App: Do you ever unsuccessfully save?). We aren‚Äôt interested in the appli-
cation‚Äôs crisis of confidence about whether to purge its Recycle Bin. We don‚Äôt want to

---

## Chunk 1407

hear its whining about being unsure where to put a file on disk. We don‚Äôt need to see
information about the computer‚Äôs data transfer rates and its loading sequence, any more
than we need information about the customer service agent‚Äôs unhappy love affair. Not
only should software keep quiet about its problems, but it should also have the intelli-

---

## Chunk 1408

gence, confidence, and authority to fix its problems on its own. We discuss this subject
in more detail in Chapter 15.
Considerate products keep you informed
Although we don‚Äôt want our software pestering us incessantly with its little fears and tri-
umphs, we do want to be kept informed about the things that matter to us. We don‚Äôt want

---

## Chunk 1409

our local bartender to grouse to us about his recent divorce, but we appreciate it when he
posts his prices in plain sight and when he writes what time the pregame party begins
on his chalkboard, along with who‚Äôs playing and the current Vegas spread. Nobody inter-
rupts us to tell us this information: It‚Äôs there in plain view whenever we need it. Software,

---

## Chunk 1410

similarly, can provide us with this kind of rich modeless feedback about what is going on.
Again, we discuss how in Chapter 15.
Considerate products are perceptive
Most of our existing software is not very perceptive. It has a very narrow understanding
of the scope of most problems. It may willingly perform difficult work, but only when

---

## Chunk 1411

given the precise command at precisely the correct time. For example, if you ask the
inventory query system how many widgets are in stock, it will dutifully ask the database
and report the number as of the time you ask. But what if, 20 minutes later, someone in
the Dallas office cleans out the entire stock of widgets? You are now operating under a

---

## Chunk 1412

potentially embarrassing misconception, while your computer sits there, idling away bil-
lions of wasted instructions. It is not being perceptive. If you want to know about widgets
once, isn‚Äôt that a good clue that you probably will want to know about widgets again? You
may not want to hear widget status reports every day for the rest of your life, but maybe

---

## Chunk 1413

you‚Äôll want to get them for the rest of the week. Perceptive software observes what users
are doing and uses those observations to offer relevant information.
Products should also watch our preferences and remember them without being asked
explicitly to do so. If we always maximize an application to use the entire available

---

## Chunk 1414

screen, the application should get the idea after a few sessions and always launch in that
configuration. The same goes for placement of palettes, default tools, frequently used
templates, and other useful settings.
CH 8. Digital Etiquette 185

---

## Chunk 1415

--- Page 216 ---
Considerate products are self-confident
Interactive products should stand by their convictions. If we tell the computer to discard
a file, it shouldn‚Äôt ask, ‚ÄúAre you sure?‚Äù Of course we‚Äôre sure; otherwise, we wouldn‚Äôt have
asked. It shouldn‚Äôt second-guess us or itself.
On the other hand, if the computer has any suspicion that we might be wrong (which is

---

## Chunk 1416

always), it should anticipate our changing our minds by being prepared to undelete the
file upon our request.
How often have you clicked the Print button and then gone to get a cup of coffee, only to
return to find a fearful dialog box quivering in the middle of the screen, asking, ‚ÄúAre you
sure you want to print?‚Äù This insecurity is infuriating and the antithesis of considerate
human behavior.

---

## Chunk 1417

Considerate products don‚Äôt ask a lot of questions
Inconsiderate products ask lots of annoying questions. Excessive choices, especially in
the form of questions, quickly stop being a benefit and instead become an ordeal.
Asking questions is quite different from providing choices. When browsing on your own
in a store, you are presented with choices. When going to a job interview, you are asked

---

## Chunk 1418

questions. Which is the more pleasurable experience? Part of the reason why is that indi-
vidual asking the questions is understood to be in a position superior to the individual
being asked. Those with authority ask questions; subordinates respond. When software
asks questions rather than offering choices, users feel disempowered.

---

## Chunk 1419

Beyond the power dynamics issues, questions also tend to make people feel badgered and
harassed. Would you like soup or salad? Salad. Would you like cabbage or spinach? Spinach.
Would you like French, Thousand Island, or Italian? French. Would you like lite or regular?
Stop! Please, just bring me the soup instead! Would you like corn chowder or chicken noodle?

---

## Chunk 1420

Users really don‚Äôt like to be asked questions by products, especially since most of the
questions are stupid or unnecessary. Asking questions tells users that products are:
‚Ä¢ Ignorant
‚Ä¢ Forgetful
‚Ä¢ Weak
‚Ä¢ Fretful
‚Ä¢ Lacking initiative
‚Ä¢ Overly demanding
186 Part II: Making Well-Behaved Products

---

## Chunk 1421

--- Page 217 ---
These are all qualities that we typically dislike in people. Why should we desire them in
our products? The application is not asking us our opinion out of intellectual curiosity or
a desire to make conversation, the way a friend might over dinner. Rather, it is behaving
ignorantly while also representing itself as having false authority. The application isn‚Äôt

---

## Chunk 1422

interested in our opinions; it requires information‚Äîoften information it didn‚Äôt really
need to ask us in the first place.
Many ATMs continually ask users what language they prefer: ‚ÄúSpanish, English, or Chi-
nese?‚Äù This answer is unlikely to change after a person‚Äôs first use. Interactive products
that ask fewer questions, provide choices without asking questions, and remember infor-

---

## Chunk 1423

mation they have already learned appear smarter to users, as well as more polite and
considerate.
Considerate products fail gracefully
When your friend commits a serious faux pas, he tries to make amends and undo the
damage. When an application discovers a fatal problem, it can take the time and effort
to prepare for its failure without hurting the user, or it can simply crash and burn.

---

## Chunk 1424

Many applications are filled with data and settings. When they crash, that information
is still often discarded. The user is left holding the bag. For example, say an application
is computing merrily along, downloading your e-mail from a server, when it runs out of
memory at some procedure buried deep in the application‚Äôs internals. The application,

---

## Chunk 1425

like most desktop software, issues a message that says, in effect, ‚ÄúYou are hosed,‚Äù and it
terminates immediately after you click OK. You restart the application, or sometimes the
whole computer, only to find that the application lost your e-mail. When you interrogate
the server, you find that it has also erased your e-mail because the e-mail was already

---

## Chunk 1426

handed over to your application. This is not what we should expect of good software.
In this example, the application accepted e-mail from the server‚Äîwhich then erased
its copy‚Äîbut it didn‚Äôt ensure that the e-mail was properly recorded locally. If the e-mail
application had ensured that those messages were promptly written to the local disk,

---

## Chunk 1427

even before it informed the server that the messages were successfully downloaded, the
problem would never have arisen.
Some well-designed software products, such as Ableton Live, a brilliant music perfor-
mance tool, rely on the Undo cache to recover from crashes. This is a great example of
how products can easily keep track of user behavior, so if some situation causes prob-

---

## Chunk 1428

lems, it is easy to extricate yourself.
Even when applications don‚Äôt crash, inconsiderate behavior is rife, particularly on the
web. Users often need to enter information into a set of forms on a page. After filling in 10
or 11 fields, a user might click the Submit button, and, due to some mistake or omission
CH 8. Digital Etiquette 187

---

## Chunk 1429

--- Page 218 ---
on his part, have the site reject his input and tell him to correct it. The user then clicks
the back arrow to return to the page, and lo, the 10 valid entries were inconsiderately
discarded along with the single invalid one. Remember your incredibly mean junior high
geography teacher who ripped up your report on South America because you wrote it

---

## Chunk 1430

in pencil instead of ink? And as a result, you hate geography to this day? Don‚Äôt create
products that act like that!
Considerate products know when to bend the rules
When manual information-processing systems are translated into computerized sys-
tems, something is lost in the process. Although an automated order-entry system can

---

## Chunk 1431

handle millions more orders than a human clerk can, the human clerk can work the
s ystem in a way that most automated systems ignore. There is almost never a way to jig-
ger the functioning to give or take slight advantages in an automated system.
In a manual system, when the clerk‚Äôs friend from the sales force tells him that getting a

---

## Chunk 1432

particular order processed speedily means additional business, the clerk can expedite
that one order. When another order comes in with some critical information missing,
the clerk still can process it, remembering to acquire and record the information later.
This flexibility usually is absent from automated systems.

---

## Chunk 1433

Most computerized systems have only two states: nonexistence and full compliance. No
intermediate states are recognized or accepted. Every manual system has an important
but paradoxical state‚Äîunspoken, undocumented, but widely relied upon‚Äîsuspense. In
this state a transaction can be accepted even though it is not fully processed. The human

---

## Chunk 1434

operator creates that state in his head or on his desk or in his back pocket.
For example, suppose a digital system needs both customer and order information before
it can post an invoice. Whereas the human clerk can go ahead and post an order before
having detailed customer information, the computerized system rejects the transaction,
unwilling to allow the invoice to be entered without it.

---

## Chunk 1435

The characteristic of manual systems that lets humans perform actions out of sequence
or before prerequisites are satisfied is called fudgeability. It is one of the first casualties
when systems are computerized, and its absence is a key contributor to the inhumanity
of digital systems. It is a natural result of the implementation model. Developers don‚Äôt

---

## Chunk 1436

always see a reason to create intermediate states, because the computer has no need for
them. Yet there are strong human needs to be able to bend the system slightly.
One of the benefits of fudgeable systems is reducing the number of mistakes. By allowing
many small, temporary mistakes into the system and entrusting humans to correct them

---

## Chunk 1437

before they cause problems downstream, we can avoid much bigger, more permanent
mistakes. Paradoxically, most of the hard-edged rules enforced by computer systems are
188 Part II: Making Well-Behaved Products

---

## Chunk 1438

--- Page 219 ---
imposed to prevent just such mistakes. These inflexible rules make the human and the
software adversaries. Because the human is prevented from fudging to prevent big mis-
takes, he soon stops caring about protecting the software from colossal problems. When
inflexible rules are imposed on flexible humans, both sides lose. It is bad for business to

---

## Chunk 1439

prevent humans from doing things the way they want, and the computer system usually
ends up having to digest invalid data anyway.
In the real world, both missing information and extra information that doesn‚Äôt fit into a
standard field are important tools for success. For example, suppose a transaction can be
completed only if the termination date is extended two weeks beyond the official limit.

---

## Chunk 1440

Most companies would rather fudge on the termination date than see a million-dollar
deal go up in smoke. In the real world, limits are fudged all the time. Considerate prod-
ucts need to realize and embrace this fact.
Considerate products take responsibility
Too many interactive products take the attitude that ‚ÄúIt isn‚Äôt my responsibility.‚Äù When

---

## Chunk 1441

they pass along a job to some hardware device, they wash their hands of the action, leav-
ing the stupid hardware to finish. Any user can see that the software isn‚Äôt being consider-
ate or conscientious, that the software isn‚Äôt shouldering its part of the burden of helping
the user become more effective.
In a typical print operation, for example, an application begins sending a 20-page report

---

## Chunk 1442

to the printer and simultaneously displays a print process dialog box with a Cancel but-
ton. If the user quickly realizes that he forgot to make an important change, he clicks
the Cancel button just as the first page emerges from the printer. The application imme-
diately cancels the print operation. But unbeknownst to the user, while the printer was

---

## Chunk 1443

beginning to work on page 1, the computer had already sent 15 pages to the printer‚Äôs
buffer. The application cancels the last five pages, but the printer doesn‚Äôt know about the
cancellation; it just knows that it was sent 15 pages, so it goes ahead and prints them.
Meanwhile, the application smugly tells the user that the function was canceled. The
application lies, as the user can plainly see.

---

## Chunk 1444

The user is unsympathetic to the communication problems between the application and
the printer. He doesn‚Äôt care that the communications are one-way. All he knows is that
he decided not to print the document before the first page appeared in the printer‚Äôs out-
put tray, he clicked the Cancel button, and then the stupid application continued print-

---

## Chunk 1445

ing for 15 pages even after it acknowledged his Cancel command.
Imagine what his experience would be if the application could properly communicate
with the print driver. If the software were smart enough, the print job could easily have
been abandoned before the second sheet of paper was wasted. The printer has a Cancel
function‚Äîit‚Äôs just that the software was built to be too lazy to use it.

---

## Chunk 1446

CH 8. Digital Etiquette 189

---

## Chunk 1447

--- Page 220 ---
Considerate products help you avoid
awkward mistakes
If a helpful human companion saw you about to do something that you would almost
certainly regret afterwards‚Äîlike shouting about your personal life in a room full of
strangers, or sending an empty envelope in the mail to your boss‚Äîthey might take you
quietly aside and gently alert you to your mistake.

---

## Chunk 1448

Digital products should similarly help you realize when you are, for example, about to
inadvertently send a text to your entire list of contacts instead of the one friend you were
intending to confide in, or are about to send an e-mail to the director of your depart-
ment without the quarterly report you mentioned you were enclosing in the text of your
message.

---

## Chunk 1449

The intervention should not, however, be in the form of a standard modal error message
box that stops the action and adds insult to injury, but rather through careful visual and
textual feedback that lets you know that you are messaging a group rather than a person,
or that you haven‚Äôt enclosed any attachments even though you mentioned that you were.

---

## Chunk 1450

For this latter situation, your e-mail app might even modelessly highlight the drop area
for you to drag your attachment to, while at the same time giving you the option of just
going ahead and sending the message sans attachments, in case the software got your
intentions wrong.
Products that go the extra mile in looking out for users by helping them prevent embar-

---

## Chunk 1451

rassing mistakes‚Äîand not berating them for it‚Äîwill quickly earn their trust and devo-
tion. All other things equal, considerate product design is one of the things, and perhaps
even the thing, that distinguishes an only passable app from a truly great one.
Designing smart Products
In addition to being considerate, helpful products and people must be smart. Thanks to

---

## Chunk 1452

science fiction writers and futurists, there is some confusion about what it means for an
interactive product to be smart. Some naive observers think that smart software can
actually behave intelligently.
While that might be nice, our silicon-enabled tools are still a ways away from delivering
on that dream. A more useful understanding of the term (if you‚Äôre trying to ship a prod-

---

## Chunk 1453

uct this decade) is that these products can work hard even when conditions are difficult
and even when users aren‚Äôt busy. Regardless of our dreams of thinking computers, there
is a much greater and more immediate opportunity to get our computers to work harder.
190 Part II: Making Well-Behaved Products

---

## Chunk 1454

--- Page 221 ---
The remainder of this chapter discusses some of the most important ways that software
can work a bit harder to serve humans better.
smart products put idle cycles to work
Because every instruction in every application must pass single-file through a CPU, we
tend to optimize our code for this needle‚Äôs eye. Developers work hard to keep the number

---

## Chunk 1455

of instructions to a minimum, ensuring snappy performance for users. What we often
forget, however, is that as soon as the CPU has hurriedly finished all its work, it waits
idle, doing nothing, until the user issues another command. We invest enormous effort
in reducing the computer‚Äôs reaction time, but we invest little or no effort in putting it to

---

## Chunk 1456

work proactively when it is not busy reacting to the user. Our software commands the
CPU as though it were in the army, alternately telling it to hurry up and wait. The hurry
up part is great, but the waiting needs to stop.
In our current computing systems, users need to remember too many things, such as
the names they give to files and the precise location of those files in the file system. If a

---

## Chunk 1457

user wants to find that spreadsheet with the quarterly projections on it, he must either
remember its name or go browsing. Meanwhile, the processor just sits there, wasting
billions of cycles.
Most current software also takes no notice of context. When a user struggles with a
particularly difficult spreadsheet on a tight deadline, for example, the application offers

---

## Chunk 1458

precisely as much help as it offers when he is noodling with numbers in his spare time.
Software can no longer, in good conscience, waste so much idle time while users work.
It is time for our computers to begin shouldering more of the burden of work in our day-
to-day activities.
Most users in normal situations can‚Äôt do anything in less than a few seconds. That is

---

## Chunk 1459

enough time for a typical desktop computer to execute at least a billion instructions.
Almost without fail, those interim cycles are dedicated to idling. The processor does
nothing except wait. The argument against putting those cycles to work has always been
‚ÄúWe can‚Äôt make assumptions; those assumptions might be wrong.‚Äù Our computers today

---

## Chunk 1460

are so powerful that, although the argument is still true, it is frequently irrelevant. Sim-
ply put, it doesn‚Äôt matter if the application‚Äôs assumptions are wrong; it has enough spare
power to make several assumptions and discard the results of the bad ones when the
user finally makes his choice.
With Windows and Apple‚Äôs OS X‚Äôs preemptive, threaded multitasking and multicore,

---

## Chunk 1461

multichip computers, the computer can perform extra work in the background with-
out significantly affecting the performance most users see. The application can launch
a search for a file and, if the user begins typing, merely abandon the search until the
next hiatus. Eventually, the user stops to think, and the application has time to scan the
CH 8. Digital Etiquette 191

---

## Chunk 1462

--- Page 222 ---
whole disk. The user won‚Äôt even notice. This is precisely the kind of behavior that makes
OS X‚Äôs Spotlight search capabilities so good. Search results are almost instantaneous,
because the operating system takes advantage of downtime to index the hard drive.
Every time an application puts up a modal dialog box, it goes into an idle waiting state,

---

## Chunk 1463

doing no work while the user struggles with the dialog. This should never happen. It
would not be hard for the dialog box to hunt around and find ways to help. What did
the user do last time? The application could, for example, offer the previous choice as a
suggestion for this time.
We need a new, more proactive way of thinking about how software can help people

---

## Chunk 1464

reach their goals and complete their tasks.
smart products have a memory
When you think about it, it‚Äôs pretty obvious that for a person to perceive an interactive
product as considerate and smart, that product must have some knowledge of the per-
son and be capable of learning from his or her behavior. Looking through the charac-

---

## Chunk 1465

teristics of considerate products presented earlier reinforces this fact: For a product to
be truly helpful and considerate, it must remember important things about the people
interacting with it.
Developers and designers often assume that user behavior is random and unpredict-
able and that users must be continually interrogated to determine the proper course

---

## Chunk 1466

of action. Although human behavior certainly isn‚Äôt deterministic, like that of a digital
computer, it is rarely random, so being asked silly questions is predictably frustrating
for users.
Because of assumptions like this, most software is forgetful, remembering little or noth-
ing from execution to execution. If our applications are smart enough to retain any

---

## Chunk 1467

information during and between uses, it is usually information that makes the job easier
for the developer, not the user. The application willingly discards information about how
it was used, how it was changed, where it was used, what data it processed, who used
it, and whether and how frequently the application‚Äôs various facilities were used. Mean-

---

## Chunk 1468

while, the application fills initialization files with driver names, port assignments, and
other details that ease the developer‚Äôs burden. It is possible to use the exact same facili-
ties to dramatically increase the software‚Äôs smarts from the user‚Äôs perspective.
If your application, website, or device could predict what a user will do next, couldn‚Äôt

---

## Chunk 1469

it provide a better interaction? If your application could know which selections the
user will make in a particular dialog box or form, couldn‚Äôt that part of the interface be
skipped? Wouldn‚Äôt you consider advance knowledge of what actions your users take to
be an awesome secret weapon of interface design?
192 Part II: Making Well-Behaved Products

---

## Chunk 1470

--- Page 223 ---
Well, you can predict what your users will do. You can build a sixth sense into your appli-
cation that will tell it with uncanny accuracy exactly what the user will do next! All
those billions of wasted processor cycles can be put to great use: All you need to do is give
your interface a memory.

---

## Chunk 1471

When we use the term memory in this context, we don‚Äôt mean RAM, but rather a facility
for tracking and responding to user actions over multiple sessions. If your application
simply remembers what the user did the last several times (and how), it can use that as a
guide to how it should behave the next time.
If we enable our products with an awareness of user behavior, a memory, and the flexi-

---

## Chunk 1472

bility to present information and functionality based on previous user actions, we can
realize great advantages in user efficiency and satisfaction. We would all like to have
an intelligent and self-motivated assistant who shows initiative, drive, good judgment,
and a keen memory. A product that makes effective use of its memory is more like that

---

## Chunk 1473

self-motivated assistant, remembering helpful information and personal preferences
without needing to ask. Simple things can make a big difference‚Äîthe difference between
a product your users tolerate and one they love. The next time you find your application
asking your users a question, make it ask itself one instead.
smart products anticipate needs

---

## Chunk 1474

Predicting what a user will do by remembering what he did last is based on the principle
of task coherence. This is the idea that our goals and how we achieve them (via tasks) is
generally similar from day to day. This is true not only for tasks such as brushing our
teeth and eating breakfast, but it also describes how we use our word processors, e-mail

---

## Chunk 1475

applications, mobile devices, and enterprise software.
When a consumer uses your product, there is a good chance that the functions he uses
and how he uses them will be very similar to what he did in previous uses of the prod-
uct. He may even be working on the same documents, or at least the same types of doc-
uments, located in similar places. Sure, he won‚Äôt be doing the exact same thing each

---

## Chunk 1476

time, but his tasks will likely be variants of a limited number of repeated patterns. With
significant reliability, you can predict your users‚Äô behavior by the simple expedient of
remembering what they did the last several times they used the application. This allows
you to greatly reduce the number of questions your application must ask the user.

---

## Chunk 1477

For example, even though Sally may use Excel in dramatically different ways than she
does PowerPoint or Word, she tends to use Excel the same way each time. Sally prefers
12-point Helvetica and uses that font and size with dependable regularity. It isn‚Äôt really
necessary for the application to ask Sally which font to use or to revert to the default. A

---

## Chunk 1478

reliable starting point would be 12-point Helvetica, every time.
CH 8. Digital Etiquette 193

---

## Chunk 1479

--- Page 224 ---
Applications can also pay closer attention to clusters of actions. For example, in your
word processor, you might often reverse-out text, making it white on black. To do this,
you select some text and change the font color to white. Without altering the selection,
you then set the background color to black. If the application paid enough attention, it

---

## Chunk 1480

would notice that you requested two formatting steps without an intervening selection
option. As far as you‚Äôre concerned, this is effectively a single operation. Wouldn‚Äôt it be
nice if the application, upon seeing this unique pattern repeated several times, automat-
ically created a new format style of this type‚Äîor, better yet, created a new Reverse-Out
toolbar control?

---

## Chunk 1481

Most mainstream applications allow their users to set defaults, but this doesn‚Äôt fit the
bill as a smart behavior. Configuration of this kind is an onerous process for all but
power users. Many users will never understand how to customize defaults to their liking.
smart products remember details
You can determine what information the application should remember with a simple

---

## Chunk 1482

rule: If it‚Äôs worth it to the user to do it, it‚Äôs worth it to the application to remember it.
Everything that users do should be remembered. Our hard drives have plenty of stor-
age, and a memory for your application is a good investment of storage space. We tend
to think that applications are wasteful, because a big application might consume 200

---

## Chunk 1483

MB of disk space. That might be typical usage for an application, but not for most user
data. If your word processor saved 1 KB of execution notes every time you ran it, it still
wouldn‚Äôt amount to much. Suppose you use your word processor 10 times every busi-
ness day. There are approximately 250 workdays per year, so you run the application

---

## Chunk 1484

2,500 times a year. The net consumption is still only 2 MB, and that gives an exhaus-
tive recounting of the entire year! This is probably not much more than the background
image you put on your desktop.
If it‚Äôs worth it to the user to do it, it‚Äôs worth it to the application to remember it.
Any time your application finds itself with a choice, and especially when that choice

---

## Chunk 1485

is being offered to a user, the application should remember the information from run
to run. Instead of choosing a hardwired default, the application can use the previous
setting as the default, and it will have a much better chance of giving the user what he
wants. Instead of asking the user to make a determination, the application should go

---

## Chunk 1486

ahead and make the same determination the user made last time, and let him change it
if it is wrong. Any options users set should be remembered, so that the options remain
in effect until manually changed. If a user ignores aspects of an application or turns
194 Part II: Making Well-Behaved Products

---

## Chunk 1487

--- Page 225 ---
them off, they should not be offered again. The user will seek them out when he is ready
for them.
One of the most annoying characteristics of applications without memories is that they
are so parsimonious with their assistance regarding files and disks. If there is one place
where users need help, it‚Äôs with files and disks. An application like Word remembers the

---

## Chunk 1488

last place a person looked for a file. Unfortunately, if she always puts her files in a folder
called Letters, and then she edits a document template stored in the Templates folder
just once, all her subsequent letters are saved in the Templates folder rather than in the
Letters folder. So, the application must remember more than just the last place the files

---

## Chunk 1489

were accessed. It must remember the last place files of each type were accessed.
The position of windows should also be remembered; if you maximized the document
last time, it should be maximized next time. If you positioned it next to another window,
it is positioned the same way the next time without any instruction from the user. Mic-
rosoft Office applications do a good job of this.

---

## Chunk 1490

remembering file locations
All file-open facilities should remember where the user gets his files. Most users access
files from only a few folders for each given application. The application should remember
these source folders and offer them in the Open dialog box. The user should never have to
step through the tree to a given folder more than once.
Deducing information

---

## Chunk 1491

Software should not simply remember these kinds of explicit facts; it should also remem-
ber useful information that can be deduced from these facts. For example, if the applica-
tion remembers how many bytes changed in the file each time it is opened, it can help the
user with some checks of reasonableness. Imagine that a file‚Äôs changed-byte count is 126,

---

## Chunk 1492

94, 43, 74, 81, 70, 110, and 92. If the user calls up the file and changes 100 bytes, nothing
would be out of the ordinary. But if the number of changed bytes suddenly shoots up to
5,000 (as a result, perhaps, of inadvertently deleting a page of content), the application
might suspect that something is amiss. Although there is a chance that the user has

---

## Chunk 1493

inadvertently done something that will make him sorry, the probability of that is low, so
it isn‚Äôt right to bother him with a confirmation dialog. It is, however, very reasonable for
the application to keep a milestone copy of the file before the 5,000 bytes were changed,
just in case. The application probably won‚Äôt need to keep it beyond the next time the user

---

## Chunk 1494

accesses that file, because the user will likely spot any glaring mistake and will then
perform an Undo.
CH 8. Digital Etiquette 195

---

## Chunk 1495

--- Page 226 ---
multi-session undo
Most applications discard their stack of Undo actions when the user closes the document
or application. This is very shortsighted on the application‚Äôs part. Instead, the applica-
tion could write the Undo stack to a file. When the user reopens the file, the application
could reload its Undo stack with the actions the user performed the last time the appli-

---

## Chunk 1496

cation was run‚Äîeven if that was a week ago!
Past data entries
An application with a better memory can reduce the number of errors users make. This
is simply because users have to enter less information. More of it will be entered auto-
matically from the application‚Äôs memory. Many browsers offer this function, though few

---

## Chunk 1497

mobile or desktop applications do. In an invoicing application, for example, if the soft-
ware enters the date, department number, and other standard fields from memory, the
invoicing clerk has fewer opportunities to make typing errors in those fields.
If the application remembers what the user enters and uses that information for future

---

## Chunk 1498

reasonableness checks, the application can work to keep erroneous data from being
entered. Contemporary web browsers such as Internet Explorer and Firefox provide this
facility: Named data entry fields remember what has been entered into them before and
allow users to pick those values from a combo box. For security-minded individuals, this

---

## Chunk 1499

feature can be turned off, but for the rest of us, it saves time and prevents errors.
Foreign application activities on application files
Applications might also leave a small thread running between invocations. This little
application can keep an eye on the files it has worked on. It can track where the files go

---

## Chunk 1500

and who reads and writes to them. This information might be helpful to a user when he
next runs the application. When he tries to open a particular file, the application can
help him find it, even if it has been moved. The application can keep the user informed
about what other functions were performed on his file, such as whether it was printed or

---

## Chunk 1501

e-mailed. Sure, this information might be unneeded, but the computer can easily spare
the time, and only bits have to be thrown away, after all.
making smart products work
A remarkable thing happens to the software design process when the power of task
coherence is recognized. Designers find that their thinking takes on a whole new qual-

---

## Chunk 1502

ity. The normally unquestioned recourse of popping up a dialog box gets replaced with
a more studied process in which the designer asks much more subtle questions. How
much should the application remember? Which aspects should it remember? Should
196 Part II: Making Well-Behaved Products

---

## Chunk 1503

--- Page 227 ---
the application remember more than just the last setting? What constitutes a change
in pattern? Designers start to imagine situations like this: The user accepts the same
date format 50 times in a row and then manually enters a different format once. The next
time the user enters a date, which format should the application use? The format used

---

## Chunk 1504

50 times, or the more-recent one-time format? How many times must the new format be
specified before it becomes the default? Even though ambiguity exists, the application
still shouldn‚Äôt ask the user. It must use its initiative to make a reasonable decision. The
user is free to override the application‚Äôs decision if it is the wrong one.

---

## Chunk 1505

The following sections explain some characteristic patterns in how people make choices.
These can help us resolve these more-complex questions about task coherence.
Decision-set reduction
People tend to reduce an infinite set of choices to a small, finite set of choices. Even when
you don‚Äôt do the exact same thing each time, you tend to choose your actions from a

---

## Chunk 1506

small, repetitive set of options. People perform this decision-set reduction unconsciously,
but software can take notice and act on it.
For example, just because you went shopping at Safeway yesterday doesn‚Äôt necessarily
mean you shop at Safeway exclusively. However, the next time you need groceries, you
probably will shop at Safeway again. Similarly, even though your favorite Chinese restau-

---

## Chunk 1507

rant has 250 items on the menu, chances are you usually choose from your personal
subset of five or six favorites. When people drive to and from work, they usually choose
from a small number of favorite routes, depending on traffic conditions. Computers, of
course, can remember four or five things without breaking a sweat.

---

## Chunk 1508

Although simply remembering the last action is better than not remembering anything,
it can lead to a peculiar pathology if the decision set consists of precisely two elements.
For example, if you alternately read files from one folder and store them in another, each
time the application offers you the last folder, it is guaranteed to be wrong. The solution

---

## Chunk 1509

is to remember more than just one previous choice.
Decision-set reduction guides us to the idea that pieces of information the application
must remember about the user‚Äôs choices tend to come in groups. Instead of one right
way, several options are all correct. The application should look for more subtle clues to

---

## Chunk 1510

differentiate which one of the small set is correct. For example, if you use a check- writing
application to pay your bills, the application may very quickly learn that only two or
three accounts are used regularly. But how can it determine from a given check which of
the three accounts is the most likely to be appropriate? If the application remembered

---

## Chunk 1511

the payees and amounts on an account-by-account basis, that decision would be easy.
Every time you pay the rent, it is the exact same amount! It‚Äôs the same with a car pay-
ment. The amount paid to the electric company might vary from check to check, but it
CH 8. Digital Etiquette 197

---

## Chunk 1512

--- Page 228 ---
probably stays within 10 or 20 percent of the last check written. All this information can
be used to help the application recognize what is going on and use that information to
help the user.
Preference thresholds
The decisions people make tend to fall into two primary categories: important and
unimportant. Any given activity may involve hundreds of decisions, but only a few of

---

## Chunk 1513

them are important. All the rest are insignificant. Software interfaces can use this idea
of preference thresholds to simplify tasks for users.
After you decide to buy that car, you don‚Äôt really care who finances it as long as the terms
are competitive. After you decide to buy groceries, the particular checkout aisle you

---

## Chunk 1514

select may be unimportant. After you decide to ride the Matterhorn at Disneyland, you
don‚Äôt really care which bobsled they seat you in.
Preference thresholds guide us in our user interface design by demonstrating that ask-
ing users for successively detailed decisions about a procedure is unnecessary. After a
user chooses to print, we don‚Äôt have to ask him how many copies he wants or whether

---

## Chunk 1515

the image is landscape or portrait. We can make an assumption about these things the
first time out and then remember them for all subsequent invocations. If the user wants
to change them, he can always request the Printer Options dialog box.
Using preference thresholds, we can easily track which facilities of the application each

---

## Chunk 1516

user likes to adjust and which are set once and ignored. With this knowledge, the appli-
cation can offer choices where it has an expectation that the user will want to take con-
trol, not bothering him with decisions he won‚Äôt care about.
mostly right, most of the time
Task coherence predicts what users will do in the future with reasonable, but not abso-

---

## Chunk 1517

lute, certainty. If our application relies on this principle, it‚Äôs natural to wonder about
the uncertainty of our predictions. If we can reliably predict what the user will do 80
percent of the time, this means that 20 percent of the time we will be wrong. It might
seem that the proper step to take here is to offer users a choice, but this means that they

---

## Chunk 1518

will be bothered by an unnecessary dialog box 80 percent of the time. Rather than offer-
ing a choice, the application should go ahead and do what it thinks is most appropriate
and allow users to override or undo it. If the Undo facility is sufficiently easy to use and
understand, users won‚Äôt be bothered by it. After all, they will have to use Undo only two

---

## Chunk 1519

times out of ten instead of having to deal with a redundant dialog box eight times out of
ten. This is a much better deal for humans.
198 Part II: Making Well-Behaved Products

---

## Chunk 1520

--- Page 229 ---
Designing social Products
Most of the content created in modern software isn‚Äôt made for the sole use of its author
(task lists, reminders, and personal journals are perhaps the exceptions). Most content
is passed on to other humans: Presentations to be heard, documents to be read, images
to be seen, status updates to be liked; as well as content to be reviewed, application, and

---

## Chunk 1521

used in the next step of some business process. Even lines of application code that are
‚Äúmeant for machines,‚Äù are still written in structures and using language that is meant to
be readable by other developers.
Traditional, non-connected software left the sharing of this content up to the user, via
documents and through software that was specifically built for the task, such as an

---

## Chunk 1522

e-mail client. But as software has grown more complex‚Äîand more respectful of the
goals of its users‚Äîthose sharing and collaboration features are built right in. Software is
becoming less like a private office into which one disappears to produce work and later
emerges, work-in-hand, but more like an open-plan office where collaborators and even
consumers are just a shout away.

---

## Chunk 1523

So far, this chapter has discussed how good software should be considerate to humans.
When we communicate with other users via software-mediated mechanisms, the prin-
ciple is the same, but must additionally take into account social norms and the expecta-
tions of the other users.
social products know the difference between social
and market norms

---

## Chunk 1524

Every group has its own set of rules to which its members adhere, but the two largest
categories are social norms and market norms.
Social norms are the unspoken rules of reciprocity afforded to friends and family. They
include things like lending a hand when in need, and expressing gratitude.
Market norms are a different set of unspoken rules afforded to people with whom one is

---

## Chunk 1525

doing business. They include things like assurances of fair price for quality goods and
honesty in dealings.
These two concepts are very distinct from each other. Mistakenly using market norms in
a social setting can be perceived as extremely rude. Imagine leaving money on the table
after enjoying a good meal at a friend‚Äôs house and then leaving. Mistakenly using social

---

## Chunk 1526

norms in a market setting can get you arrested. Imagine shaking the hand of the waiter
at a restaurant and saying, ‚ÄúThank you, that was delicious!‚Äù and leaving without paying.
CH 8. Digital Etiquette 199

---

## Chunk 1527

--- Page 230 ---
If your software is to avoid being either rude or illegal, it must know the norms in which
its users operate. This is quite often apparent given the domain, but more all-encom-
passing systems may toy with those boundaries. You are connected to friends through
LinkedIn. There are companies with pages on Facebook. Software used internally at an

---

## Chunk 1528

organization operates on semi-social rules, since its members are helping each other do
the organization‚Äôs business. Dating software are actually markets where the transaction
is agreeing to meet.
Software adhering to market norms should assure both parties in a transaction that the
deal will be fair, often acting as the ‚Äúmatchmaker‚Äù and trustworthy escrow agent. Soft-

---

## Chunk 1529

ware adhering to social norms should help its users adhere to the subculture‚Äôs rules and
hierarchy in reciprocal, rewarding ways.
social software lets users present their best side
Representing users in a social interface poses challenges to the designer, that is, how to
make those representations unique, recognizable, descriptive, and useful. The following

---

## Chunk 1530

strategies can help users represent themselves online.
user identity
It‚Äôs tempting to want to use names to represent a user‚Äôs identity, but names aren‚Äôt always
unique enough, and they don‚Äôt always lend themselves to compact representations.
It‚Äôs also tempting to assign semi-random avatars, as Google Docs does with its colored

---

## Chunk 1531

animal icons (while typing this, the author has been joined by an adorable magenta
panda). The use of semi-random but canned visuals lets designers keep user avatars in
line with the software‚Äôs look and feel, but this adds cognitive load, as the user must then
remember the person behind the icon. To keep this load to a minimum, let the user on

---

## Chunk 1532

the other end provide a visual that works best for them, either by selecting an unclaimed
icon-color combination themselves, or by uploading their own image.
Uploading images does introduce the risk that inappropriate content might be chosen,
but within opt-in networks and accountable (non-anonymous) social software, social

---

## Chunk 1533

pressures should keep this in check. In any case, adding a ToolTip for a full name offers
users a quick reminder about who is who, should they need it.
Dynamic vs static user profiles
User profiles are a traditional way that a user can create an online presence for themselves,
but not all users have the time or desire to fill out a bunch of static fields describing them-

---

## Chunk 1534

selves. However, a user‚Äôs social contributions to the network can be dynamically collected
200 Part II: Making Well-Behaved Products

---

## Chunk 1535

--- Page 231 ---
and presented in summary: music listened to, people followed or friended, updates added
or liked, books or movies mentioned, links posted or shared, etc. Facebook‚Äôs Timeline is
an example of one way of presenting this kind of information. In social networks, actions
speak louder than self-descriptions, and summarized top-rated or best-liked contribu-

---

## Chunk 1536

tions can form a great supplement or even an alternative to static bios.
As with any part of a user‚Äôs profile, a user should have complete control of who gets to see
this information, and should be able to curate it and organize it as they see fit‚Äîthough
the default should also look good for those users who don‚Äôt want to fuss with it.
social software permits easy collaboration

---

## Chunk 1537

Collaboration is one of the most common reasons to make software social. A user may
desire a second opinion, another pair of hands, or signoff by a colleague. Collabora-
tion-centric social software can bake this type of functionality deeply into the interface.
For example, Microsoft Word lets people add review comments to documents, and oth-

---

## Chunk 1538

ers can add comments referencing earlier ones. It works after a fashion, but comments
can unfortunately get jumbled and dissociated from their source.
Google Docs does Word one better by allowing collaborators to reply directly to com-
ments, treating them almost as a threaded discussion, lets any collaborator ‚Äúresolve‚Äù

---

## Chunk 1539

an issue with the click of a button, and supplies a place where old, resolved issues can
be re-opened. The Google Docs model better fits the ways people interact to discuss and
resolve questions. Designers should make sure that collaboration tools are apparent,
usable, and fit their personas‚Äô collaboration needs and communication behaviors.
social products know when to shut the door

---

## Chunk 1540

In productivity software that is only peripherally social, such as Google Docs, the social-
ness of the software should not overwhelm or distract from the primary task. Of course
social software must manifest other users, but it should do so carefully, treating the
attention of the user with the utmost respect. A blinking, beeping announcement that

---

## Chunk 1541

an already-invited user has come into my document is a surefire way to get me to find
another alternative. Additionally, users should have access to a polite but firm way to
‚Äúshut the door,‚Äù suspending social interruption for a time that the user needs to focus to
get a task done.
social products help networks grow organically

---

## Chunk 1542

Networks of people grow and change over time as members join, connect, interact, gain
standing, and leave. Social software must have ways for new members to discover the
CH 8. Digital Etiquette 201

---

## Chunk 1543

--- Page 232 ---
network, join, build a presence, learn the rules, begin to participate, and receive gentle
reinforcements when the member transgresses against the subculture‚Äôs norms. Interme-
diate members should have tools that let them build mastery, nurture newer members,
and seek help from senior members. Senior members should have tools to manage the

---

## Chunk 1544

network. All members need ways to suspend participation for a time, or to elegantly bow
out. And, as morbid as the thought may be, networks must elegantly handle when their
members die.
A particularly difficult social problem is how to handle when one user wishes to connect
to another user who does not agree to the connection. Per social norms, the reluctant

---

## Chunk 1545

user can come across as aloof or standoffish. When the new mailroom intern tries to
connect via LinkedIn to the CEO of a large organization, the CEO doesn‚Äôt want to con-
nect, but also doesn‚Äôt want to send a signal that that employee isn‚Äôt valued. To let the
eager user save face, the reluctant user needs to pass responsibility to a set of explicit

---

## Chunk 1546

rules for the community, to another user who is expressly charged as a gatekeeper, or to
some system constraint.
social products respect the complexity of
social circles
There is a psychosocial threshold to the size of networks that designers must keep in
mind. Research from primatology has revealed that the size of the neocortex in a pri-

---

## Chunk 1547

mate‚Äôs brain has a direct correlation to the average size of its tribe. Tribes with a number
of members smaller than this value risk having less security. Tribes with a number of
members larger than this value become unstable.
This limit is called Dunbar‚Äôs number, named for the anthropologist who first proposed it,

---

## Chunk 1548

Robin Dunbar. The obvious follow-up question to the primate observation is, of course,
what is that value for humans? Given the size of our neocortex, the value is probably
around 150. This is a generalized maximum number of social relationships that any one
person can maintain fully. If your software permits networks larger than this value,

---

## Chunk 1549

there is a risk of instability unless there are either explicit rules and mechanisms that
proscribe behavior, or a set of tools to manage the subsequent complexity.
Some software is slightly social, such as Google Docs, which allows one user to invite oth-
ers to collaborate on individual documents. The social group here is strictly invite-only

---

## Chunk 1550

and strictly opt-in. Users may have a few levels of access, determined by the owner of the
original document. These types of software leave complexity as an exercise for the user.
Other software may have more deliberate networks and rules around participation.
Dropbox, for instance, is a file sharing software that allows users to define a network
202 Part II: Making Well-Behaved Products

---

## Chunk 1551

--- Page 233 ---
of who has access to a shared group of files. Users may invite others, even outside of the
defined organization, to individual folders or files.
Explicitly social software can involve massively disparate circles of people. Facebook,
with its estimated 1 billion users, can find its users connected to coworkers, nuclear fam-

---

## Chunk 1552

ily, extended family, friends, frenemies, neighbors, ex-neighbors, school mates, ex-school
mates, acquaintances, hobbyist circles, employers, potential employers, employees, cli-
ents, potential clients, sweethearts, paramours, and suspicious rivals, to name a few. The
rules and norms for each of these subgroups can be of critical importance to the user, as
can keeping groups separate.

---

## Chunk 1553

For example, your college friends may delight in photos of your night of irresponsible
carousing, but only some of your family would, and your employer or clients would almost
certainly not. Unfortunately the mechanism for managing these circles and specifying
which content goes to which circle is hard to find and cumbersome to use, occasionally

---

## Chunk 1554

resulting in some very embarrassed Facebook users. The ability to change permissions
on the fly and retract actions is critical in such contexts. Facebook‚Äôs rival social network,
Google Plus, provides its users with a much clearer mechanism for understanding and
managing social circles, with animations and modern layouts that make it fun rather
than a chore.

---

## Chunk 1555

Other more explicit communities of practice may afford certain permissions to mem-
bers depending on role and seniority. Wikipedia has a huge amount of readers, a smaller
group that writes and edits pages, and an even smaller group that has the administra-
tive ability to grant permissions.
The larger and more complex your software is, the more design attention you will need

---

## Chunk 1556

to pay to the complexity of the social network.
social products respect other users‚Äô privacy
Advertising-driven social media, like Facebook and Google Plus, have strong financial
incentives to disrespect their users‚Äô privacy. The more that is known and shared about a
particular user, the more targeted advertising becomes, and the higher the fees that can
be charged to advertisers.

---

## Chunk 1557

On the other hand, users want to feel that their privacy desires are being respected and
can be driven to quit a service that goes too far. Facebook in particular has run into
problems time and again where it changes policy to expose more user data; does not
explain the change to users‚Äô satisfaction; and makes controls for the change difficult

---

## Chunk 1558

to find, understand, and use. Thus a user commenting on a risqu√© picture is suddenly
shocked to find her Aunt Bessie scolding her for it. Facebook‚Äôs repeated, inconsiderate
missteps risk it slowly turning its users against its brand.
CH 8. Digital Etiquette 203

---

## Chunk 1559

--- Page 234 ---
Considerate social software makes additional sharing a carefully explained, opt-in
affair. And in the case of business norms, it can be an intellectual property rights viola-
tion, so take great care.
social products deal appropriately with the anti-social
Griefers are users who abuse social systems by interfering with transactions, adding

---

## Chunk 1560

noise to conversations, and even sabotaging work. Amazon has had to deal with an
entire subculture of griefers who delight in providing sarcastic reviews to goods on sale.
In large-network systems with easy and anonymous account creation, griefers have little
accountability for their actions and can be a major problem. Social software provides

---

## Chunk 1561

tools for users to silence griefers from ruining transactions they own, tools to categor-
ically exclude griefers, and tools to report griefers to community caretakers. The trick
in these tools is to help caretakers distinguish the genuinely anti-social user from those
who are earnest but unpopular.
204 Part II: Making Well-Behaved Products

---

## Chunk 1562

--- Page 235 ---
Ch 9
PlATForm AnD PosTurE
As you might recall from Chapter 5, the first question to answer as you begin to design
the interaction framework of a digital product is ‚ÄúWhat platform and posture are
appropriate?‚Äù
A product‚Äôs platform can be thought of as the combination of hardware and software
that enables the product to function‚Äîin terms of both user interactions and the prod-

---

## Chunk 1563

uct‚Äôs internal operations.
A product‚Äôs posture is its behavioral stance‚Äîhow it presents itself to users. Posture is a
way of talking about how much attention the user devotes to interacting with the prod-
uct, and how the product‚Äôs behaviors respond to the kind of attention the user devotes
to it. This decision must be based on an understanding of likely usage contexts and
environments.

---

## Chunk 1564

Product Platforms
You‚Äôre no doubt familiar with many of the most common platforms for interactive
products:
‚Ä¢ Desktop software
‚Ä¢ Websites and web applications
‚Ä¢ Mobile devices such as phones, tablets, and digital cameras

---

## Chunk 1565

--- Page 236 ---
‚Ä¢ Kiosks
‚Ä¢ In-vehicle systems
‚Ä¢ Home entertainment systems such as game consoles, TV set-top boxes, and stereo/
home theater systems
‚Ä¢ Professional devices such as medical and scientific instruments
Looking at this list, you may notice that ‚Äúplatform‚Äù is not a precisely defined concept.
Rather, it is shorthand used to describe a number of important product features, such

---

## Chunk 1566

as the physical form, display size and resolution, input methods, network connectivity,
operating system, and database capabilities.
Each of these factors has a significant impact on how the product can be designed, built,
and used. Choosing the right platform is a balancing act. You must find the sweet spot
that best supports the needs and context of your personas but also fits within the busi-

---

## Chunk 1567

ness constraints, objectives, and technological capabilities of your company or client.
In many organizations, platform decisions, particularly those regarding hardware,
unfortunately are still made well in advance of the interaction designer‚Äôs involvement. It
is important to inform management that platform choices will be much more effective if

---

## Chunk 1568

they are made after interaction designers complete their work.
Decisions about technical platforms are best made in concert with interaction
design efforts.
Product Postures
Most people have a predominant behavioral stance that fits their working role on the
job. The soldier is wary and alert; the toll collector is bored and disinterested; the actor

---

## Chunk 1569

is flamboyant and larger than life; the service representative is upbeat and helpful. Prod-
ucts, too, have a predominant manner of presenting themselves to users.
Platform and posture are closely related: Different hardware platforms are conducive to
different behavioral stances. A social networking application running on a smartphone

---

## Chunk 1570

clearly must accommodate a different kind of user attention and level of interaction
than, say, a page layout application running on a large-display desktop computer.
Software applications may be bold or timid, colorful or drab, but they should be that
way for a specific set of goal-directed reasons. The presentation of an application affects

---

## Chunk 1571

how users relate to it, and this relationship influences the product‚Äôs usability (and
206 Part II: Making Well-Behaved Products

---

## Chunk 1572

--- Page 237 ---
desirability). Apps whose appearance and behavior conflict with their purpose will seem
jarring or inappropriate.
A product‚Äôs look and behavior should also reflect how it is used, rather than the personal
taste of designers, developers, or stakeholders. From the perspective of posture, look and

---

## Chunk 1573

feel is not solely a brand or an aesthetic choice; it is a behavioral choice. Your application‚Äôs
posture is part of its behavioral foundation, and whatever aesthetic choices you make
should be in harmony with this posture.
The posture of your interface dictates many important guidelines for the rest of the
design, but posture is not monolithic: Just as you present yourself to others in somewhat

---

## Chunk 1574

different ways depending on the social context, some products may exhibit character-
istics of a number of different postures in different usage contexts. For instance, when
reading e-mail on a smartphone during a train ride, the user may devote concentrated
attention to interactions with the device (and expect a commensurate experience). How-

---

## Chunk 1575

ever, the same user will have significantly less attention to devote if she is using it to look
up an address while running to a meeting.
Similarly, while a word processor is optimized for concentrated, devoted, and frequent
user attention, some of its tools, like the table construction tool, are used only briefly and

---

## Chunk 1576

infrequently. In cases like this, it is worthwhile both to define the predominant posture
for the product as a whole and to consider the posture of individual features and usage
contexts.
In the remainder of this chapter we discuss appropriate postures and other design con-
siderations for several key platforms, including desktop software, websites and web

---

## Chunk 1577

applications, mobile handheld and tablet devices, and other embedded devices.
Postures for the Desktop
We use the term ‚Äúthe desktop‚Äù as a catchall phrase referring to applications that run
on modern desktop or laptop computers. Generally speaking, interaction design has its
roots in desktop software. While historically, designers have grappled with issues related

---

## Chunk 1578

to complex behaviors on a variety of technical platforms, desktop and laptop computers
have brought these complex behaviors into the mainstream. In more recent history, web
applications, mobile devices, and digital appliances of many kinds have expanded both
the repertoire of behaviors and their mainstream reach; we‚Äôll talk more about these later
in this chapter.

---

## Chunk 1579

Desktop applications express themselves in three categories of posture: sovereign, tran-
sient, and daemonic. Because each describes a different set of behavioral attributes, each
also describes a different type of user interaction. More importantly, these categories
CH 9. Platform and Posture 207

---

## Chunk 1580

--- Page 238 ---
give the designer a point of departure for designing an interface. A sovereign-posture
application, for example, won‚Äôt feel right unless it behaves in a ‚Äúsovereign‚Äù way.
sovereign posture
Applications that monopolize users‚Äô attention for long, continuous periods of time are
called sovereign-posture applications. Sovereign applications offer a large set of related

---

## Chunk 1581

functions and features, and users tend to keep them up and running continuously, occu-
pying the full screen. Good examples of this type of application are word processors,
spreadsheets, and e-mail applications. Many job-specific applications are also sovereign
applications because they are often deployed on the screen for long periods of time, and
interaction with them can be deep and complex.

---

## Chunk 1582

Users working with sovereign applications often find themselves in a state of flow. Sov-
ereign applications are usually used maximized (we‚Äôll talk more about window states in
Chapter 18). For example, it is hard to imagine using Microsoft Outlook in a 3-by-4-inch
window. That size is inconvenient for Outlook‚Äôs main job: allowing you to create and

---

## Chunk 1583

view e-mail and appointments (see Figure 9-1). A sovereign product dominates the user‚Äôs
workflow as his primary tool.
Figure 9-1: Microsoft Outlook is a classic example of a sovereign-posture application. It stays
onscreen, interacting with the user for long, uninterrupted periods, and with its multiple adjacent
panes for navigation and supporting information, it begs to take up the full screen.

---

## Chunk 1584

208 Part II: Making Well-Behaved Products

---

## Chunk 1585

--- Page 239 ---
Target intermediate users
Because people typically devote time and attention to using sovereign applications, they
often have a vested interest in progressing up the learning curve to become intermediate
users, which we‚Äôll discuss in detail in Chapter 11. Each user spends time as a novice, but

---

## Chunk 1586

only a short period of time relative to the amount of time he will eventually spend using
the product. Certainly a new user has to get over the initial learning curve. But seen from
the perspective of the entire relationship between the user and the product, the time he
spends getting acquainted with the application is small.

---

## Chunk 1587

From the designer‚Äôs point of view, this often means that the application should be opti-
mized for use by intermediates and not be aimed primarily at beginners (or experts).
Sacrificing speed and power in favor of a clumsier but easier-to-learn idiom is out of
place here, as is providing only sophisticated power tools. Of course, if you can offer

---

## Chunk 1588

easier or more powerful idioms without compromising the interaction for intermediate
users, that is often best. In any case, the sort of user you‚Äôre optimizing for is determined
by your choice of primary persona and your understanding of his or her attitudes, apti-
tudes, and use contexts.
Between first-time users and intermediate users, many people use sovereign applica-

---

## Chunk 1589

tions only occasionally. These infrequent users cannot be ignored. However, the success
of a sovereign application is still dependent on its intermediate, frequent users until
someone else satisfies both them and inexperienced users. WordStar, an early word
processing application, is a good example. It dominated the word processing market-

---

## Chunk 1590

place in the late ‚Äô70s and early ‚Äô80s because it served its intermediate users exceed-
ingly well, even though it was extremely difficult for infrequent and first-time users.
WordStar Corporation thrived until its competition offered the same power for inter-
mediate users while simultaneously making the application much less painful for infre-

---

## Chunk 1591

quent users. WordStar, unable to keep up with the competition, rapidly dwindled to
insignificance.
be generous with screen real estate
Because the user‚Äôs interaction with a sovereign application dominates his session at the
computer, the application shouldn‚Äôt be afraid to take up as much screen real estate as
possible. No other application will be competing with yours (beyond the occasional tran-

---

## Chunk 1592

sient notification and communication apps), so don‚Äôt waste space, but also don‚Äôt be shy
about taking what you need to do the job. If you need four toolbars to cover the bases,
use four toolbars. In an application of a different posture, four toolbars may be overly
complex, but the sovereign posture has a defensible claim on the pixels.
CH 9. Platform and Posture 209

---

## Chunk 1593

--- Page 240 ---
In most instances, sovereign applications run maximized. In the absence of explicit
instructions from the user, your sovereign application should default to maximized or
full-screen presentation. The application needs to be fully resizable and must work well
in other screen configurations, but the interface should be optimized for full-screen use,

---

## Chunk 1594

instead of the less common cases.
Optimize sovereign applications for full-screen use.
use a minimal visual style
Because users will stare at a sovereign application for long periods, you should take care
to mute the colors and texture of the visual presentation. Keep the color palette narrow
and conservative. Big colorful controls may look really cool to newcomers, but they seem

---

## Chunk 1595

garish after a couple of weeks of daily use. Tiny dots or accents of color will have more
effect in the long run than big splashes, and they enable you to pack controls and infor-
mation more tightly than you otherwise could.
Sovereign interfaces should feature a conservative visual style.
The user will stare at the same palettes, menus, and toolbars for many hours, gaining

---

## Chunk 1596

an innate sense of where things are from sheer familiarity. This gives you, the designer,
freedom to do more with fewer pixels. Toolbars and their controls can be smaller than
normal. Auxiliary controls such as screen splitters, rulers, and scrollbars can be smaller
and more closely spaced.
Provide rich visual feedback

---

## Chunk 1597

Sovereign applications are a great platform for creating an environment rich in visual
feedback for users. You can productively add extra bits of information to the interface.
A status bar at the bottom of the screen, the ends of the space normally occupied by
scrollbars, the title bar, and other dusty corners of the product‚Äôs visible components can

---

## Chunk 1598

be filled with visual indications of the application‚Äôs status, the data‚Äôs status, the system‚Äôs
state, and hints for more productive user actions. However, while enriching the visual
feedback, you must be careful not to create an interface that is hopelessly cluttered.
210 Part II: Making Well-Behaved Products

---

## Chunk 1599

--- Page 241 ---
The first-time user won‚Äôt even notice such artifacts, let alone understand them, because
of the subtle way they are shown on the screen. After a period of steady use, however, he
will begin to see them, wonder about their meaning, and experimentally explore them.
At this point, the user will be willing to expend a little effort to learn more. If you pro-

---

## Chunk 1600

vide an easy means for him to find out what the artifacts are, he will become not only
a better user but also a more satisfied user. His power over the application will grow
with his understanding. Adding such richness to the interface is like adding a variety of
ingredients to soup stock‚Äîit enhances the entire meal. We discuss this idea of rich visual
modeless feedback in Chapter 15.

---

## Chunk 1601

support rich input
Sovereign applications similarly benefit from rich input. Every frequently used aspect of
the application should be controllable in several ways. Direct manipulation, keyboard
mnemonics, and keyboard accelerators are all appropriate (see Chapter 18). You can
make more aggressive demands on the user‚Äôs fine motor skills with direct-manipulation

---

## Chunk 1602

idioms. Sensitive areas on the screen can be just a couple of pixels across, because you
can assume that the user is established comfortably in his chair, arm positioned in a
stable way on his desk, rolling the mouse firmly across a resilient mouse pad.
Sovereign applications should exploit rich input.
Go ahead and use the corners and edges of the application‚Äôs window for controls. In a

---

## Chunk 1603

jet cockpit, the most frequently used controls are situated directly in front of the pilot.
Those needed only occasionally or in an emergency are found on the armrests, overhead,
and side panels. In Word for Mac, Microsoft has put the most frequently used functions
at the top of the window, as shown in Figure 9-2. Microsoft also put visually dislocat-

---

## Chunk 1604

ing functions on small controls near the bottom of the screen. These controls change
the appearance of the entire visual display‚ÄîDraft View, Outline View, Publishing lay-
out View, Print Layout View, Notebook Layout View, and Focus View. Neophytes do not
often use them and, if accidentally triggered, they can be confusing. Placing them near

---

## Chunk 1605

the bottom of the screen makes them almost invisible to new users. Their segregated
positioning subtly and silently indicates that they should be used with caution. More
experienced users, with more confidence in their understanding of and control over the
application, will begin to notice these controls and wonder about their purpose. They

---

## Chunk 1606

can experimentally select them when they feel fully prepared for the consequences. This
is an accurate and useful mapping of control placement to usage.
CH 9. Platform and Posture 211

---

## Chunk 1607

--- Page 242 ---
Figure 9-2: Microsoft Word has placed controls at both the top and bottom of the application. The
controls at the bottom are used to change views and are appropriately segregated because they can
cause significant visual dislocation.
Design for documents
The dictum that sovereign applications should fill the screen is also true of document

---

## Chunk 1608

windows within the application itself. Child windows containing documents should
always be maximized inside the application unless the user explicitly instructs other-
wise, or the user needs to simultaneously work in several documents to accomplish a
specific task.
Maximize document views within sovereign applications.

---

## Chunk 1609

Many sovereign applications are also document-centric. In other words, their primary
functions involve creating and viewing documents containing rich data. This makes it
easy to believe that the two are always correlated, but this is not the case. If an application
212 Part II: Making Well-Behaved Products

---

## Chunk 1610

--- Page 243 ---
manipulates a document but performs only a single, simple function, such as scanning
an image, it isn‚Äôt a sovereign application and shouldn‚Äôt exhibit sovereign behavior. Such
single-function applications have a posture of their own‚Äîthe transient posture.
Transient posture
A product with a transient posture comes and goes, presenting a single function with

---

## Chunk 1611

a constrained set of accompanying controls. The application is invoked when needed,
appears, performs its job, and then quickly leaves, letting the user continue her normal
activities, usually with a sovereign application.
The defining characteristic of a transient application is its temporary nature. Because
it doesn‚Äôt stay on the screen for extended periods of time, users don‚Äôt get the chance

---

## Chunk 1612

to become very familiar with it. Consequently, the product‚Äôs user interface should be
obvious and helpful, presenting its controls clearly and boldly with no possibility of con-
fusion or mistakes. The interface must spell out what it does. This is not the place for
artistic-but-ambiguous images and icons. It is the place for big buttons with precise leg-

---

## Chunk 1613

ends spelled out in a large, easy-to-read typeface.
Transient applications must be simple, clear, and to the point.
Although a transient application can certainly operate alone on your desktop, it usu-
ally acts in a supporting role to a sovereign application. For example, calling up Files
Explorer in Windows to locate and open a file while editing another with Word is a typi-

---

## Chunk 1614

cal transient scenario. So is setting your speaker volume. Because the transient applica-
tion borrows space at the expense of the sovereign, it must respect the sovereign by not
taking up more space onscreen than is absolutely necessary.
In cases when the entire computer system is fulfilling a transient role in the real world, it

---

## Chunk 1615

is not necessarily appropriate to minimize the use of pixels and visual attention. Exam-
ples of this include process monitors in a fabrication environment, or digital imaging
systems in an operating room. Here, the entire computer screen is referred to in a tran-
sient manner, while the user is engaged in a sovereign mechanical activity. In these

---

## Chunk 1616

cases, it is still critical for information to be obvious and easily understood from across
the room. This clearly requires a bolder use of color and a more generous allotment of
real estate, as shown in Figure 9-3.
CH 9. Platform and Posture 213

---

## Chunk 1617

--- Page 244 ---
Figure 9-3: OS X Dashboard widgets and the iTunes Miniplayer are good examples of transient appli-
cations. They are referred to or interacted with briefly before the user‚Äôs attention turns to an activity
in a sovereign application. The use of rich dimensional rendering gives them an appropriate amount
of visual gravity.
make it bright and clear

---

## Chunk 1618

Although a transient application must conserve the total amount of screen real estate
it consumes, the controls on its surface can be proportionally larger than those on a
sovereign application. More forceful visual design on a sovereign application would pall
within a few weeks, but the transient application isn‚Äôt onscreen long enough for it to

---

## Chunk 1619

bother the user. On the contrary, bolder graphics help users to orient themselves more
quickly when the application pops up.
214 Part II: Making Well-Behaved Products

---

## Chunk 1620

--- Page 245 ---
Transient applications should have instructions built into their surface. The user may see
the application only once a month and will likely forget the meanings and implications
of the choices presented. Instead of having a button labeled ‚ÄúSetup,‚Äù it‚Äôs better to make
the button large enough so that it can be labeled ‚ÄúSet up user preferences.‚Äù The verb/

---

## Chunk 1621

object construction results in a more easily comprehensible interface, and the results of
clicking the button are more predictable. Likewise, nothing should be abbreviated on a
transient application, and feedback should be direct and explicit to avoid confusion. For
example, the user should be easily able to understand that the printer is busy, or that a

---

## Chunk 1622

piece of recently recorded audio is 5 seconds long.
keep it simple
After the user summons a transient application, all the information and facilities he needs
should be right there on the surface of the application‚Äôs single window. Keep the user‚Äôs
attention on that window. Don‚Äôt force him into supporting subwindows or dialog boxes

---

## Chunk 1623

to take care of the application‚Äôs main function. If you find yourself adding a dialog box or
second view to a transient application, that‚Äôs a key sign that your design needs a review.
Transient applications should be limited to a single window and view.
Transient applications are not the place for tiny scrollbars and fussy mouse interactions.

---

## Chunk 1624

Keep demands on the user‚Äôs fine motor skills to a minimum. Simple pushbuttons for sim-
ple functions are good. Direct manipulation can also be effective, but anything that can
be directly manipulated must be discoverable and big enough to interact with easily. You
can provide keyboard shortcuts, but they must be simple, and all important functions
should also be visible on the interface.

---

## Chunk 1625

Of course, rare exceptions to the monothematic nature of transient applications some-
times occur. If a transient application performs more than just a single function, the
interface should communicate this visually and unambiguously and provide immediate
access to all functions without the addition of windows or dialogs. One such application

---

## Chunk 1626

is the Art Directors Toolkit by Code Line Communications, shown in Figure 9-4. It per-
forms a number of different calculator-like functions useful to users of graphic design
applications.
Keep in mind that a transient application will likely be called on to help manage some
aspect of a sovereign application (as shown in Figure 9-4). This means that the transient

---

## Chunk 1627

application, as it is positioned on top of the sovereign, may obscure the very information
that it is chartered to work on. This implies that the transient application must be mov-
able, which means it must have a title bar or other obvious affordance for dragging.
CH 9. Platform and Posture 215

---

## Chunk 1628

--- Page 246 ---
Figure 9-4: Art Directors Toolkit by Code Line Communications is a transient application.
It provides a number of discrete functions such as calculating dimensions of a layout
grid. These functions are designed to support the use of a sovereign layout application
such as Adobe InDesign. The many functions are organized into tabs and are directly
accessible at all times.

---

## Chunk 1629

It is vital to keep the amount of management overhead as low as possible with transient
applications. All the user wants to do is perform a specific function or get a certain piece
of information, and then move on. It is unreasonable to force the user to add nonproduc-
tive window-management tasks to this interaction.
remember user choices

---

## Chunk 1630

The most appropriate way to help users with both transient and sovereign apps is to give
the applications a memory. If a transient application remembers where it was the last
time it was used, that same size and placement probably will be appropriate next time,
too. These settings will almost always be more suitable than any default setting might

---

## Chunk 1631

happen to be. Whatever shape and position the user left the application in should be the
shape and position the application reappears in when it is next summoned. Of course,
this holds true for its logical settings, too.
216 Part II: Making Well-Behaved Products

---

## Chunk 1632

--- Page 247 ---
A transient application should launch to its previous position and configuration.
No doubt you have already realized that most dialog boxes behave very much like tran-
sient applications. Therefore, the preceding guidelines for transient applications apply
equally well to the design of dialog boxes. (Chapter 21 covers dialogs in more detail.)
Daemonic posture

---

## Chunk 1633

Applications that normally do not interact with the user are daemonic-posture applica-
tions. These applications serve quietly and invisibly in the background, performing vital
tasks without the need for human intervention. A printer driver and network connection
are excellent examples.
As you might expect, any discussion of the user interface of daemonic applications is

---

## Chunk 1634

necessarily short. Whereas a transient application controls the execution of a function,
daemonic applications usually manage processes. Your heartbeat isn‚Äôt a function that
must be consciously controlled; rather, it is a process that proceeds autonomously in
the background. Like the processes that regulate your heartbeat, daemonic applications

---

## Chunk 1635

generally remain invisible, competently performing their process as long as your com-
puter is turned on. Unlike your heart, however, daemonic applications must occasion-
ally be installed and removed, and, also occasionally, they must be adjusted to deal with
changing circumstances. It is at these times that a daemon talks to the user (or vice

---

## Chunk 1636

versa). Without exception, the interaction between the user and a daemonic application
is transient in nature, and all the imperatives of transient application design hold true
here also.
The principles of transient design that are concerned with keeping users informed of
an application‚Äôs purpose and of the scope and meaning of the available choices become

---

## Chunk 1637

even more critical with daemonic applications. In many cases, users are unaware of the
existence of the daemonic application. If you recognize that, it becomes obvious that
reports about status from that application can be disconcerting if not presented with
great attention to clarity. Because many of these applications perform esoteric func-

---

## Chunk 1638

tions‚Äîsuch as printer drivers‚Äîthe messages from them must not confuse users or lead
to misunderstandings.
A question that is often taken for granted with applications of other postures becomes
very significant with daemonic applications: If the application normally is invisible, how
should the user interface be summoned on those rare occasions when it is needed? Win-

---

## Chunk 1639

dows 8 Desktop represents these daemons with icons on the right side of the taskbar.
(OS X does something similar on the right side of the menu bar.) Putting icons onscreen
CH 9. Platform and Posture 217

---

## Chunk 1640

--- Page 248 ---
when they are almost never needed leads to useless visual clutter. Daemonic icons should
be employed persistently only if they provide continuous and useful status information.
Microsoft solved this problem by hiding daemonic icons that are not actively being used
to report status or access functionality in a pop-up menu, as shown in Figure 9-5.

---

## Chunk 1641

Figure 9-5: The status area of the taskbar in Win-
dows 8. The speaker icon provides modeless visual
status information, because the icon changes if the
speaker‚Äôs volume is low or muted. Hovering over
the icon provides more information and clicking or
right-clicking it provides access to the volume and
other audio controls. To the right of the speaker icon,

---

## Chunk 1642

the Dropbox icon modelessly indicates that Dropbox is
automatically syncing its desktop folder.
Both Mac OS and Windows also employ control panels as an effective approach to con-
figure daemonic applications. These user-activated transient applications give users
a consistent place to go to configure daemons. It is also important to provide direct,

---

## Chunk 1643

inline access to daemonic applications anytime an issue with them prevents someone
from accomplishing what he aims to. (Of course, the standard disclaimer applies: Don‚Äôt
interrupt users unnecessarily.) For example, if a taskbar icon indicates a problem with
a printer, clicking that icon should provide a mechanism to troubleshoot and rectify the
problem.
Postures for the web

---

## Chunk 1644

The advent of the World Wide Web was initially both a boon and a curse for interaction
designers. For perhaps the first time since the invention of graphical user interfaces, cor-
porate decision makers began to understand and adopt the language of user-centered
design. On the other hand, the limitations and challenges of web interactivity, which

---

## Chunk 1645

were the natural results of its historical evolution, set back interaction design by nearly
a decade. However, since the publication of the third edition of this book, the web has
become a much friendlier place for the kind of rich interactions (such as drag and drop
or gestures) that were long possible only in native desktop applications.

---

## Chunk 1646

Today‚Äôs websites can be grouped into three basic categories that in a way recapitulate
the development of web technology: informational websites, transactional websites, and
web applications. Each of these types has its own postural considerations. As with many
of the categorizations we offer in this book, the lines between them can be indistinct.
218 Part II: Making Well-Behaved Products

---

## Chunk 1647

--- Page 249 ---
Think of them as representing a spectrum on which any website or web application can
be located.
Informational website posture
Web browsers were originally conceived of as a way to view shared and linked docu-
ments without the need for cumbersome data transfer utilities like File Transfer Proto-

---

## Chunk 1648

col (FTP), Gopher, and Archie. The early web was made up of sequential or hierarchical
sets of these documents (web pages), collectively called websites. In essence, these were
places for users to go to get information. In this book we call these informational websites
to distinguish them from the more interactive web-delivered services that came later.

---

## Chunk 1649

From an interaction standpoint, informational websites consist of a navigation model to
take users from one page to another, as well as a search facility to provide more goal-di-
rected location of specific pages.
Although informational websites hark back to the early web of the 1990s, plenty of them
still exist, in the form of personal sites, corporate marketing and support sites, and

---

## Chunk 1650

information-centric intranets. Wikipedia is the number 5 site in the world, and is an
informational website. In such sites, the dominant design concerns are the visual look
and feel, layout, navigational elements, and site structure (information architecture).
Findability, a term coined by Peter Morville, is an apt way to describe the biggest design

---

## Chunk 1651

issue for informational websites in a nutshell: the ease of finding specific information
held within them.
balancing sovereign and transient
Sites that are purely informational, that require no complex transactions beyond nav-
igating from page to page and limited searching, must balance two forces: the need to

---

## Chunk 1652

display a reasonable density of useful information, and the need to allow first-time and
infrequent users to learn and navigate the site easily. This implies a tension between sov-
ereign and transient attributes in informational sites. Which stance is more dominant
depends largely on who the target personas are and what their behavior patterns are

---

## Chunk 1653

when they use the site: Are they infrequent or one-time users, or are they repeat users
who will return weekly or daily to view content?
The frequency with which content is updated on a site influences this behavior in some
respects: Informational sites with real-time information naturally will attract repeat
users more than a site updated once a month. Infrequently updated sites may be used

---

## Chunk 1654

more for occasional reference (assuming that the information is not too topical) rather
than for heavy repeat use and thus should be given more of a transient stance than a
sovereign one. What‚Äôs more, the site can configure itself into a more sovereign posture
by paying attention to how often a particular user visits.
CH 9. Platform and Posture 219

---

## Chunk 1655

--- Page 250 ---
sovereign attributes
Detailed information display is best accomplished by assuming a sovereign stance. By
assuming full-screen use, designers can take advantage of all the space available to
clearly present the information as well as navigational tools and wayfinding cues to keep
users oriented.

---

## Chunk 1656

The only fly in the ointment of sovereign stance for the web is choosing which full-screen
resolution is appropriate. (To a lesser degree, this is an issue for desktop applications,
although it is easier for creators of desktop software to dictate the appropriate display.)
Web designers need to decide early on what resolution they will optimize the screen

---

## Chunk 1657

designs for. You can use a ‚Äúresponsive‚Äù approach to flexibly display content in a variety of
browser window sizes, with interfaces that can even scale smoothly between the many
variants of mobile and desktop screen size. However, your designs should be optimized
for the most common display sizes used by your primary (and sometimes secondary)

---

## Chunk 1658

persona. Quantitative research is helpful in determining this: Among people similar to
your personas, how many are still using 800 √ó 600-pixel displays?
Transient attributes
The less frequently your primary personas access the site, the more transient a stance
the site needs to take. In an informational site, this manifests itself in terms of ease and
clarity of navigation and orientation.

---

## Chunk 1659

Because users might bookmark sites that they use infrequently for reference, you should
make it possible for them to bookmark any page of information so that they can reliably
return to it later.
Users likely will visit sites that are updated weekly to monthly only intermittently, so
navigation on such sites must be particularly clear. It‚Äôs beneficial if these sites can retain

---

## Chunk 1660

information about past user actions via cookies or server-side methods and present
information that is organized based on what interested the user previously. This can
help less-frequent users find what they need with minimal navigation. (This assumes
that the user is likely to return to the same content on each visit to the site.)

---

## Chunk 1661

Mobile web access may also point toward a transient posture. Mobile users are likely
multitasking and have limited time and cognitive resources to get the information they
seek. Mobile versions of your site need to streamline navigation and eliminate verbiage,
allowing users to rapidly find what they are looking for. Responsive techniques allow a

---

## Chunk 1662

website to be rendered for desktop or handheld screens, but you must take great care
with the navigation and information flow.
220 Part II: Making Well-Behaved Products

---

## Chunk 1663

--- Page 251 ---
Transactional website posture
More and more websites go beyond simple clicking and searching to offer transactional
functionality that allows users to accomplish something beyond acquiring information.
Classic examples of transactional websites are online storefronts and financial services
sites, as shown in Figure 9-6.

---

## Chunk 1664

Figure 9-6: Amazon is the classic example of a transactional e-commerce website. It was one of the
first, and most successful, of its kind.
These typically are structured in a hierarchical page-based manner, similar to an infor-
mational website, but in addition to informational content, the pages contain functional

---

## Chunk 1665

elements with complex behaviors. In the case of the online store, these functional ele-
ments include the shopping cart, the checkout features, and the ability to save a user
profile. Some shopping sites have more sophisticated and interactive tools as well, such
as ‚Äúconfigurators,‚Äù which allow users to customize or choose options related to their
purchases.

---

## Chunk 1666

Transactional sites must, like informational sites, strike a balance between sovereign
and transient stances. In fact, many transactional sites have a significant informational
aspect. For example, online shoppers like to research and compare products or invest-
ments. During these activities, users are likely to devote significant attention to a sin-

---

## Chunk 1667

gle site. But in some cases, such as comparison shopping, they are also likely to bounce
among several sites. For these types of sites, navigational clarity is very important, as are
access to supporting information and efficient transactions.
CH 9. Platform and Posture 221

---

## Chunk 1668

--- Page 252 ---
Search engines like Google search and Bing are a special kind of transactional site
designed to provide navigation to other websites, as well as access to aggregated news
and information from a variety of sources. Performing a search and navigating to result-
ing sites is a transient activity, but the information aggregation aspects of a portal like

---

## Chunk 1669

Yahoo! sometimes require a more sovereign stance.
The transient aspects of users‚Äô experiences with transactional sites make it especially
important that users not be forced to navigate more than necessary. It may be tempting
to break information and functions into several pages to reduce load time and visual
complexity (both of which are good objectives). But also consider the potential for con-

---

## Chunk 1670

fusion and click fatigue on the part of your audience. Jared Spool‚Äôs usability firm, User
Interface Engineering, conducted a landmark usability study in 2001 of user perception
of page load times for e-commerce sites. The results confirmed that user perception of
load time is more closely correlated to whether the user can achieve his or her goals than
to actual page load times.1

---

## Chunk 1671

Designing transactional websites requires attention to information architecture for
content and page organization and attention to interaction design for the creation of
appropriate behaviors for the more functional elements. Visual design must serve both
of these ends. It also must effectively communicate key brand attributes. This is often

---

## Chunk 1672

particularly important considering the commercial nature of most transactional sites.
web application posture
Web applications are heavily interactive and exhibit complex behaviors in much the
same way that robust desktop applications do. While some web applications maintain a
page-based navigation model, these pages are more analogous to views than they are to

---

## Chunk 1673

web documents. A few of these applications are still bound by the archaic server query/
response model, which requires users to manually ‚Äúsubmit‚Äù each state change. However,
technology now supports robust asynchronous communication with the server and
local data caching. This allows an application delivered through a browser to behave in
much the same way as a networked desktop application.

---

## Chunk 1674

Here are some examples of web applications:
‚Ä¢ Enterprise software, ranging from old-school SAP interfaces duplicated in a browser to
contemporary collaborative tools such as Salesforce.com and 37signals‚Äô Basecamp
‚Ä¢ Personal publishing and sharing tools, including blogging software such as WordPress,
photo-sharing software such as Flickr, and, cloud storage such as Dropbox

---

## Chunk 1675

‚Ä¢ Productivity tools such as Zoho Docs and the Google Docs suite
‚Ä¢ Social software, such as Facebook and Google+
‚Ä¢ Web-based streaming media apps such as Hulu, Pandora, and Rdio
222 Part II: Making Well-Behaved Products

---

## Chunk 1676

--- Page 253 ---
Web applications like these are presented to users very much like desktop applications
that happen to run inside a browser window. There‚Äôs little penalty for this, as long as
the interactions are carefully designed to reflect the technology constraints (since even
rich web interactions still don‚Äôt always match the capabilities of desktop apps). These

---

## Chunk 1677

applications can act as replacements for sovereign desktop apps, but they also can be
employed for infrequently used functionality for which the user may not want to go to
the trouble of installing a dedicated executable.
It can be challenging to design and deliver sophisticated interactions that work across a
number of different browsers and browser versions. Nonetheless, the web platform is an

---

## Chunk 1678

excellent means of delivering tools that enable and facilitate collaboration. In addition,
it can be of significant value to allow people to effortlessly access the same data and
functionality from the cloud, one of the core strengths of web applications.
sovereign web applications
Web applications, much like desktop applications, can have sovereign or transient pos-

---

## Chunk 1679

ture. But because we use the term to refer to products with complex and sophisticated
functionality, by definition they tend toward sovereign posture.
Sovereign web applications strive to deliver information and functionality in a manner
that best supports more-complex human activities. Often this requires a rich and inter-

---

## Chunk 1680

active user interface. A good example of such a web application is Proto.io, shown in Fig-
ure 9-7. This online interactive prototyping service offers tasks such as drag-and-drop
assembly of prototypes using a library of interactive objects and behavior specification
tools, in-place editing for text labels, and other direct manipulation tools. Other exam-

---

## Chunk 1681

ples of sovereign web applications include enterprise software and engineering tools,
such as Jira, delivered through a browser.
Unlike page-oriented informational and transactional websites, the design of sover-
eign web applications is best approached in the same manner as desktop applications.
Designers also need a clear understanding of the medium‚Äôs technical limitations and

---

## Chunk 1682

what the development organization can reasonably accomplish on time and within bud-
get. Like sovereign desktop applications, most sovereign web applications should be full-
screen applications, densely populated with controls and data objects. They also should
make use of specialized panes or other screen regions to group related functions and

---

## Chunk 1683

objects. Users should have the feeling that they are in an environment, not that they are
navigating from page to page or place to place. Redrawing and re-rendering information
should be minimized (as opposed to the behavior on websites, where almost any action
requires a full redraw).
CH 9. Platform and Posture 223

---

## Chunk 1684

--- Page 254 ---
Figure 9-7: Proto.io‚Äôs web-based interactive prototyping environment is as rich and refined as many
desktop authoring environments, featuring drag-and-drop assembly and direct manipulation of all
interactive objects.
Treating sovereign web applications as desktop applications rather than as collec-

---

## Chunk 1685

tions of web pages has a benefit. It allows designers to break out of the constraints of
page-oriented models of browser interaction to address the complex behaviors that
these client-server applications require. Websites are effective places to get information
you need, just as elevators are effective places to get to a particular floor in a building.

---

## Chunk 1686

But you don‚Äôt try to do actual work in elevators. Similarly, users are not served by being
forced to attempt to do real, interaction-rich transactional work using page-based web-
sites accessed through a browser.
Transient web applications
Delivering enterprise functionality through a browser-based user interface has one par-

---

## Chunk 1687

ticular advantage. If done correctly, it can give users better access to occasionally used
information and functionality without requiring them to install every tool they may
need on their computers. Whether it is a routine task that is performed only once a year
to file taxes or the occasional generation of an ad hoc report, transient web applications
aim to accomplish just this.

---

## Chunk 1688

When designing transient web applications, as with all transient applications, it is critical
to provide clear orientation and navigation. Also keep in mind that one user‚Äôs transient
application may be another user‚Äôs sovereign application. Think hard about how compat-
ible the two users‚Äô needs are. An enterprise web application often serves a wide range of

---

## Chunk 1689

personas and requires multiple user interfaces accessing the same set of information.
224 Part II: Making Well-Behaved Products

---

## Chunk 1690

--- Page 255 ---
Postures for mobile Devices
Since the publication of the third edition of About Face, a sea change in the world of
personal computing has occurred. New and exceptionally powerful mobile devices with
high-resolution displays and capacitive multi-touch input technology have become the
mainstream platform of choice, converging functionality and integrating into people‚Äôs

---

## Chunk 1691

lives like no interactive devices before them. Constraints of form factor, new and ges-
tural forms of input, and dynamic, on-the-go use contexts all provide unique challenges
for designers and unique considerations for application posture.
smartphone and handheld posture
Handheld devices present special challenges for interaction designers. Because they are

---

## Chunk 1692

designed specifically for mobile use, these devices must be small, lightweight, econom-
ical in power consumption, ruggedly built, and easy to hold and manipulate in busy,
distracting situations. Especially for handhelds, close collaboration among interaction
designers, industrial designers, developers, and mechanical engineers is a real necessity.

---

## Chunk 1693

Of particular concern are size and clarity of display, ease of input and control, and sen-
sitivity to context.
Functionally and posturally speaking, handheld devices have gone through a steep evo-
lutionary curve in the past decade. Prior to the iPhone, handheld devices were char-
acterized by small, low-resolution screens with input and navigational mechanisms

---

## Chunk 1694

that can be categorized as awkward at best. Even the best in class of these devices,
the Palm Treo (the direct descendant of the groundbreaking Palm Pilot), suffered from
a small, low-resolution, and rudimentary (by current standards) touchscreen. It also
only moderately successfully integrated hardware navigation and touch input controls.

---

## Chunk 1695

Such devices also had rudimentary and cumbersome ecosystems for updating or add-
ing applications to the device. This tended to result in their use being limited primarily
to their default app suite.
However, that all changed with the introduction of the iPhone and Android smartphones,
which together heralded the dawn of a new era of standalone on-the-go computing.
satellite posture

---

## Chunk 1696

In the early days of PDAs, media players, and phone-enabled communicators, handheld
devices were best designed as satellites of desktop computer systems. Palm and early
Windows Mobile devices both succeeded best as portable extensions of the desktop
geared primarily toward accessing and viewing information and providing only light-

---

## Chunk 1697

weight input and editing features. These devices were optimized for viewing (or play-
ing) data loaded from desktop systems, and they included a means of syncing handheld
CH 9. Platform and Posture 225

---

## Chunk 1698

--- Page 256 ---
data with desktop data. As cloud storage and services have become mainstream, these
devices have replaced wired desktop syncing with wireless cloud syncing.
Satellite posture, then, emphasizes retrieving and viewing data. It uses as much of the
limited screen real estate available on the device as possible to faithfully display content

---

## Chunk 1699

authored on or loaded from the desktop. Controls are limited to navigating and viewing
data or documents. Some devices with satellite posture may have an onscreen keyboard,
but these usually are small and are designed for brief and infrequent use.
Satellite posture is less common these days than convergence handheld devices. Since

---

## Chunk 1700

the advent of the iPhone and its competitors, these have become tiny, full-fledged com-
puters in their own right. However, satellite posture is still the model for dedicated
content-oriented devices such as digital cameras, highly portable dedicated e-readers
like the e-ink Kindles (see Figure 9-8), and what remains of the dedicated digital audio

---

## Chunk 1701

and video player market, such as the iPod Nano. Applications on convergence devices
that are focused on content navigation and/or playback may adopt what is essentially a
satellite posture.
Figure 9-8: Amazon‚Äôs Kindle is a good example of a
satellite posture device. It is used almost exclusively to
view content (e-books) that has been purchased and

---

## Chunk 1702

synced from the cloud. Previous- generation satellite
posture devices relied on syncing to a desktop computer
to retrieve their data. The Kindle was one of the first to
provide direct syncing with a cloud service.
226 Part II: Making Well-Behaved Products

---

## Chunk 1703

--- Page 257 ---
One new development for satellite devices is the advent of wearable computing. Wrist-
watch and eyeglass format devices typically pair with a standalone convergence device
via Bluetooth or other wireless connections, and provide notifications and other contex-
tual information via small touchscreens or heads-up displays and voice commands. These

---

## Chunk 1704

devices take a highly transient posture, providing just enough information and possible
actions to be relevant in the moment. The Samsung Gear smart watch and Google Glass
are excellent examples of this new and rapidly evolving breed of satellite posture devices
(see Figure 9-9).
Figure 9-9: The new frontier of wearable computing is represented by

---

## Chunk 1705

a new generation of satellite devices, such as the Samsung Gear smart
watch and Google Glass. These devices provide succinct information
and the minimum set of options necessary to support activity in a
completely on-the-go context.
standalone posture
Beyond its innovations in gestural computing, the iPhone almost singlehandedly trans-

---

## Chunk 1706

formed cellular smartphones into handheld general-purpose computing devices. The
iPhone‚Äôs large, ultra-high-resolution screen with multi-touch input resulted in a new
posture for handheld apps, which we‚Äôll call standalone posture.
Standalone posture applications share some attributes with both sovereign and tran-

---

## Chunk 1707

sient applications. Like sovereign applications, they are full-screen and sport functions
accessible via menus (often through a left or right swipe gesture) and toolbars placed
along the top or bottom of the screen. Also like sovereign applications, standalone
CH 9. Platform and Posture 227

---

## Chunk 1708

--- Page 258 ---
applications can include transient, modal, dialog-like screens or pop-ups, most of which
should be used to configure settings or confirm destructive actions.
Like transient applications, standalone handheld applications make relatively little use of
comparatively larger controls and text, due to limitations with legibility and finger-based

---

## Chunk 1709

input on multi-touch screens. Standalone apps for handhelds, like transient apps, need to
be self-explanatory. The on-the-go nature of handheld app usage means that most people
will use a wide variety of apps for relatively brief sessions over any given period of time.
People may bounce between e-mail, instant messaging, social media, weather, news,

---

## Chunk 1710

phone, shopping, and media playback apps over only a few hours‚Äîor even minutes.
The telephone apps in modern smartphones also behave transiently. Users place their
call as quickly as possible and then abandon the interface in favor of the conversation
(and, on phone carriers that support it, other apps while the call takes place). The best

---

## Chunk 1711

interface for a phone is arguably nonvisual, especially when used in an automobile. Voice
activation such as that offered by Apple‚Äôs Siri service or Google‚Äôs Android OS is perfect for
placing a call; the more transient the phone‚Äôs interface, the better.
Tablet device posture
After Apple transformed the smartphone from clumsy satellite device to standalone

---

## Chunk 1712

handheld computer/convergence media device, it successfully applied the same multi-
touch and high-resolution display technology to the larger page-sized tablet form factor.
The larger-format (more than 9 inches) high-resolution tablets such as the iPad have more
than enough real estate to support true sovereign-posture apps, though the limitations

---

## Chunk 1713

of hand inputs have their own real-estate challenges. Keynote for iPad is able to support
desktop-style presentation authoring on a touchscreen tablet, as shown in Figure 9-10.
Seven-inch tablets, especially those with a 16-by-9 aspect ratio, such as the Google Nexus 7
and the Amazon Kindle Fire HD, live in an awkward dimensional space between smaller

---

## Chunk 1714

handheld form factors and larger tablets. List-oriented views are uncomfortably wide,
while grid views with more than two rows or columns (depending on orientation) seem
cramped. Designers should be sure not to treat 7-inch tablets like oversized phones when
designing their layout.
Specific platform issues aside, tablets for the most part enforce the sovereign quality of

---

## Chunk 1715

their apps; the popular tablet operating systems permit only full-screen applications.
These sovereign apps often have scrollable or zoomable main content views, with top,
bottom, or side toolbars or palettes. They are similar to their desktop brethren in con-
cept but are more sparse and simplified in execution, as shown in Figure 9-11.
228 Part II: Making Well-Behaved Products

---

## Chunk 1716

--- Page 259 ---
Figure 9-10: Keynote for iPad is a sovereign-posture, iOS version of Apple‚Äôs presentation software
for the Mac. It has functions equivalent to its desktop cousin.
Figure 9-11: Adobe Sketchbook Pro is a drawing and painting app on the
iPad. It supports a zoomable main drawing area, along with a top toolbar,
and hideable tool palettes on the left and right.

---

## Chunk 1717

CH 9. Platform and Posture 229

---

## Chunk 1718

--- Page 260 ---
Android tablets support the concept of widgets‚Äîtransient-posture micro-apps that access
the functionality of an installed sovereign app without bringing it into the foreground.
Users may position these widgets on a special home screen for easy access to things like
weather, stock reports, or music playback controls. Windows Surface, shown in Figure 9-12,

---

## Chunk 1719

has a similar concept called tiles. They can contain active content from an installed sov-
ereign app, but not controls, providing similar transient-posture access to content only.
Figure 9-12: Windows Surface supports tiles containing dynamic content.
Postures for other Platforms
Unlike software running on a computer, which has the luxury of being fairly immersive

---

## Chunk 1720

if need be, interaction design for mobile and public contexts requires special attention
to creating an experience that coexists with the noise and activity of the real world hap-
pening all around the product. Kiosks and other embedded systems, such as TVs, house-
hold appliances, automobile dashboards, cameras, ATMs, and laboratory equipment, are

---

## Chunk 1721

unique platforms with their own opportunities and limitations. Without careful con-
sideration, adding digital smarts to devices and appliances runs the risk that they will
behave more like desktop computers than like the products your users expect and desire.
kiosk posture
Kiosks are interactive systems at a specific location available for use by the public. Kiosks

---

## Chunk 1722

exist for wayfinding in malls, purchasing tickets on public transportation, checking-in
at airports, self-checkout in grocery stores, and even ordering meals at some take-out
restaurants. The large, full-screen nature of kiosks would appear to bias them toward
sovereign posture, but there are several reasons why the situation is not quite that sim-

---

## Chunk 1723

ple. First, users of kiosks often are first-time users (with some obvious exceptions, such
as ATM users and users of ticket machines for public transport) and usually are not daily
users. Second, most people do not spend a significant amount of time in front of a kiosk:
230 Part II: Making Well-Behaved Products

---

## Chunk 1724

--- Page 261 ---
They perform a simple transaction or search, get the information they need, and move on.
Third, most kiosks employ either touchscreens or bezel buttons to the side of the display,
and neither of these input mechanisms supports the high data density you would expect
of a sovereign application. Fourth, kiosk users rarely are comfortably seated in front of

---

## Chunk 1725

an optimally placed monitor. Instead, they stand in a public place with bright light and
many distractions. These user behaviors and constraints should bias most kiosks toward
transient posture, with simple navigation; large, colorful, engaging interfaces with clear
affordances for controls; and clear mappings between hardware controls (if any) and

---

## Chunk 1726

their corresponding software functions. As in the design of handhelds, floating windows
and dialogs should be avoided; any such information or behavior is best integrated into
a single, full screen (as in sovereign-posture applications). Kiosks thus tread an interest-
ing middle ground between the two most common desktop postures.

---

## Chunk 1727

Because transactional kiosks often guide users through a process or set of information
screen by screen, contextual orientation and navigation are more important than global
navigation. Rather than helping users understand where they are in the system, help them
understand where they are in their process. It‚Äôs also important for transactional kiosks to

---

## Chunk 1728

provide escape hatches that allow users to cancel transactions and start over at any point.
Kiosks should be optimized for first-time use.
Educational and entertainment kiosks vary somewhat from the strict transient posture
required of more transactional kiosks. In this case, exploring the kiosk environment is
more important than completing single transactions or searches. In this case, more

---

## Chunk 1729

data density and more complex interactions and visual transitions sometimes can be
introduced to positive effect. But the limitations of the input mechanisms need to be
respected, lest the user lose the ability to successfully navigate the interface.
‚ÄúTen-foot‚Äù interface posture
Ten-foot, i.e. television and console gaming, interfaces offer an interesting posture vari-

---

## Chunk 1730

ant. In some ways, they resemble the satellite posture of content browsing mobile touch-
screen applications. For instance, as in multi-touch mobile UIs, navigation typically is
both horizontal and vertical, with content options organized into grids, and with filter-
ing and navigation options frequently available at the top or left. The primary difference

---

## Chunk 1731

is, of course, that the touchscreen‚Äôs direct swipe and tap gestures are replaced with the
five-way D-pad interaction of an infrared or Bluetooth remote control.
In one respect this is a big difference: It introduces the need for a current-focus item.
Current focus needs to be obvious in a ten-foot UI so that the user always knows where
he is and where he can go next.

---

## Chunk 1732

CH 9. Platform and Posture 231

---

## Chunk 1733

--- Page 262 ---
The PlayStation 4 is a good example of how 10-foot UIs can use a layout similar to tablet
UIs. Large buttons and simple left-right or up-down navigation, with at most 2 columns
is the norm (see Figure 9-13). Seeing this screen out of context, you might believe it was
from a multi-touch app.

---

## Chunk 1734

Figure 9-13: The PlayStation 4 UI bears more than a passing resemblance to a touchscreen tablet
app, and for good reason. Despite the differences in input mechanism, navigation is rather similar
between 10-foot UIs and many content-browsing multi-touch tablet apps.
Automotive interface posture
Automotive interfaces resemble kiosks in terms of posture. Typically they are touch-

---

## Chunk 1735

screens, but frequently they include hardware bezel buttons that encircle the screen
area and thus are almost predisposed to transient interactions. Unlike kiosks, users are
seated, but similar to kiosks, users typically attempt one relatively simple transaction
at a time if they are also driving. Automotive interfaces, of course, have the additional

---

## Chunk 1736

constraint that they must be of minimal distraction to the driver, since keeping control
of the vehicle and avoiding harm are always the primary tasks. The transaction with the
system is secondary at best. At the same time, the same system should be available for
focused use by a passenger if one is present.
For entertainment, HVAC control, and settings changes, automotive interfaces are

---

## Chunk 1737

transient in the way we would expect: large controls and simple screens. But navigation
interfaces may take more of a sovereign stance. The interface will persist for the duration
of the trip, which could be hours or even days. (Most navigation systems remember their
state even if the car has been turned off to get gas or parked overnight at a hotel along

---

## Chunk 1738

the route.) Also, relatively complex information must be displayed.
232 Part II: Making Well-Behaved Products

---

## Chunk 1739

--- Page 263 ---
Automotive navigation interfaces focus on rich, dynamic content. Map and current route
information take center stage. A host of ancillary information is located in the periphery
of the screen, such as the road‚Äôs name, the time, the arrival time, the distance to the des-
tination, the distance to the next turn, and the direction of the next turn. Although this

---

## Chunk 1740

kind of information hierarchy is more typical of a sovereign-posture interface, it must in
the case of an automotive system be designed more like a transient UI: clear, simple, and
readable at a glance.
An impressive and beautiful‚Äîbut perhaps a bit worrisome‚Äîexception to the typical
automotive interface is the Tesla Model S infotainment interface, shown in Figure 9-14.

---

## Chunk 1741

It sports a single 17-inch multi-touch screen with adjustable panes for simultaneous nav-
igation, entertainment, and HVAC controls. The interface resembles a tablet‚Äôs interactive
posture much more than it does a kiosk‚Äôs. Perhaps this is the wave of the future. If so,
we hope new cars will also include active accident avoidance systems to counteract any

---

## Chunk 1742

driver distraction that might occur as a result of such large and information-rich inter-
active displays on the dashboard.
Figure 9-14: The Tesla Model S infotainment interface is impressive in both its size and level of
interactivity. Its 17-inch multi-touch screen allows navigation, entertainment, and HVAC functions to

---

## Chunk 1743

be displayed simultaneously. This system bears more of a postural resemblance to a tablet than to a
kiosk, as is more typical for automotive info systems.
CH 9. Platform and Posture 233

---

## Chunk 1744

--- Page 264 ---
smart appliance posture
Most appliances have simple displays and rely heavily on hardware buttons and dials to
manipulate the appliance‚Äôs state. In some cases, however, ‚Äúsmart‚Äù appliances (notably,
washers and dryers) most often sport color LCD touchscreens allowing rich output and
direct input, as shown in Figure 9-15.

---

## Chunk 1745

Figure 9-15: This Samsung washing machine has a well-designed color touchscreen display, with a
clear and simple navigational structure.
Appliance interfaces usually are transient-posture interfaces. Users of these interfaces
seldom are technology-savvy and therefore should be presented with the most simple
and straightforward interface possible. These users are also accustomed to hardware

---

## Chunk 1746

controls. Unless an unprecedented ease of use can be achieved with a touchscreen, dials
and buttons (with appropriate tactile, audible, and visual feedback via a view-only dis-
play or even hardware lamps) may be a better choice. Many appliance makers make the
mistake of putting dozens of new‚Äîand unwanted‚Äîfeatures into their new, digital mod-

---

## Chunk 1747

els. Instead of making things easier, that ‚Äúsimple‚Äù LCD touchscreen becomes a confusing
array of unworkable controls.
Another reason for a transient stance in appliance interfaces is that users of appliances
need to accomplish something very specific. Like users of transactional kiosks, they are
uninterested in exploring the interface or getting additional information. They simply

---

## Chunk 1748

want to put the washer on normal cycle or cook their food.
234 Part II: Making Well-Behaved Products

---

## Chunk 1749

--- Page 265 ---
One aspect of appliance design demands a different posture. Status information indi-
cating what cycle the washer is on or what the DVR is set to record should be presented
as a daemonic icon, providing minimal status quietly in a corner. If more than minimal
status is required, an auxiliary posture for this information becomes appropriate.
give Your Apps good Posture

---

## Chunk 1750

In conclusion, it‚Äôs important to remember that the top-level patterns of posture and plat-
form should be among the first decisions to be made in the design of an interactive prod-
uct. In our experience, many poorly designed products suffer from the failure to make
these decisions consciously at any point. Rather than diving directly into the details,

---

## Chunk 1751

take a step back and consider what technical platform and behavioral posture will best
meet the needs of your users and business. Also consider the possible implications of
these decisions on detailed interactions.
Notes
1. Perfetti and Landesman, 2001
CH 9. Platform and Posture 235

---

## Chunk 1752

--- Page 267 ---
Ch 10
oPTImIzIng For
InTErmEDIATEs
Most users of technology know all too well that buying a new digital appliance or down-
loading a new software app often means several days of frustration while learning a new
interface. On the other hand, many experienced users of digital products may find them-

---

## Chunk 1753

selves frustrated because that product treats them like beginners. It seems impossible
to find the right balance between catering to the needs of the first-timer and the needs
of the expert.
One of the eternal conundrums of digital product development is how to address the
needs of both beginning users and expert users with a single, coherent interface.

---

## Chunk 1754

Left to their own devices, developers typically create interactions suitable for experts.
Developers are by necessity experts on the features they build, and they tend to consider
the presentation of each function in the interface as having equal weight. (From a coding
and debugging standpoint, they are all of approximately equal weight, because they all
need to operate bug-free.)

---

## Chunk 1755

Marketing departments, on the other hand, typically demand interactions suitable only
for beginners. They spend much of their time demonstrating and selling their product to
people unfamiliar with it, so over time they get a biased view of user behavior and feature
priority. They demand that the training wheels get bolted on. Both of these approaches

---

## Chunk 1756

lead to a frustrating experience for the majority of users, who are neither beginners nor
experts.

---

## Chunk 1757

--- Page 268 ---
Some developers and designers try to have it both ways, choosing to segregate these
two experiences by creating wizards for beginners and burying critical functionality for
experts deep in nested menus or multilayered dialog boxes. Many nonbeginners don‚Äôt
want to deal with the extra time and effort associated with moving step by step through

---

## Chunk 1758

a wizard each time they access a feature. But the leap from there to knowing what eso-
teric command to select from a set of lengthy menus is like jumping off a cliff into a
shark-infested moat of implementation-model design.
Don‚Äôt weld on training wheels.
What, then, is the answer? The solution to this predicament lies in a different under-
standing of how users master new concepts and tasks.

---

## Chunk 1759

Perpetual Intermediates
Most users, for most of the time they are using a product, are neither beginners nor
experts; instead, they are intermediates.
The experience level of people performing an activity tends, like most population dis-
tributions, to follow the classic statistical bell curve (see Figure 10-1). For almost any

---

## Chunk 1760

activity requiring knowledge or skill, if we graph the number of people against skill level,
a relatively small number of beginners are on the left side, a few experts are on the right,
and the majority‚Äîintermediate users‚Äîare in the center.
Statistics don‚Äôt tell the whole story, however. The bell curve is a snapshot of many users

---

## Chunk 1761

across time. Although most intermediates tend to stay in that category, the beginners do
not remain beginners for very long. The difficulty of maintaining a high level of expertise
also means that experts come and go rapidly, but beginners change even more rapidly.
Both beginners and experts tend over time to gravitate toward intermediacy.

---

## Chunk 1762

Although everybody spends some minimum time as a beginner, nobody remains in that
state for long. People don‚Äôt like to be incompetent, and beginners, by definition, are
learning to be competent. Conversely, learning and improving are rewarding, so begin-
ners become intermediates very quickly‚Äîor they drop out. All skiers, for example, spend

---

## Chunk 1763

time as beginners, but those who find they don‚Äôt rapidly progress beyond more-falling-
than-skiing quickly abandon the sport. The rest soon move off the bunny slopes onto the
regular runs. Only a few ever make it onto the double black diamond runs for experts.
238 Part II: Making Well-Behaved Products

---

## Chunk 1764

--- Page 269 ---
Beginners Intermediates Experts
What does the I forgot how to import. How do I automate
application do? this?
How do I find facility X?
What doesn‚Äôt it do? What are the shortcuts
Remind me what this does. for this command?
How do I print?
What was the command for X? Can this be changed?
Where do I start?
Oops, can I undo what I just did? How can I customize
this?

---

## Chunk 1765

What new features are in this upgrade?
Is there a keyboard
equivalent?
What is dangerous?
Figure 10-1: The demands that users place on digital products vary considerably with their experience.
Nobody wants to remain a beginner.
Most occupants of the beginner end of the curve either migrate to the center bulge of

---

## Chunk 1766

intermediates or drop off the graph and find some product or activity in which they can
migrate into intermediacy. Most users thus remain in a perpetual state of adequacy,
striving for fluency, with their skills ebbing and flowing like the tides, depending on how
frequently they use the product. Larry Constantine first identified the importance of

---

## Chunk 1767

designing for intermediates, and in his book Software for Use (Addison-Wesley, 1999),
he calls such users improving intermediates. We prefer the term perpetual intermediates,
because although beginners quickly improve to become intermediates, they seldom go
on to become experts.
Optimize for intermediates.
Most users in this middle state would like to learn more about the product but usually

---

## Chunk 1768

don‚Äôt have the time. Occasionally, the opportunity or need to do so arises. Sometimes
these intermediates use the product extensively for weeks at a time to complete a big
project. During this time, they learn new things about the product. Their knowledge
grows beyond its previous boundaries.
CH 10. Optimizing for Intermediates 239

---

## Chunk 1769

--- Page 270 ---
Other times, however, they do not use the product for months at a time and forget signif-
icant portions of what they knew. When they return to the product, they are not begin-
ners, but they need reminders to jog their memory.
Given that most users are intermediates, how do we design products that meet their
needs but don‚Äôt leave beginners or advanced users out in the cold?

---

## Chunk 1770

Inflecting the Interface
Many popular ski resorts have a gentle slope for learning and a few expert runs to really
challenge the serious skier. But if the resort wants to stay in business, it will cater to the
perpetual intermediate skier without scaring off the beginner or insulting the expert.
The beginner must find it easy to graduate into the world of intermediacy, and the

---

## Chunk 1771

expert must not find his vertical runs obstructed by aids for cautious or conservative
intermediates.
A well-balanced user interface should take the same approach. It doesn‚Äôt cater to
beginners or to experts, but rather devotes the bulk of its efforts to satisfying perpet-
ual intermediates. At the same time, it provides mechanisms so that both of its smaller

---

## Chunk 1772

constituencies can be effective.We can accomplish the same in our digital products via
a process of inflection.
Inflecting an interface means organizing it to minimize typical navigation within the
interface. In practice, this means placing the most frequently desired functions and
controls in the most immediate and convenient locations, such as toolbars or palettes.

---

## Chunk 1773

Less frequently used functions are pushed deeper into the interface, where users won‚Äôt
stumble over them. Advanced features that are less often used but have a big payoff for
users can be safely tucked away in menus, dialog boxes, or drawers, where they can be
accessed only when needed.
Inflect the interface for typical navigation.

---

## Chunk 1774

Almost any point-and-shoot digital camera is a good example of inflection: The most
commonly used function‚Äîtaking a picture‚Äîis provided by a prominent hardware but-
ton that is easily accessible at a moment‚Äôs notice. Less commonly used functions, such as
adjusting the exposure, require interaction with menus or touchscreen controls.
240 Part II: Making Well-Behaved Products

---

## Chunk 1775

--- Page 271 ---
Commensurate effort
The most important principle in the proper inflection of interfaces is commensurate
effort. Although it applies to all users, it is particularly pertinent to perpetual interme-
diates. This principle simply states that people will willingly work harder for something
that is more valuable. That value, by the way, is in the eye of the user. It has nothing to do

---

## Chunk 1776

with how technically difficult a feature is to implement, but rather is entirely related to
the users‚Äô goals.
If the user really wants something, he will work harder to get it. If he needs to format beau-
tiful documents with multiple columns, several fonts, and fancy headings to impress his
boss, he will be highly motivated to explore the application‚Äôs recesses to learn how. That

---

## Chunk 1777

user will put commensurate effort into the project.
But if another user wants only to print plain documents in a single column and one font,
no amount of inducement will get him to learn those more advanced formatting fea-
tures. Providing him with those options is unwelcome noise.
Users make commensurate effort if the rewards justify it.

---

## Chunk 1778

If you add features to your application that are complex to manage, users will be willing
to tolerate that complexity only if the rewards are worth it. This is why a product‚Äôs user
interface can‚Äôt be complex for achieving simple results, but it can be complex for achiev-
ing complex results (as long as such results aren‚Äôt needed very often).
Progressive disclosure

---

## Chunk 1779

A particularly useful design pattern that exemplifies commensurate effort is progressive
disclosure. In progressive disclosure, advanced or less frequently used controls are hid-
den in an expanding pane, which offers a small expand/hide toggle control to give the
user access. This type of design is a boon to expert users, because the toggle is usually

---

## Chunk 1780

‚Äústicky‚Äù; that is, once left open, it stays that way. It also gives intermediates an easy win-
dow into more advanced features but allows them to be stowed away neatly when not
in use. Many of Adobe‚Äôs Creative Suite tools make good use of progressive disclosure in
their tool palettes, as shown in Figure 10-2.
CH 10. Optimizing for Intermediates 241

---

## Chunk 1781

--- Page 272 ---
Figure 10-2: Adobe Creative Suite applications all make similar
use of progressive disclosure to tame the complexity of their tool
palettes for intermediates. Experts can expand them and take
advantage of the sticky expansion state, which is remembered
across sessions.
organizing for inflection

---

## Chunk 1782

In general, controls and displays should be organized in an interface according to three
attributes: frequency of use, degree of dislocation, and degree of risk exposure.
‚Ä¢ Frequency of use means how often the controls, functions, objects, or displays are
used in typical daily patterns of use. Items and tools that are most frequently used

---

## Chunk 1783

(many times a day) should be immediately in reach. Less frequently used items, used
perhaps once or twice a day, should be no more than a click or two away. Other items
can be two or three clicks away. Rarely used facilities shouldn‚Äôt be removed from the
product if they provide real benefits to your personas, but they should be removed from
the everyday work space.

---

## Chunk 1784

‚Ä¢ Degree of dislocation refers to the amount of sudden change in an interface or in the
document/information being processed by the application caused by the invocation of
a specific function or command. Generally speaking, it‚Äôs a good idea to put these types
of functions deeper into the interface.
242 Part II: Making Well-Behaved Products

---

## Chunk 1785

--- Page 273 ---
‚Ä¢ Degree of risk exposure deals with functions that are irreversible or may have other
dangerous ramifications. Missiles require two humans turning keys simultaneously
on opposite sides of the room to arm them. As with dislocating functions, you want
to make these types of functions more difficult for your users to stumble across. The

---

## Chunk 1786

greater the ramifications, the more care you should take in exposing the function.
As users get more experienced with more complex features, they will search for short-
cuts, and you should provide them. This not only helps intermediates expand their reach
over time, but it‚Äôs also a necessity for expert users.
Designing for Three levels of Experience

---

## Chunk 1787

In designing digital products, our goal should be neither to pander to beginners (since
they don‚Äôt stay beginners for long) nor to rush intermediates into expertise. Our approach
should be threefold:
‚Ä¢ To rapidly and painlessly move beginners into intermediacy
‚Ä¢ To avoid putting obstacles in the way of intermediates who want to become experts

---

## Chunk 1788

‚Ä¢ Most of all, to keep perpetual intermediates happy as they move around the middle of
the skill spectrum
We need to spend more time making our products powerful and easy to use for perpet-
ual intermediate users. We must accommodate beginners and experts too, but not to the
discomfort of the largest segment of users. The remainder of this chapter describes some

---

## Chunk 1789

basic strategies for accomplishing this.
what beginners need
Beginners are undeniably sensitive, and it is easy to demoralize a first-timer, but we
must keep in mind that the state of beginnerhood is never an objective. Nobody wants
to remain a beginner. It is merely a rite of passage everyone must experience. Good soft-
ware shortens that passage without bringing attention to it.

---

## Chunk 1790

As an interaction designer, it‚Äôs best to imagine that users‚Äîespecially beginners‚Äîare
simultaneously very intelligent and very busy. They need some instruction, but not very
much, and the process has to be rapid and targeted. If a ski instructor begins lecturing
on snowpack composition and meteorology, he will lose his students, regardless of their

---

## Chunk 1791

aptitude for skiing. Just because a user needs to learn how to operate a product doesn‚Äôt
mean that he needs or wants to learn how it works inside.
CH 10. Optimizing for Intermediates 243

---

## Chunk 1792

--- Page 274 ---
Imagine users as very intelligent but very busy.
On the other hand, intelligent people always learn better when they understand cause
and effect, so you must help them understand why things work as they do. We use mental
models to bridge the contradiction. If the interface‚Äôs represented model closely follows

---

## Chunk 1793

the user‚Äôs mental model (as discussed in Chapter 1), it will provide the understanding the
user needs without forcing him or her to figure out the implementation model.
Certain kinds of products, especially those used in a transient manner (like most mobile
apps), a distracted manner (Google Glass and other heads-up displays would qualify

---

## Chunk 1794

here), or those used by people with certain disabilities, must be optimized for begin-
ners rather than intermediates. Examples include devices such as ATMs, informational
kiosks designed for public spaces like museums, and consumer medical devices such as
blood glucometers (used by patients with diabetes, who may have visual acuity problems

---

## Chunk 1795

and dexterity issues due to chronic numbness in their fingers).
getting beginners on board
A new user must grasp the product‚Äôs concepts and scope quickly, or he will abandon
it. Thus, the designer‚Äôs first order of business is to ensure that the product adequately
reflects the user‚Äôs mental model of his tasks. He may not recall from use to use exactly

---

## Chunk 1796

which command is needed to act on a particular object, but he will definitely remember
the relationships between objects and actions‚Äîthe important concepts‚Äîif the inter-
face‚Äôs conceptual structure is consistent with his mental model.
Getting beginners to a state of intermediacy requires extra help from the application,

---

## Chunk 1797

but this extra help will get in their way as soon as they become intermediates. This
means that whatever extra help you provide, it must not be fixed into the interface. It
must know how to go away when its services are no longer required.
Standard online help is a poor tool for providing such beginner assistance. We‚Äôll talk

---

## Chunk 1798

more about help in Chapter 16, but its primary utility is as a reference, and beginners
don‚Äôt need reference information; they need overview information, such as a guided tour,
or UI elements designed to help users get accustomed to new functions, but which cease
to be presented after repeated successful use.
A separate guide facility‚Äîdisplayed within a dialog box‚Äîis a fine means for communi-

---

## Chunk 1799

cating overview, scope, and purpose. As the user begins to use the product, a dialog box
can appear that states the product‚Äôs basic goals and tools, naming the main features.
As long as the guide stays focused on beginner issues, like scope and goals, and avoids
244 Part II: Making Well-Behaved Products

---

## Chunk 1800

--- Page 275 ---
perpetual intermediate and expert issues (discussed later), it should be adequate for
assisting beginners.
Beginners also rely heavily on menus to learn and execute commands (see Chapter 18
for a detailed discussion about why this is true). Menus may be slow and clunky, but
they are also thorough and verbose, so they offer reassurance. The dialog boxes that the

---

## Chunk 1801

menu items launch (if they do so at all) should also be tersely explanatory and come with
convenient Cancel buttons.
beginners across platforms
We are often asked if the concept of perpetual intermediates applies to non-desktop
products. Ultimately, we believe the same considerations we apply to desktop software

---

## Chunk 1802

should be used here. A well-designed interface, regardless of platform should help its
users quickly become familiar and comfortable with navigation and functionality.
Something else is worth considering: Users of websites, mobile apps, and devices that
are not a critical path for their workflow‚Äîor are subject to casual consumer use‚Äîmay

---

## Chunk 1803

not be accessed frequently enough by users for them to readily memorize their orga-
nizational constructs. This increases the importance of making such interactions as
transparent and discoverable as possible, as well as the need for temporary assistive UI
elements or guided tours that help reinforce understanding for new users.
what experts need

---

## Chunk 1804

Experts (sometimes called influencers in marketing circles) are also a vital group,
because their opinions have a disproportionate effect on purchasing. Experts of course
listen to other experts, but they also exert an influence on other prospective customers,
setting the tone for product reviews and discussions. This remains true even with the

---

## Chunk 1805

rise of online product ratings, though perhaps less so than before the likes of Amazon
came into existence. Still, in many cases, when a beginner considers your product, he
will trust the expert‚Äôs opinion more than an intermediate‚Äôs. This sometimes results in a
disconnect: When an expert says, ‚ÄúIt‚Äôs not very good,‚Äù she may really mean ‚ÄúIt‚Äôs not very

---

## Chunk 1806

good for experts like me.‚Äù Beginners don‚Äôt realize this, however, and will often take an
expert‚Äôs advice, even though it may not apply to their situational needs.
Experts might occasionally look for esoteric features, and they might make heavy use of
a few of them. However, they will definitely demand faster access to their regular working

---

## Chunk 1807

set of tools, which may be quite large. In other words, experts want shortcuts to everything.
Anyone who uses a digital product for hours a day will very quickly internalize the
nuances of its interface. It isn‚Äôt so much that they want to cram frequently used commands
CH 10. Optimizing for Intermediates 245

---

## Chunk 1808

--- Page 276 ---
into their heads, as much as it is unavoidable. Their frequency of use both justifies and
requires the memorization.
Expert users constantly and aggressively seek to learn more and to see more connections
between their actions and the product‚Äôs behavior and representation. Experts appreci-
ate new, powerful features. Their mastery of the product insulates them from becoming

---

## Chunk 1809

disturbed by the added complexity. Experts also appreciate high information density
relative to intermediate or beginning users.
For some specialized products, it is appropriate to optimize the user experience for
experts. In particular, tools that technically minded people rely on for a significant
portion of their professional responsibilities should be aimed at a high degree of profi-

---

## Chunk 1810

ciency. Development and creative authoring tools generally fall into this category, as do
scientific instrumentation and (nonconsumer) medical devices. We expect the users of
those products to already possess the necessary technical knowledge and to be willing
to invest significant time and effort in mastering the application.
what perpetual intermediates need

---

## Chunk 1811

It‚Äôs amazing to think that the majority of real users‚Äîintermediates‚Äîtypically are
ignored, but more often than not that is still the case. You can see this in many enterprise
applications and digital products. The overall design biases them toward expert users.
At the same time, cumbersome tools such as wizards or the likes of Clippy‚Äîthe infa-

---

## Chunk 1812

mously annoying (‚ÄúWould you like help?‚Äù) ‚Äúsmart‚Äù assistant created by Microsoft for its
Office suite of products in the 1990s‚Äîare grafted onto the product to meet marketing‚Äôs
perception of new users. Experts rarely use them, and beginners soon want to discard
these embarrassing reminders of their ignorance. But the perpetual intermediate major-
ity is perpetually stuck with them.

---

## Chunk 1813

Instead, perpetual intermediates need fast access to the most common tools. They don‚Äôt
need scope and purpose explained to them, because they already know these things.
ToolTips (see Chapter 20) are the perfect perpetual intermediate idiom. ToolTips say
nothing about scope and purpose and meaning; they only state function in the briefest

---

## Chunk 1814

of idioms, consuming the least amount of video space in the process.
Perpetual intermediates know how to use reference materials. They are motivated to dig
deeper and learn, as long as they don‚Äôt have to tackle too much at once. This means that
online help is a perpetual intermediate tool. They use it by way of the index, so that part
of help must be comprehensive.

---

## Chunk 1815

Perpetual intermediates establish the functions that they use with regularity and those
that they use only rarely. The user may experiment with obscure features, but he will
soon identify‚Äîprobably subconsciously‚Äîhis frequently used working set. The user will
246 Part II: Making Well-Behaved Products

---

## Chunk 1816

--- Page 277 ---
demand that the tools in his working set be placed front and center in the user interface,
where they are easy to find and remember.
Perpetual intermediates usually know that advanced features exist, even though they
may not need them or know how to use them. But the knowledge that they are there is

---

## Chunk 1817

reassuring to the perpetual intermediate, convincing him that he made the right choice
investing in this product. The average skier may find it inspirational to know that a scary,
black-diamond, expert run is just beyond those trees, even if she never intends to use it.
It gives her something to aspire to and dream about, and it gives her the sense that she‚Äôs
at a good ski resort.

---

## Chunk 1818

Your product must likely provide for both absolute newbies and the many possible cases
an expert might encounter. But don‚Äôt let this business requirement influence your design
thinking. Yes, you must provide those features for expert users. Yes, you must support
those transient beginners. But in most cases, you need to apply the bulk of your talents,

---

## Chunk 1819

time, and resources to designing the best interaction possible for your most represen-
tative users: the perpetual intermediates. When digital products follow the principle
of commensurate effort, the learning curve doesn‚Äôt go away, but it disappears from the
user‚Äôs mind‚Äîwhich is just as good.
CH 10. Optimizing for Intermediates 247

---

## Chunk 1820

--- Page 279 ---
Ch 11
orChEsTrATIon AnD Flow
If our goal is to make the people who use our products more productive, effective, and
engaging, we must ensure that users remain in the right frame of mind. This chapter
discusses a kind of mental ergonomics. It describes how we can ensure that our products
support user intelligence and effectiveness. It also covers how we can avoid disrupting

---

## Chunk 1821

the state of productive concentration that we want our users to be able to maintain.
Flow and Transparency
When people concentrate wholeheartedly on an activity, they lose awareness of periph-
eral problems and distractions. The state is called flow, a concept first identified by
Mihaly Csikszentmihalyi in Flow: The Psychology of Optimal Experience (Harper, 2008).

---

## Chunk 1822

In Peopleware: Productive Projects and Teams (Dorset, 1999), Tom DeMarco and Timothy
Lister describe flow as a ‚Äúcondition of deep, nearly meditative involvement.‚Äù Flow often
induces a ‚Äúgentle sense of euphoria‚Äù and can make you unaware of the passage of time.
Most significantly, a person in a state of flow can be extremely productive, especially when

---

## Chunk 1823

engaged in constructive activities such as engineering, design, development, or writing. To
state the obvious, then, to make people more productive and happy, it behooves us to design
interactive products to promote and enhance flow. We also should go to great lengths to
avoid any potentially flow-disturbing behavior. If the application consistently rattles a user

---

## Chunk 1824

and disrupts her flow, it becomes difficult for her to maintain that productive state.
In most cases, if the user could achieve his goals magically, without your product, he
would. By the same token, if the user needs the product but could achieve his goals without

---

## Chunk 1825

--- Page 280 ---
messing about with a user interface, he would. Interacting with productivity software sel-
dom is an entirely aesthetic experience. Entertainment and creative tools aside, interact-
ing with software (especially business software) is very much a pragmatic exercise.
No matter how cool your interface is, less of it would be better.

---

## Chunk 1826

Directing your attention to the interaction itself puts the emphasis on the side effects of
the tools and technology rather than on the user‚Äôs goals. A user interface is an artifact,
not directly associated with the user‚Äôs goals. Next time you find yourself crowing about
a cool interaction you‚Äôve designed, remember that the ultimate user interface can often
be no interface.

---

## Chunk 1827

To create a sense of flow, our interaction with software must become transparent. When a
novelist writes well, the writer‚Äôs craft becomes invisible, and the reader sees the story and
characters with clarity undisturbed by the writer‚Äôs technique. Likewise, when a product
interacts well with a person, interaction mechanics disappear, leaving the person face to

---

## Chunk 1828

face with his objectives, unaware of the intervening software. Just as a poor writer is a visi-
ble writer, a poor interaction designer looms with a clumsily visible presence in his software.
orchestration
To a novelist, there is no such thing as a ‚Äúgood‚Äù sentence in isolation from the story
being told. No rules govern how sentences should be constructed to be transparent. It all

---

## Chunk 1829

depends on what the protagonist is doing, or what effect the author wants to create. The
writer knows not to insert an obscure word in a particularly quiet and sensitive passage,
lest it sound like a sour note in a string quartet. The same goes for software. The interac-
tion designer must train himself to hear sour notes in the orchestration of software inter-

---

## Chunk 1830

action. It is vital that all the elements in an interface work together coherently toward a
single goal. When an application‚Äôs communication with a person is well orchestrated, it
becomes almost invisible.
Webster defines orchestration as ‚Äúharmonious organization,‚Äù a reasonable phrase for
what we should expect from interactive products. Harmonious organization doesn‚Äôt

---

## Chunk 1831

yield to fixed rules. You can‚Äôt create guidelines like ‚ÄúFour buttons on a thumb-driven
mobile menu is good‚Äù and ‚ÄúSix buttons on a thumb-driven mobile menu is too many.‚Äù Yet
it is easy to see that a thumb-driven menu with 35 buttons wouldn‚Äôt work. The major dif-
ficulty with such analysis is that it treats the problem in vitro. It doesn‚Äôt take into account

---

## Chunk 1832

the problem being solved; it doesn‚Äôt take into account what a person is doing at the time
or what he is trying to accomplish.
250 Part II: Making Well-Behaved Products

---

## Chunk 1833

--- Page 281 ---
harmonious Interactions
Although no universal rules define a harmonious interaction (just as no universal rules
define a harmonious interval in music), we‚Äôve found the following strategies to be effec-
tive for designing interactions that go with the user‚Äôs flow:
‚Ä¢ Follow users‚Äô mental models.
‚Ä¢ Less is more.
‚Ä¢ Let users direct rather than discuss.

---

## Chunk 1834

‚Ä¢ Provide choices rather than ask questions.
‚Ä¢ Keep necessary tools close at hand.
‚Ä¢ Provide modeless feedback.
‚Ä¢ Design for the probable but anticipate the possible.
‚Ä¢ Contextualize information.
‚Ä¢ Reflect object and application status.
‚Ä¢ Avoid unnecessary reporting.
‚Ä¢ Avoid blank slates.
‚Ä¢ Differentiate between command and configuration.
‚Ä¢ Hide the ejector seat levers.

---

## Chunk 1835

‚Ä¢ Optimize for responsiveness but accommodate latency.
Follow users‚Äô mental models
We introduced the concept of user mental models in Chapter 1. Different people have
different mental models of a given activity or process, but they rarely imagine them in
terms of the detailed mechanics of how computers function. Each user naturally forms a

---

## Chunk 1836

mental image of how the software performs its task. The mind looks for some pattern of
cause and effect to gain insight into the machine‚Äôs behavior.
For example, in a hospital information system, the physicians and nurses have a mental
model of patient information that derives from how they think about patients and treat-

---

## Chunk 1837

ment. It therefore makes the most sense to find patient information by using patient
names as an index. Each physician has certain patients, so it makes additional sense to
filter the patients in the clinical interface so that each physician can choose from a list
of his or her own patients, organized alphabetically by name. On the other hand, in the

---

## Chunk 1838

hospital‚Äôs business office, the clerks there are worried about overdue bills. They don‚Äôt
initially think about these bills in terms of who or what the bill is for, but rather in terms
of how late the bill is (and perhaps how big it is). Thus, for the business office interface,
CH 11. Orchestration and Flow 251

---

## Chunk 1839

--- Page 282 ---
it makes sense to sort first by time overdue and perhaps by amount due, with patient
names as a secondary organizational principle.
less is more
For many things, more is better. In the world of interaction design, the contrary is usu-
ally true. We should constantly strive to reduce the number of elements in user interfaces

---

## Chunk 1840

without reducing the capabilities of the products we are creating and without increasing
the effort it takes to use them. To do this, we must do more with less; this is where careful
orchestration becomes important. We must coordinate and control the product‚Äôs power
without letting the interface become a gaggle of screens and widgets, covered with a

---

## Chunk 1841

scattering of unrelated and rarely used controls.
It is common for user interfaces of professional and business software to be complex
but not very powerful. Products like this typically segregate functionality into silos and
allow the user to perform a single task without providing access to related tasks. When

---

## Chunk 1842

the first edition of this book was published in 1995, this problem was ubiquitous. Some-
thing as common as a Save dialog in a Windows application failed to allow users to also
rename or delete the files they were looking at. The users had to go to a different place
to accomplish these very similar tasks, ultimately requiring applications and operat-

---

## Chunk 1843

ing systems to provide more interface. Thankfully, contemporary operating systems are
much better at this sort of thing. Because they have started to offer appropriate func-
tionality based on the user‚Äôs context, users are less often required to shuffle off to various
places in the interface to accomplish simple and common tasks.

---

## Chunk 1844

However, we have a rather long way to go. In the enterprise software we see, each func-
tion or feature is often housed in a separate dialog or window, with little consideration
for how people must use these functions together to accomplish something. It is not
uncommon for a user to use one menu command to open a window to find a bit of infor-

---

## Chunk 1845

mation, copy that information to the clipboard, and then use a different menu command
for a different window, merely to paste that bit of information into a field. Not only is this
procedure inelegant and crude, but it is also error-prone and fails to capitalize on a pro-
ductive division of labor between humans and machines. Typically, products don‚Äôt end

---

## Chunk 1846

up this way on purpose. They have been built either in an ad hoc manner over years or by
several disconnected teams in different organizational silos.
Motorola‚Äôs once popular Razr V3 flip-phone was an example of this problem. Although
the phone‚Äôs industrial design was deservedly award-winning for its elegance, the soft-

---

## Chunk 1847

ware was inherited from a previous generation of Motorola phones and appeared to have
been developed by multiple teams who didn‚Äôt coordinate their efforts. For example, the
phone‚Äôs address book used a different text-entry interface than its calendar application.
Each software team must have devised a separate solution, resulting in two interfaces

---

## Chunk 1848

doing the job that one should have done. This was both a waste of development resources
252 Part II: Making Well-Behaved Products

---

## Chunk 1849

--- Page 283 ---
and a source of confusion and friction for Motorola‚Äôs users. A year after the V3 reached
the height of its popularity, the iPhone, with its modern, well-considered user interface
arrived, and the V3 and all their flip-phone brethren were soon history. Tight integration
of the complete hardware and software experience finally won the day.

---

## Chunk 1850

Mullet and Sano‚Äôs classic Designing Visual Interfaces (Prentice Hall, 1994) includes a useful
discussion of the idea of elegance, which can be thought of as a novel, simple, economical,
and graceful way of solving a design problem. Because the software inside an interactive
product is typically complex, it becomes all the more important to value elegance and

---

## Chunk 1851

simplicity; these attributes are crucial for technology to effectively serve human needs.
A minimalist approach to product design is inextricably tied to a clear understanding of
purpose‚Äîwhat the user of a product is trying to accomplish using the tool. Without this
sense of purpose, interactive products are just a disorganized jumble of technological

---

## Chunk 1852

capabilities. A model example where a strong sense of purpose has driven a minimal user
interface is the classic Google search interface, shown in Figure 11-1. It consists of a text
field, two buttons (Google Search, which takes the user to a list of results, and I‚Äôm Feeling
Lucky, which takes the user directly to the top result), the Google logotype, and a couple of

---

## Chunk 1853

links to the broader universe of Google functionality. Another good example of a minimal
user interface is the iPod Shuffle. By carefully defining an appropriate set of features to
meet a specific set of user needs, Apple created a highly usable product with one switch
and five buttons (and no screen!). Still another example is iA Writer, an incredibly simple

---

## Chunk 1854

iOS text editor app. It doesn‚Äôt have much of a user interface other than an area in which
to write text. The text is saved automatically, eliminating the need to interact with files.
Figure 11-1: The celebrated Google search interface is a classic
example of minimalist interface design, where every screen element
is purposeful and direct.

---

## Chunk 1855

It‚Äôs worth noting that the quest for simplicity can be taken too far; reduction is a balanc-
ing act that requires a good understanding of users‚Äô mental models. The iPod Shuffle‚Äôs
CH 11. Orchestration and Flow 253

---

## Chunk 1856

--- Page 284 ---
interface, an example of elegance and economy in design, is also at odds with some
users‚Äô expectations. If you come from the world of CD players, or even the high-resolu-
tion screens of most other digital audio players, it probably feels a bit weird to use the
iPod‚Äôs Play/Pause toggle to shut off the device and the Menu button to turn it on. This is

---

## Chunk 1857

a classic case of visual simplicity leading to cognitive complexity. In this situation, these
idioms are simple enough to learn easily, and the consequences of getting it wrong are
fairly small, so the product‚Äôs overall success hasn‚Äôt been affected much.
Stick to ‚Äúless is more‚Äù to keep out of your users‚Äô way and keeping them in flow.
let users direct rather than discuss

---

## Chunk 1858

Some developers might imagine that the ideal user interface is a two-way conversation
between human and machine. However, most people don‚Äôt see it that way. Most people
would rather interact with the software in the same way they interact with, say, their
cars. They open the door and get in when they want to go somewhere. They step on the

---

## Chunk 1859

accelerator when they want the car to move forward and the brake when it‚Äôs time to stop.
They turn the wheel when they want the car to turn.
This ideal interaction is not a dialogue‚Äîit‚Äôs more like using a tool. When a carpenter hits
nails, he doesn‚Äôt discuss the nail with the hammer; he directs the hammer onto the nail.

---

## Chunk 1860

In a car, the driver gives the car direction when he wants to change the car‚Äôs behavior.
The driver expects direct feedback from the car and its environment in terms appropri-
ate to the device: the view out the windshield, the readings on the various gauges on the
dashboard, the sound of rushing air and tires on pavement, and the feel of lateral g-forces

---

## Chunk 1861

and vibration from the road. The carpenter expects similar feedback: the feel of the nail
sinking, the sound of steel striking steel, and the shifting weight as the hammer recoils.
The driver certainly doesn‚Äôt expect the car to interrogate him with a dialog box, nor would
a carpenter appreciate the dialog shown in Figure 11-2 if it appeared on his hammer.
Figure 11-2: Nobody wants to be

---

## Chunk 1862

scolded, particularly by a machine. If we
guide our machines in a dunderheaded
way, we expect to get a dunderheaded
response. Sure, they can protect us from
fatal errors, but scolding isn‚Äôt the same
thing as protecting.
254 Part II: Making Well-Behaved Products

---

## Chunk 1863

--- Page 285 ---
One of the reasons interactive products often aggravate people is that they don‚Äôt act
enough like cars or hammers. Instead, they have the temerity to try to engage us in a dia-
logue‚Äîto inform us of our shortcomings and to demand answers. From the user‚Äôs point
of view, the roles are reversed: The person should do the demanding, and the software

---

## Chunk 1864

should do the answering. One of the most important ways of letting the users direct the
action in an interface is direct manipulation. We‚Äôll discuss this at length in Chapter 13.
Provide choices rather than ask questions
Dialog boxes (confirmation dialogs in particular) ask questions. Toolbars and palettes
offer choices. The confirmation dialog stops the proceedings, demands an answer, and

---

## Chunk 1865

doesn‚Äôt leave until it gets what it wants. Toolbars and palettes, on the other hand, are
always there, quietly and politely offering their wares like a well-appointed store, giving
you the luxury of selecting what you want with just a flick of your finger.
Choices are important, but there is a difference between being free to make choices

---

## Chunk 1866

based on presented information and being interrogated by the application in modal
fashion. Users would much rather direct their software the way they direct their auto-
mobiles down the street. Automobiles offer drivers sophisticated choices without once
issuing a dialog box. Imagine the situation shown in Figure 11-3.
Figure 11-3: Imagine if you had to steer

---

## Chunk 1867

your car by clicking buttons on a dialog
box! This dialog box gives you some idea
of how normal people feel about the dia-
log boxes in your software.
Not only is directly manipulating a steering wheel a more appropriate idiom for commu-
nicating with your car, but it also puts you in the superior position, directing your car

---

## Chunk 1868

where it should go. Modeless choices help give users the feeling of control and mastery
they want when using digital products.
keep necessary tools close at hand
Most desktop applications are too complex for one mode of interaction to cover all their
features. Consequently, many applications offer users a palette of tools. These tools are

---

## Chunk 1869

actually different modes of behavior that the product enters. Offering tools is a compro-
mise with complexity, but we can still do a lot to make tool selection and manipulation
CH 11. Orchestration and Flow 255

---

## Chunk 1870

--- Page 286 ---
easy and to prevent it from disturbing flow. Mainly, we must ensure that information
about tools and application state is clear and present and that transitions between tools
are quick and simple.
Tools should be close at hand, commonly on palettes or toolbars for beginner and inter-
mediate users and accessible by keyboard command for expert users. This way, the user

---

## Chunk 1871

can see them easily and can select them with a single click or keystroke. If the user must
divert his attention from the application to search out a tool, his concentration will be
broken. It‚Äôs as if he had to get up from his desk and wander down the hall to find a pencil.
Also, he should never have to put tools away.
Provide modeless feedback

---

## Chunk 1872

When users of an interactive product manipulate tools and data, it‚Äôs usually important
to clearly present the status and effect of these manipulations. This information must
be easy to see and understand without obscuring or interfering with the user‚Äôs actions.
Feedback of progress is one of the key elements of flow.

---

## Chunk 1873

An application has several ways to present information or feedback to users. One egre-
gious way done on the desktop is to pop up a dialog box. This technique is modal: It puts
the application into a special state that must be dealt with before it can return to its
normal state and before the person can continue with her task. A better way to inform
users is with modeless feedback.

---

## Chunk 1874

Feedback is modeless whenever information for users is built into the structures of the
interface and doesn‚Äôt stop the normal flow of activities and interaction. In Microsoft
Word 2010, shown in Figure 11-4, you can see what page you are on, what section you are
in, how many pages are in the current document, and what position the cursor is in‚Äî

---

## Chunk 1875

modelessly. You just have to look at the left navigation pane and status bar at the bottom
of the screen. You don‚Äôt have to go out of your way to ask for that information.
Another good example is the iOS notification center, which displays a brief heads up
alert when an app that isn‚Äôt currently active on the screen has an important event to

---

## Chunk 1876

report, such as an upcoming appointment. The message stays at the top of the screen for
a few seconds, and then disappears, and tapping it while it is displayed takes you to the
notifying app.
Jet fighters have a heads-up display, or HUD, that superimposes the readings of critical
instrumentation onto the forward view of the cockpit‚Äôs windscreen. The pilot doesn‚Äôt

---

## Chunk 1877

even have to use peripheral vision; she can read vital gauges while keeping her eyes on
the opposing fighter. Applications can use the edges of the display screen to show users
256 Part II: Making Well-Behaved Products

---

## Chunk 1878

--- Page 287 ---
information about activity in the main work area. Many drawing applications, such as
Adobe Photoshop, already provide ruler guides, thumbnail maps, and other modeless
feedback in the periphery of their windows. We further discuss rich modeless feedback
in Chapter 15.
Figure 11-4: In Word 2010, Microsoft lets you see what page

---

## Chunk 1879

you are on, the number of total pages, and the number of words
in the document displayed modelessly on the lower-left edge of
the window. Clicking on the word count opens the Word Count
dialog, which provides more detailed information.
Design for the probable but anticipate the possible
Suprerfluous interaction, usually in the form of a dialog box, often slips into a user inter-

---

## Chunk 1880

face. This is often the result of an application being faced with a choice‚Äî developers tend
to resolve choices from the standpoint of logic, and this carries over to their software
design. To a logician, if a proposition is true 999,999 times out of a million and is false
one time, the proposition is false‚Äîthat‚Äôs how Boolean logic works. However, to the rest

---

## Chunk 1881

of us, the proposition is overwhelmingly true. The proposition has a possibility of being
false, but the probability of its being false is minuscule to the point of irrelevancy. One of
the most potent methods for better orchestrating your user interfaces is segregating the
possible from the probable.
Developers tend to view possibilities as being the same as probabilities. For example, the

---

## Chunk 1882

user can decide to end the application and save his work, or end the application and dis-
card the document he has been working on for the last six hours. Either of these choices
is possible. The probability that this person will discard his work is at least a thousand to
one against, yet the typical application always includes a dialog box asking the user if he

---

## Chunk 1883

wants to save his changes, like the one shown in Figure 11-5.
This dialog box is inappropriate and unnecessary. How often do you choose to aban-
don changes you make to a document? This dialog is tantamount to your spouse telling
you not to spill soup on your shirt every time you eat. We‚Äôll discuss the implications of
removing this dialog in Chapter 14.
CH 11. Orchestration and Flow 257

---

## Chunk 1884

--- Page 288 ---
Figure 11-5: This is easily the most unnecessary dialog
box in the world of GUI. Of course we want to save our
work! It is the normal state of events. Not saving it would
be out of the ordinary and would be worthy of a dialog,
but not this.
Developers are judged by their ability to create software that handles the many possi-

---

## Chunk 1885

ble, but improbable, conditions that crop up inside complex logical systems. This doesn‚Äôt
mean, however, that they should render that readiness to handle offbeat possibilities
directly into a user interface. This sort of thing runs counter to a user‚Äôs expectations and
interrupts their flow by asking them to accommodate the possibility. Dialogs, controls,

---

## Chunk 1886

and options that are used a hundred times a day should not sit side by side with dialogs,
controls, and options that are used once a year or never.
You might get hit by a bus, but you probably will get to work safely this morning. You don‚Äôt
stay home out of fear of the killer bus, so don‚Äôt let what might possibly happen alter how
you treat what almost certainly will happen in your interface.

---

## Chunk 1887

Contextualize information
How an application chooses to represent information is another thing that can con-
fuse or overwhelm normal humans. One area frequently abused is the representation of
quantitative, or numeric, information. If an application needs to show the amount of free
space on disk, it could do what the ancient Windows 3.0 File Manager did: give you the

---

## Chunk 1888

exact number of free bytes, as shown in Figure 11-6.
Figure 11-6: The old Windows 3.0 File Manager took great
pains to report the exact number of bytes used by files on the
disk. Did this precision help us understand if we needed to
clear space on the disk? Wouldn‚Äôt a visual representation that
showed disk usage in a proportional manner be more meaning-

---

## Chunk 1889

ful? Luckily, Windows now employs bar and pie charts to indi-
cate disk usage.
258 Part II: Making Well-Behaved Products

---

## Chunk 1890

--- Page 289 ---
In the lower-left corner, the application tells us the number of free bytes and the total
number of bytes on the disk. These numbers are hard to read and interpret. With billions
of bytes of disk storage, it ceases to be important to us just how many hundreds are left,
yet the display rigorously shows us down to the kilobyte. But even while the application

---

## Chunk 1891

is telling us the state of our disk with precision, it is failing to communicate. What we
really need to know is whether the disk is getting full, or whether we can add a new 20
MB application and still have sufficient working room. These raw numbers, precise as
they are, do little to help us make sense of the facts, and pull us out of flow as we try and
figure out what‚Äôs really happening.

---

## Chunk 1892

Visual information design expert Edward Tufte says that quantitative presentation
should answer the question ‚ÄúCompared to what?‚Äù Knowing precisely how many bytes
are free on your hard disk is less useful than knowing that it is 22 percent of the disk‚Äôs
total capacity. Another Tufte dictum is ‚ÄúShow the data (visually),‚Äù rather than simply
telling about it textually or numerically.

---

## Chunk 1893

A bar or pie chart showing the used and unused portions would make it much easier to
comprehend the scale and proportion of hard disk use. The numbers shouldn‚Äôt go away
entirely, but they should be relegated to the status of labels on the display and not be the
display. They should also be shown with more reasonable and consistent precision. The

---

## Chunk 1894

meaning of the information could be shown visually; the numbers would merely add
support. Today, this is exactly what is shown in Windows Explorer. Unfortunately, this
useful info is shown in only one place, rather than as a persistent status indicator at the
bottom of all Explorer windows. And, unfortunately, the problem persists in lots of other
applications.

---

## Chunk 1895

reflect object and application status
When someone is asleep, he usually looks asleep. When someone is awake, he looks
awake. When someone is busy, he looks busy: His eyes are focused on his work, and his
body language is closed and preoccupied. When someone is unoccupied, he looks unoc-
cupied: His body is open and moving; his eyes are willing to make contact. People not

---

## Chunk 1896

only expect this kind of subtle feedback from each other, they also depend on it to main-
tain social order.
These sorts of cues are important enough that they became a core part of the user inter-
face of Baxter, a two-armed stationary industrial robot created by Rethink Robotics
(see Figure 11-7), whose founder, Rodney Brooks, also invented the Roomba vacuuming

---

## Chunk 1897

robot. Baxter is designed to work alongside humans on a light manufacturing line. It fea-
tures a large, face-like screen with cartoonish animated eyes that can look in a direction
before reaching the destination. It reports system status via simple and universal facial
expressions.
CH 11. Orchestration and Flow 259

---

## Chunk 1898

--- Page 290 ---
Figure 11-7: Baxter is a two-armed industrial robot designed to work alongside humans in a light
manufacturing production line. It communicates status using facial expressions.
While they probably should not be anthropomorphized as fully as Baxter, our day-to-day
software applications and devices should provide similar clues. When an application is

---

## Chunk 1899

asleep, it should look asleep. When an application is awake, it should look awake. When
it‚Äôs busy, it should look busy. When the product is engaged in some significant internal
action like performing a complex calculation and connecting to a database, it should
be obvious to us that it won‚Äôt be quite as responsive as usual. When the app is sending a

---

## Chunk 1900

large file, we should see a modeless progress bar. This lets the user plan their next steps
accordingly.
Similarly, the status of user interface objects should be apparent to users. Most e-mail
applications do a good job of making it obvious which messages have not been read
and which have been responded to or forwarded. Let‚Äôs take this concept a step further.

---

## Chunk 1901

Wouldn‚Äôt it be great if, when you were looking at events in the day or week views of Mic-
rosoft Outlook or Google Calendar, you could tell how many people had agreed to attend
and how many hadn‚Äôt responded yet (either right inline or via ToolTip) without drilling
down into the details?
260 Part II: Making Well-Behaved Products

---

## Chunk 1902

--- Page 291 ---
Application and object state is best communicated using forms of rich modeless feed-
back, briefly discussed earlier in this chapter. More detailed examples of rich modeless
feedback may be found in Chapter 15.
Avoid unnecessary reporting
Some applications are quick to keep users apprised of the details of their progress even

---

## Chunk 1903

though the user has no idea what to make of this information. Applications pop up noti-
fications telling us that connections have been made, that records have been posted,
that users have logged on, that transactions were recorded, that data has been trans-
ferred, and other useless factoids. To software engineers, these messages are equivalent

---

## Chunk 1904

to the humming of the machinery: They indicate that all is well. In fact, they probably
were used while debugging the application. To a normal person, however, these reports
can feel like eerie lights beyond the horizon, screams in the night, or unattended objects
flying about the room.
For users, it is disconcerting and distracting to know all the details of what is happening

---

## Chunk 1905

under normal conditions. Nontechnical people may be alarmed to hear that the data-
base has been modified, for example. It is better for the application to simply do what has
to be done, issue reassuring (and modeless) visual or auditory feedback when all is well,
and not burden users with the trivia of how it was accomplished. It is important that we

---

## Chunk 1906

not stop the proceedings to report normalcy. If you must use them, reserve notifications
for events that are outside the normal course of events. If your users benefit from know-
ing things are running smoothly, use some more ambient signal.
Don‚Äôt use dialogs to report normalcy.
By the same token, don‚Äôt stop the proceedings and bother the user with minor problems.

---

## Chunk 1907

If the application is having trouble creating a connection to a server, don‚Äôt put up a dialog
box to report it. Instead, build a status indicator into the application so that the problem
is clear to the interested user but is unobtrusive to someone who is busy elsewhere.
Avoid blank slates
The key to orchestrating a user interaction is to take a goal-directed approach. You

---

## Chunk 1908

must ask yourself whether a particular interaction moves a person effectivewly and
confidently toward his goal. Timid applications are reluctant to carry out any forward
motion without someone‚Äôs directing them in advance. But most people would rather see
the application take a ‚Äúgood enough‚Äù first step and then manually tweak it to what is

---

## Chunk 1909

desired. This way, the application moves the person closer to his goal.
CH 11. Orchestration and Flow 261

---

## Chunk 1910

--- Page 292 ---
It‚Äôs easy to assume nothing about what your users want, instead asking a bunch of ques-
tions up front to help determine what they want. How many applications have you seen
that start by asking a bunch of questions upfront? Or that punt every decision to a litany
of user options? But normal people‚Äîrather than ‚Äúexpert users‚Äù‚Äîsometimes are incapa-

---

## Chunk 1911

ble of or uncomfortable with explaining what they want to do to an interactive product,
especially in advance. They would much rather see what the application thinks is right
and then manipulate that to make it exactly right. In most cases, your application can
make a fairly correct assumption based on the designer‚Äôs estimation, past experience
with this user, or by reference to most other users.

---

## Chunk 1912

For example, when you create a new document in PowerPoint, on the PC, the application
creates a blank document with preset attributes rather than opening a dialog that asks
you to specify every detail. Omnigraffle on the Mac does a less adequate job, asking you
to choose the base style for a new presentation each time you create one. Both applica-

---

## Chunk 1913

tions could do better by remembering frequently and recently used styles or templates
and making those the defaults for new documents.
Just because we use the word think in conjunction with an interactive product doesn‚Äôt
mean that the software needs to be particularly intelligent (in the human sense) and
must try to determine the right thing to do by reasoning. Instead, the software should

---

## Chunk 1914

simply do something that has a probability of being correct. Then it should provide the
user with powerful tools for shaping that first attempt, instead of merely giving the user
a blank slate and challenging him to have at it. This way, the application doesn‚Äôt ask for
permission to act, but rather for forgiveness after the fact.
Ask for forgiveness, not permission.

---

## Chunk 1915

For most users, a blank slate is a difficult starting point. It‚Äôs much easier to begin where
someone else has left off. They can easily fine-tune an approximation provided by the
application into precisely what he wants with less risk of exposure and mental effort
than he would have by drafting it from nothing. As we discussed in Chapter 8, endowing

---

## Chunk 1916

your application with a good memory is the best way to accomplish this.
Differentiate between command and configuration
Another problem crops up frequently whenever users invoke functions with many
parameters. The problem comes from the lack of differentiation between a function and
the configuration of that function. If you ask an application to perform a function by

---

## Chunk 1917

itself, the application should simply do it using a reasonable default or its last configu-
ration. It should not interrogate you about precise configuration details each time it is
262 Part II: Making Well-Behaved Products

---

## Chunk 1918

--- Page 293 ---
used. To express different or more precise demands to the application, you would launch
the configuration interface for that function.
For example, when you ask many applications to print a document, they respond by
launching a complex dialog box demanding that you specify how many copies to print;

---

## Chunk 1919

what the paper orientation is; what paper feeder to use; what margins to set; whether the
output should be in monochrome or color; what scale at which to print; whether to use
PostScript fonts or native fonts; whether to print the current page, the current selection,
or the entire document; and whether to print to a file and, if so, what to name that file.

---

## Chunk 1920

All these options are useful, but all we want is to print the document, and that is all we
thought we asked for.
More reasonable designs have one command to print and another command for print
setup. The print command issues a dialog but just goes ahead and prints, using either
previous settings or standard settings. The print setup function offers all those choices

---

## Chunk 1921

about paper and copies and fonts. Some applications allow the user to go directly from
the configure dialog to printing, or vice-versa.
Figure 11-8: The Quick Print control in Microsoft Word
offers immediate printing without a dialog box.
The Quick Print control in Microsoft Word offers immediate printing without a dialog

---

## Chunk 1922

box (although unfortunately it is very small and hidden by default‚Äîsee Figure 11-8). This
is perfect for many people, but for those with multiple printers or printers on a network,
it may offer too little information. The user may want to see which printer is selected
before he either clicks the control or summons the dialog to change it first. This is a

---

## Chunk 1923

good candidate for some simple modeless output placed on a toolbar or status bar. (It is
currently provided in the control‚Äôs ToolTip in the Windows version, which is good, but
the feedback could be better still.) Word‚Äôs print setup user interface (which also includes
a Print button) is called Print and is available as a menu item on the File tab of Word‚Äôs

---

## Chunk 1924

ribbon control (more about that in Chapter 18).
There is a big difference between configuring and invoking a function. The former may
include the latter, but the latter shouldn‚Äôt include the former. Generally speaking, a user
invokes a command ten times for every one time he configures it. It is better to make the
CH 11. Orchestration and Flow 263

---

## Chunk 1925

--- Page 294 ---
user ask explicitly for configuration one time in ten than it is to make the user reject the
configuration interface nine times in ten.
Thus, most desktop applications have a reasonable rule of thumb: Put immediate access
to functions on buttons in toolbars, and put access to function-configuration user inter-

---

## Chunk 1926

faces in menus. The configuration tools are better for learning and tinkering, whereas
the buttons provide immediate and simple action.
hide the ejector seat levers
In the cockpit of every fighter jet is a brightly colored lever that, when pulled, fires a
small rocket engine under the pilot‚Äôs seat (see Figure 11-9). This blows the pilot, still in his

---

## Chunk 1927

seat, out of the aircraft so that he can then parachute safely to Earth. Ejector seat levers
can be used only once, and their consequences are significant and irreversible.
Winshield FM Ejector Cabin
Washer Radio Seat Lights
Figure 11-9: Ejector seat levers have catastrophic results. One minute, the pilot is safely ensconced

---

## Chunk 1928

in his jet, and the next he is tumbling end over end in the wild blue yonder, while his jet goes on
without him. The ejector seat is necessary for the pilot‚Äôs safety, but a lot of design work has gone
into ensuring that it never gets fired inadvertently. Allowing an unsuspecting user to configure an

---

## Chunk 1929

application by changing permanent objects is comparable to firing the ejector seat by accident. Hide
those ejector seat levers!
Just as a jet fighter needs an ejector seat lever, complex desktop applications need config-
uration facilities. Applications must have ejector seat levers so that users can occasion-

---

## Chunk 1930

ally move persistent objects (see Chapter 12) in the interface, or dramatically (sometimes
irreversibly) alter the application‚Äôs function, behavior, or content. The one thing that
must never happen is accidental deployment of the ejector seat (see Figure 11-9). The
interface design must ensure that the user can never inadvertently fire the ejector seat

---

## Chunk 1931

when all he wants to do is make a minor adjustment to the application.
264 Part II: Making Well-Behaved Products

---

## Chunk 1932

--- Page 295 ---
Ejector seat levers come in two basic varieties: those that cause a significant visual dislo-
cation (large changes in the layout of tools and work areas) in the application, and those
that perform an irreversible action. Both of these functions should be hidden from inex-
perienced users. Of the two, the latter variety is by far the more dangerous. In the former,

---

## Chunk 1933

the user may be surprised and dismayed at what happens next, but she can at least back
out of it with some work. In the latter case, she and her colleagues are likely to be stuck
with the consequences.
If you keep in mind principles of flow and orchestration, your software can keep users
engaged at maximum productivity for extended periods of time. Productive users are

---

## Chunk 1934

happy users, and customers with productive, happy users are the goal of almost any dig-
ital product manufacturer. In the next chapter, we further discuss ways to enhance user
productivity by eliminating barriers to use that arise as a result of i mplementation-model
thinking.
optimize for responsiveness but accommodate latency

---

## Chunk 1935

An application can become slow or unresponsive when it performs a large amount of
data processing or when it waits on remote devices like servers, printers, and networks.
Nothing is more disturbing to the user‚Äôs sense of flow than staring at the screen, wait-
ing for the computer to respond. It‚Äôs critical to design your interfaces so that they are

---

## Chunk 1936

sufficiently responsive. All the lush visual style in the world won‚Äôt impress anyone if the
interface moves like molasses because the device is maxed out redrawing the screen.
This is one arena where collaboration with developers is quite important. Depending on
the platform and technical environment, different interactions can be quite ‚Äúexpensive‚Äù

---

## Chunk 1937

from a latency perspective. You should advocate for implementation choices that pro-
vide the user with appropriately rich interactions with as little latency as possible. You
also should design solutions to accommodate choices that have been made and cannot
be revisited. When latency is unavoidable, it‚Äôs important to clearly communicate the sit-

---

## Chunk 1938

uation to users and allow them to cancel the operation causing the latency and ideally
perform other work while they are waiting.
If your application executes potentially time-consuming tasks, make sure that it
occasionally checks to see if someone is still out there madly clicking the mouse and
whimpering, ‚ÄúNo, no, I didn‚Äôt mean to reorganize the entire database. That will take

---

## Chunk 1939

4.3 million years!‚Äù
In a number of studies dating back to the late 1960s, it‚Äôs generally been found that users‚Äô
perception of response times can be roughly categorized into several buckets:1
‚Ä¢ Up to 0.1 seconds, users perceive the system‚Äôs response as instantaneous. They feel
that they are directly manipulating the user interface and data.
CH 11. Orchestration and Flow 265

---

## Chunk 1940

--- Page 296 ---
‚Ä¢ Up to about 1 second, users feel that the system is responsive. Users will likely notice
a delay, but it is small enough for their thought processes to stay uninterrupted.
‚Ä¢ Up to about 10 seconds, users clearly notice that the system is slow, and their mind
is likely to wander, but they can keep some amount of attention on the application.

---

## Chunk 1941

Providing a progress bar is critical here.
‚Ä¢ After about 10 seconds, you will lose your users‚Äô attention. They will wander off and
get a cup of coffee or switch to a different application. Ideally, processes that take this
long should be conducted offline or in the background, allowing users to continue
with other work. In any case, status and progress should be clearly communicated,

---

## Chunk 1942

including estimated time remaining. A cancel mechanism is critical.
motion, Timing, and Transitions
The first computing device to use motion and animated transitions as core elements of
the user experience was the Apple Macintosh. Mac windows sprang open from dragable
app and folder icons and collapsed back into them when closed. Menus dropped open

---

## Chunk 1943

when clicked and rolled up again when the mouse button was released. The Switcher
facility in early Mac OS allowed you to change the current open application by clicking a
control in the menu bar. The control caused the current app‚Äôs screen to slide horizontally
out of view to the left. Another open app‚Äôs screen slid in from the right like a carousel.

---

## Chunk 1944

(Amusingly, this carousel-like app transition has reappeared on the iPad as an optional
four-fingered left/right swipe gesture.)
In later versions of Mac OS and Windows, more animated transitions were added. Dia-
logs no longer simply appeared; they slid or popped into place. Expandable drawers, pal-
ettes, and panels became common idioms, especially in professional software.

---

## Chunk 1945

However, it was not until the advent of the iPhone that the use of motion and animated
transitions became an integral and critical part of the digital product experience. In
concert with multitouch gestures, animated transitions allow mobile apps to appear so
responsive and immersive that you almost forget that what is being flicked, pinched,

---

## Chunk 1946

twirled, and swiped onscreen is really just pixels providing an illusion of physicality.
Motion is a powerful mechanism for expressing and illustrating the relationships
between objects. This mechanism has been particularly successful on mobile devices,
where the form factor limits what can be shown onscreen. Animated transitions help

---

## Chunk 1947

users create a strong mental model of how what is presented in one view is related to
what was presented in the previous view. It‚Äôs often used to good effect on the web as well,
helping create a spatial aspect to navigation and state transitions.
266 Part II: Making Well-Behaved Products

---

## Chunk 1948

--- Page 297 ---
Although it‚Äôs tempting to do otherwise, motion and animation must always be used
sparingly and judiciously. Not only is an overabundance of motion potentially confus-
ing and irritating, but it also can make some people ill. This fact was reported after the
release of Apple‚Äôs iOS 7, possibly due to its new and somewhat overzealous parallax and
app zoom-out/zoom-in animations.

---

## Chunk 1949

The overarching goal of motion and animated transitions in interaction should be to
support and enhance the user‚Äôs state of flow. As Dan Saffer discusses in his excellent
book, Microinteractions (O‚ÄôReilly, 2013), animations and transitions should help achieve
the following:2
‚Ä¢ Focus user attention in the appropriate place.
‚Ä¢ Show relationships between objects and their actions.

---

## Chunk 1950

‚Ä¢ Maintain context during transitions between views or object states.
‚Ä¢ Provide the perception of progression or activity (such as through progress bars and
spinners).
‚Ä¢ Create a virtual space that helps guide users from state to state and function to
function.
‚Ä¢ Encourage immersion and further engagement.
Furthermore, designers should strive for these qualities when creating interactions

---

## Chunk 1951

involving motion and animation:3
‚Ä¢ Short, sweet, and responsive‚ÄîAnimations should not slow down interactions
(and thus interrupt flow). They should last only as long as it takes to accomplish one
or more of the goals just listed, and in any case less than a second to retain a feeling of
responsiveness.
‚Ä¢ Simple, meaningful, and appropriate‚ÄîIn iOS7, Apple changed how you ‚Äúkill‚Äù a

---

## Chunk 1952

running app. Previously, you tapped and held the app icon in the multitasking tray,
waited for an X icon to appear on it, tapped it, and then pressed the home button to exit
a mode. (This was almost the same action you took to delete the app from the product.)
Now, you flick a representation of the app‚Äôs last screen away from you, causing it to

---

## Chunk 1953

scoot off the top of the screen. This is much simpler and more satisfying, and it is
appropriate to the function it triggers. (Sadly, it is equally undiscoverable, as shown in
Figure 11-10.)
‚Ä¢ Natural and smooth‚ÄîAnimated transitions, especially those providing feedback to
gestural interfaces, should feel almost like real physical interactions, mimicking (if not

---

## Chunk 1954

modeling) motion attributes such as inertia, elasticity, and gravity.
CH 11. Orchestration and Flow 267

---

## Chunk 1955

--- Page 298 ---
Figure 11-10: In iOS7, to kill an app, you flick a
representation of the app‚Äôs last screen away from
you. This is much simpler and more satisfying
than the old method‚Äîtapping and holding the app
icon to put it into a ‚Äúdelete mode.‚Äù
Motion is most successful when it has a rhythmic quality, in which the timing helps the

---

## Chunk 1956

user anticipate what will be shown next. Changes in timing can be used to cue users
about changes in context, state, or mode. This visual feedback can also be reinforced by
the use of sounds. Sounds can help direct user interaction (the ‚Äútap‚Äù of a button in iOS),
express the effect of user interaction (the clicking as the selection changes in the Play-

---

## Chunk 1957

Station 3‚Äôs main horizontal menu), or reinforce a transition (a whoosh that accompanies
a swipe gesture).
268 Part II: Making Well-Behaved Products

---

## Chunk 1958

--- Page 299 ---
The Ideal of Effortlessness
Creating a successful product requires more than delivering useful functionality. You
must also consider how different functional elements are orchestrated to enable users
to achieve a sense of flow as they go about their business. The best user interfaces often
don‚Äôt leave users in awe of their beauty, but rather are hardly even noticed because they

---

## Chunk 1959

can be used effortlessly.
Understanding the importance of flow, orchestrating your interface to maximize it, and
making judicious use of motion and transitions to ease the user from one state or mode
to another can give your apps the aura of effortlessness that helps make them seem to
work like magic.
Notes
1. Miller, 1968
2. Saffer, 2012
3. Haase and Guy, 2010
CH 11. Orchestration and Flow 269

---

## Chunk 1960

--- Page 301 ---
Ch 12
rEDuCIng work AnD
ElImInATIng EXCIsE
Digital products too often contain interactions that are top-heavy, requiring unneces-
sary work for users. Interacting with an interface always involves some work on the part
of the user. The goal of designers (or at least one of the more important ones) is to mini-

---

## Chunk 1961

mize that work, while at the same time enabling users to achieve their goals. If designers
and developers don‚Äôt pay careful attention to the human actions required to operate
their technology, the result can be a taxing experience for the users. They will struggle to
relate their mental models of the activities they want to perform to the product interface
that has been engineered.

---

## Chunk 1962

Users perform four types of work when interacting with digital products:
‚Ä¢ Cognitive work‚ÄîComprehending product behaviors, as well as text and
organizational structures
‚Ä¢ Memory work‚ÄîRecalling product behaviors, commands, passwords, names and
locations of data objects and controls, and other relationships between objects

---

## Chunk 1963

‚Ä¢ Visual work‚ÄîFiguring out where the eye should start on the screen, finding one
object among many, decoding layouts, and differentiating among visually coded
interface elements (such as list items with different colors)
‚Ä¢ Physical work‚ÄîKeystrokes, mouse movements, gestures (click, drag, double-click),
switching between input modes, and number of clicks required to navigate

---

## Chunk 1964

--- Page 302 ---
When implementation-model thinking is applied to digital products, these four types of
work are seldom minimized for users‚Äîquite the opposite, in fact. The result is software
that, in effect, charges its users a tax, or excise, of cognitive and physical effort every
time it is used.
In the physical world, mandatory tasks that don‚Äôt immediately satisfy our goals are

---

## Chunk 1965

sometimes unavoidable. For example, when we get up late on a workday and need to get
to the office quickly, we must open the garage door, get in the car, start the motor, back
out, and close the garage door before we even begin the forward motion that will take us
to our destination. These actions support the physicality of the automobile rather than
getting us to the destination faster.

---

## Chunk 1966

If we had Star Trek transporters instead, we‚Äôd dial up our destination and teleport there
instantaneously‚Äîno garages, no motors, no traffic lights. Digital products, much like
our fictional transporter, don‚Äôt necessarily need to have the same kind of roadblocks that
stand in the way of our goals in the physical world. But implementation-model design
often makes it seem that way to users.

---

## Chunk 1967

goal-Directed Tasks versus Excise Tasks
Any large task, such as driving to the office, involves many smaller tasks. Some of these
tasks work directly toward achieving the goal; these are tasks like steering down the
road toward your office. Excise tasks, on the other hand, don‚Äôt contribute directly to
reaching the goal, but instead represent extra work that satisfies either the needs of our

---

## Chunk 1968

tools or those of outside agents as we try to achieve our objectives.
In this example, the excise tasks are pretty clear. Opening the garage door is something
we do for the car, not for us, and it doesn‚Äôt move us toward our destination the way the
accelerator pedal and steering wheel do. Stopping at red lights is something imposed on

---

## Chunk 1969

us by our society that, again, doesn‚Äôt help us achieve our true goal. (In this case, it does
help us achieve a related goal of arriving safely at our office.) A tune-up helps keep the car
running well, but it doesn‚Äôt get us anywhere quickly while we‚Äôre doing it.
Software, too, has a pretty clear dividing line between goal-directed tasks and excise

---

## Chunk 1970

tasks. Like automobiles, some software excise tasks are trivial, and performing them is
no great hardship. On the other hand, other software excise tasks are as obnoxious as
fixing a flat tire. Installation leaps to mind here, as do such excise tasks as configuring
networks and backing up files.
272 Part II: Making Well-Behaved Products

---

## Chunk 1971

--- Page 303 ---
Types of Excise
The problem with excise tasks is that the effort we expend doing them doesn‚Äôt go directly
toward accomplishing our goals. Where we can eliminate excise tasks, we make peo-
ple more effective and productive, ultimately creating better usability and a better user
experience.
Eliminate excise wherever possible.

---

## Chunk 1972

The existence of excise in user interfaces is a primary cause of user dissatisfaction with
software-enabled products. It behooves every designer and product manager to be on
the lookout for interaction excise in all its forms and to take the time and energy to see
that it is eliminated from their products.
navigational excise

---

## Chunk 1973

Navigation through the functions or features of a digital product is largely excise. Except
in the case of games where the goal is to navigate successfully through a maze of obsta-
cles, the work that users are forced to do to get around in software and on websites is
seldom aligned with their needs, goals, and desires. (However, well-designed navigation

---

## Chunk 1974

can be an effective way to instruct users about what is available to them, which is better
aligned with their goals.)
Unnecessary or difficult navigation is a major frustration to users. In fact, in our opinion,
poorly designed navigation presents one of the largest and most common problems in
the usability of interactive products‚Äîmobile, desktop, web, or otherwise. It is also the

---

## Chunk 1975

place where the developer‚Äôs implementation model typically is made most apparent to
users.
Navigation through software occurs at multiple levels:
‚Ä¢ Across multiple windows, views, or pages
‚Ä¢ Across multiple panes or frames within a window, view, or page
‚Ä¢ Across tools, commands, or menus
‚Ä¢ Within information displayed in a pane or frame (such as scrolling, panning, zooming,
following links)

---

## Chunk 1976

CH 12. Reducing Work and Eliminating Excise 273

---

## Chunk 1977

--- Page 304 ---
We find it useful to think in terms of a broad definition of navigation: any action that
takes the user to a new part of the interface or that requires him or her to locate objects,
tools, or data elsewhere in the system. When we start thinking about such actions as nav-
igation, it becomes clear that they are excise and therefore should be minimized or, if

---

## Chunk 1978

possible, eliminated. The following sections discuss each of these types of navigation in
more detail.
navigation across multiple screens, views, or pages
Moving across multiple application views or pages is perhaps the most disorienting
kind of navigation for users. It involves a gross shifting of attention that disrupts the

---

## Chunk 1979

user‚Äôs flow and forces him into a new context. The act of navigating to another win-
dow also often means that the contents of the original window are partly or completely
obscured. On the desktop, it means that the user needs to worry about window man-
agement, an excise task that further disrupts his flow. If users must constantly shuttle

---

## Chunk 1980

between windows to achieve their goals, their disorientation and frustration levels will
rise, they will become distracted from the task at hand, and their effectiveness and
productivity will drop.
If the number of windows is large enough, the user will become sufficiently disoriented
that he may experience navigational trauma: He gets lost in the interface. Sovereign pos-

---

## Chunk 1981

ture applications (discussed in Chapter 9) can avoid this problem by placing all main
interactions in a single primary view, which may contain multiple independent panes.
navigation between panes
Windows or views can contain multiple panes‚Äîadjacent to each other and separated
by splitters (see Chapter 20) or stacked on top of each other and denoted by tabs. Adja-

---

## Chunk 1982

cent panes can solve many navigation problems, because they provide useful supporting
functions, links, or data on the screen in close reach of the primary work or display area.
This reduces navigation to almost nil. If objects can be dragged between panes, those
panes should be adjacent.
Problems arise when adjacent supporting panes become too numerous or are not placed

---

## Chunk 1983

on the screen in a way that matches users‚Äô work flows. Too many adjacent panes results
in visual clutter and confusion: Users do not know where to go to find what they need.
Also, crowding forces scrolling‚Äîanother navigational hit. Navigation within the single
screen thus becomes a problem. Some web portals, trying to be everything to everyone,
have such navigational problems.

---

## Chunk 1984

In some cases, depending on user work flows, tabbed panes can be appropriate. Tabbed
panes bring with them a level of navigational excise and potential for user disorientation
274 Part II: Making Well-Behaved Products

---

## Chunk 1985

--- Page 305 ---
because they obscure what was on the screen before the user navigated to them. How-
ever, this idiom is appropriate for the main work area when multiple documents or inde-
pendent views of a document are required (such as in Microsoft Excel; see Figure 12-1).
Figure 12-1: Microsoft Excel makes use of tabbed panes (visible in the lower left) to let users nav-

---

## Chunk 1986

igate between related worksheets. Excel also makes use of splitters to provide adjacent panes for
viewing multiple, distant parts of a single spreadsheet without constant scrolling. Both these idioms
help reduce navigational excise for Excel users.
Some developers use tabs to break complex product capabilities into smaller chunks.

---

## Chunk 1987

They reason that using these capabilities will somehow become easier if the functional-
ity is cut into bite-sized pieces. Actually, putting parts of a single facility onto separate
panes increases excise and decreases users‚Äô understanding and orientation.
The use of tabbed screen areas is a space-saving mechanism and is sometimes necessary

---

## Chunk 1988

to fit all the required information and functions into a limited space. (Settings dialogs
are a classic example. We don‚Äôt think anyone is interested in seeing all the settings for
a sophisticated application laid bare in a single view.) In most cases, though, the use of
tabs creates significant navigational excise. It is rarely possible to accurately describe the

---

## Chunk 1989

contents of a tab with a succinct label (though in a pinch, rich visual modeless feedback
CH 12. Reducing Work and Eliminating Excise 275

---

## Chunk 1990

--- Page 306 ---
on tabs can help‚Äîsee Chapter 15). Therefore, users must click through each tab to find
the tool or piece of information they are looking for.
Tabbed panes can be appropriate when there are multiple supporting panes for a pri-
mary work area that are not used at the same time. The support panes can be stacked,

---

## Chunk 1991

and the user can choose the pane suitable for his current tasks, which is only a click
away. A classic example involves the color mixer and swatches area in Adobe Illustrator,
as shown in Figure 12-2. These two tools are mutually exclusive ways of selecting a draw-
ing color, and users typically know which is appropriate for a given task.

---

## Chunk 1992

Figure 12-2: Tabbed palettes in Adobe Illustrator allow users
to switch between the mixer and swatches, which provide
alternative mechanisms for picking a color.
navigation between tools and menus
Another important and overlooked form of navigation results from a user‚Äôs need to use
different tools, palettes, and functions. Spatial organization of these within a pane or

---

## Chunk 1993

window is critical to minimizing extraneous mouse movements that, at best, could result
in user annoyance and fatigue and, at worst, could result in repetitive stress injury. Tools
that are used frequently and in conjunction with each other should be grouped spatially
and also should be immediately available. Menus require more navigational effort on

---

## Chunk 1994

the part of users because their contents are not visible prior to clicking. Frequently used
functions should be provided in toolbars, palettes, or the equivalent. Menu use should
be reserved for infrequently accessed commands. (We discuss organizing controls again
later in this chapter, and we discuss toolbars in depth in Chapter 18.)

---

## Chunk 1995

Adobe Photoshop exhibits some undesirable behaviors in how it forces users to navigate
between palette controls. For example, the Paint Bucket tool and the Gradient tool each
occupy the same location on the tool palette. You must select between them by clicking
and holding the visible control, which opens a menu, as shown in Figure 12-3. However,

---

## Chunk 1996

both are fill tools, and if both are used frequently, it would be better to place each of them
on the palette next to each other to avoid that frequent, flow-disrupting tool navigation.
276 Part II: Making Well-Behaved Products

---

## Chunk 1997

--- Page 307 ---
Figure 12-3: In Adobe Photoshop, the
Paint Bucket tool is hidden in a combo
icon button (see Chapter 21) on its tool
palette. Even though users make fre-
quent use of both the Gradient tool and
the Paint Bucket tool, they are forced to
access this menu anytime they need to
switch between these tools.
navigation of information

---

## Chunk 1998

Information, or the content of panes or windows, can be navigated using several meth-
ods: scrolling (panning), linking (jumping), and zooming. The first two methods are
common: Scrolling is ubiquitous in most software, and linking is ubiquitous on the
web (although increasingly, linking idioms are being adopted in non-web applications).

---

## Chunk 1999

Zooming is used primarily to visualize 3D and detailed 2D data.
Scrolling is often a necessity, but the need for it should be minimized when possible.
Often there is a trade-off between paging and scrolling information: You should under-
stand your users‚Äô mental models and work flows to determine what is best for them.

---

## Chunk 2000

In 2D visualization and drawing applications, vertical and horizontal scrolling are com-
mon. These kinds of interfaces benefit from a thumbnail map to ease navigation. We‚Äôll
discuss this technique as well as other visual signposts later in this chapter.
Linking is the critical navigational paradigm of the web. Because it is a visually dislocating

---

## Chunk 2001

activity, extra care must be taken to provide visual and textual cues that help orient users.
Zooming and panning are navigational tools for exploring 2D and 3D information. These
methods are appropriate when creating 2D or 3D drawings and models or for exploring
CH 12. Reducing Work and Eliminating Excise 277

---

## Chunk 2002

--- Page 308 ---
representations of real-world 2D and 3D environments (architectural walkthroughs,
or topographic maps, for example). They can fall short when they are used to examine
arbitrary or abstract data presented in more than two dimensions. Some information
visualization tools use zoom to mean ‚ÄúDisplay more attribute details about objects‚Äù‚Äîa

---

## Chunk 2003

logical rather than spatial zoom. As the view of the object enlarges, attributes (often
textual) appear superimposed over its graphical representation. This technique works
great when the attributes in question are tightly associated with spatial data, such as
that employed in Google Maps (see Figure 12-4). But for abstract data spaces, this kind

---

## Chunk 2004

of interaction is almost always better served through an adjacent supporting pane that
displays the properties of selected objects in a more standard, readable form.
Figure 12-4: The Google Maps app makes excellent use of a combi-
nation of spatial and logical zoom. As the user physically zooms in by
spreading his fingers apart on the map, location details such as transit

---

## Chunk 2005

lines, traffic congestion, street names, and places of business also
come into view. Zoom usually works best when applied to concrete
rather than abstract data spaces, such as maps.
278 Part II: Making Well-Behaved Products

---

## Chunk 2006

--- Page 309 ---
Panning and zooming, especially when paired, create navigational difficulties for users.
Although this situation is improving due to the prevalence of online maps and easy to
grasp gestural interfaces, it is still possible for people to get lost using virtual spaces.
Humans are not used to moving in unconstrained 3D environments, and they have diffi-

---

## Chunk 2007

culty perceiving 3D properly when it is projected on a 2D screen. (See Chapter 18 for more
on 3D manipulation.)
skeuomorphic excise
We are experiencing an incredible transformation from the age of industrial, mechan-
ical artifacts to an age of digital, information objects. It is only natural for us, then, to
try to draw on the models and forms of an earlier era that we are comfortable with and

---

## Chunk 2008

use them in this new, less certain one. As the history of the industrial revolution shows,
the fruits of new technology can often only be expressed at first with the language of an
earlier technology. For example, we called railroad engines iron horses and automobiles
horseless carriages. Unfortunately, this imagery and language color our thinking more
than we might admit.

---

## Chunk 2009

Naturally, we tend to use old-style mechanical representations in our new digital envi-
ronments, a practice called skeuomorphism. Sometimes this appropriation of the old is
valid because the function is identical, even if the underlying technology is different.
For example, when we translate the process of typing with a typewriter into doing word

---

## Chunk 2010

processing on a computer, we are using a mechanical representation of a common task.
Typewriters used little metal tabs to rapidly move the carriage several spaces until it
came to rest on a particular column. The process, as a natural outgrowth of the tech-
nology, was called tabbing or setting tabs. Word processors also have tabs because their

---

## Chunk 2011

function is the same; whether you are working on paper rolled around a platen or on
images on a video screen, you need to rapidly slew to a particular margin offset.
More often, however, mechanical representations shouldn‚Äôt be translated verbatim into
the digital world. We encounter problems when we bring our familiar mechanical arti-

---

## Chunk 2012

facts into software. These representations result in excise and unnecessarily limit inter-
actions that could be far more efficient than those allowed for by the old models.
Mechanical procedures are usually easier to perform by hand than they are with digital
products. Consider a simple contact list. If it is faithfully rendered onscreen like a little

---

## Chunk 2013

bound book, it will be much more complex, inconvenient, and difficult to use than the
physical address book. The physical address book, for example, stores names in alpha-
betical order by last name. But what if you want to find someone by her first name? The
mechanical artifact doesn‚Äôt help you: You have to scan the pages manually. The faithfully

---

## Chunk 2014

replicated digital version wouldn‚Äôt search by first name either. The difference is that,
CH 12. Reducing Work and Eliminating Excise 279

---

## Chunk 2015

--- Page 310 ---
on the computer screen, you lose many subtle visual and tangible cues offered by the
paper-based book (bent page corners, penciled-in notes). Meanwhile, scrollbars, swipe-
to-delete, and navigational drilldowns are harder to use, harder to visualize, and harder
to understand than simply flipping pages.

---

## Chunk 2016

Designers paint themselves into a corner when they rely on slavishly skeuomorphic met-
aphors. Visual metaphors such as desktops with telephones, copy machines, staplers,
and fax machines‚Äîor file cabinets with folders in drawers‚Äîmay make it easy to under-
stand the relationships between interface elements and behaviors. But after users learn

---

## Chunk 2017

these fundamentals, managing the metaphor becomes an exercise in excise. (For more
discussion on the limitations of visual metaphors, see Chapter 13.)
Screen real estate consumed by skeuomorphic representations is also excessive, par-
ticularly in sovereign posture applications, where maximizing screen space for content

---

## Chunk 2018

rather than UI chrome is of primary importance. The little telephone that so charmingly
told us how to dial on that first day long ago is now just a barrier to quick communication.
It‚Äôs all too easy to fall into the trap of skeuomorphic excise in the name of user friendli-
ness. Apple‚Äôs iOS veered uncomfortably in the direction of skeuomorphism for versions

---

## Chunk 2019

4, 5, and 6, but it seems to have finally snapped out of it in iOS 7, as shown in Figure 12-5.
Figure 12-5: In iOS 6 (left), Apple indulged in some
excesses of skeuomorphism that seem to have been purged
in iOS 7 (right).
280 Part II: Making Well-Behaved Products

---

## Chunk 2020

--- Page 311 ---
modal excise
The previous chapter introduced the concept of flow, whereby a person enters a highly
productive mental state by working in harmony with her tools. Flow is a natural state,
and people enter it without much prodding. It takes some effort to break into flow after
someone has achieved it. Interruptions like a ringing telephone will do it, as will a modal

---

## Chunk 2021

error message or confirmation dialog. Some interruptions are unavoidable, but inter-
rupting the user‚Äôs flow for no good reason is stopping the proceedings with idiocy and is
one of the most disruptive forms of excise.
Don‚Äôt stop the proceedings with idiocy.
Poorly designed software makes assertions that no self-respecting individual would ever

---

## Chunk 2022

make. It states unequivocally, for example, that a file doesn‚Äôt exist merely because the
software is too stupid to look for the file in the right place, and then it implicitly blames
you for losing it! An application cheerfully executes an impossible query that hangs up
your system until you decide to reboot. Users view such software behavior as idiocy, and
with just cause.

---

## Chunk 2023

Errors, notifiers, and confirmation messages
There are probably no more prevalent excise elements than error message and confirma-
tion message dialogs. These are so ubiquitous that eradicating them takes a lot of work.
In Chapter 15, we discuss these issues at length, but for now, suffice it to say that they
are high in excise and should be eliminated from your applications whenever possible.

---

## Chunk 2024

The typical modal error message is unnecessary. It either tells the user something he
doesn‚Äôt care about or demands that he fix a situation that the application can and should
usually fix just as well. Figure 12-6 shows an error message box displayed by Adobe Illus-
trator 6 when the user tries to save a document. We‚Äôre not exactly sure what it‚Äôs trying to
tell us, but it sounds dire.

---

## Chunk 2025

The message stops an already annoying and time-consuming procedure, making it take
even longer. A user cannot fetch a cup of coffee after telling the application to save his
artwork, because he might return only to see the function incomplete and the applica-
tion mindlessly holding up the process. We discuss how to eliminate these sorts of error
messages in Chapter 21.

---

## Chunk 2026

CH 12. Reducing Work and Eliminating Excise 281

---

## Chunk 2027

--- Page 312 ---
Figure 12-6: This ugly, useless error mes-
sage box stops the proceedings with idiocy.
You can‚Äôt verify or identify what it tells you,
and it gives you no options for responding
other than to admit your own culpability by
clicking OK. This message comes up only
when the application is saving‚Äîwhen you
have entrusted it to do something simple and

---

## Chunk 2028

straightforward. The application can‚Äôt even
save a file without help, and it won‚Äôt tell you
what help it needs!
Figure 12-7 shows another frustrating example, this time from Microsoft Outlook.
Figure 12-7: Here is a horrible confirmation
box that stops the proceedings with idiocy.
If the application is smart enough to detect
the difference, why can‚Äôt it correct the prob-

---

## Chunk 2029

lem itself? The options the dialog offers are
scary. It is telling you that you can explode
one of two boxes: One contains garbage, and
the other contains the family dog‚Äîbut the
application won‚Äôt say which is which. And if
you click Cancel, what does that mean? Will
it still explode your dog?
This dialog is asking you to make an irreversible and potentially costly decision based

---

## Chunk 2030

on no information whatsoever! If the dialog occurs just after you changed some rules,
doesn‚Äôt it stand to reason that you want to keep them? And if you don‚Äôt, wouldn‚Äôt you like
a bit more information, such as exactly what rules are in conflict and which of them are
the more recently created? You also don‚Äôt have a clear idea what happens when you click

---

## Chunk 2031

Cancel. Are you canceling the dialog and leaving the rules mismatched? Are you dis-
carding recent changes that led to the mismatch? The kind of fear and uncertainty that
this poorly designed interaction arouses in users is completely unnecessary. We discuss
how to improve this kind of situation in Chapter 21.
282 Part II: Making Well-Behaved Products

---

## Chunk 2032

--- Page 313 ---
making users ask permission
Back in the days of command lines and character-based menus, interfaces indirectly
offered services to users. If you wanted to change an item, such as your address, first
you had to ask the application for permission to do so. The application would then dis-
play a screen where you could change your address. Asking permission is pure excise,

---

## Chunk 2033

and unfortunately things haven‚Äôt changed much. If you want to change one of your
saved addresses on Amazon.com, you have to click a button and go to a different page.
If you want to change a displayed value, you should be able to change it right there. You
shouldn‚Äôt have to ask permission or go to a different room.
Don‚Äôt make users ask permission.

---

## Chunk 2034

As in the preceding example, many applications have one place where the values (such
as filenames, numeric values, and selected options) are displayed for output and another
place where user input to them is accepted. This follows the implementation model,
which treats input and output as different processes. A user‚Äôs mental model, however,

---

## Chunk 2035

doesn‚Äôt recognize a difference. He thinks, ‚ÄúThere is the number. I‚Äôll just click it and enter
a new value.‚Äù If the application can‚Äôt accommodate this impulse, it is needlessly insert-
ing excise into the interface. If the user can modify options, he should be able to do so
right where the application displays them.
Allow input wherever you have output.

---

## Chunk 2036

The opposite of asking permission can be useful in certain circumstances. Rather than
asking the application to launch a dialog, the user tells a dialog to go away and not return.
In this way, the user can make an unhelpful dialog stop badgering him, even though the
application mistakenly thinks it is helping. Microsoft Windows now makes heavy use

---

## Chunk 2037

of this idiom. (If a beginner inadvertently dismisses a dialog and can‚Äôt figure out how to
get it back, he may benefit from another easy-to-identify safety-net idiom in a prominent
place‚Äîa Help menu item saying ‚ÄúBring back all dismissed dialogs,‚Äù for example.)
stylistic excise
Users must perform visual work to decode onscreen information, such as finding a sin-

---

## Chunk 2038

gle item in a list, figuring out where to begin reading on a screen, or determining which
elements on a screen are clickable and which are merely decoration.
CH 12. Reducing Work and Eliminating Excise 283

---

## Chunk 2039

--- Page 314 ---
A significant source of visual work is the use of overly stylized graphics and interface ele-
ments (see Figure 12-8). Visual style can certainly create mood and reinforce brand, but
it shouldn‚Äôt do so at the expense of utility and usability by forcing users to decode visual
elements to understand which represent controls and critical information and which are

---

## Chunk 2040

merely ornamental. The use of visual style, at least in apps geared toward productivity
rather than entertainment, should support the clear communication of information and
interface behavior.
Figure 12-8: The home page of Blue Bell Creameries provides a good example of visual excise. Text
is highly stylized and doesn‚Äôt follow a layout grid. It‚Äôs difficult for users to differentiate between d√©cor

---

## Chunk 2041

and navigational elements. This requires users to do visual work to interact with the site. This isn‚Äôt
always a bad thing‚Äîjust the right amount of the right kind of work can be a source of entertainment
(as with games and puzzles).
For more discussion on striking the right balance to create effective visual interface
designs, see Chapter 17.
284 Part II: Making Well-Behaved Products

---

## Chunk 2042

--- Page 315 ---
Excise Is Contextual
One man‚Äôs (or persona‚Äôs) goal-directed task may be another‚Äôs excise task in a different
context. In general, a function or action is excise if it is forced on the user rather than
made available at his discretion. An example of this kind of function is window manage-
ment. The only way to determine whether a function or behavior such as this is excise is

---

## Chunk 2043

by comparing it to personas‚Äô goals. If a significant persona needs to see two applications
at a time on the screen to compare or transfer information, the ability to configure the
main windows of the applications so that they share the screen space is not excise. If
your personas don‚Äôt have this specific goal or need, the work required to configure the
main window of either application is excise.

---

## Chunk 2044

Excise may also vary by software posture (see Chapter 9). Users of transient posture
applications often require some instruction to use the product effectively. Allocating
screen real estate to this effort typically does not contribute to excise in the same way
as it does in sovereign posture applications. Transient posture applications aren‚Äôt used

---

## Chunk 2045

frequently, so their users need more assistance understanding what the application does
and remembering how to control it. For sovereign posture applications, however, the
slightest excise becomes agonizing over time.
However, some types of actions are almost always excise and should be eliminated under
all circumstances. These include most hardware-management tasks that the software

---

## Chunk 2046

could handle itself (if a few more design and engineering cycles were spent on it). Any
demands for such information should be struck from user interfaces and replaced with
more silently intelligent application behavior behind the scenes.
Eliminating Excise
Navigational excise is easily the most prevalent type of excise found in digital products

---

## Chunk 2047

and thus is one of the best places to start eliminating it. There are many ways to begin
improving (eliminating, reducing, or speeding up) navigation in your applications, web-
sites, and devices. Here are the most effective:
‚Ä¢ Reduce the number of places to go.
‚Ä¢ Provide signposts.
‚Ä¢ Provide overviews.
‚Ä¢ Properly map controls to functions.
‚Ä¢ Avoid hierarchies.

---

## Chunk 2048

‚Ä¢ Don‚Äôt replicate mechanical models.
We‚Äôll discuss these in detail next.
CH 12. Reducing Work and Eliminating Excise 285

---

## Chunk 2049

--- Page 316 ---
reduce the number of places to go
The most effective method of improving navigation sounds quite obvious: Reduce the
number of places to which one must navigate. These ‚Äúplaces‚Äù include modes, forms, dia-
logs, pages, windows, and screens. If the number of modes, pages, or screens is kept to a
minimum, people‚Äôs ability to stay oriented increases dramatically. In terms of the four

---

## Chunk 2050

types of navigation presented earlier, this directive means you should do the following:
‚Ä¢ Keep the number of windows and views to a minimum. One full-screen window with
two or three views is best for many users. Keep dialogs, especially modeless dialogs,
to a minimum. Applications, websites, or mobile apps with dozens of distinct types of
pages, screens, or forms are difficult to navigate.

---

## Chunk 2051

‚Ä¢ Limit the number of adjacent panes in your interface to the minimum number needed
for users to achieve their goals. In sovereign posture applications, three panes is a good
thing to shoot for, but there are no absolutes here‚Äîin fact, many applications require
more. On web pages, anything more than two navigation areas and one content area

---

## Chunk 2052

begins to get busy. On tablet apps, two panes is typical.
‚Ä¢ Limit the number of controls to as few as your users really need to meet their goals. Having
a good grasp of your users via personas will enable you to avoid functions and controls
that your users don‚Äôt really want or need and that, therefore, only get in their way.

---

## Chunk 2053

‚Ä¢ Minimize scrolling when possible. This means giving supporting panes enough room
to display information so that they don‚Äôt require constant scrolling. Default views of 2D
and 3D diagrams and scenes should be such that the user can orient himself without
too much panning. Zooming is the most difficult type of navigation for most users

---

## Chunk 2054

(though more straightforward in mobile apps using pinch gestures), so its use should
be discretionary, not a requirement.
Many online stores present confusing navigation because the designers have tried to
serve everyone with one generic site. If a user buys books but never music from a site,
access to the music portion of the site could be deemphasized in the main screen for

---

## Chunk 2055

that user. This makes more room for that user to buy books, and the navigation becomes
simpler. Conversely, if he visits his account page frequently, his version of the site should
prominently display his account button (or tab).
Provide signposts
In addition to reducing the number of navigable places, another way to enhance users‚Äô

---

## Chunk 2056

ability to find their way around is by providing better points of reference‚Äîsignposts. In
the same way that sailors navigate by reference to shorelines or stars, users navigate by
reference to persistent objects placed in a user interface.
286 Part II: Making Well-Behaved Products

---

## Chunk 2057

--- Page 317 ---
Persistent objects, in a desktop world, always include the application‚Äôs windows. Each
application most likely has a main, top-level window. The salient features of that window
are also considered persistent objects: menu bars, toolbars, and other palettes or visual
features like status bars and rulers. Generally, each window of the interface has a dis-

---

## Chunk 2058

tinctive look that will soon become recognizable.
On the web, similar rules apply. Well-designed websites make careful use of persistent
objects that remain constant throughout the shopping experience, especially the top-
level navigation bar along the top of the page. Not only do these areas provide clear nav-
igational options, but their consistent presence and layout also help orient customers

---

## Chunk 2059

(see Figure 12-9).
Figure 12-9: The Design Within Reach website makes use of many persistent areas on the majority
of its pages, such as the links and search field along the top and the browse tools on the side. These
not only help users figure out where they can go but also help keep them oriented.
CH 12. Reducing Work and Eliminating Excise 287

---

## Chunk 2060

--- Page 318 ---
In devices, similar rules apply to screens, but hardware controls themselves can take on
the role of signposts‚Äîeven more so when they offer visual or tactile feedback about their
state. Radio buttons that, for example, light when selected, even a needle‚Äôs position on a
dial, can provide navigational information if integrated appropriately with the software.

---

## Chunk 2061

Depending on the application, the contents of the application‚Äôs main window may also
be easily recognizable (especially with kiosks and small-screen devices). Some applica-
tions may offer a few different views of their data, so the overall aspect of their screens
changes depending on the view chosen. A desktop application‚Äôs distinctive look, how-

---

## Chunk 2062

ever, usually comes from its unique combination of menus, palettes, and toolbars. This
means that menus and toolbars must be considered aids to navigation. You don‚Äôt need a
lot of signposts to navigate successfully; they just need to be visible. Needless to say, sign-
posts can‚Äôt aid navigation if they are removed, so it is best if they are permanent fixtures

---

## Chunk 2063

of the interface (some iOS browsers break this rule slightly by allowing controls to scroll
up as the user moves down the page; however, they immediately scroll back down when
the user reverses direction‚Äîa clever means of bringing controls back into focus as soon
as they are needed).
Making each page on a website look just like every other one may maintain visual con-

---

## Chunk 2064

sistency, but it can, if carried too far, be disorienting. You should use common elements
consistently on each page, but by making different rooms look distinctive, you will help
orient your users better.
menus
The most prominent permanent object in a desktop application is the main window and
its title and menu bars. Part of the benefit of the menu comes from its reliability and con-

---

## Chunk 2065

sistency. Unexpected changes to an application‚Äôs menus can deeply reduce users‚Äô trust in
them. This is true for menu items as well as for individual menus.
Toolbars
If the application has a toolbar, it should also be considered a recognizable signpost.
Because toolbars are idioms for perpetual intermediates rather than for beginners, the

---

## Chunk 2066

strictures against changing menu items don‚Äôt apply quite as strongly to individual tool-
bar controls. Removing the toolbar itself is certainly a dislocating change to a persistent
object. Although the ability to do so should exist, it shouldn‚Äôt be offered casually, and
users should be protected from accidentally triggering it. Some applications put a con-

---

## Chunk 2067

trol on the toolbar that makes the toolbar disappear! This is a completely inappropriate
ejector seat lever.
288 Part II: Making Well-Behaved Products

---

## Chunk 2068

--- Page 319 ---
other interface signposts
Tool palettes and fixed areas of the screen where data is displayed or edited should also
be considered persistent objects that add to the interface‚Äôs navigational ease. Judicious
use of white space and legible fonts is important so that these signposts remain clearly
evident and distinctive.
Provide overviews

---

## Chunk 2069

Overviews serve a purpose similar to signposts in an interface: They help orient users.
The difference is that overviews help orient users within the content rather than within
the application as a whole. Because of this, the overview area should itself be persistent;
its content is dependent on the data being navigated.

---

## Chunk 2070

Overviews can be graphical or textual, depending on the nature of the content. An excel-
lent example of a graphical overview is the aptly named Navigator palette in Adobe Pho-
toshop, shown in Figure 12-10.
Figure 12-10: On the left, Adobe makes use of an excellent overview idiom in Photoshop: the Navi-

---

## Chunk 2071

gator palette, which provides a thumbnail view of a large image with an outlined box that represents
the portion of the image currently visible in the main display. Not only does the palette provide nav-
igational context, but it can be used to pan and zoom the main display as well. A similar idiom is

---

## Chunk 2072

employed on the right in the Google Finance charting tool, in which the small graph on the bottom
provides a big-picture view and context for the zoomed-in view on top.
In the web world, the most common form of overview area is textual: the ubiquitous
breadcrumb display (see Figure 12-11). Again, most breadcrumbs provide a navigational

---

## Chunk 2073

aid as well as a navigational control: Not only do they show where in the data structure
a visitor is, but they also give him or her tools to move to different nodes in the structure
in the form of links. This idiom has lost some popularity as websites have moved from
being strictly hierarchical organizations to more associative organizations, which don‚Äôt
lend themselves as neatly to breadcrumbs.

---

## Chunk 2074

CH 12. Reducing Work and Eliminating Excise 289

---

## Chunk 2075

--- Page 320 ---
Figure 12-11: A typical breadcrumb display from Amazon.com. Users see where they‚Äôve been and
can click anywhere in the breadcrumb trail to navigate to that link.
A final interesting example of an overview tool is the annotated scrollbar, which is
most useful for scrolling through text. They make clever use of the linear nature of

---

## Chunk 2076

both scrollbars and textual information to provide location information about the
locations of selections, highlights, and potentially many other attributes of formatted
or unformatted text. Hints about the locations of these items appear in the ‚Äútrack‚Äù
that the thumb of the scrollbar moves in, at the appropriate location. When the thumb

---

## Chunk 2077

is over the annotation, the annotated feature of the text is visible in the display. Mic-
rosoft Word uses a variation of the annotated scrollbar; it shows the page number
and nearest header in a ToolTip that remains active during the scroll, as shown in
Figure 12-12.
Figure 12-12: An annotated scrollbar from Microsoft
Word provides useful context for the user as he or she

---

## Chunk 2078

navigates through a document.
Properly map controls to functions
Mapping describes the relationship between a control, the thing it affects, and the
intended result. Poor mapping is evident when a control does not relate visually,
spatially, or symbolically to the object it affects. Poor mapping requires users to stop

---

## Chunk 2079

and think about the relationship, breaking flow. Poor mapping of controls to func-
tions increases the cognitive load for users and can result in potentially serious user
errors.
290 Part II: Making Well-Behaved Products

---

## Chunk 2080

--- Page 321 ---
Donald Norman provides an excellent example of mapping problems from the non-digital
world in The Design of Everday Things (Basic Books, 2002). Almost anyone who cooks has
run into the annoyance of a stovetop whose burner knobs do not map appropriately to the
burners they control. The typical stovetop, such as the one shown in Figure 12-13, features

---

## Chunk 2081

four burners arranged in a flat square with a burner in each corner. However, the knobs
that operate those burners are laid out in a straight line on the front of the unit.
Figure 12-13: A stovetop with poor physical mapping of controls. Does the
knob on the far left control the left-front or left-rear burner? Users must
figure out the mapping anew each time they use the stovetop.

---

## Chunk 2082

In this case, we have a physical mapping problem. The result of using the control is rea-
sonably clear: A burner will heat up when you turn a knob. However, the target of the
control‚Äîwhich burner will get warm‚Äîis unclear. Does twisting the leftmost knob turn
on the left-front burner, or does it turn on the left-rear burner? Users must find out by

---

## Chunk 2083

trial and error or by referring to the tiny icons next to the knobs. The unnaturalness of
the mapping compels users to figure out this relationship anew every time they use the
stove. This cognitive work may become habituated over time, but it still exists, making
users prone to error if they are rushed or distracted (as people often are while preparing

---

## Chunk 2084

meals). In the best-case scenario, users feel stupid because they‚Äôve twisted the wrong
knob, and their food doesn‚Äôt get hot until they notice the error. In the worst-case sce-
nario, they might accidentally burn themselves or set fire to the kitchen.
The solution requires moving the stovetop knobs so that they better suggest which burn-

---

## Chunk 2085

ers they control. The knobs don‚Äôt have to be laid out in exactly the same pattern as the
burners, but they should be positioned so that the target of each knob is clear. The stove-
top shown in Figure 12-14 is a good example of an effective mapping of controls.
In this layout, it‚Äôs clear that the upper-left knob controls the upper-left burner. The place-

---

## Chunk 2086

ment of each knob visually suggests which burner it will turn on. Norman calls this more
intuitive layout ‚Äúnatural mapping.‚Äù
Figure 12-15 shows another example of poor mapping‚Äîof a different type. In this case, it
is the logical mapping of concepts to actions that is unclear.
CH 12. Reducing Work and Eliminating Excise 291

---

## Chunk 2087

--- Page 322 ---
Figure 12-14: Clear spatial mapping. On this stovetop, it is clear
which knob maps to which burner, because the spatial arrange-
ment of knobs clearly associates each knob with a burner.
Figure 12-15: An example of a logical mapping problem. If the user wants to see the
most recent items first, does she choose Ascending or Descending? These terms don‚Äôt

---

## Chunk 2088

map well to how users conceive of time.
This website uses a pair of drop-down menus to sort a list of search results by date. The
selection in the first drop-down determines the choices present in the second. When
Re-sort results by: Date Placed is selected in the first menu, the second drop-down
presents the options Ascending and Descending.

---

## Chunk 2089

Unlike the poorly mapped stovetop knobs, the target of this control is clear‚Äîthe drop-
down menu selections affect the list below them. However, the result of using the control
is unclear: Which sort order will the user get if she chooses Ascending?
The terms chosen to communicate the date-sorting options make it unclear what users

---

## Chunk 2090

should choose if they want to see the most recent items first in the list. Ascending and
Descending do not map well to most users‚Äô mental model of time. People don‚Äôt think of
dates as ascending or descending; rather, they think of dates and events as being recent
or ancient. A quick fix to this problem is to change the wording of the options to Most

---

## Chunk 2091

recent first and Oldest first, as shown in Figure 12-16.
292 Part II: Making Well-Behaved Products

---

## Chunk 2092

--- Page 323 ---
Figure 12-16: Clear, logical mapping. ‚ÄúMost recent‚Äù and ‚ÄúOldest‚Äù are terms that
users can easily map to time-based sorting.
Whether you make appliances, mobile apps, desktop applications, or websites, your
product may have mapping problems. Mapping is an area where attention to detail pays
off. You can measurably improve a product by seeking out and fixing mapping problems,

---

## Chunk 2093

even if you have very little time to make changes. The result is a product that is easier to
understand and more pleasurable to use.
Avoid hierarchies
Hierarchies are one of the developer‚Äôs most durable tools. Much of the data inside appli-
cations, along with much of the code that manipulates it, is in hierarchical form. For this

---

## Chunk 2094

reason, many developers present hierarchies (the implementation model) in user inter-
faces. Early menus, as we‚Äôve seen, were hierarchical. But abstract hierarchies are very
difficult for users to successfully navigate, except where they‚Äôre based on user mental
models and the categories are truly mutually exclusive. This truth is often difficult for

---

## Chunk 2095

developers to grasp because they themselves are so comfortable with hierarchies.
Most humans are familiar with hierarchies in their business and family relationships,
but hierarchies are not natural concepts for most people when it comes to storing
and retrieving arbitrary information. Most mechanical storage systems are simple,

---

## Chunk 2096

composed of either a single sequence of stored objects (like a bookshelf) or a series of
sequences, one level deep (like a file cabinet). This method of organizing things into a
single layer of groups is extremely common and can be found everywhere in your home
and office. Because it never exceeds a single level of nesting, we call this storage para-
digm monocline grouping.

---

## Chunk 2097

Developers are comfortable with nested systems, in which an instance of an object is
stored in another instance of the same object. Most other humans have a difficult time
with this idea. In the mechanical world, complex storage systems, by necessity, use dif-
ferent mechanical form factors at each level. In a file cabinet, you never see folders inside

---

## Chunk 2098

folders or file drawers inside file drawers. Even the dissimilar nesting of folder-inside-
drawer- inside-cabinet rarely exceeds two levels of nesting. In the current desktop met-
aphor used by most window systems, you can nest folder within folder ad infinitum. It‚Äôs
no wonder most computer neophytes get confused when confronted with this paradigm.
CH 12. Reducing Work and Eliminating Excise 293

---

## Chunk 2099

--- Page 324 ---
Most people store their papers (and other items) in a series of stacks or piles based on
some common characteristic: The Acme papers go here; the Project M papers go there;
personal stuff goes in the drawer. Donald Norman (1994) calls this a pile cabinet. Only
inside computers do people put the Project M documents inside the Active Clients folder,

---

## Chunk 2100

which in turn is stored inside the Clients folder, stored inside the Business folder.
Computer science gives us hierarchical structures as tools to solve the very real problems
of managing massive quantities of data. But when this implementation model is reflected
in the represented model presented to users (as discussed in Chapter 1), they get confused,

---

## Chunk 2101

because it conflicts with their mental model of storage systems. Monocline grouping is
the mental model people typically bring to software. Monocline grouping is so dominant
outside the computer that interaction designers violate this model at their peril.
Monocline grouping is an inadequate system for physically managing the large quantities

---

## Chunk 2102

of data commonly found on computers, but that doesn‚Äôt mean it isn‚Äôt useful as a repre-
sented model. The solution to this conundrum is to render the structure as the user imag-
ines it‚Äîas monocline grouping‚Äîbut to provide the search and access tools that only a
deep hierarchical organization can offer. In other words, rather than forcing users to nav-

---

## Chunk 2103

igate deep, complex tree structures, give them tools to bring appropriate information to
themselves. We‚Äôll discuss some design solutions that help make this happen in Chapter 14.
Don‚Äôt replicate mechanical-Age models
As already discussed, skeuomorphic excise‚Äîresulting from an unreflective replication of
Mechanical-Age actions in digital interfaces‚Äîadds excise, navigational and otherwise.

---

## Chunk 2104

It makes sense to spend some time rethinking products and features that are translated
from the pre-digital world. How can the new, digital version be streamlined and adapted
to take full advantage of the digital environment? How can excise be eliminated and
smarts brought to bear?
Take the desk calendar. In the non-digital world, calendars are made of paper and are

---

## Chunk 2105

usually divided into a one-month-per-page format. This is a reasonable compromise
based on the size of paper, file folders, briefcases, and desk drawers.
Digital products with representations of calendars are quite common, and they almost
always display one month at a time. Even if they can show more than one month, as Out-

---

## Chunk 2106

look does, they almost always display days in discrete one-month chunks. Why?
Paper calendars show a single month because they are limited by the size of the paper,
and a month is a convenient breaking point. High-resolution digital displays are not so
constrained, but most designers copy the mechanical artifact faithfully, as shown in
Figure 12-17.
294 Part II: Making Well-Behaved Products

---

## Chunk 2107

--- Page 325 ---
Figure 12-17: The ubiquitous calendar is so familiar that we rarely stop to apply Information-Age
sensibilities to its design on the screen. Calendars were originally designed to fit on stacked sheets
of paper, not interactive digital displays. How would you redesign a digital calendar? Which of its
aspects are artifacts of its old, Mechanical-Age platform?

---

## Chunk 2108

On an interactive screen, the calendar could easily be a continuously scrolling sequence
of days, weeks, or months, as shown in Figure 12-18. Scheduling something from August
28 to September 4 would be simple if weeks were contiguous instead of broken up by the
arbitrary monthly division.
Similarly, the grid pattern in digital calendars is almost universally a fixed size. Why

---

## Chunk 2109

can‚Äôt the width of columns of days or the height of rows of weeks be adjustable like a
spreadsheet? Certainly you‚Äôd want to adjust the sizes of your weekends to reflect their
relative importance in relation to your weekdays. If you‚Äôre a businessperson, your work-
ing-week calendar would demand more space than a vacation week. The adjustable grid

---

## Chunk 2110

interface idiom is well known‚Äîevery spreadsheet in the world uses it‚Äîbut the mechan-
ical representations of calendars are so firmly entrenched that we rarely see apps that
deviate from them.
CH 12. Reducing Work and Eliminating Excise 295

---

## Chunk 2111

--- Page 326 ---
Figure 12-18: Scrolling is a familiar task to computer users. Why not replace the page-oriented calen-
dar with a scrolling one to make it better? This perpetual calendar can do everything the old one can,
and it also solves the mechanical-representation problem of scheduling across monthly boundaries.

---

## Chunk 2112

Don‚Äôt drag old limitations onto new platforms out of habit. What other improvements can you think of?
The designer of the software shown in Figure 12-17 probably thought of calendars as
canonical objects that couldn‚Äôt be altered from the familiar. Surprisingly, most time-
management software handles time internally‚Äîin its implementation model‚Äîas a

---

## Chunk 2113

continuum, and renders it as discrete months only in its user interface‚Äîits represented
model!
Some might argue that the one-month-per-page calendar is better because it is easily
recognizable and familiar to users. However, the new digital model isn‚Äôt all that different
from the old paper model, except that it permits the users to do something they couldn‚Äôt

---

## Chunk 2114

easily do before‚Äîschedule across monthly boundaries. People don‚Äôt find it difficult to
adapt to new representations if they offer a significant improvement.
Apple flubbed an opportunity to take this approach with their redesigned iOS7 Calen-
dar app. It features a continuous vertically scrolling calendar in month view‚Ä¶ but the

---

## Chunk 2115

designers chose to line break at month boundaries, and didn‚Äôt support a drag gesture to
specify a multi-day event. So close, and yet so far.
296 Part II: Making Well-Behaved Products

---

## Chunk 2116

--- Page 327 ---
Significant change must be significantly better.
Paper-style calendars in mobile devices and desktops are mute testimony to how
our Mechanical-Age modes of thinking influence our designs. If we don‚Äôt inform our
assumptions about product use with an analysis of user goals, we will end up building

---

## Chunk 2117

excise-ridden software that remains in the Mechanical Age. Better software is based on
Information-Age thinking.
other Common Excise Traps
You should be vigilant in finding and rooting out each small item of excise in your inter-
face. These myriad little extra unnecessary steps can add up to a lot of extra work for
users. This list should help you spot excise transgressions:

---

## Chunk 2118

‚Ä¢ Don‚Äôt force users to go to another window to perform a function that affects the
current window.
‚Ä¢ Don‚Äôt force users to remember where they put things in the hierarchical file system.
‚Ä¢ Don‚Äôt force users to resize windows unnecessarily. When a child window pops up on
the screen, the application should size it appropriately for its contents. Don‚Äôt make it

---

## Chunk 2119

big and empty or so small that it requires constant scrolling.
‚Ä¢ Don‚Äôt force users to move windows. If there is open space on the desktop, put the
application there instead of directly over some other already open application.
‚Ä¢ Don‚Äôt force users to reenter their personal settings. If the user has ever set a font, color,

---

## Chunk 2120

indentation, or sound, make sure that she doesn‚Äôt have to do so again unless she wants
a change.
‚Ä¢ Don‚Äôt force users to fill in fields to satisfy some arbitrary measure of completeness. If
the user wants to omit some details from the transaction entry screen, don‚Äôt force him
to enter them. Assume that he has a good reason for not doing so. In most instances,

---

## Chunk 2121

the completeness of the database isn‚Äôt worth badgering users over.
‚Ä¢ Don‚Äôt force users to ask permission. This is frequently a symptom of not allowing input
in the same place as output.
‚Ä¢ Don‚Äôt ask users to confirm their actions. This requires a robust Undo facility.
‚Ä¢ Don‚Äôt let the user‚Äôs actions result in an error.

---

## Chunk 2122

Excise represents the most common and most pernicious barriers to usability and user sat-
isfaction in digital products. Don‚Äôt let it rear its ugly head in your designs or applications!
CH 12. Reducing Work and Eliminating Excise 297

---

## Chunk 2123

--- Page 329 ---
Ch 13
mETAPhors, IDIoms, AnD
AFForDAnCEs
When the first edition of this book was published, interface designers often spoke of find-
ing the right visual and behavioral metaphors on which to base their interface designs.
In that decade or two following the introduction of the Apple Macintosh, it was widely

---

## Chunk 2124

believed that filling interfaces with visual representations of familiar objects from the
real world would give users a pipeline to easy learning. As a result, designers created
interfaces resembling offices filled with desks, file cabinets, telephones, and address
books, or pads of paper, or a street with signs and buildings.

---

## Chunk 2125

With the advent of Android, Windows Phone, and iOS 7, we have officially passed into
a post-metaphorical era of interaction design. Gone are the skeuomorphisms and over-
wrought visual metaphors from the early days of desktop software and handheld devices.
Modern device user interfaces (UIs) (and, increasingly, desktop UIs as well) are properly

---

## Chunk 2126

content- and data-centric, minimizing the cognitive footprint of UI controls almost to
a fault.
This recent shift away from metaphor was long overdue, and for good reason: Strict adher-
ence to metaphors ties interfaces unnecessarily tightly to the workings of the physical
world. One of the most fantastic things about digital products is that the working model

---

## Chunk 2127

presented to users need not be bound by the limitations of physics or the inherent clum-
siness of mechanical systems and 3D real-world objects mapped to 2D control surfaces.

---

## Chunk 2128

--- Page 330 ---
User interfaces based on metaphors have a host of other problems as well. There aren‚Äôt
enough good metaphors to go around, they don‚Äôt scale well, and the users‚Äô ability to rec-
ognize them is often questionable, especially across cultural boundaries. Metaphors,
especially physical and spatial metaphors, have a limited place in the design of most

---

## Chunk 2129

digital products. In this chapter, we discuss the reasons for this, as well as the modern
replacements for design based on metaphors.
Interface Paradigms
The three dominant paradigms in the conceptual and visual design of user interfaces
are implementation-centric, metaphoric, and idiomatic. The implementation-centric
interfaces are based on understanding how things actually work under the hood‚Äîa

---

## Chunk 2130

difficult proposition. Metaphoric interfaces are based on intuiting how things work‚Äîa
risky method. Idiomatic interfaces, however, are based on learning how to accomplish
things‚Äîa natural, human process.
Historically, the field of interaction design has progressed from a heavy focus on tech-
nology (implementation), to an equally heavy focus on metaphor, and, most recently, to a

---

## Chunk 2131

more idiomatic focus. Although many examples of all three types of interface paradigms
still are in use today, the most modern, information-centric interface designs in common
use on computers, phones, tablets, and other devices are primarily idiomatic in nature.
Implementation-centric interfaces
Implementation-centric user interfaces are still widespread, especially in enterprise,

---

## Chunk 2132

medical, and scientific software. Implementation-centric software shows us, without
any hint of shame, precisely how it is built. There is one button per function and one
dialog per module of code, and the commands and processes precisely echo the internal
data structures and algorithms. The side effect of this is that we must first learn how the

---

## Chunk 2133

software works internally to successfully understand and use the interface. Following
the implementation-centric paradigm means user-interface design that is based exclu-
sively on the implementation model.
Clearly, implementation-centric interfaces are the easiest to build. Every time a devel-
oper writes a function, he slaps on a bit of user interface to test that function. It‚Äôs easy to

---

## Chunk 2134

debug, and when something doesn‚Äôt behave properly, it‚Äôs easy to troubleshoot. Further-
more, engineers like to know how things work, so the implementation-centric paradigm
is very satisfying to them. Engineers prefer to see the virtual gears and levers and valves
because this helps them understand what is going on inside the machine. But those arti-

---

## Chunk 2135

facts needlessly complicate things for users. Engineers may want to understand the inner
workings, but most users don‚Äôt have either the time or desire. They‚Äôd much rather be suc-
cessful than knowledgeable, a preference that is often hard for engineers to understand.
300 Part II: Making Well-Behaved Products

---

## Chunk 2136

--- Page 331 ---
Most people would rather be successful than knowledgeable.
A close relative of the implementation-centric interface worth mentioning is the ‚Äúorg-
chart-centric‚Äù interface. This is a common situation in which a product or, most typically,
a website is not organized according to how users are likely to think about information.

---

## Chunk 2137

Instead, it is organized by which part of the company or organization owns whatever
piece of information the user is looking to access. Such a site typically has a tab or area for
each corporate division, and there is a lack of cohesion between these areas. Usually there
is no coordinated design between intracorporate fiefdoms in these situations. Similar

---

## Chunk 2138

to the implementation-centric product interface, an org-chart-centric website requires
users to understand how a corporation is structured so that they can find the information
they are interested in, and that information is often unavailable to those same users.
metaphoric interfaces
Metaphoric interfaces rely on the real-world connections users make between the visual

---

## Chunk 2139

cues in an interface and its function. Since there was less of a need to learn the mechanics
of the software, metaphoric interfaces were a step forward from implementation-centric
interfaces. However, the power and utility of heavily metaphoric interfaces were, at least
for a time, inflated to unrealistic proportions.

---

## Chunk 2140

When we talk about a metaphor in the context of user interface and interaction design,
we really mean a visual metaphor that signals a function: a picture used to represent the
purpose or attributes of a thing. Users recognize the metaphor‚Äôs imagery. By extension,
it is presumed that they can understand the purpose of the thing. Metaphors can range

---

## Chunk 2141

from tiny icons on toolbar buttons to the entire screen on some applications‚Äîfrom a
tiny pair of scissors on a button, indicating Cut, to a full-size checkbook in Quicken.
Instinct, intuition, and learning
In the computer industry, and particularly in the user-interface design community, the
word intuitive is often used to mean easy to use or easy to understand. This term has

---

## Chunk 2142

become closely associated with metaphorical interfaces.
We do understand metaphors intuitively, but what does that really mean? Webster‚Äôs Dic-
tionary defines intuition like this:
in¬∑tu¬∑i¬∑tion \in-t√º-'i-sh”ôn\ n 1 : quick and ready insight 2 a : immediate apprehension or
'
cognition b : knowledge or conviction gained by intuition c : the power or faculty of attaining

---

## Chunk 2143

to direct knowledge or cognition without evident rational thought and inference
CH 13. Metaphors, Idioms, and Affordances 301

---

## Chunk 2144

--- Page 332 ---
This definition doesn‚Äôt say much about how we intuit something. In reality, no magical
quality of ‚Äúintuitiveness‚Äù makes things easy to use. Instead, there are concrete reasons
why people grasp some interfaces and not others.
Certain sounds, smells, and images make us respond without any previous conscious

---

## Chunk 2145

learning. When a child encounters an angry dog, she instinctively knows that bared teeth
signal danger, even without any previous learning. Instinct is a hardwired response that
involves no conscious thought.
Examples of instinct in human-computer interaction include how we are startled by
unexpected changes in the image on our computer screen, how we find our eyes drawn

---

## Chunk 2146

to a flashing advertisement on a web page, and how we react to sudden noises from our
computer or the haptic vibrations of our video-game controller.
Intuition, unlike instinct, works by inference, in which we see connections between dis-
parate subjects and learn from these similarities while not being distracted by their dif-

---

## Chunk 2147

ferences. We grasp the meaning of the metaphoric elements of an interface because we
mentally connect them with other things we have previously learned in the world.
You intuit how to use a wastebasket icon, for example, because you once learned how a
real wastebasket works, thereby preparing your mind to make the connection years later.

---

## Chunk 2148

You didn‚Äôt intuit how to use the original wastebasket. It was just an easy thing to learn.
Metaphorical interfaces are an efficient way to take advantage of the awesome power of
the human mind to make inferences. However, this approach also depends on the idio-
syncratic minds of users, which may not have the requisite language, learned experiences,

---

## Chunk 2149

or inferential power necessary to make those connections. Furthermore, metaphorical
approaches to interface design have other serious problems, as we shall soon see.
The tyranny of the global metaphor
The most significant problem with metaphors is that they tie our interfaces to Mechani-
cal Age artifacts. An extreme example of this was Magic Cap, the operating system for a

---

## Chunk 2150

handheld communicator. It was introduced by a company called General Magic, founded
by Macintosh software gurus Andy Hertzfeld and Bill Atkinson. It was ahead of its time
in overall concept, with its remarkably usable touchscreen keyboard and address book
nearly 15 years before the iPhone.
Unfortunately, it relied on metaphors for almost every aspect of its interface. You

---

## Chunk 2151

accessed your messages from an inbox or a notebook on a desk. You walked (virtually)
down a hallway lined with doors representing secondary functions. You went outside to
302 Part II: Making Well-Behaved Products

---

## Chunk 2152

--- Page 333 ---
access third-party services, which, as shown in Figure 13-1, were represented by build-
ings on a street. You entered a building to configure a service, and so on.
Relying heavily on a metaphor such as this means that you can intuit the software‚Äôs
basic functions. But the downside is that, after you understand its function, the met-

---

## Chunk 2153

aphor adds significantly to the overhead of navigation. You must go back out onto the
street to configure another service. You must go down the hallway and into the game
room to play Solitaire. This may be normal in the physical world, but there is no reason
for it in the world of software. Why not abandon this slavish devotion to metaphor and

---

## Chunk 2154

give the user easy access to functions? It turns out that a General Magic developer
later created a bookmarking shortcut facility as a kludgy add-on, but alas, it was too
little, too late.
Figure 13-1: The Magic Cap interface from General
Magic was used in products from Sony and Motorola in
the mid-1990s. It is a tour de force of metaphoric design.

---

## Chunk 2155

All the navigation in the interface, and most other inter-
actions as well, were subordinated to the maintenance of
spatial and physical metaphors. It was probably fun to
design but was not particularly convenient to use after
you became an intermediate. This was a shame, because
some of the lower-level, nonmetaphoric data-entry interac-
tions were quite sophisticated, well designed, and ahead

---

## Chunk 2156

of their time.
General Magic‚Äôs interface relied on what is called a global metaphor. This is a single, over-
arching metaphor that provides a framework for all the other metaphors in the system. It
might work for a video game, but much less so for anything where efficiency is a concern.
The hidden problem of global metaphors is the mistaken belief that other lower-level

---

## Chunk 2157

metaphors consistent with them enjoy cognitive benefits by association. It‚Äôs impossible
to resist stretching the metaphor beyond simple function recognition: That software
CH 13. Metaphors, Idioms, and Affordances 303

---

## Chunk 2158

--- Page 334 ---
telephone also lets us dial with buttons just like those on our desktop telephone. We see
software that has an address book of phone numbers just like those in our pocket and
purse. Wouldn‚Äôt it be better to go beyond these confining, Industrial Age technologies
and deliver some of the computer‚Äôs real power? Why shouldn‚Äôt our communications soft-

---

## Chunk 2159

ware allow multiple connections or make connections by organization or affiliation, or
just hide the use of phone numbers?
Alexander Graham Bell would have been ecstatic if he could have created a phone that
let you call your friends just by pointing to pictures of them. He couldn‚Äôt do so because
he was restricted by the dreary realities of electrical circuits and Bakelite moldings. On

---

## Chunk 2160

the other hand, today we have the luxury of rendering our communications interfaces in
any way we please. Showing pictures of our friends is completely reasonable. In fact, it‚Äôs
what modern phone interfaces like the iPhone do.
For another example of the problematic nature of extending metaphors, we need look
no further than the file system and its folder metaphor. As a mechanism for organizing

---

## Chunk 2161

documents, it is quite easy to learn and understand because of its similarity to a physical
file folder in a file cabinet. Unfortunately, as is the case with most metaphoric user inter-
faces, it functions a bit differently than its real-world analog, which has the potential to
create cognitive friction on the part of users. For example, in the world of paper, no one

---

## Chunk 2162

nests folders 10 layers deep. This fact makes it difficult for novice computer users to come
to terms with the navigational structures of an operating system.
Implementing this mechanism also has limiting consequences. In the world of paper,
it is impossible for a document to be located in two different places in a filing cabinet.

---

## Chunk 2163

As a result, filing is executed with a single organization scheme (such as alphabetically
by name or numerically by account number). Our digital products are not intrinsically
bound by such limitations. But blind adherence to an interface metaphor has drastically
limited our ability to file a single document according to multiple organization schemes.
Never bend your interface to fit a metaphor.

---

## Chunk 2164

As Brenda Laurel described in Computers as Theatre (Addison-Wesley, 2013), ‚ÄúInterface
metaphors rumble along like Rube Goldberg machines, patched and wired together
every time they break, they are so encrusted with the artifacts of repair that we can no
longer interpret them or recognize their referents.‚Äù Of all the misconceptions to emerge

---

## Chunk 2165

from Xerox PARC, the desirability of global metaphors is perhaps the most debilitating
and unfortunate.
304 Part II: Making Well-Behaved Products

---

## Chunk 2166

--- Page 335 ---
other limitations of metaphors
Metaphors have many other limitations when applied to modern Information Age sys-
tems. For one thing, metaphors don‚Äôt scale very well. A metaphor that works well for a
simple process in a simple application often fails to work well as that process grows in
size or complexity. Large desktop file icons as a means of accessing and manipulating

---

## Chunk 2167

files were a good idea when computers had floppy drives or 20 MB hard drives with only
a couple of hundred files. But in these days of terabyte hard drives and tens of thousands
of files, file icons become too clumsy to use effectively by themselves as a means for mov-
ing files around.
Next, while it may be easy to discover visual metaphors for physical objects like printers

---

## Chunk 2168

and documents, it can be difficult or impossible to find metaphors for processes, rela-
tionships, services, and transformations‚Äîthe most frequent uses of software. It can be
daunting to find a useful visual metaphor for changing channels, purchasing an item,
finding a reference, setting a format, changing a photograph‚Äôs resolution, or performing

---

## Chunk 2169

statistical analysis. Yet these operations are the types of processes we use software to
perform most frequently.
Metaphors also rely on associations perceived in similar ways by both the designer and
the user. If the user doesn‚Äôt have the same cultural background as the designer, meta-
phors can fail. Even in the same or similar cultures, significant misunderstandings can

---

## Chunk 2170

occur. Does a picture of an airplane in an airline app mean ‚ÄúCheck flight arrival informa-
tion‚Äù or ‚ÄúMake a reservation‚Äù?
Finally, although a metaphor is easier for first-time users to understand, it exacts a tre-
mendous cost after they become intermediates. By reflecting the physical world of mech-
anisms, most metaphors firmly nail our conceptual feet to the ground, forever limiting

---

## Chunk 2171

the power of our software. It is almost always better to design idiomatically, using meta-
phors only when a truly appropriate and powerful one falls in our lap.
Exceptions to the rule
Although metaphorical and skeuomorphic user interfaces should, generally speaking,
be avoided, there are always exceptions to the rule. Video games often employ diegetic

---

## Chunk 2172

interfaces to keep players in the game world. Simulation software, such as flight simula-
tors, intentionally use controls resembling their real-world counterparts. Another genre
of software that makes heavy use of metaphoric interfaces is music creation software.
While simulating piano keys, drum pads, synthesizer knobs and sliders, or even the frets

---

## Chunk 2173

and strings of a guitar may seem a bit silly in a mouse-driven desktop interface, it feels
quite different on a multitouch iPad screen. There the expressiveness of a virtual instru-
ment can begin to match the expressiveness of a real-world one, as shown in Figure 13-2.
CH 13. Metaphors, Idioms, and Affordances 305

---

## Chunk 2174

--- Page 336 ---
Figure 13-2: Sunrizer is an iPad synthesizer that closely resembles its hardware brethren. On a
touchscreen, simulated knobs and sliders make sense if your users are accustomed to hardware user
interfaces, since the interaction with them is so similar to the real-world interactions. However, the

---

## Chunk 2175

creators of Sunrizer have not become slaves to the global metaphor, but have rather improved on the
real world as only a digital interface can. Swiping left or right on the keyboard slides higher or lower
octave keys into view, effectively removing the limitations of screen width.
On the other hand, digital musical instruments don‚Äôt require the use of metaphor to be

---

## Chunk 2176

successful or expressive. TC-11 is an iPad synthesizer that uses an abstract, idiomatic
interface that is both unique and extremely expressive, as shown in Figure 13-3.
As people increasingly make use of multi-touch displays in place of hardware- controlled
gadgets, tools, and instruments, it‚Äôs reasonable to expect that real-world metaphors will

---

## Chunk 2177

eventually fade and be supplanted by idiomatic interfaces more optimized to expressive
gestures. We‚Äôll discuss what it means to create idiomatic interfaces in the next section.
306 Part II: Making Well-Behaved Products

---

## Chunk 2178

--- Page 337 ---
Figure 13-3: TC-11 takes a completely different approach to creating an expressive digital instru-
ment. It sports a unique, abstract, and completely idiomatic user interface in which the user must
learn by exploring the tonal and visual effects created by touching and gesturing. It even includes a
sophisticated patch editor for building new sounds and interactions.

---

## Chunk 2179

CH 13. Metaphors, Idioms, and Affordances 307

---

## Chunk 2180

--- Page 338 ---
Idiomatic interfaces
Idiomatic design, what Ted Nelson has called ‚Äúthe design of principles,‚Äù is based on how
we learn and use idioms‚Äîfigures of speech like ‚Äúbeat around the bush‚Äù and ‚Äúcool.‚Äù Idi-
omatic user interfaces solve the problems of the previous two interface types by focusing
not on technical knowledge or intuition of function, but rather on the learning of simple,

---

## Chunk 2181

non-metaphorical visual and behavioral idioms to accomplish goals and tasks.
Idiomatic expressions don‚Äôt provoke associative connections like metaphors do. There
is no bush, and nobody is beating anything. Idiomatically speaking, something can be
both cool and hot and be equally desirable. We understand the idiom simply because

---

## Chunk 2182

we have learned it and because it is distinctive, not because it makes subliminal con-
nections in our minds. Yet we all can rapidly memorize and use such idioms: We do so
almost without realizing it.
If you cannot intuit an idiom, neither can you reason it out. Our language is filled with
idioms that, if you haven‚Äôt been taught them, make no sense. If someone says ‚ÄúUncle Joe

---

## Chunk 2183

kicked the bucket,‚Äù you know what he means even though no bucket or kicking is involved.
You can‚Äôt figure it out by thinking through the various permutations of smacking pails with
your feet. You can learn the meaning of this expression only from context in something you
read or by being explicitly taught it. You remember this obscure connection between buck-

---

## Chunk 2184

ets, kicking, and dying only because humans are good at remembering things like this.
The human mind has a truly amazing capacity to learn and remember large numbers
of idioms quickly and easily, without relying on comparisons to known situations or an
understanding of how or why they work. This is a necessity, because most idioms don‚Äôt

---

## Chunk 2185

have metaphoric meaning, and the stories behind most others were lost ages ago.
graphical interfaces are largely idiomatic
It turns out that most of the elements of intuitive graphical interfaces are actually visual
idioms. Windows, title bars, close boxes, screen splitters, hyperlinks, and drop-downs
are things we learn idiomatically rather than intuit metaphorically. OS X‚Äôs use of a trash

---

## Chunk 2186

can to unmount an external FireWire disk before removing it is purely idiomatic (and
many designers consider it a poor idiom), despite the visual metaphor of the trash can.
The mouse input devices used by most personal computers are not metaphoric of any-
thing, but rather are learned idiomatically. Nothing about the mouse‚Äôs physical appear-

---

## Chunk 2187

ance indicates its purpose or use, nor is it comparable to anything else in our experience,
so learning it is not intuitive. (Even the name ‚Äúmouse‚Äù is rather unhelpful in that regard.)
In a scene from the movie Star Trek IV: The Voyage Home, Scotty (one of the best engi-
neers from the 23rd century) comes to 20th-century Earth and tries to use a computer.
308 Part II: Making Well-Behaved Products

---

## Chunk 2188

--- Page 339 ---
He picks up the mouse, holds it to his mouth, and speaks into it. This scene is funny and
believable: The mouse has no visual affordance that it is a pointing device. However, as
soon as you slide the mouse around on your desktop, you see a visual symbol, the cur-
sor, move around on the computer screen in the same way. Move the mouse left, and the

---

## Chunk 2189

cursor moves left; move the mouse forward, and the cursor moves up. As you first use the
mouse, you immediately get the sensation that the mouse and cursor are connected. This
sensation is extremely easy to learn and equally hard to forget. That is idiomatic learning.
Modern multi-touch user interfaces, seen on most smartphones and tablets, also are idi-

---

## Chunk 2190

omatic. (Although touching objects on the screen to activate them is intuitive, the gestural
idioms must all be learned.) This is becoming even more true as the skeuomorphisms once
popularized by Apple have increasingly been replaced with flatter and graphically simpler
layouts and controls. Touch gestures, when designed correctly, can be learned even more

---

## Chunk 2191

easily than mouse movements. This is because you have more direct ability to manipulate
objects on-screen with your fingers rather than via the virtual proxy of a mouse cursor.
Ironically, many of the familiar graphical UI elements that have been historically thought
of as metaphoric are actually idiomatic. Artifacts like resizable windows and endlessly

---

## Chunk 2192

nested file folders are not really metaphoric, because they have no parallel in the real
world. They derive their strength only from their easy idiomatic learnability.
good idioms must be learned only once
We are inclined to think that learning interfaces is hard because of our conditioning
based on experience with implementation-centric software. These interfaces are very

---

## Chunk 2193

hard to learn because you need to understand how the software works internally to
use them effectively. Most of what we know we learn without understanding: things like
faces, social interactions, attitudes, melodies, brand names, the arrangement of rooms
and furniture in our house and office. We don‚Äôt understand why someone‚Äôs face is com-

---

## Chunk 2194

posed the way it is, but we know that face. We recognize it because we have looked at it
and have automatically (and easily) memorized it.
All idioms must be learned; good idioms need to be learned only once.
The key observation about idioms is that although they must be learned, they are very
easy to learn, and good ones need to be learned only once. It is quite easy to learn idioms

---

## Chunk 2195

like ‚Äúneat‚Äù or ‚Äúpolitically correct‚Äù or ‚Äúthe lights are on but nobody‚Äôs home‚Äù or ‚Äúin a pickle‚Äù
or ‚Äútake the red-eye‚Äù or ‚Äúgrunge.‚Äù The human mind can pick up idioms like these from a
single hearing. It is similarly easy to learn idioms like radio buttons, close boxes, drop-
down menus, and combo boxes.
CH 13. Metaphors, Idioms, and Affordances 309

---

## Chunk 2196

--- Page 340 ---
branding and idioms
Marketing and advertising professionals understand well the idea of taking a simple
action or symbol and imbuing it with meaning. After all, synthesizing idioms is the
essence of product branding, in which a company takes a product or company name
and imbues it with a desired meaning. The example of an idiomatic symbol shown in

---

## Chunk 2197

Figure 13-4 illustrates its power.
Figure 13-4: This idiomatic symbol has been imbued
with meaning from its use, rather than by any connec-
tion to other objects. For anyone who grew up in the
1950s and 1960s, this otherwise meaningless symbol
has the power to evoke fear because it represents
nuclear radiation. Visual idioms, such as the Ameri-

---

## Chunk 2198

can flag, can be just as powerful as metaphors, if not
more so. The power comes from how we use them and
what we associate with them, rather than from any
innate connection to real-world objects.
building Idioms
When graphical user interfaces were invented, they were so clearly superior that many
observers credited their success to the interfaces‚Äô graphical nature. This was a natural,

---

## Chunk 2199

but incorrect, assumption. The first graphical UIs, such as the original Mac OS, were
better primarily because the graphical nature of their interfaces required a restriction
of the range of vocabulary by which the user interacted with the system. In particular,
the input they could accept from the user went from an unrestricted command line to
310 Part II: Making Well-Behaved Products

---

## Chunk 2200

--- Page 341 ---
a tightly restricted set of mouse-based actions. In a command-line interface, users can
enter any combination of characters in the language‚Äîa virtually infinite number. For
a user‚Äôs entry to be correct, he needs to know exactly what the application expects. He
must remember the letters and symbols with exacting precision. The sequence can be

---

## Chunk 2201

important. Sometimes even capitalization matters.
In modern desktop UIs, users can point to images or words on the screen with the mouse
cursor. Most of these choices migrated from the users‚Äô heads to the screen, eliminating
any need to memorize them. Using the mouse buttons, users can click, double-click, or

---

## Chunk 2202

click and drag. The keyboard is used for data entry, but typically not for command entry or
navigation. The number of atomic elements in users‚Äô input vocabulary has dropped from
dozens to just three. This is true even though the range of tasks that can be performed by
modern software apps isn‚Äôt any more restricted than that of command-line systems.

---

## Chunk 2203

The more atomic elements an interaction vocabulary has, the more time-consuming and
difficult the learning process is. Restricting the number of elements in our interaction
vocabulary reduces its expressiveness at the atomic level. However, more-complex inter-
actions can easily be built from the atomic ones, much like letters can be combined to
form words, and words to form sentences.

---

## Chunk 2204

A properly formed interaction vocabulary can be represented by an inverted pyramid. All
easy-to-learn communications systems obey the pattern shown in Figure 13-5. The bot-
tom layer contains primitives, the atomic elements of which everything in the language
is composed. In modern desktop graphical UIs, these primitives consist of positioning

---

## Chunk 2205

the mouse, clicking, and tapping a key on the keyboard. In touch-gesture systems they
consist of tapping and dragging.
Input delete, Idioms Output, scrolling,
create, draw Application specific commands and feedback sorting, dialogs
Double-click, Compounds Edit fields, checkboxes,
buttonclick, selection Generic input and output actions and symbols Highlighting
Primitives
Point, click,

---

## Chunk 2206

drag, keypress Indivisible actions and Cursor, text
feedback mechanisms
Figure 13-5: One of the primary reasons that graphical UIs are easy to use is that they enforce a
restricted interaction vocabulary that builds complex idioms from a very small set of primitives: point-
ing, clicking, and dragging. These primitives can build a larger set of simple compounds. These in

---

## Chunk 2207

turn can be assembled into a wide variety of complex, domain-specific idioms, all of which are based
on the same small set of easily learned actions.
CH 13. Metaphors, Idioms, and Affordances 311

---

## Chunk 2208

--- Page 342 ---
The middle layer contains compounds. These are more complex constructs created by
combining one or more of the primitives. They include simple visual objects such as text
display; actions such as double-clicking, dragging, swiping, and pinching; and manipu-
lable objects like buttons, check boxes in a form, links, and resize handles.

---

## Chunk 2209

The uppermost layer contains idioms. Idioms combine and structure compounds using
domain knowledge of the problem under consideration: information related to the user‚Äôs
work patterns and goals, not specifically to the computerized solution. The set of idi-
oms opens the vocabulary to information about the particular problem the application

---

## Chunk 2210

is trying to address. In a graphical UI, it includes things like labeled buttons and fields,
navigation bars, list boxes, icons, and even groups of fields and controls, or entire panes
and dialogs.
Any language that does not follow this form will be very hard to learn. Many effective
communications systems outside the computer world use similar vocabularies. Street

---

## Chunk 2211

signs in the U.S. follow a simple pattern of shapes and colors: Yellow triangles are cau-
tionary, red octagons are imperatives, and green rectangles are informative.
manual Affordances
In his seminal book The Design of Everyday Things (Basic Books, 2002), Donald Norman
gives us the term affordance, which he defines as ‚Äúthe perceived and actual properties

---

## Chunk 2212

of the thing, primarily those fundamental properties that determine just how the thing
could possibly be used.‚Äù
This concept is essential to the practice of interface design. But for our purposes, the
definition omits a key connection: How do we know what those properties offer us? If you
look at something and understand how to use it‚Äîyou comprehend its affordances‚Äîyou

---

## Chunk 2213

must be using some method to make the mental connection.
Therefore, we propose altering Norman‚Äôs definition by omitting the phrase ‚Äúand actual.‚Äù
When we do this, affordance becomes a purely cognitive concept, referring to what we
think the object can do rather than what it actually can do. If a pushbutton is placed next

---

## Chunk 2214

to the front door of a residence, its affordances are 100 percent doorbell. If, when we push
it, it causes a trapdoor to open and we fall into it, it turns out that it wasn‚Äôt a doorbell, but
that doesn‚Äôt change its affordance as one.
So how do we know it‚Äôs a doorbell? Because we have learned about doorbells, door eti-

---

## Chunk 2215

quette, and pushbuttons from our complex and lengthy socialization process. We have
learned about this class of pushable objects by being exposed to electrical and electronic
devices in our environs and because‚Äîyears ago‚Äîwe stood on doorsteps with our par-
ents, learning how to approach another person‚Äôs home.
312 Part II: Making Well-Behaved Products

---

## Chunk 2216

--- Page 343 ---
But another force is at work here too. If we see a pushbutton in an unlikely place such
as the hood of a car, we cannot imagine what its purpose is, but we do recognize it as
a pushable object. How do we know this? Undoubtedly, we recognize it because of our
tool-manipulating instincts. When we see round, slightly concave, finger-sized objects

---

## Chunk 2217

within reach, we develop an urge to push them. (You can easily observe this behavior in
any two-year-old.) We see objects that are long and rounded, and we wrap our fingers
around them and grasp them like handles. This is what Norman is getting at with his
term affordance. For clarity, however, we‚Äôll rename this instinctive understanding of how

---

## Chunk 2218

objects are manipulated with our hands manual affordance. When artifacts are clearly
shaped to fit our hands or body, we recognize that they can be manipulated directly and
require no written instructions. In fact, this act of understanding how to use a tool based
on the relationship of its shape to our hands is a clear example of intuiting an interface.

---

## Chunk 2219

Norman discusses at length how manual affordances are much more compelling than
written instructions. A typical example he uses is a door that must be pushed open using
a metal bar for a handle. The bar is just the right shape and height and is in the right posi-
tion to be grasped by the human hand. The door‚Äôs manual affordances scream, ‚ÄúPull me!‚Äù

---

## Chunk 2220

No matter how often someone uses this diabolical door, he will always attempt to pull
it open, because the affordances are strong enough to drown out any number of signs
affixed to the door saying Push.
There are only a few manual affordances. We grip handle-shaped things with our hands;
if they are small, we pinch or push them with our fingers. We pull along lines and turn

---

## Chunk 2221

around axes. We push flat plates with our hands or fingers. If they are on the floor, we
push them with our feet. We rotate round things, using our fingers for small things‚Äîlike
dials‚Äîand both hands on larger things, like steering wheels. Such manual affordances
are the basis for much of our visual user interface design.

---

## Chunk 2222

The design of widgets for older operating system interfaces like Windows 7 and OS X
relied on shading, highlighting, and shadows to make screen images appear more
dimensional. These so-called skeuomorphic clues have fallen out of fashion with Android
Kitkat, Windows 8, and OS Mavericks, but where they appear they offer virtual manual

---

## Chunk 2223

affordances in the form of button-like images that say ‚Äúpush me‚Äù or ‚Äúslide me‚Äù to our
tool-manipulating brains. Recent trends in flattened, visually minimal user interfaces
threaten ease of use by removing these virtual manual affordances in the service of
visual simplification.
semantics of manual affordances
What‚Äôs missing from an unadorned, virtual manual affordance is any idea of what func-

---

## Chunk 2224

tion it performs. We can see that it looks like a button, but how do we know what it will
accomplish when we press it? Unlike mechanical objects, you can‚Äôt figure out a virtual
lever‚Äôs function just by tracing its connections to other mechanisms. Software can‚Äôt be
CH 13. Metaphors, Idioms, and Affordances 313

---

## Chunk 2225

--- Page 344 ---
casually inspected in this manner. Instead, we must rely on either supplementary text
and images or, most often, our previous learning and experience. The Windows 7 scroll-
bar‚Äôs affordance clearly shows that it can be manipulated. But the only things about it
that tells us what it does are the arrows (frequently missing in mobile apps), which hint

---

## Chunk 2226

at its directionality. To know that a scrollbar controls our position in a document, we
either have to be taught or learn through experimentation.
Controls must have text or iconic labels on them to make sense. If the answer isn‚Äôt sug-
gested by the control, we can only learn what it does by one of two methods: experi-

---

## Chunk 2227

mentation or training. We either read about it somewhere, ask someone, or try it and
see what happens. We get no help from our instinct or intuition. We can only rely on the
empirical.
Fulfilling expectations of affordances
In the real world, an object does what it does as a result of its physical form and its con-

---

## Chunk 2228

nections with other physical objects. A saw can cut wood because its serrations are
sharp, its blade is flat, and it has a handle. A knob can open a door because it is con-
nected to a latch. However, in the digital world, an object does what it does because a
developer imbued it with the power to do something. We can discover a great deal about

---

## Chunk 2229

how a saw or a knob works by physical inspection, and we can‚Äôt easily be fooled by what
we see. On a computer screen, though, we can see a raised three-dimensional rectangle
that clearly wants to be pushed like a button, but this doesn‚Äôt necessarily mean that it
should be pushed. It could do almost anything. We can be fooled because there is no

---

## Chunk 2230

natural connection‚Äîas there is in the real world‚Äîbetween what we see on the screen
and what lies behind it. In other words, we may not know how to work a saw, and we may
even be frustrated by our inability to manipulate it effectively, but we will never be fooled
by it. It makes no representations that it doesn‚Äôt live up to. On computer screens, false

---

## Chunk 2231

impressions are very easy to create inadvertently.
When we render a button on the screen, we are making a contract with the user that
that button will change visually when she pushes it: It will appear to be actuated when
tapped or when the user clicks while the mouse cursor hovers over it. Furthermore, the
contract states that the button will perform some reasonable work that is accurately

---

## Chunk 2232

described by its legend. This may sound obvious, but it is astonishing how many appli-
cations offer bait-and-switch manual affordances. This is relatively rare for pushbuttons
but is all too common for other controls, especially on websites where the lack of affor-
dances can make it difficult to differentiate between controls, content, and ornamenta-

---

## Chunk 2233

tion. Make sure that your application delivers on the expectations it sets via the use of
manual affordances.
314 Part II: Making Well-Behaved Products

---

## Chunk 2234

--- Page 345 ---
Direct manipulation and Pliancy
Modern graphical user interfaces are founded on the concept of direct manipulation of
graphical objects on the screen: buttons, sliders, menus, and other function controls, as
well as icons and other representations of data objects. The ability to select and modify

---

## Chunk 2235

objects on the screen is fundamental to the interfaces we design today. But what is direct
manipulation, exactly?
In 1974, Ben Shneiderman coined the term ‚Äúdirect manipulation‚Äù to describe an inter-
face design strategy consisting of three important components:
‚Ä¢ Visual representation of the data objects that an application is concerned with

---

## Chunk 2236

‚Ä¢ Visible and gestural mechanisms for acting on these objects (as opposed to free-form
text commands)
‚Ä¢ Immediately visible results of these actions
It‚Äôs worth noting that two of his three points concern the visual feedback the application
offers to users. It might be more accurate to call it ‚Äúvisual manipulation‚Äù because of the

---

## Chunk 2237

importance of what users see during the process. Virtual manual affordances and rich
visual feedback are both key elements in the design of direct manipulation interfaces.
Rich visual feedback is the key to successful direct manipulation.
Interactions that are not implemented with adequate visual feedback will fail to effec-
tively create the experience of direct manipulation.

---

## Chunk 2238

uses of direct manipulation
Using direct manipulation, we can point to what we want. If we want to move an object
from A to B, we click or tap it and drag it there. As a general rule, the better, more flow-in-
ducing interfaces are those with plentiful and sophisticated direct manipulation idioms.
Authoring tools do this pretty well. For example, most word processors let you set tabs

---

## Chunk 2239

and indentations by dragging a marker on a ruler. Someone can say, in effect, ‚ÄúHere is
where I want the paragraph to start.‚Äù The application then calculates that this is pre-
cisely 1.347 inches from the left margin instead of forcing the user to enter 1.347 in some
text box somewhere.
CH 13. Metaphors, Idioms, and Affordances 315

---

## Chunk 2240

--- Page 346 ---
Similarly, most art and design tools (such as Adobe‚Äôs Creative Suite) provide a high degree
of direct manipulation of objects (although many parameters of the click-and-type vari-
ety remain). Google‚Äôs Snapseed photo editor is a great example of a consumer-focused
multi-touch app that employs direct manipulation to good effect. Gestures control

---

## Chunk 2241

image processing parameters for digital photo editing instead of cumbersome sliders or
numeric text fields.
Figure 13-6 shows how multiple control points can be placed or selected by tapping.
These points can be moved by dragging; and pinching on the currently selected point
adjusts the diameter of the applied filter, with feedback to the user in the form of a circle

---

## Chunk 2242

and red tint to show the extent of the filter‚Äôs application. Swiping horizontally controls
the intensity of the filter, tracked both by the green meter surrounding the point, and
the numeric scale at the bottom of the screen. Vertical swiping selects between bright-
ness, contrast, and saturation. While this is a lot of functionality to build into gestures,

---

## Chunk 2243

it becomes second nature after a few uses due to the rich visual modeless feedback and
fluidity with which images can be adjusted.
Figure 13-6: Google‚Äôs Snapseed photo editor for the iPad uses gestural controls to position and
manipulate visual effects parameters via tapping, pinching, twirling, and swiping. Numeric feedback

---

## Chunk 2244

is provided in addition to real-time previewing, but no textual numeric entry is required or, in fact,
even allowed‚Äînot that it is missed.
316 Part II: Making Well-Behaved Products

---

## Chunk 2245

--- Page 347 ---
The principle of direct manipulation applies in a variety of situations. When items in a
list need to be reordered, the user may want them ordered alphabetically, but he also
may want them in order of personal preference‚Äîsomething no algorithm can offer. A
user should be able to drag the items into the desired order directly, without an algo-

---

## Chunk 2246

rithm‚Äôs interfering with this fundamental operation.
Drag and drop can also save the user from tiresome and repetitive use of dialogs and
menus. In the Sonos Desktop Controller, shown in Figure 13-7, users can drag songs
directly to any location in the current play queue or instead drag them to any speaker in
the house for immediate playback. They don‚Äôt have to open a menu and choose options.

---

## Chunk 2247

You seldom see direct manipulation interfaces for entering complex numeric data. Usually
you‚Äôre given numeric entry fields or sliders. A great example of direct manipulation of graph-
ically presented numeric data is the Addictive Synth app for the iPad, shown in Figure 13-8.
It allows you to sketch waveforms and effect parameters for a music synthesizer with your

---

## Chunk 2248

finger and then play the results immediately on the onscreen piano keyboard.
Figure 13-7: The Sonos Desktop Controller lets you drag songs and albums from search-and-browse
results to anywhere in the playback queue, to the Now Playing area for immediate playback, or to
any room in the house. You do so with a single drag-and-drop gesture. Tablet versions of the app also

---

## Chunk 2249

allow similar direct manipulation of music.
CH 13. Metaphors, Idioms, and Affordances 317

---

## Chunk 2250

--- Page 348 ---
Figure 13-8: Addictive Synth is an iPad music synthesizer that allows users to draw their own wave-
forms and audio effects curves with their finger and then hear the results in real time. There‚Äôs a rea-
son for the app‚Äôs name: The experience is immersive and satisfying.
Direct manipulation is simple, straightforward, easy to use, and easy to remember. How-

---

## Chunk 2251

ever, as we have discussed, direct-manipulation idioms‚Äîlike most other idioms‚Äîmust
first be learned. Luckily, because the visible and direct nature of these interactions bears
a close resemblance to interactions with objects in the physical world, learning the idi-
oms usually is easy. After you learn them, you seldom forget them.
Direct manipulation isn‚Äôt always appropriate

---

## Chunk 2252

Apple‚Äôs Human Interface Style Guide has this to say about direct manipulation: ‚ÄúUsers
want to feel that they are in charge of the computer‚Äôs activities.‚Äù iOS user interfaces make
it clear that Apple believes in direct manipulation as a fundamental tenet of interaction
design. On the other hand, user-centered design expert Don Norman (2002) says, ‚ÄúDirect

---

## Chunk 2253

manipulation, first-person systems have their drawbacks. Although they are often easy
to use, fun, and entertaining, it is often difficult to do a really good job with them. They
require the user to do the task directly, and the user may not be very good at it.‚Äù Whom
should we believe?
318 Part II: Making Well-Behaved Products

---

## Chunk 2254

--- Page 349 ---
The answer, of course, is both. Direct manipulation is a powerful tool, but it can require
skill development for users to become effective at complex tasks (such as designing an
airplane using a CAD system). Many direct-manipulation idioms, even relatively mun-
dane ones, require motor coordination and a sense of purpose. For example, even moving

---

## Chunk 2255

files between folders in Windows Explorer can be a complicated task requiring dexterity
and foresight. Keep these challenges in mind as you design direct-manipulation idioms.
Some amount of direct manipulation is usually a good thing, but depending on your
personas‚Äô skills and usage contexts, it‚Äôs also possible to go overboard. You should always

---

## Chunk 2256

consider what your personas need to manipulate manually, and what the application
can assist them with, either via guides and hints or automatically.
Pliancy and hinting
Returning to Norman‚Äôs concept of affordance, it‚Äôs critical to visually communicate to
users how interface elements can be directly manipulated. We use the term pliant to

---

## Chunk 2257

refer to objects or screen areas that react to input and that the user can manipulate. For
example, a button control is pliant because it can be ‚Äúpushed‚Äù by a finger or a mouse cur-
sor. Any object that can be dragged is pliant, and every cell in a spreadsheet and every
character in a word processor document is pliant.

---

## Chunk 2258

In most cases, the fact that an object is pliant should be communicated visually to users.
The only situation where this isn‚Äôt true is when you are concerned with presenting rich,
complex functionality solely to expert users with no concern about their ability to learn
and use the application. In these cases, the screen real estate and visual attention that

---

## Chunk 2259

would otherwise be devoted to communicating pliancy may be more appropriately used
elsewhere. Do not make the decision to take this route lightly.
Visually communicate pliancy whenever possible.
There are three basic ways to communicate‚Äîor hint at‚Äîthe pliancy of an object to users:
‚Ä¢ Create static visual affordances as part of the object itself.

---

## Chunk 2260

‚Ä¢ Dynamically change the object‚Äôs visual affordances in reaction to change in input focus
or other system events.
‚Ä¢ In the case of desktop pointer-driven interfaces, change the cursor‚Äôs visual affordance
as it passes over and interacts with the object.
CH 13. Metaphors, Idioms, and Affordances 319

---

## Chunk 2261

--- Page 350 ---
static hinting
Static hinting is when an object‚Äôs pliancy is communicated by the static rendering of the
object itself. For example, the faux three-dimensional sculpting of a button control is
static visual hinting because it provides (virtual) manual affordance for pushing.
For complex desktop interfaces with a lot of objects and controls, static object hinting

---

## Chunk 2262

can sometimes require an impractical number of rendered screen elements. If every-
thing has a three-dimensional feel to provide affordance, your interface can start to look
like a sculpture garden. Dynamic hinting, as we‚Äôll discuss in a minute, provides a solu-
tion to this problem.
However, static hinting is well-suited for mobile user interfaces. Typically fewer objects

---

## Chunk 2263

are on the screen at any given time, and they must, by necessity, be large enough to
manipulate with fingers, leaving ample room for the necessary visual cues of affordance.
Ironically, the current trend in mobile UIs is toward flattening and visually simplify-
ing elements to the point where text, flat monochrome icons, and rectilinear flat but-

---

## Chunk 2264

tons and cards are the only visual elements available. This creates many challenges for
designers, both from a standpoint of creating visual hierarchy and for indicating pliancy
and affordance. The end result is that mobile interfaces are becoming more difficult to
learn, even as they are becoming visually simpler.
Dynamic hinting

---

## Chunk 2265

Dynamic hinting is most often used in desktop user interfaces. It works like this: When
the cursor passes over a pliant object, the object temporarily changes its appearance,
as shown in Figure 13-9. This action occurs before any mouse buttons are clicked and
is triggered by cursor flyover only. It is commonly called a ‚Äúrollover.‚Äù A good example of

---

## Chunk 2266

this is the behavior of icon buttons (see Chapter 21) on toolbars: Although it has no per-
sistent button-like affordance, passing the cursor over any single icon button causes the
affordance to appear. The result is a powerful hint that the control has the behavior of
a button, and eliminating the persistent affordance dramatically reduces visual clutter
on the toolbar.

---

## Chunk 2267

Figure 13-9: The buttons on the left are an example of static visual hinting: Their ‚Äúclickability‚Äù
is suggested by the dimensional rendering. The toolbar icon buttons on the right demonstrate
dynamic visual hinting: While the Bold toggle doesn‚Äôt appear to be a button at first glance,
passing the mouse cursor over it causes it to change, thereby creating affordance.

---

## Chunk 2268

320 Part II: Making Well-Behaved Products

---

## Chunk 2269

--- Page 351 ---
Alas, touchscreen devices have no real equivalent to dynamic object hinting; designers
and users must make do with whatever static hinting at pliancy is available to them.
Pliant response hinting
Desktop pliant response hinting should occur if the mouse cursor is clicked but not
released or while a finger is pressed on a control. The control must show that it is poised

---

## Chunk 2270

to undergo a state change (more on this in Chapter 18). This action is important and is
often neglected by developers who create their own controls.
A pushbutton needs to change from a visually raised state to a visually indented state;
a check box should highlight its box but not show a check just yet. Pliant response is an

---

## Chunk 2271

important feedback mechanism for any control that either invokes an action or changes
its state. It lets the user know that some action is forthcoming if she releases the mouse
button. Pliant response is also an important part of the cancel mechanism. When the
user clicks a button, that button responds by becoming indented. If the user moves the

---

## Chunk 2272

mouse or his finger away from the button while still holding it down, the onscreen but-
ton returns to its quiescent, raised state. If the user then releases the mouse button or
lifts his finger, the onscreen button is not activated (consistent with the lack of pliant
response).
Cursor hinting
Cursor hinting is another desktop pliancy hinting approach. It communicates pliancy by

---

## Chunk 2273

changing the cursor‚Äôs appearance as it passes over an object or screen area. For example,
when the cursor passes over a window‚Äôs frame, the cursor changes to a double-headed
arrow showing the axis in which the window edge can be stretched. This is the only
visual affordance indicating that the frame can be stretched.

---

## Chunk 2274

Cursor hinting should first and foremost make it clear to users that an otherwise
unadorned object is pliant. It is also often useful to indicate what type of direct-ma-
nipulation action is possible with an object (such as in the window frame example just
mentioned).
Generally speaking, controls should offer static or dynamic visual hinting, whereas pli-

---

## Chunk 2275

ant (manipulable) data more frequently should offer cursor hinting. For example, it is
difficult to make dense tabular data visually hint at pliancy without disturbing its clear
representation, so cursor hinting is the most effective method. Some controls are small
and difficult for users to spot as readily as a button, and cursor hinting is vital for the

---

## Chunk 2276

success of such controls. The column dividers and screen splitters in Microsoft Excel are
good examples, as shown in Figure 13-10.
CH 13. Metaphors, Idioms, and Affordances 321

---

## Chunk 2277

--- Page 352 ---
Figure 13-10: Excel uses cursor hinting to highlight several controls that are not obvi-
ously pliant by themselves. You can set column width and row height by dragging the
short vertical lines between each pair of columns or rows. The cursor changes to a
two-headed horizontal arrow that both hints at the pliancy and indicates the permissi-

---

## Chunk 2278

ble drag direction. The same is true for the screen-splitter controls. When the mouse
is over an unselected editable cell, it shows the plus cursor, and when it is over a
selected cell, it shows the drag cursor.
Again, touchscreen users and designers are out of luck with using this kind of pliancy
hinting. As we‚Äôll discuss in more detail in Chapter 19, other strategies must be employed

---

## Chunk 2279

in the design of touchscreen apps to ensure that users know what objects they can
manipulate, when they can do so, and what actions and gestures are supported.
Escape the grip of metaphor
As you build your app, you may be tempted to look backwards to comfortable visual
metaphors in which to immerse your users. Avoid that temptation. Reserve global visual

---

## Chunk 2280

metaphors for those few, special contexts where the metaphor is truly an integral part of
the experience. Don‚Äôt use metaphors as a crutch to support rapid learnability or short-
term comfort.
322 Part II: Making Well-Behaved Products

---

## Chunk 2281

--- Page 353 ---
Instead, create memorable and appropriate idioms that make your users more effective
and efficient, that are imbued with rich pliant feedback, and that allow users to focus on
the content and functionality of your app rather than the confines of outmoded Mechan-
ical Age metaphors and interactions. You‚Äôll be doing them a favor as they become the

---

## Chunk 2282

intermediate users they‚Äîand you‚Äîultimately hope they will be.
CH 13. Metaphors, Idioms, and Affordances 323

---

## Chunk 2283

--- Page 355 ---
Ch 14
rEThInkIng DATA EnTrY,
sTorAgE, AnD rETrIEVAl
In the world of digital technology, the place where implementation-model thinking is
most strikingly apparent is in data management: entering data, storing it, and finding
it again.
How often have you typed information into a set of forms, only to be told by an unpleas-

---

## Chunk 2284

ant or confusing error dialog that you entered it wrong? Maybe you typed hyphens in a
telephone number, or perhaps you entered both your first and last name into the field
that was intended to only hold your first name. Or maybe you accidentally typed text
into a field meant for only numeric input. Quick, call the data police!

---

## Chunk 2285

The problems don‚Äôt end with data entry. If you have ever tried to teach your mother how
to use a computer, you will know that the word ‚Äúdifficult‚Äù doesn‚Äôt really do the problem
justice. Things go well at first: You start the word processor and type a couple of sen-
tences. She‚Äôs with you all the way‚Äîit‚Äôs like typing on paper. But when you click the Close

---

## Chunk 2286

button, up pops a dialog asking ‚ÄúDo you want to save changes?‚Äù You and Mom hit a wall
together. She looks at you and asks, ‚ÄúWhat does this mean? Is everything okay?‚Äù And
once you‚Äôve talked her down and she performs the save, she has one more pressing and
difficult question: ‚ÄúWhere did it go? And how will I ever be able to find it again?‚Äù

---

## Chunk 2287

Or it might even be on your own smartphone. You want to show an awesome photo to a
friend, but given the long tapestry of thumbnails, have to spend more time hunting than
the moment was really worth.

---

## Chunk 2288

--- Page 356 ---
These problems are caused by software that forces people to think like computers by
unnecessarily confronting them with the internal mechanisms of data entry, storage,
and retrieval. This isn‚Äôt just a problem for your mother; even sophisticated users can eas-
ily become confused or make mistakes. We spend thousands of dollars on hardware and

---

## Chunk 2289

software, only to be asked impertinent questions from desktop applications like ‚ÄúDo you
really want to save this document?‚Äù Well, I‚Äôve been working on it all afternoon, so yes,
oddly enough, I do. Yes, Microsoft Office, we‚Äôre looking at you.
This chapter provides a different set of approaches for tackling the problems of data

---

## Chunk 2290

entry, files and saving, and retrieval‚Äîones that are more in harmony with the mental
models of the people who use your products. Thankfully, we are not the only ones think-
ing in this way.
rethinking Data Entry
In Chapter 8, we discussed how interactive products should be designed to behave like
considerate and intelligent people. One of the ways in which products are least capable

---

## Chunk 2291

in this regard is when the user is required to enter data. Some unfortunate artifacts
of implementation-model thinking prevent people from working in the way they find
most natural. In this chapter, we‚Äôll discuss problems with existing ways of dealing with
data entry and some possible strategies for making this process more focused on human
needs and less focused on the needs of the database.

---

## Chunk 2292

Data integrity versus data immunity
One of the most critical requirements for properly functioning software is clean data.
As the aphorism says, ‚Äúgarbage in, garbage out.‚Äù As a result, developers typically oper-
ate according to a simple imperative regarding data entry and data processing: Never
allow tainted, unclean data to touch an application. Developers thus erect barriers in

---

## Chunk 2293

user interfaces so that bad data can never enter the system and compromise what is
commonly called data integrity.
The imperative of data integrity posits that a world of chaotic information is out there,
and before any of it gets inside the computer, it must be filtered and cleaned up. The
software must maintain a vigilant watch for bad data, like a customs official at a border

---

## Chunk 2294

crossing. All data is validated at its point of entry. Anything on the outside is assumed to
be suspect, and after it has run the gauntlet and been allowed inside, it is assumed to be
pristine. The advantage is that once data is inside the database, the code doesn‚Äôt have to
bother with successive, repetitive checks of its validity or appropriateness.

---

## Chunk 2295

The problem with this approach is that it places the needs of the database before those
of its users, subjecting them to the equivalent of a shakedown every time they enter a
326 Part II: Making Well-Behaved Products

---

## Chunk 2296

--- Page 357 ---
scrap of data into the system. You don‚Äôt come across this problem often with most mobile
or personal productivity software: PowerPoint doesn‚Äôt know or care if you‚Äôve formatted
your presentation correctly. But as soon as you deal with a large corporation‚Äîwhether
you are a clerk performing data entry for an enterprise management system or a web

---

## Chunk 2297

surfer buying DVDs online‚Äîyou come face to face with the border patrol.
People who fill out lots of forms every day as part of their job know that data typically
isn‚Äôt provided to them in the pristine form that their software demands. It is often incom-
plete and sometimes wrong. Furthermore, they may break from a form‚Äôs strict demands

---

## Chunk 2298

to expedite this data processing to make their customers happy. But when confronted
with a system that is entirely inflexible in such matters, these people must either grind
to a halt or find some way to subvert the system to get things done. If the software recog-
nized these facts of human existence and addressed them directly with an appropriate
user interface, everyone would benefit.

---

## Chunk 2299

Efficiency aside, this problem has a more insidious aspect: When software shakes down
data at the point of entry, it makes a clear statement that the user is insignificant and
the application is omnipotent‚Äîthat the user works for the good of the application, not
vice versa. Clearly, this is not the kind of world we want to create with our technological

---

## Chunk 2300

inventions. We want people to feel empowered and to make it clear that computers work
for us. We must return to the ideal division of digital labor: The computer does the work,
and the human makes the decisions.
Happily, there‚Äôs more than one way to protect software from bad data. Instead of keeping
it out of the system, the developer needs to make the system immune to inconsistencies

---

## Chunk 2301

and gaps in the information. This method involves creating much smarter, more sophis-
ticated applications that can handle all permutations of data, giving the application a
kind of data immunity.
To implement this concept of data immunity, our applications must be built to look
before they leap and to ask for help when they need it. Most software blindly performs

---

## Chunk 2302

arithmetic on numbers without actually examining them first. The application assumes
that a number field must contain a number, because data integrity tells it so. If the user
enters the word ‚Äúnine‚Äù instead of the number ‚Äú9,‚Äù the application barfs. But a human
reading the form wouldn‚Äôt even blink. If the application simply looked at the data before

---

## Chunk 2303

it acted, it would see that a simple math function wouldn‚Äôt do the trick.
We must design our applications to believe that the user will enter what he means to
enter, and if he wants to correct things, he will do so without paranoid insistence. But
applications can look elsewhere in the computer for assistance. Is there a module that

---

## Chunk 2304

knows how to make numeric sense of alphabetic text? Is there a history of corrections
that might shed some light on a user‚Äôs intent?
CH 14. Rethinking Data Entry, Storage, and Retrieval 327

---

## Chunk 2305

--- Page 358 ---
If all else fails, an application must add annotations to the data so that when‚Äîand if‚Äî
the user examines the problem, he finds accurate and complete notes that describe what
happened and what steps the application took.
Yes, if the user enters ‚Äúasdf‚Äù instead of ‚Äú9.38,‚Äù the application will be unable to achieve

---

## Chunk 2306

satisfactory results. But stopping the application to resolve this right now also is unsat-
isfactory; the entry process is just as important as the end report. If a user interface is
designed correctly, the application provides visual feedback when the user enters ‚Äúasdf,‚Äù
so it‚Äôs very unlikely that the user will enter hundreds of bad records. Generally, users act

---

## Chunk 2307

stupidly only when applications treat them stupidly.
When the user enters incorrect data, it is often close to being correct; applications should
be designed to provide as much assistance as possible in correcting the situation. For
example, if the user erroneously enters ‚ÄúTZ‚Äù for a two-letter state code, and also enters

---

## Chunk 2308

‚ÄúDallas‚Äù for a city name, it doesn‚Äôt take a lot of intelligence or computational resources
to figure out how to correct the problem.
handling missing data
It is clearly counter to users‚Äô goals‚Äîand to the system‚Äôs utility‚Äîif crucial data is omitted.
The data-entry clerk who fails to key in something as important as an invoice amount

---

## Chunk 2309

creates a real problem. However, it isn‚Äôt necessarily appropriate for the application to
stop the clerk and point out this failure. Think of your application as being like a car.
Your users won‚Äôt take kindly to having the steering wheel lock up because the car discov-
ered it was low on windshield-washer fluid.
Instead, applications should provide more flexibility. Users may not immediately have

---

## Chunk 2310

access to data for all the required fields, and their workflow may be such that they first
enter all the information they have on hand and then return when they have the infor-
mation needed to fill in the other fields. Of course, we still want our users to be aware of
any required fields that are missing information, but we can communicate this to them

---

## Chunk 2311

through rich modeless feedback, rather than stopping everything to let them know some-
thing they may be well aware of.
Take the example of a purchasing clerk keying invoices into a system. Our clerk does this
for a living and has spent thousands of hours using the application. He has a sixth sense
for what is happening on the screen and wants to know if he has entered bad data. He

---

## Chunk 2312

will be most effective if the application notifies him of data-entry errors by using subtle
visual and audible cues.
The application should also help him: Data items, such as part numbers, that must be
valid shouldn‚Äôt be entered into free text fields, but instead should be entered via type-
ahead (auto-completion) fields or bounded controls such as drop-downs. Addresses and

---

## Chunk 2313

328 Part II: Making Well-Behaved Products

---

## Chunk 2314

--- Page 359 ---
phone numbers should be entered more naturally into smart text fields that can parse
the data. The application should provide unobtrusive modeless feedback on the status of
the clerk‚Äôs work. This will enable him to take control of the situation and will ultimately
require less policing by the application.

---

## Chunk 2315

Most of our information-processing systems do tolerate missing information. A missing
name, code, number, or price can almost always be reconstructed from other data in
the record. If not, the data can always be reconstructed by asking the various parties
involved in the transaction. The cost is high, but not as high as the cost of lost productiv-

---

## Chunk 2316

ity or technical support centers. Our information-processing systems can work just fine
with missing data. Some developers who build these systems may not like all the extra
work involved in dealing with missing data, so they invoke data integrity as an unbreak-
able law. As a result, thousands of clerks must interact with rigid, overbearing software

---

## Chunk 2317

under the false rubric of keeping databases from crashing.
It is obviously counterproductive to treat workers like idiots to protect against those few
who are. It lowers everyone‚Äôs productivity; encourages rapid, expensive, and error-caus-
ing turnover; and decreases morale, which increases the unintentional error rate of the

---

## Chunk 2318

clerks who want to do well. It is a self-fulfilling prophecy to assume that your informa-
tion workers are untrustworthy.
The stereotypical role of the data-entry clerk mindlessly keypunching from stacks of paper
forms while sitting in a boiler room among hundreds of identical clerks doing identical
jobs is rapidly evaporating. The task of data entry is becoming less a mass-production job

---

## Chunk 2319

and more a productivity job‚Äîone performed by intelligent, capable professionals and,
with the popularization of e-commerce, directly by customers. In other words, the popu-
lation interacting with data-entry software is increasingly less tolerant of being treated
like unambitious, uneducated, unintelligent peons. Users won‚Äôt tolerate stupid software

---

## Chunk 2320

that insults them, not when they can push a button and surf for another few seconds until
they find another vendor that presents an interface that treats them with respect.
Data entry and fudgeability
If a system is too rigid, it can‚Äôt model real-world behaviors. A system that rejects the reality
of its users is not helpful, even if the net result is that all its fields are valid. Which is more

---

## Chunk 2321

important, the database or the business it is trying to support? The people who manage
the database and create the data-entry applications that feed it often serve only the CPU.
This is a significant conflict of interest that good interaction design can help resolve.
Fudgeability can be difficult to build into a computer system because it demands a

---

## Chunk 2322

considerably more capable interface. Our clerk cannot move a document to the top of
the queue unless the queue, the document, and its position in the queue can be easily
seen. The tools for pulling a document out of the electronic stack and placing it on the
CH 14. Rethinking Data Entry, Storage, and Retrieval 329

---

## Chunk 2323

--- Page 360 ---
top must also be present and obvious in their functions. Fudgeability also requires facil-
ities to hold records in suspense, but an Undo facility has similar requirements. A more
significant problem is that fudging allows possible abuse.
The best strategy to avoid abuse is using the computer‚Äôs ability to record the user‚Äôs actions

---

## Chunk 2324

for later examination, if warranted. The principle is simple: Let users do what they want, but
keep detailed records of those actions so that full accountability and recovery is possible.
Auditing versus editing
Many developers believe it is their duty to inform users when they make errors entering
data. It is certainly an application‚Äôs duty to inform other applications when they make an

---

## Chunk 2325

error, but this rule shouldn‚Äôt necessarily extend to users. The customer is always right,
so an application must accept what the user tells it, regardless of what it does or doesn‚Äôt
know. This is similar to the concept of data immunity, because whatever the user enters
should be acceptable, regardless of how incorrect the application believes it to be.

---

## Chunk 2326

This doesn‚Äôt mean that the application can throw up its hands and say, ‚ÄúAll right, he
doesn‚Äôt want a life preserver, so I‚Äôll just let him drown.‚Äù Just because the application must
act as though the user is always right doesn‚Äôt mean that a user actually is always right.
Humans often make mistakes, and your users are no exception. User errors may not be

---

## Chunk 2327

your application‚Äôs fault, but they are its responsibility. How will it fix them?
An error may not be your application‚Äôs fault, but it is its responsibility.
Applications can provide warnings‚Äîas long as they don‚Äôt stop the proceedings with idi-
ocy. But if the user chooses to do something suspect, the application can do nothing but

---

## Chunk 2328

accept that fact and work to protect the user from harm. Like a faithful guide, it must
follow its client into the jungle, making sure to bring along a rope and plenty of water.
Warnings should clearly and modelessly tell users what they have done, much as the
speedometer silently reports our speed violations. It is unreasonable, however, for the

---

## Chunk 2329

application to stop the proceedings, just as it is not right for the speedometer to cut
the gas when we edge above 65 miles per hour. Instead of an error dialog, for example,
data-entry fields can highlight any user input the application evaluates as suspect.
When the user does something that the application thinks is wrong, the best way to pro-

---

## Chunk 2330

tect him (unless disaster is imminent) is to make it clear that there may be a problem.
This should be done in an unobtrusive way that ultimately relies on the user‚Äôs intelli-
gence to figure out the best solution. If the application jumps in and tries to fix it, it may
330 Part II: Making Well-Behaved Products

---

## Chunk 2331

--- Page 361 ---
be wrong and end up subverting the user‚Äôs intent. Furthermore, this approach fails to
give the user the benefit of learning from the situation, ultimately compromising his
ability to avoid the situation in the future. Our applications should, however, remem-
ber each of the user‚Äôs actions and ensure that each action can be cleanly reversed, that

---

## Chunk 2332

no collateral information is lost, and that the user can figure out where the application
thinks the problems might be. Essentially, we maintain a clear audit trail of his actions.
Thus the principle ‚ÄúAudit, don‚Äôt edit.‚Äù
Audit, don‚Äôt edit.
Microsoft Word has an excellent example of auditing, as well as a nasty counterexample.

---

## Chunk 2333

This excellent example is how it handles real-time spell checking. As you type, red wavy
underlines identify words that the application doesn‚Äôt recognize, as shown in Figure 14-1.
Right-clicking these words pops up a menu of alternatives you can choose from. But you
don‚Äôt have to change anything, and you are not interrupted by dialogs or other forms of
modal idiocy.

---

## Chunk 2334

Figure 14-1: Microsoft Word‚Äôs automatic spell checker
audits misspelled words with a wavy red underline, giv-
ing users modeless feedback. Right-clicking an under-
lined word pops up a menu of possible alternatives to
choose from. This design idiom has been widely copied
by both desktop and mobile apps.
CH 14. Rethinking Data Entry, Storage, and Retrieval 331

---

## Chunk 2335

--- Page 362 ---
Word‚Äôs AutoCorrect feature, on the other hand, can be a bit disturbing at first. As you
type, it silently changes words it thinks are misspelled. It turns out that this feature
is incredibly useful for fixing minor typos as you go. However, the corrections leave
no obvious audit trail, so the user often doesn‚Äôt realize that what he typed has been

---

## Chunk 2336

changed. It would be better if Word could provide some kind of mark that indicates it
has made a correction on the off chance that it has miscorrected something. (This possi-
bility becomes much more likely if, for instance, you are writing a technical paper heavy
in specialized terminology and acronyms.)
More irksome is Word‚Äôs AutoFormat feature, which tries to interpret user behaviors like

---

## Chunk 2337

use of asterisks and numbers in text to automatically format numbered lists and other
paragraph formats. When this works, it seems magical. But frequently the application
does the wrong thing, and once it does so, there is not always a straightforward way to
undo the action. AutoFormat tries to be just a bit too smart; it should really leave the

---

## Chunk 2338

thinking to humans. Luckily, this feature can be turned off, and Word provides a special
in-place menu that allows users to adjust AutoFormat assumptions.
In the real world, humans accept partially and incorrectly filled-in documents from each
other all the time. We make a note to fix the problems later, and we usually do. If we

---

## Chunk 2339

forget, we fix the omission when we eventually discover it. Even if we never fix it, we
somehow survive. It‚Äôs certainly reasonable to use software to improve the efficiency of
our data collection efforts, and in many cases it is consistent with human goals to do so.
(No one wants to enter the wrong shipping address for an expensive online purchase.)

---

## Chunk 2340

However, our applications can be designed to better accommodate how humans think
about such things. The technical goal of data integrity should not be our users‚Äô problem
to solve.
rethinking Data storage
In our experience, people find computer file systems‚Äîthe facilities that store appli-
cation and data files on disk‚Äîdifficult to use and understand. This is one of the most

---

## Chunk 2341

critical components of computers, and errors here have significant consequences. The
difference between main memory and longer-term storage is unclear to most people.
Unfortunately, how we‚Äôve historically designed software forces users‚Äîeven your mom‚Äî
to know the difference and to think about their documents in terms of how a computer
is constructed.

---

## Chunk 2342

The popularization of web applications and other database-driven software has been a
great opportunity to abandon this baggage of computer file system i mplementation-model
thinking. As mentioned before, Google has led the charge with cloud-based web apps
that auto-save, sparing users the worry and confusion.
332 Part II: Making Well-Behaved Products

---

## Chunk 2343

--- Page 363 ---
Mobile operating systems like iOS try to address the problem of storage by tightly
associating documents with the application that created them. You need to open the
application to access the set of documents you created using it. Documents are saved
automatically and also are retrieved from within the application. This makes things a lot

---

## Chunk 2344

simpler, once you get used to the app-centric paradigm‚Äîuntil you need to work on your
document with a different application. iOS breaks this tight association rule with only a
few document types‚Äîphotos, for example‚Äîand then you are back to hunting for the one
you need in a set of containers.
The problems with data storage

---

## Chunk 2345

The roots of the interaction problems with data storage lie, as you‚Äôd expect, in implemen-
tation models. Technically speaking, every running app really exists in two places at once:
in memory and on disk (or flash storage on mobile devices). The same is true of every open
file. For the time being, this is a necessary state of affairs. Our technology has different

---

## Chunk 2346

mechanisms for accessing data in a responsive way (dynamic RAM memory) and storing
that data for future use (disks/flash memory). However, this is not what most people think
is going on. Most of our mental models (aside from developers) are of a single document
that we are directly creating and making changes to. Unfortunately, most software pre-

---

## Chunk 2347

sents us with a confusing representation of the implementation model of data storage.
saving changes
When a Save Changes dialog like the one shown in Figure 14-2 opens, users suppress
a twinge of fear and confusion and click the Save button out of habit. A dialog that is
always answered the same way is redundant and should be eliminated.
Figure 14-2: This is the question Word asks

---

## Chunk 2348

when you close a file after you have edited it.
This dialog is a result of the developer‚Äôs inflicting
the implementation model of the disk file system
on the hapless user. This dialog is so unexpected
by new users that they often choose Don‚Äôt Save
inadvertently.
The application launches the Save Changes dialog when the user requests Close or

---

## Chunk 2349

Quit because that is when it has to reconcile the differences between the copy of the
CH 14. Rethinking Data Entry, Storage, and Retrieval 333

---

## Chunk 2350

--- Page 364 ---
document in memory and the copy on the disk. But in most cases, querying the user is
simply unnecessary: A yes can be assumed.
The Save Changes dialog is based on a poor assumption: that saving and not saving are
equally probable behaviors. The dialog gives equal weight to these two options even
though the Save button is clicked orders of magnitude more frequently than the Don‚Äôt

---

## Chunk 2351

Save button. As we discussed in Chapter 11, this is a case of confusing possibility and
probability. The user might occasionally say Don‚Äôt Save, but the user almost always will
say Save. Mom is thinking, ‚ÄúIf I didn‚Äôt want those changes, why would I have closed the
document with them in there?‚Äù To her, the question is absurd.

---

## Chunk 2352

In reality, many applications need not concern themselves with document or file man-
agement. Apple‚Äôs iPhoto and iTunes both provide rich and easy-to-use functionality that
allows a typical user to ignore the fact that a file even exists. In iTunes, a playlist can be
created, modified, shared, put onto an iPod, and persist for years, despite the fact that

---

## Chunk 2353

the user has never explicitly saved it. Similarly, in iPhoto, image files are sucked out of
a camera into the application and can be organized, shown, e-mailed, and printed, all
without users ever thinking about the file system. And mobile devices running iOS and
Android have largely eliminated the concept of explicit saving.
Closing documents without saving

---

## Chunk 2354

If you‚Äôve been using computers for a long time, you‚Äôve been conditioned to think that
the document Close function is the appropriate way to abandon unwanted changes if
you make an error or are simply noodling around. This is incorrect; the proper time to
reject changes is when the changes are made. We even have a well-established idiom to

---

## Chunk 2355

support this: the Undo function. What‚Äôs missing is a good way to perform a session-level
undo (such as the Revert function, which only a few applications, like Adobe Photoshop,
support) without resorting to closing the document without saving.
Experienced users also learn to use the Save Changes dialog for similar purposes. Since

---

## Chunk 2356

there is no easy way to undo massive changes in most documents, we (mis)use the Save
Changes dialog by choosing Don‚Äôt Save. If you discover yourself making big changes to
the wrong file, you use this dialog as a kind of escape valve to return things to the status
quo. This is handy, but it‚Äôs also a hack: As we just mentioned, you have more discoverable
ways to address these problems.
save As

---

## Chunk 2357

When you save a document for the first time or choose the Save As command from the
File menu, many applications display the Save As dialog, shown in Figure 14-3.
334 Part II: Making Well-Behaved Products

---

## Chunk 2358

--- Page 365 ---
Figure 14-3: The Save As dialog provides two functions: It lets you name your file,
and it lets you place it in a directory you choose. Users, however, don‚Äôt have a clear
concept of saving, so the title of the dialog does not match their mental models of
the function. Furthermore, if a dialog allows you to name and place a document,

---

## Chunk 2359

you might expect it would allow you to rename and replace it as well. Unfortunately,
our expectations are confounded by poor design.
Functionally, this dialog offers two things: It lets users name a file, and it lets them
choose which directory to place it in. Both of these functions demand that users have
intimate knowledge of the file system and a fair amount of foresight into how they‚Äôll need

---

## Chunk 2360

to retrieve the file later. Users must know how to formulate an acceptable and memora-
ble filename and understand the hierarchical file directory. Many users who master the
name portion give up on trying to understand the directory tree. They put their docu-
ments on their Desktop or in the directory that the application chooses as the default.

---

## Chunk 2361

Occasionally, some action causes the application to forget its default directory, and these
users must call in an expert to find their files.
The Save As dialog needs to decide what its purpose truly is. If it is to name and place
files, it does a very poor job. After the user has named and placed a file for the first time,

---

## Chunk 2362

he cannot change its name or directory without creating a new document‚Äîat least not
with this dialog, which purports to offer naming and placing functions. Nor can he do so
with any other tool in the application itself. In fact, in Windows 7, he can rename other
files using this dialog, but not the ones he is currently working on. Huh? Beginners are

---

## Chunk 2363

out of luck, but experienced users learn the hard way that they can close the document,
launch Windows Explorer, rename the file, return to the application, summon the Open
dialog from the File menu, and reopen the document.
CH 14. Rethinking Data Entry, Storage, and Retrieval 335

---

## Chunk 2364

--- Page 366 ---
Forcing the user to go to Explorer to rename the document is a minor hardship, but
therein lies a hidden trap. The bait is that Windows easily supports several applications
running simultaneously. Attracted by this feature, the user tries to rename the file in
the Explorer without first closing the document in the application. This very reasonable

---

## Chunk 2365

action triggers the trap, and the steel jaws clamp down hard on his leg. He is rebuffed
with the rude error message box shown in Figure 14-4. Trying to rename an open file is a
sharing violation, and the operating system rejects it with a patronizing error message.
Figure 14-4: If the user attempts to rename a file using
Explorer while Word is still editing it, Explorer is too stu-

---

## Chunk 2366

pid to get around the problem. It is also too rude to be
nice about it and puts up this patronizing error message.
Rebuffed by both the editing application and the OS, a new
user might conclude that a document cannot be renamed.
The innocent user is merely trying to rename his document, and he finds himself lost

---

## Chunk 2367

in operating system arcana. Ironically, the one entity that has both the authority and
the responsibility to change the document‚Äôs name while it is still open‚Äîthe application
itself‚Äîrefuses to even try.
Archiving
There is no explicit function for making a copy of, or archiving, a document. Users must
accomplish this with the Save As dialog, and doing so is as clear as mud. If the user has

---

## Chunk 2368

already saved the file as ‚ÄúAlpha,‚Äù she must explicitly call up the Save As dialog and change
the name. Alpha is closed and put away on disk, and New Alpha is left open for editing.
This action makes very little sense from a single-document viewpoint of the world, and
it also presents a nasty trap for the user.
Here is a completely reasonable scenario that leads to trouble: Suppose our user has

---

## Chunk 2369

been editing Alpha for the last 20 minutes and now wants to make an archival copy of
it on disk so that she can make some big but experimental changes to the original. She
calls up the Save As dialog and changes the filename to ‚ÄúNew Alpha.‚Äù The application
puts away Alpha on disk, leaving her to edit New Alpha. But Alpha was never saved, so
336 Part II: Making Well-Behaved Products

---

## Chunk 2370

--- Page 367 ---
it gets written to disk without any of the changes she made in the last 20 minutes! Those
changes only exist in the New Alpha copy that is currently in memory‚Äîin the applica-
tion. As she begins cutting and pasting in New Alpha, trusting that her handiwork is
backed up by Alpha, she is actually modifying the sole copy of this information.

---

## Chunk 2371

Everybody knows that you can use a hammer to drive a screw or pliers to bash in a nail,
but any skilled craftsperson knows that using the wrong tool for the job will eventually
catch up with you. The tool will break or the work will be ruined. The Save As dialog is
the wrong tool for making and managing copies, and it is the user who will eventually
have to pick up the pieces.

---

## Chunk 2372

Fixing data storage: a unified file model
Properly designed software should treat a document as a single thing, never as a copy on
disk and a copy in memory. In this unified file model, users should never be forced to con-
front the computer‚Äôs internal mechanisms. It is the file system‚Äôs job to manage writing
data between the disks and memory.

---

## Chunk 2373

The established standard suite of file management for most applications includes Open,
Save, and Close commands, and the related Save As, Save Changes, and Open dialogs.
Collectively, these dialogs, as we‚Äôve shown, are confusing for some tasks and are com-
pletely incapable of performing other tasks. The following sections describe a different

---

## Chunk 2374

approach to document management that better supports most users‚Äô mental models.
The user may need to perform several goal-directed tasks on a document; each one
should have its own corresponding function:
‚Ä¢ Automatic save
‚Ä¢ Creating a copy
‚Ä¢ Naming and renaming
‚Ä¢ Placing and repositioning in the file system
‚Ä¢ Specifying the file type
‚Ä¢ Reversing changes
‚Ä¢ Discarding all changes

---

## Chunk 2375

‚Ä¢ Creating a version
‚Ä¢ Communicating status
Automatic save
One of the most important functions every computer user must learn is how to save a
document. Invoking this function means taking whatever changes the user has made
to the copy in computer memory and writing them to the disk copy of the document. In
CH 14. Rethinking Data Entry, Storage, and Retrieval 337

---

## Chunk 2376

--- Page 368 ---
the unified model, we abolish all user interface recognition of the two copies, so the Save
function disappears from the mainstream interface. That doesn‚Äôt mean it disappears
from the application; it is still a necessary operation.
Save documents and settings automatically.
Applications should automatically save documents. For starters, when the user is done

---

## Chunk 2377

with a document and requests the Close function, the application should go ahead
and write the changes to disk without stopping to ask for confirmation with the Save
Changes dialog.
In a perfect world, this would be sufficient, but computers and software can crash, power
can fail, and other unpredictable, catastrophic events can conspire to erase your work. If

---

## Chunk 2378

the power fails before you save, all your changes are lost as the memory containing them
scrambles. The original copy on disk will be all right, but hours of work can still be lost.
To prevent this from happening, the application must also save the document at inter-
vals during the user‚Äôs session. Ideally, the application will save every single change as

---

## Chunk 2379

soon as the user makes it‚Äîin other words, after each keystroke. For most applications,
this is feasible. Another approach is to keep track of small changes in memory and write
them to the disk at reasonable intervals.
It‚Äôs important that this automatic save function does not affect the responsiveness of
the user interface. Saving should be either a background process or performed when the

---

## Chunk 2380

user has stopped interacting with the application. Nobody types continuously. Every-
body stops to gather his thoughts, or flip a page, or take a sip of coffee. All the application
needs to do is wait until the user stops typing for a couple of seconds and then save.
Automatic save will be adequate for almost everybody. However, people who have been

---

## Chunk 2381

using computers for a long time are so paranoid about crashes and data loss that they
habitually press Ctrl+S after every paragraph, and sometimes after every sentence.
Applications serving these users should have manual save controls, but users should not
be required to invoke manual saves.
Creating a copy
There should be an explicit function called Create a Copy. The copy will be identical to

---

## Chunk 2382

the original, but it won‚Äôt be tied to the original in any way. That is, subsequent changes to
the original will have no effect on the copy. The new copy of a file named ‚ÄúAlpha‚Äù should
automatically be given a name with a standard form like ‚ÄúAlpha Copy.‚Äù If an existing
document already has that name, the new copy should be named ‚ÄúAlpha Copy 2.‚Äù The
338 Part II: Making Well-Behaved Products

---

## Chunk 2383

--- Page 369 ---
copy should be placed in the same directory as the original. A nice option might be to
add a time or date stamp at the end of the filename.
It is tempting to envision a dialog that accompanies this command, but there should
be no such interruption. The application should take its action quietly, efficiently, and

---

## Chunk 2384

sensibly, without badgering the user with silly dialogs like ‚ÄúAre you sure you want to
make a copy?‚Äù In the user‚Äôs mind it is a simple command. If there are any anomalies, the
application should make a constructive decision on its own authority.
naming and renaming
In most applications, when you save a document for the first time, you can choose a

---

## Chunk 2385

name for it. But almost no application lets you rename that file. Sure, you can Save As
under another name, but that just makes another file under the new name, leaving the
old file untouched under the old name.
The document‚Äôs name should be shown on the application‚Äôs title bar. If the user decides
to rename the document, he should be able to click the title to edit it in place. What could

---

## Chunk 2386

be simpler and more direct than that? Omnigraffle on OS X is one of the few applications
supporting Rename as described here (see Figure 14-5).
Figure 14-5: Omnigraffle on OS X supports Rename. Clicking on the name of the file in the title bar
of the document window opens a pop-up that lets you both rename and move the file.
CH 14. Rethinking Data Entry, Storage, and Retrieval 339

---

## Chunk 2387

--- Page 370 ---
Placing and positioning in the file system
Most often when someone uses an application to edit a document, that document already
exists. Documents are typically opened rather than created from scratch. This means
that their position in the file system is already established. Although we think of estab-

---

## Chunk 2388

lishing the home directory for a document at the moment of creation or when we first
save it, neither of these events is meaningful outside of the implementation model. The
new file should be put somewhere reasonable where the user can find it again (such as the
Desktop).
Put files where users can find them.
The specific appropriate location should depend on your users and the posture of the

---

## Chunk 2389

product you are designing. For complex sovereign applications that most people use
daily, it is sometimes appropriate to define an application-specific document location.
But for transient applications or sovereign applications that are used less frequently,
don‚Äôt hide your users‚Äô files in your own special corner of the file system.

---

## Chunk 2390

If the user wants to place the document somewhere else, he can request this function
from the menu. A Move dialog would then appear with the current document high-
lighted. In this dialog (an appropriately named relative of the Save As dialog), the user
could move the file to any location. The application thus would place all files automati-

---

## Chunk 2391

cally, and this dialog would be used only to move them elsewhere.
specifying the file type
At the bottom of the current Save As dialog, shown in Figure 14-3, a combo box allows
the user to specify a file type. This function should not be located here. When the type is
tied to the act of saving, additional, unnecessary complexity is added to saving. In Word,

---

## Chunk 2392

if the user innocently changes the type, both the save function and any subsequent close
action are accompanied by a frightening and unexpected confirmation box. Overriding
a file‚Äôs type is a relatively rare occurrence. Saving a file is a common occurrence. These
two functions should not be combined.
From the user‚Äôs point of view, the document‚Äôs type‚Äîrich text, plain text, or Word, for

---

## Chunk 2393

example‚Äîis a characteristic of the document rather than of the disk file. Specifying
the type shouldn‚Äôt be associated with the act of saving the file to disk. It belongs more
properly in a Document Properties dialog, accessible near the display of the document‚Äôs
340 Part II: Making Well-Behaved Products

---

## Chunk 2394

--- Page 371 ---
filename. This dialog should have significant cautions built into its interface to make it
clear to the user that the function could involve significant data loss.
In the case of some drawing applications, where saving image files as multiple types is
desirable, an Export dialog (which most drawing applications already support) is appro-
priate for this function.

---

## Chunk 2395

reversing changes
If the user inadvertently makes changes to the document that must be reversed, a tool
already exists for correcting these actions: Undo (see Chapter 15 for more on Undo
behaviors). The file system should not be called in as a surrogate for Undo. The file sys-
tem may be the mechanism that supports the function, but that doesn‚Äôt mean it should

---

## Chunk 2396

be rendered to users in those terms. The concept of going directly to the file system to
undo changes undermines the Undo function.
The version function, described in the section after the next one, shows how a file-centric
vision of Undo can be implemented so that it works well with the unified file model.
Discarding all changes

---

## Chunk 2397

While it‚Äôs not the most common of tasks, we certainly want to allow the user to discard
all the changes she has made after opening or creating a document, so this action should
be explicitly supported. Rather than forcing the user to understand the file system to
achieve her goal, a simple Discard Changes function on the main menu would suffice. A

---

## Chunk 2398

similarly useful way to express this concept is Revert to Version, which is based on a ver-
sion system described in the next section. Because Discard Changes involves significant
data loss, the user should be protected with clear warning signs. Making this function
undoable also would be relatively easy to implement and highly desirable.
Creating a version

---

## Chunk 2399

Creating a version is very similar to using the Copy command. The difference is that
this copy is managed by the application and presented to users as the single document
instance after it is made. It should also be clear to users that they can return to the state
of the document at each point that a version was made. Users should be able to see a list

---

## Chunk 2400

of versions along with various statistics about them, like the time each was recorded and
its size or length. With a click, the user can select a version. By doing so, he also imme-
diately selects it as the active document. The document that was current at the time of
the version selection will be created as a version itself. Also, since disk space is hardly a

---

## Chunk 2401

CH 14. Rethinking Data Entry, Storage, and Retrieval 341

---

## Chunk 2402

--- Page 372 ---
scarce resource these days, it makes sense to create versions regularly, in case it doesn‚Äôt
occur to your users.
A new File menu
Our new File menu now looks like the one shown in Figure 14-6. It functions as follows:
‚Ä¢ New and Open work as before.
‚Ä¢ Close closes the document without a dialog or any other fuss after automatically saving
changes.

---

## Chunk 2403

‚Ä¢ Rename/Move brings up a dialog that lets the user rename the current file or move it to
another directory.
Figure 14-6: The revised File menu now better reflects the user‚Äôs mental model,
rather than the developer‚Äôs implementation model. There is only one file, and
the user owns it. If she wants, she can make tracked or one-off copies of it,

---

## Chunk 2404

rename it, discard any changes she‚Äôs made, or change the file type. She no lon-
ger needs to understand or worry about the copy in RAM versus the copy
on disk.
342 Part II: Making Well-Behaved Products

---

## Chunk 2405

--- Page 373 ---
‚Ä¢ Create a Copy creates a new file that is a copy of the current document.
‚Ä¢ Print collects all printer-related controls in a single dialog.
‚Ä¢ Create Version is similar to Copy, except that the application manages these copies by
way of a dialog summoned by the Revert to Version menu item.
‚Ä¢ Abandon Changes discards all changes made to the document since it was opened or

---

## Chunk 2406

created.
‚Ä¢ Properties opens a dialog that lets the user change the document‚Äôs type.
‚Ä¢ Exit behaves as it does now, closing the document and the application.
A new name for the File menu
Now that we are presenting a unified model of storage instead of the bifurcated imple-
mentation model of disk and RAM, we no longer need to call the leftmost application

---

## Chunk 2407

menu the File menu‚Äîa reflection of the implementation model, not the user‚Äôs model.
There are two reasonable alternatives.
We could label the menu according to the type of documents the application processes.
For example, a spreadsheet application might label its leftmost menu Sheet. An invoicing
application might label it Invoice.

---

## Chunk 2408

Alternatively, we could give the leftmost menu a more generic label, such as Document.
This is a reasonable choice for applications like word processors, spreadsheets, and draw-
ing applications, but it may be less appropriate for more specialized niche applications.
Conversely, the few applications that do represent the contents of disks as files‚Äîgen-

---

## Chunk 2409

erally operating system shells and utilities‚Äîshould have a File menu because they are
addressing files as files.
Communicating status
If the file system needs to show the user a file that cannot be changed because it is in use
by another application, the file system should indicate this to the user. Showing the file-

---

## Chunk 2410

name in red or with a special symbol next to it, along with a ToolTip explaining the situ-
ation, would be sufficient. A new user might still get an error message, as in Figure 14-4,
but at least some visual and textual clues would show the reason the error cropped up.
Not only are there two copies of all data files in the current model, but when they are run-

---

## Chunk 2411

ning, there also are two copies of all applications. When the user goes to the Windows
taskbar‚Äôs Start menu and launches his word processor, a button corresponding to Word
appears on the taskbar. But if he returns to the Start menu, Word is still there! From the
CH 14. Rethinking Data Entry, Storage, and Retrieval 343

---

## Chunk 2412

--- Page 374 ---
user‚Äôs point of view, he has pulled his hammer out of his toolbox only to find that a ham-
mer is still in there.
This should probably not be changed; after all, one of the strengths of the computer is its
capability to have multiple copies of software running simultaneously. But the software

---

## Chunk 2413

should help users understand this unintuitive action. The Start menu could, for example,
make some reference to the already running application.
Time for a change
If you‚Äôre a developer, you might be squirming a little in your seat. You might be thinking
we are treading on holy ground: A pristine copy on disk is critical, and we‚Äôd better not

---

## Chunk 2414

advocate getting rid of it. Relax! There is nothing terribly wrong with the implementation
of our file systems. We simply need to hide its existence from users. We can still offer users
all the advantages of that extra copy on disk without exploding their mental model.
If we remake the file system‚Äôs represented model according to users‚Äô mental models, we

---

## Chunk 2415

can achieve several significant advantages. First, all users will become more effective. If
they aren‚Äôt forced to spend effort and mental energy managing their computer‚Äôs file sys-
tem, they‚Äôll be more focused on the task at hand. And, of course, they won‚Äôt have to redo
hours of work lost to a mistake in the complex chess game of versioning in contemporary
operating systems.

---

## Chunk 2416

Second, we can teach Mom how to really use computers well. We won‚Äôt have to answer
her pointed questions about the interface‚Äôs inexplicable behavior. We can show her appli-
cations and explain how they allow her to work on the document. Upon completion, she
can store the document on the disk as though it were a journal on a shelf. Our sensi-

---

## Chunk 2417

ble explanation won‚Äôt be interrupted by that Save Changes? dialog. Mom represents the
mass market of digital product consumers, who may own and use computers and other
devices but who don‚Äôt like them, trust them, or use them effectively.
The last advantage is that interaction designers won‚Äôt have to incorporate clumsy file

---

## Chunk 2418

system awareness into their products. We can structure the commands in our applica-
tions according to users‚Äô goals instead of the operating system‚Äôs needs.
There will certainly be an initial cost as experienced users get used to the new idioms, but
it will be far less than you might suppose. This is because these power users have already

---

## Chunk 2419

shown their ability and tolerance by learning the implementation model. For them,
learning the better model will be no problem, and there will be no loss of functionality.
The advantages for new users will be immediate and significant. We computer profes-
sionals forget how tall the mountain is after we‚Äôve climbed it, but every day newcom-

---

## Chunk 2420

ers approach the base of this Everest of computer literacy and are severely discouraged.
344 Part II: Making Well-Behaved Products

---

## Chunk 2421

--- Page 375 ---
Anything we can do to lower the heights they must scale will make a big difference, and
this step will tame some of the most perilous peaks.
rethinking Data retrieval
One of the most amazing aspects of the modern world is the sheer quantity of infor-
mation and media we can access within our applications, on our laptops and mobile

---

## Chunk 2422

devices, and via networks and the Internet. But accompanying the boundless possibili-
ties of infinite data access is a difficult design problem: How do we make it easy for peo-
ple to find what they‚Äôre looking for and, more importantly, find what they need?
Luckily, great strides have been made in this area by Google, with its various search

---

## Chunk 2423

engines, and Apple, with its highly effective Spotlight functionality in OS X (more on
these later). But although these solutions point to some effective interactions, they really
just scratch the surface. Google search may be very useful for finding textual, image, or
video content on the web, but that doesn‚Äôt necessarily mean that the same interaction

---

## Chunk 2424

patterns are appropriate for a more targeted retrieval scenario.
As with almost every other problem in interaction design, we‚Äôve found that crafting an
appropriate solution must start with a good understanding of users‚Äô mental models and
usage contexts. With this information, we can structure storage and retrieval systems

---

## Chunk 2425

that accommodate specific purposes. This chapter discusses methods of data retrieval
from an interaction standpoint and presents some human-centered approaches to the
problem of finding useful information.
storage versus retrieval
A storage system is a method of safely keeping things in a repository. It is composed of

---

## Chunk 2426

a container and the tools necessary to put objects in and take them back out again. A
retrieval system is a method of finding things in a repository according to some associ-
ated value, such as name, position, or some other attribute of the contents.
In the physical world, storing and retrieving are inextricably linked; putting an item on a

---

## Chunk 2427

shelf (storing it) also gives us the means to find it later (retrieving it). In the digital world,
the only thing linking these two concepts is our faulty thinking. Computers enable
remarkably sophisticated retrieval techniques‚Äîif only we can break our thinking out
of its traditional box.
Digital storage and retrieval mechanisms have traditionally been based on the con-

---

## Chunk 2428

cept of ‚Äúfolders‚Äù or ‚Äúdirectories.‚Äù It‚Äôs certainly true that the folder metaphor has pro-
vided a useful way to approach a computer‚Äôs storage and retrieval systems (much as
CH 14. Rethinking Data Entry, Storage, and Retrieval 345

---

## Chunk 2429

--- Page 376 ---
one would approach them for a physical object). But as we discussed in Chapter 13,
the metaphoric nature of this interaction pattern is limiting. Ultimately, the sole use
of folders or directories as a retrieval mechanism requires that users know where an
item has been stored in order to locate it. This is unfortunate, since digital systems

---

## Chunk 2430

can give us significantly better methods of finding information than those physically
possible using mechanical systems. But before we talk about how to improve retrieval,
let‚Äôs briefly discuss how it works.
retrieval in the physical world
We can own a book or hammer without giving it a name or permanent place of residence

---

## Chunk 2431

in our house. A book can be identified by characteristics other than a name‚Äîa color or
shape, for example. However, after we accumulate a large number of items that we need
to find and use, it helps to be a bit more organized.
retrieval by location
It is important that our books and hammers have a proper place, because that is how we

---

## Chunk 2432

find them when we need them. We can‚Äôt just whistle and expect them to find us; we must
know where they are and then go there and fetch them. In the physical world, the actual
location of a thing is the means of finding it. Remembering where we put something‚Äîits
address‚Äîis vital to both finding it and putting it away so it can be found again. When we

---

## Chunk 2433

want to find a spoon, for example, we go to the place where we keep our spoons. We don‚Äôt
find the spoon by referring to any inherent characteristic of the spoon itself. Similarly,
when we look for a book, we either go to where we left the book, or we guess that it is
stored with other books. We don‚Äôt find the book by association. That is, we don‚Äôt find the
book by referring to its contents.

---

## Chunk 2434

In this model, the storage system is the same as the retrieval system: Both are based on
remembering locations. They are coupled storage and retrieval systems.
Indexed retrieval
Retrieval by location sounds pretty good, but it has a flaw: It‚Äôs limited in scale by human
memory. Although it works for the books, hammers, and spoons in your house, it doesn‚Äôt

---

## Chunk 2435

work for all the volumes stored in the Library of Congress, for example.
In the world of books and paper on library shelves, we make use of a classification system
to help us find things. Using the Dewey Decimal System (or its international offshoot, the
Universal Decimal Classification system), every book is assigned a unique ‚Äúcall number‚Äù

---

## Chunk 2436

based on its subject. Books are then arranged numerically (and then alphabetically by
author‚Äôs last name), resulting in a library organized by subject.
346 Part II: Making Well-Behaved Products

---

## Chunk 2437

--- Page 377 ---
The only remaining issue is how to discover the number for a given book. Certainly
nobody could be expected to remember every number. The solution is an index, or a col-
lection of records that allows you to find an item‚Äôs location by looking up an attribute of
the item, such as its name.
Traditional library card catalogs provide lookup by three attributes: author, subject, and

---

## Chunk 2438

title. When the book is entered into the library system and assigned a number, three
index cards are created for the book, including all particulars and the Dewey Decimal
number. Each card is headed by the author‚Äôs name, subject, or title. These cards are then
placed in their respective indices in alphabetical order. When you want to find a book,

---

## Chunk 2439

you look it up in one of the indices and find its number. You then find the row of shelves
that contains books with numbers in the same range as your target by examining signs.
You search those particular shelves, narrowing your view by the lexical order of the num-
bers until you find the one you want.
You physically retrieve the book by participating in the system of storage, but you logically

---

## Chunk 2440

find the book you want by participating in a system of retrieval. The shelves and numbers
are the storage system. The card indices are the retrieval system. You identify the desired
book with one and fetch it with the other. In a typical university or professional library,
customers are not allowed into the stacks. As a customer, you identify the book you want

---

## Chunk 2441

by using only the retrieval system. The librarian then fetches the book for you by partici-
pating only in the storage system. The book‚Äôs unique number is the bridge between these
two interdependent systems. In the physical world, both the retrieval system and the
storage system may be labor-intensive. Particularly in older, noncomputerized libraries,

---

## Chunk 2442

they are both inflexible. Adding a fourth index based on acquisition date, for example,
would be prohibitively difficult for the library.
retrieval in the digital world
Unlike in the physical world of books, stacks, and cards, it‚Äôs not very hard to add an index
in the computer. Ironically, in a system where easily implementing dynamic, associative

---

## Chunk 2443

retrieval mechanisms is at last possible, we often don‚Äôt implement any retrieval system
other than the storage system. If you want to find a file on disk, you need to know its
name and place. It‚Äôs as if we went into the library, burned the card catalog, and told the
patrons they can easily find what they want by just remembering the little numbers on

---

## Chunk 2444

the spines of the books. We have put 100 percent of the burden of file retrieval on the
user‚Äôs memory while the CPU just sits there idling, twiddling its digital thumbs on bil-
lions of NOP (no-operation) instructions.
Although our desktop computers can handle hundreds of different indices, we ignore
this capability and frequently have no indices at all pointing into the files stored on our

---

## Chunk 2445

disk. Instead, we have to remember where we put our files and what we called them in
order to find them again. This omission is one of the most destructive, backward steps
CH 14. Rethinking Data Entry, Storage, and Retrieval 347

---

## Chunk 2446

--- Page 378 ---
in modern software design. This failure can be attributed to the interdependence of files
and the organizational systems in which they exist‚Äîan interdependence that doesn‚Äôt
exist in the mechanical world.
There is nothing wrong with the disk file storage systems that we have created for our-

---

## Chunk 2447

selves. The only problem is that we have failed to create adequate disk file retrieval sys-
tems. Instead, we hand the user the storage system and call it a retrieval system. This is
like handing him a bag of groceries and calling it a gourmet dinner. There is no reason
to change our file storage systems. The UNIX model is fine. Our applications can easily

---

## Chunk 2448

remember the names and locations of the files they have worked on, so they aren‚Äôt the
ones who need a retrieval system: It‚Äôs for us human users.
Digital retrieval methods
There are three fundamental ways to find a document on a digital system. You can find it
by remembering where you left it in the file structure‚Äîpositional retrieval. You also can

---

## Chunk 2449

find it by remembering its identifying name‚Äîidentity retrieval. (It should be noted that
these two methods typically are used in conjunction.) The third method, associative or
attribute-based retrieval, is based on the ability to search for a document based on some
inherent quality of the document itself. For example, if you want to find a book with a red

---

## Chunk 2450

cover, or one that discusses light rail transit systems, or one that contains photographs
of steam locomotives, or one that mentions Theodore Judah, you must use an associative
method.
The combination of position and identity provides the basis for most digital storage sys-
tems. However, most digital systems do not provide an associative method for storage.

---

## Chunk 2451

By ignoring associative methods, we deny ourselves any attribute-based searching, so
we must depend on human memory to recall the position and identity of our documents.
Users must know the title of the document they want and where it is stored to find it. For
example, to find a spreadsheet in which you calculated the amortization of your home

---

## Chunk 2452

loan, you need to remember that you stored it in the directory called ‚ÄúHome‚Äù and that
the file was named ‚Äúamort1.‚Äù If you can‚Äôt remember either of these facts, finding the doc-
ument is difficult.
Attribute-based retrieval systems
For early graphical interfaces like the original Macintosh, a positional retrieval system

---

## Chunk 2453

almost made sense: The desktop metaphor dictated it (you don‚Äôt use an index to look up
papers on your desk), and precious few documents could be stored on a 144KB floppy
disk. However, our current desktop systems can easily hold five million times as many
documents (and that‚Äôs not to mention what even a meager local network can provide

---

## Chunk 2454

access to)! Yet we still use the same old metaphors and retrieval models to manage our
348 Part II: Making Well-Behaved Products

---

## Chunk 2455

--- Page 379 ---
data. We continue to render our software‚Äôs retrieval systems in strict adherence to the
storage system‚Äôs implementation model of the storage system. We ignore the power and
ease of use of a system for finding files that is distinct from the system for keeping files.
An attribute-based retrieval system enables users to find documents by their contents

---

## Chunk 2456

and meaningful properties (such as when they were last edited). The purpose of such a
system is to provide a mechanism for users to express what they‚Äôre looking for according
to how they think about it. For example, a saleswoman looking for a proposal she recently
sent to a client named ‚ÄúWidgetco‚Äù could effectively express herself by saying ‚ÄúShow me

---

## Chunk 2457

the Word documents related to ‚ÄòWidgetco‚Äô that I modified and printed yesterday.‚Äù
A well-crafted attribute-based retrieval system also enables users to find what they‚Äôre
looking for by synonyms or related topics or by assigning attributes to individual doc-
uments. The user can then dynamically define sets of documents having these overlap-

---

## Chunk 2458

ping attributes. Returning to our saleswoman example, each potential client is sent a
proposal letter. Each of these letters is different and is naturally grouped with the files
pertinent to that client. However, there is a definite relationship between each of these
letters, because they all serve the same function: proposing a business relationship. It

---

## Chunk 2459

would be convenient if the saleswoman could find and gather all such proposal letters
while allowing each one to retain its uniqueness and association with its particular cli-
ent. A file system based on place‚Äîon its single storage location‚Äîmust necessarily store
each document by a single attribute (client or document type) rather than by multiple
characteristics.

---

## Chunk 2460

A retrieval system can learn a lot about each document just by keeping its eyes and ears
open. If it remembers some of this information, much of the burden on users is made
unnecessary. For example, it can easily remember certain things:
‚Ä¢ The user that created or the users that contributed to the document
‚Ä¢ The device that created the document
‚Ä¢ The application that created the document

---

## Chunk 2461

‚Ä¢ The document‚Äôs contents and type
‚Ä¢ Which application last opened the document
‚Ä¢ The document‚Äôs size and whether it is exceptionally large or small
‚Ä¢ Whether the document has been untouched for a long time
‚Ä¢ How long the document was last open
‚Ä¢ How much information was added or deleted during the last edit
‚Ä¢ If the document was created from scratch or cloned from another

---

## Chunk 2462

‚Ä¢ If the document is frequently edited
CH 14. Rethinking Data Entry, Storage, and Retrieval 349

---

## Chunk 2463

--- Page 380 ---
‚Ä¢ If the document is frequently viewed but rarely edited
‚Ä¢ Whether the document has been printed and where
‚Ä¢ How often the document has been printed, and whether changes were made to it each
time immediately before printing
‚Ä¢ Whether the document has been faxed, and to whom
‚Ä¢ Whether the document has been e-mailed, and to whom

---

## Chunk 2464

Spotlight, the search function in Apple‚Äôs OS X, provides effective attribute-based
retrieval, as shown in Figure 14-7. Not only can the user look for documents according
to meaningful properties, but he can save these searches as ‚ÄúSmart Folders.‚Äù Doing so
enables him to see documents related to a given client in one place and all proposals

---

## Chunk 2465

in a different place. (However, he would have to put some effort into identifying each
proposal as such, because Spotlight can‚Äôt recognize this.) It should be noted that one
of the most important factors contributing to Spotlight‚Äôs usefulness is the speed with
which results are returned. This is a significant differentiating factor between it and the

---

## Chunk 2466

Windows search functionality. It was achieved through purposeful technical design that
indexes content during idle time.
Figure 14-7: Spotlight, the search capability in Apple‚Äôs OS X, allows users to find a document based
on meaningful attributes such as the name, type of document, and when it was last opened.
An attribute-based retrieval system can find documents for users without users ever

---

## Chunk 2467

having to explicitly organize documents in advance. But there is also considerable value
in allowing users to tag or manually specify attributes about documents. This allows
350 Part II: Making Well-Behaved Products

---

## Chunk 2468

--- Page 381 ---
users to fill in the gaps where technology can‚Äôt identify all the meaningful attributes. It
also allows people to define de facto organizational schemes based on how they discuss
and use information. The retrieval mechanism achieved by such tagging is often called
a ‚Äúfolksonomy,‚Äù a term credited to information architect Thomas Vander Wal. Folksono-

---

## Chunk 2469

mies can be especially useful in social and collaborative situations. There they can pro-
vide an alternative to a globally defined taxonomy if it is undesirable or impractical to
force everyone to adhere to and think in terms of a controlled vocabulary. Good exam-
ples of the use of tagging to facilitate information retrieval include Flickr, del.icio.us, and

---

## Chunk 2470

the highly popular social sharing app, Twitter (see Figure 14-8).
Figure 14-8: Twitter, whose hashtags have become part of mainstream culture, is the classic example
of a folksonomy that has achieved widespread adoption.
relational databases versus digital soup
Software that uses database technology typically makes two simple demands of its

---

## Chunk 2471

users. First, users must define the form of the data in advance. Second, users must then
conform to that definition. There are also two facts about human users of software.
First, they rarely can express in advance what they will want. Second, even if they could
express their specific needs, more often than not they change their minds.
CH 14. Rethinking Data Entry, Storage, and Retrieval 351

---

## Chunk 2472

--- Page 382 ---
organizing the unorganizable
Living in the Internet age, we find ourselves more and more frequently confronting infor-
mation systems that fail the relational database litmus: We can neither define informa-
tion in advance nor reliably stick to any definition we might conjure up. In particular, the
two most common components of the Internet exemplify this dilemma.

---

## Chunk 2473

First, let‚Äôs consider e-mail. Whereas a record in a database has a specific identity, and thus
belongs in a table of objects of the same type, an e-mail message doesn‚Äôt fit this paradigm
very well. We can divide our e-mail into incoming and outgoing, but that doesn‚Äôt help us
much. For example, if you receive a piece of e-mail from Jerry about Sally, regarding the

---

## Chunk 2474

Ajax Project and how it relates to Jones Consulting and your joint presentation at the board
meeting, you can file this in the ‚ÄúJerry‚Äù folder, or the ‚ÄúSally‚Äù folder, or the ‚ÄúAjax‚Äù folder, but
what you really want is to file it in all of them. In six months, you might try to find this
message for any number of unpredictable reasons, and you‚Äôll want to be able to find it,
regardless of your reason.

---

## Chunk 2475

Second, let‚Äôs consider the web. Like an infinite, chaotic, redundant, unsupervised hard
drive, the web defies structure. Enormous quantities of information are available on the
web, but its sheer size and heterogeneity almost guarantee that no regular system could
ever be imposed on it. Even if the web could be organized, the method would likely have

---

## Chunk 2476

to exist on the outside, because its contents are owned by millions of individuals, none
of whom are subject to any authority. Unlike records in a database, we cannot expect to
find a predictable identifying mark in a record on the web.
Problems with databases
Databases have a further problem: All database records are of a single, predefined type,

---

## Chunk 2477

and all instances of a record type are grouped. A record may represent an invoice or a
customer, but it never represents an invoice and a customer. Similarly, a field within a
record may be a name or a social security number, but it is never a name and a social
security number. This fundamental concept underlies all databases. It serves the vital

---

## Chunk 2478

purpose of allowing us to impose order on our storage system. Unfortunately, it fails
miserably to address the realities of retrieval for our e-mail problem. It is not enough
that the e-mail from Jerry is a record of type ‚Äúe-mail.‚Äù Somehow, we must also identify
it as a record of type ‚ÄúJerry,‚Äù type ‚ÄúSally,‚Äù type ‚ÄúAjax,‚Äù type ‚ÄúJones Consulting,‚Äù and type

---

## Chunk 2479

‚ÄúBoard Meeting.‚Äù We must also be able to add and change its identity at will, even after
the record has been stored. What‚Äôs more, a record of type ‚ÄúAjax‚Äù may refer to documents
other than e-mail messages, such as a project plan. Because the record format is unpre-
dictable, the value that identifies the record as pertaining to Ajax cannot be stored reli-

---

## Chunk 2480

ably within the record itself. This directly contradicts how databases work.
Databases do provide retrieval tools that can do a bit more than just match simple record
types. They allow us to find and fetch a record by examining its contents and matching
352 Part II: Making Well-Behaved Products

---

## Chunk 2481

--- Page 383 ---
them against search criteria. For example, we search for invoice number ‚Äú77329‚Äù or for
the customer with the identifying string ‚ÄúGoodyear Tire and Rubber.‚Äù Yet this still fails
for our e-mail problem. If we allow users to enter the keywords ‚ÄúJerry,‚Äù ‚ÄúSally,‚Äù ‚ÄúAjax,‚Äù
‚ÄúJones Consulting,‚Äù and ‚ÄúBoard Meeting‚Äù into the message record, we must define such

---

## Chunk 2482

fields in advance. But as we‚Äôve said, defining things in advance doesn‚Äôt guarantee that
the user will follow that definition later. He may now be looking for messages about the
company picnic, for example. Besides, adding a series of keyword fields leads you into
one of the most fundamental and universal conundrums of data processing: If you give
users 10 fields, someone is bound to want 11.

---

## Chunk 2483

The attribute-based alternative
So if relational database technology isn‚Äôt right, what is? If users find it hard to define
their information in advance, as databases require, is there an alternative storage and
retrieval system that might work well for them?
Again, the key is separating the storage and retrieval systems. If an index were used as

---

## Chunk 2484

the retrieval system, the storage technique could remain a database. We can imagine the
storage facility as a sort of digital soup where we could put our records. This soup would
accept any record we dumped into it, regardless of its size, length, type, or contents.
Whenever a record was entered, the application would return a token that could be used

---

## Chunk 2485

to retrieve the record. All we would have to do is give it back that token, and the soup
would instantly return our record. This is just our storage system, however; we still need
a retrieval system that manages all these tokens for us.
Attribute-based retrieval thus comes to our rescue: We can create an index that stores a

---

## Chunk 2486

key value along with a copy of the token. The real magic, though, is that we can create an
infinite number of indices, each one representing its own key and containing a copy of
the token. For example, if our digital soup contained all our e-mail messages, we could
establish an index for each of our old friends: ‚ÄúJerry,‚Äù ‚ÄúSally,‚Äù ‚ÄúAjax,‚Äù ‚ÄúJones Consulting,‚Äù

---

## Chunk 2487

and ‚ÄúBoard Meeting.‚Äù Now, when we need to find e-mail pertinent to the board meeting,
we don‚Äôt have to paw manually and tediously through dozens of folders. Instead, a single
query brings us everything we are looking for.
Of course, someone or something must fill those indices, but that is a more mundane
exercise in interaction design. Two components must be considered. First, the system

---

## Chunk 2488

must be able to read e-mail messages and automatically extract and index information
such as proper names, Internet addresses, street addresses, phone numbers, and other
significant data. Second, the system must make it very easy for the user to add ad hoc
pointers to messages. He should be able to specify that a given e-mail message pertains

---

## Chunk 2489

to a certain value, whether or not that value is quoted verbatim in the message. Typing is
okay, but selecting from picklists, clicking-and-dragging, and other more-advanced user
interface idioms can make the task almost painless.
CH 14. Rethinking Data Entry, Storage, and Retrieval 353

---

## Chunk 2490

--- Page 384 ---
Important advantages arise when the storage system is reduced in importance and the
retrieval system is separated from it and significantly enhanced. Some form of digital
soup will help us get control of the unpredictable information that is beginning to make
up more and more of our everyday information universe. We can offer users powerful

---

## Chunk 2491

information-management tools without demanding that they configure their informa-
tion in advance or that they conform to that configuration in the future. After all, they
can‚Äôt do it. So why insist?
Constrained natural-language output
This chapter has discussed the merits of attribute-based retrieval. This kind of system,

---

## Chunk 2492

to be truly successful, requires a front end that allows users to easily make sense of what
could be complex and interrelated sets of attributes.
One alternative is to use natural-language processing, in which the user can key in
his request in English. The problem with this method is that it is still not possible for

---

## Chunk 2493

today‚Äôs run-of-the-mill computers to effectively understand natural-language queries in
most commercial situations. It might work reasonably in the laboratory under tightly
controlled conditions, or in the real world for specific domains with tightly controlled
vocabulary and syntax, but not in the consumer world, where language is subject to

---

## Chunk 2494

whim, dialect, colloquialism, and ambiguity. In any case, the programming of a natu-
ral-language recognition engine is beyond the capabilities and budget of your average
development team.
A better approach, which we‚Äôve used successfully on numerous projects, is a technique
we call constrained natural-language output. Using this technique, the application pro-

---

## Chunk 2495

vides an array of bounded controls for users to choose from. The controls line up so that
they can be read like an English sentence. The user chooses from a list of valid alterna-
tives, so the design is in essence a self-documenting, bounded query facility. Figure 14-9
shows how this works.
Figure 14-9: An example of a constrained natural-language output interface to an attribute-based

---

## Chunk 2496

retrieval engine, part of a Cooper design created for Softek‚Äôs Storage Manager. These controls pro-
duce natural language as output, rather than attempting to accept natural language as input, for
database queries. Each underlined phrase, when clicked, provides a drop-down menu with a list of
selectable options. The user constructs a sentence from a dynamic series of choices that always

---

## Chunk 2497

guarantees a valid result.
354 Part II: Making Well-Behaved Products

---

## Chunk 2498

--- Page 385 ---
A natural-language output interface also is helpful for expressing everything from que-
ries to plain old relational databases. Querying a database in the usual fashion is very
hard for most people because it calls for Boolean notation and arcane database syntax,
√† la SQL.
English isn‚Äôt Boolean, so the English clauses aren‚Äôt joined with AND and OR, but rather

---

## Chunk 2499

with English phrases like ‚ÄúAll of the following apply‚Äù or ‚ÄúNot all of the following apply.‚Äù
Users find that choosing from among these phrases is easy because they are clear and
bounded, and users can read the phrase like a sentence to check its validity.
The trickiest part of natural-language output from a development perspective is that

---

## Chunk 2500

choosing from controls on the left may, in many circumstances, change the content of
the choices in controls to the right of them, in a cascading fashion. This means that to
effectively implement natural-language output, the grammar of the choices needs to be
well mapped out in advance. Also, the controls need to be dynamically changeable or

---

## Chunk 2501

hideable, depending on what is selected in other controls. Finally, the controls them-
selves must be able to display or, at least, load data dynamically.
The other concern is localization. If you are designing for multiple languages, those with
very different word orders (for example, German and English) may require different
grammar mappings.

---

## Chunk 2502

Both attribute-based retrieval engines and natural-language output interfaces require
significant design and programming effort, but users will reap tremendous benefits in
terms of power and flexibility in managing their data. Because the amount of data we
all must manage is growing at an exponential rate, it makes sense to invest now in these

---

## Chunk 2503

more powerful, goal-directed tools wherever data must be managed.
CH 14. Rethinking Data Entry, Storage, and Retrieval 355

---

## Chunk 2504

--- Page 387 ---
Ch 15
PrEVEnTIng Errors AnD
InFormIng DECIsIons
In the early days of the digital revolution, a significant portion of a software applica-
tion‚Äôs graphical interface was taken up by dialoges and messages telling users what they
did wrong, or warning them about what their computer or software was unable to han-

---

## Chunk 2505

dle due to real or presumed technical limitations. The first edition of About Face was
released during that time, and was, as you can probably imagine, quite critical of this
state of affairs.
Today, the second of these two categories of error messages has dropped by the way-
side as computational, storage, and communication speeds have all increased by several

---

## Chunk 2506

orders of magnitude and as the sophistication of programming tools and techniques has
similarly advanced.
The first type of error message‚Äîscolding users for their mistakes‚Äîhas begun to disap-
pear as well (at least in consumer and mobile applications). Designers have discovered
better ways to eliminate errors before they happen, allow users to reverse their actions,

---

## Chunk 2507

and provide them with the almost magical ability to see the results of their actions before
they even take them. These three strategies of preventing errors and informing decisions
are the subject of this chapter.

---

## Chunk 2508

--- Page 388 ---
using rich modeless Feedback
Most computers (and, increasingly, many devices) come with high-resolution displays
and high-quality audio systems. Yet very few applications (outside of games) even scratch
the surface of using these facilities to provide useful information about the app‚Äôs status,

---

## Chunk 2509

the users‚Äô tasks, and the system and its peripherals in general. An entire toolbox is avail-
able to supply information to users. But until quite recently, most designers and devel-
opers have used the same blunt instrument‚Äîthe dialog‚Äîto communicate information
(usually after it is truly useful) to users. We‚Äôll discuss in detail the reasoning behind why

---

## Chunk 2510

certain dialogs‚Äîerrors, alerts, and confirmations‚Äîare not appropriate ways to com-
municate in Chapter 21.
Unfortunately, this means that subtle status information is simply never communicated
to users, because most designers know you don‚Äôt want dialogs to pop up constantly. But
constant feedback‚Äîespecially positive feedback‚Äîis exactly what users need. It‚Äôs simply

---

## Chunk 2511

the channel of communication that needs to be different.
In this section, we‚Äôll discuss how visual information, when displayed in a modeless fash-
ion in the main views of an application, won‚Äôt stop the user‚Äôs flow and can all but elimi-
nate those pesky dialogs.
rich visual modeless feedback
Perhaps the most important type of modeless feedback is rich visual modeless feedback

---

## Chunk 2512

(RVMF). This type of feedback is rich in terms of giving in-depth information about the
status or attributes of a process or object in the current application. It is visual in that
it makes idiomatic use of pixels on the screen (often dynamically). It is modeless in that
this information is always readily displayed, requiring no special action or mode shift on

---

## Chunk 2513

the user‚Äôs part to view and make sense of the feedback.
For example, in Microsoft Outlook 2013, an icon next to an e-mail sender‚Äôs name visually
indicates whether that person is available for a chat session or phone call. This is handy
when a real-time conversation is preferable to an e-mail exchange. This icon (as well as

---

## Chunk 2514

the ability to start a chat session from a right-click menu) means that users don‚Äôt have to
open their chat client and find the sender‚Äôs name to see if that person is available. This is
so easy and convenient that the user doesn‚Äôt have to think about it. Another example of
the strategy, as designed for a Cooper client, is shown in Figure 15-1.

---

## Chunk 2515

Here‚Äôs another example, this time from iOS: When you download an app from the App
Store, the downloading file appears on the Home screen as an icon with a small, dynami-
cally updating progress indicator, showing visually how far along the app is in the down-
load and install process (see Figure 15-2).
358 Part II: Making Well-Behaved Products

---

## Chunk 2516

--- Page 389 ---
Figure 15-1: This pane from a Cooper design for a
long-term health-care information system is a good
example of RVMF. The diagram represents all the
rooms in the facility. Color coding indicates male,
female, empty, or mixed-gender rooms; numbers indi-
cate empty beds; tiny boxes between rooms indicate
shared bathrooms. Black triangles indicate health

---

## Chunk 2517

issues, and a tiny H means a held bed. This RVMF is
supplemented with ToolTips, which show room num-
bers and occupant names and highlight any important
notices about the room or its residents. A numeric
summary of rooms, beds, and employees is given at
the top. This display has a short learning curve. After
mastering it, nurses and facility managers can under-

---

## Chunk 2518

stand their facility‚Äôs status at a glance.
Figure 15-2: When apps are purchased from Apple‚Äôs App Store, the app icon
appears on the Home screen of the iPad or iPhone (upper right). A dynamically updating
circular indicator on the icon marks the progress of the download-and-install process.
CH 15. Preventing Errors and Informing Decisions 359

---

## Chunk 2519

--- Page 390 ---
A final example of RVMF is from the computer gaming world: Sid Meier‚Äôs Civilization
(see Figure 15-3). This game provides dozens of examples of RVMF in its main inter-
face, which is a map of the historical world. You are the leader of an evolving civilization
that you are trying to build. Civilization uses RVMF to indicate half a dozen dynami-

---

## Chunk 2520

cally changing attributes of a city, all represented visually. If a city is more advanced, its
architecture is more modern. If it is larger, the icon is larger and more embellished. If it
is plagued by civil unrest, smoke rises from the city. Individual troop and civilian units
also show status visually, by way of tiny meters indicating unit health and strength. Even

---

## Chunk 2521

the landscape has RVMF: Dotted lines marking spheres of influence shift as units move
and cities grow. Terrain changes as roads are laid, forests are cleared, and mountains are
mined. Although dialogs exist in the game, much of the information needed to under-
stand what is going on is communicated clearly with no words or dialogs whatsoever.

---

## Chunk 2522

Figure 15-3: Civilization is a game in which you chart the course of civilization. Its interface
provides dozens of examples of rich visual modeless feedback.
Imagine if all the objects that had pertinent status information on your desktop or in
your application could display their status in this manner. Printer icons could show

---

## Chunk 2523

how close the printer is to completing your print job. Icons for hard drives and remov-
able media could show how full these items are. When an object is selected for drag and
drop, all the places that could receive it would become highlighted to announce their
receptiveness.
Think about the objects in your application and their attributes‚Äîespecially dynam-

---

## Chunk 2524

ically changing ones‚Äîand what kind of status information is critical for your users.
360 Part II: Making Well-Behaved Products

---

## Chunk 2525

--- Page 391 ---
Figure out how to create a representation of this. After the user notices and learns this
representation, it tells him what is going on at a glance. (There should also be a way to
get fully detailed information if the user requests it.) Put this information into main
application windows in the form of RVMF and see how many dialogs you can eliminate
from routine use!

---

## Chunk 2526

One important point needs to be made about rich modeless visual feedback: It isn‚Äôt for
beginners. Even if you add ToolTips to textually describe the details of any visual cues
you add (which you should), a ToolTip requires users to perform work to discover it and
decode its meaning. RVMF is something that users will begin to use over time. When they

---

## Chunk 2527

do, they‚Äôll think it‚Äôs amazing, but in the meantime, they will need the support of menus
and dialogs to find what they‚Äôre looking for. This means that RVMF used to replace alerts
and warnings of serious trouble must be extraordinarily clear to users. Make sure that
this kind of status is visually emphasized over less critical, more informational RVMF.
Audible feedback

---

## Chunk 2528

In data-entry environments, clerks sit for hours in front of computer screens entering
data. These users may well be examining source documents and typing by touch instead
of looking at the screen. If a clerk enters something erroneous, he needs to be informed
of it via both auditory and visual feedback. The clerk can then use his sense of hearing to

---

## Chunk 2529

monitor the success of his inputs while he keeps his eyes on the document.
The kind of auditory feedback we‚Äôre proposing is not the same as the beep that accompa-
nies an error message box. In fact, it isn‚Äôt a beep at all. The auditory indicator we propose
as feedback for a problem is silence. The problem with much current audible feedback

---

## Chunk 2530

is the still-prevalent idea that, rather than positive audible feedback, negative feedback
is desirable.
Avoid negative audible feedback
People frequently counter the idea of audible feedback with arguments that users don‚Äôt
like it. Users are offended by the sounds that computers make, and they don‚Äôt want
their computer beeping at them. Despite the fact that Microsoft and Apple have tried to

---

## Chunk 2531

improve the quality of alert sounds by hiring sound designers (including the legendary
Brian Eno for Windows 95), warm ambience doesn‚Äôt change the fact that sounds are used
to convey negative, often insulting messages.
Emitting noise when something bad happens is called negative audible feedback. On
most systems, error dialogs normally are accompanied by a shrill beep, so audible feed-

---

## Chunk 2532

back has become strongly associated with them. That beep is a public announcement of
the user‚Äôs failure. It explains to all within earshot that you have done something stupid.
CH 15. Preventing Errors and Informing Decisions 361

---

## Chunk 2533

--- Page 392 ---
It is such a hateful idiom that most software developers now have an unquestioned belief
that audible feedback is inappropriate to interface design. Nothing could be further
from the truth. It is the negative aspect of the feedback that presents problems, not the
audible aspect.
Negative audible feedback has several things working against it. Because the negative

---

## Chunk 2534

feedback is issued when a problem is discovered, it naturally takes on the characteristics
of a home alarm. Home alarms are designed to be purposefully loud, discordant, and
disturbing. They are supposed to wake sound sleepers from their slumbers when their
house is on fire and their lives are at stake. Unfortunately, users are constantly doing

---

## Chunk 2535

things that cause apps to generate error messages, so these noises have become part of
the normal course of interaction. Alarms have no place in this normal relationship, just
as we don‚Äôt expect our car alarms to go off if we accidentally change lanes without using
the turn signal. Perhaps the most damning aspect of negative audible feedback is the

---

## Chunk 2536

implication that success must be greeted with silence. Humans like to know when they
are doing well. They need to know when they are doing poorly, but that doesn‚Äôt mean that
they like to hear about it. Negative feedback systems are simply appreciated less than
positive feedback systems.
Given the choice of no noise versus noise for negative feedback, people will choose the

---

## Chunk 2537

former. Given the choice of no noise versus soft and pleasant noises for positive feedback,
however, many people will choose the latter. We have never given our users a chance by
putting high-quality, positive audible feedback in our apps, so it‚Äôs no wonder that people
associate sound with bad interfaces.
Provide positive audible feedback

---

## Chunk 2538

Almost every object and system outside the world of software offers sound to indicate
success rather than failure. When we close the door, we know that it is latched when we
hear the click, but silence tells us that it is not yet secure. When we converse with some-
one and she says ‚ÄúYes‚Äù or ‚ÄúUh-huh,‚Äù we know that, at least minimally, she registered what

---

## Chunk 2539

was said. When she is silent, however, we have reason to believe that something is amiss.
When we turn the key in our car‚Äôs ignition and get silence, we know we have a problem.
When we flip the switch on the copier and it stays coldly silent instead of humming, we
know that we have trouble. Even most equipment that we consider silent makes some

---

## Chunk 2540

noise: Turning on the stovetop returns a hiss of gas and a gratifying ‚Äúwhoomp‚Äù as the
pilot ignites the burner. Electric ranges are inherently less friendly and harder to use
because they lack that sound‚Äîthey require indicator lights to tell us their status.
When success with our tools yields a sound, it is called positive audible feedback. Our

---

## Chunk 2541

software tools are mostly silent; all we hear is the quiet clicks of the keyboard. Hey! That‚Äôs
positive audible feedback. Every time you press a key, you hear a faint but positive sound.
Keyboard manufacturers could make perfectly silent keyboards, but they don‚Äôt because
362 Part II: Making Well-Behaved Products

---

## Chunk 2542

--- Page 393 ---
we depend on audible feedback to tell us how we are doing. This is one of the reasons
why tablet computers like the iPad provide audible feedback for their touchscreen key-
boards by default. The feedback doesn‚Äôt have to be sophisticated‚Äîthose clicks don‚Äôt tell
us much‚Äîbut they must be consistent. If we ever detect silence, we know that we have

---

## Chunk 2543

failed to press the key. The true value of positive audible feedback is that its absence is an
extremely effective problem indicator.
The effectiveness of positive audible feedback originates in human sensitivity. Nobody
likes to be told that they have failed. Error message boxes are negative feedback, telling
the user that he has done something wrong. Silence can ensure that the user knows this

---

## Chunk 2544

without actually being told of the failure. It is remarkably effective, because the software
doesn‚Äôt have to insult the user to accomplish its ends.
Our software should give us constant, small, audible cues just like our keyboards. Our
applications would be much friendlier and easier to use if they issued barely audible but

---

## Chunk 2545

easily identifiable sounds when user actions are correct. The app could issue a reassuring
click every time the user enters valid input into a field, and an affirming tone when a form
has been successfully completed. If an application doesn‚Äôt understand some input, it should
remain silent, subtly informing the user of the problem, allowing her to correct the input

---

## Chunk 2546

without embarrassment or ego bruising. When the user drags and drops an object appro-
priately, he might be rewarded with a soft, cheerful ‚Äúplonk‚Äù from the speakers for success
or with silence (and a visual hop back to its origin point) if the drop was not meaningful.
As with visual feedback, computer games tend to excel at positive audio feedback. Apple‚Äôs

---

## Chunk 2547

OS X also does a good job with subtle positive audio feedback for activities like document
saves and drag and drop. Of course, the audible feedback must be at the right volume for
the situation. Windows and the Mac offer a standard volume control, so one obstacle
to beneficial audible feedback has been overcome, but audible feedback also should not
overpower music playing on the computer.

---

## Chunk 2548

Rich modeless feedback is one of the greatest tools at the disposal of interaction design-
ers. Replacing annoying, useless dialogs with subtle and powerful modeless communi-
cation can make the difference between an app users will despise and one they will love.
Think of all the ways you might improve your own applications and prevent user errors

---

## Chunk 2549

with RVMF and other mechanisms of modeless feedback!
undo, redo, and reversible histories
Undo is the remarkable facility that lets us reverse a previous action, painlessly turn-
ing back the clock on our mistakes. Simple and elegant in theory, the feature is of
obvious value. Yet when we examine current implementations and uses of Undo from

---

## Chunk 2550

a Goal-Directed point of view, we see considerable variation in purpose and method.
CH 15. Preventing Errors and Informing Decisions 363

---

## Chunk 2551

--- Page 394 ---
Undo is critically important for users, but it‚Äôs not quite as simple as it may appear at
first glance.
undo should follow mental models
Undo is traditionally thought of as the rescuer of users in distress, the knight in shining
armor, the cavalry galloping over the ridge, the superhero swooping in at the last second.

---

## Chunk 2552

As a computational facility, Undo has no merit. Because they don‚Äôt make mistakes, com-
puters have no need for Undo. Human beings, on the other hand, make mistakes all the
time, and Undo is a facility that exists for their exclusive use. This singular observation
should immediately tell us that of all the facilities in an app, Undo should be modeled

---

## Chunk 2553

the least like its construction methods‚Äîits implementation model‚Äîand the most like
the user‚Äôs mental model.
Not only do humans make mistakes, they make mistakes as part of their everyday behav-
ior. From a computer‚Äôs standpoint, a false start, a misdirected glance, a pause, a sneeze,
some experimentation, an ‚Äúuh,‚Äù and a ‚Äúyou know‚Äù are all errors. But from a human

---

## Chunk 2554

standpoint, they are perfectly normal. Human ‚Äúmistakes‚Äù are so commonplace that if
you think of them as ‚Äúerrors‚Äù or even as abnormal behavior, you will adversely affect the
design of your software.
user mental models of mistakes
Users generally don‚Äôt believe, or at least don‚Äôt want to believe, that they make mistakes.

---

## Chunk 2555

This is another way of saying that the persona‚Äôs mental model typically doesn‚Äôt include
error on his part. Following a persona‚Äôs mental model means absolving him of blame.
The implementation model, however, is based on an error-free CPU. Following the imple-
mentation model means proposing that all culpability must rest with the user. Thus,

---

## Chunk 2556

most software assumes that it is blameless, and any problems are purely the user‚Äôs fault.
The solution is for the user-interface designer to abandon the idea that the user can make
a mistake. This means that everything the user does is something he or she considers to
be valid and reasonable. Most people don‚Äôt like to admit to mistakes in their own minds,

---

## Chunk 2557

so the app shouldn‚Äôt contradict this mindset in its interactions with users.
undo enables exploration
If we design software from the point of view that nothing users do should constitute a
mistake, we immediately begin to see things differently. We cease to imagine the user as
a module of code or a peripheral that drives the computer, and we begin to imagine him

---

## Chunk 2558

as an explorer, probing the unknown. We understand that exploration involves inevita-
ble forays into blind alleys and down dead ends. It is natural for humans to experiment,
364 Part II: Making Well-Behaved Products

---

## Chunk 2559

--- Page 395 ---
to vary their actions, to probe gently against the veil of the unknown to see where their
boundaries lie. How can they know what they can do with a tool unless they experiment
with it? Of course, the degree of willingness to experiment varies widely from person to
person, but most people experiment at least a little bit.

---

## Chunk 2560

Developers, who are highly paid to think like computers, view such behavior only as
errors that must be handled by the code. From the implementation model‚Äînecessarily
the developer‚Äôs point of view‚Äîsuch gentle, innocent probing represents a continuous
series of ‚Äúmistakes.‚Äù From a humanistic perspective based on our users‚Äô mental models,

---

## Chunk 2561

these actions are natural and normal. An application can either rebuff those perceived
mistakes or assist users in their explorations. Undo is thus a primary tool for supporting
exploration in software user interfaces. It allows users to reverse one or more previous
actions if they change their mind.
A significant benefit of Undo is purely psychological: It reassures users. It is much easier

---

## Chunk 2562

to enter a cave if you are confident that you can get back out of it at any time. The Undo
function is that comforting rope ladder to the surface, supporting the user‚Äôs willingness
to explore further by assuring him that he can back out of any dead-end caverns.
Curiously, users often don‚Äôt think about Undo until they need it, in much the same way

---

## Chunk 2563

that homeowners don‚Äôt think about their insurance policies until disaster strikes. Users
frequently charge into the cave half prepared and start looking for the rope ladder‚Äîfor
Undo‚Äîonly when they encounter trouble.
Designing an undo facility
Although users need Undo, it doesn‚Äôt directly support any particular goal that underlies

---

## Chunk 2564

their tasks. Rather, it supports a necessary condition‚Äîtrustworthiness‚Äîon the way to a
real goal. It doesn‚Äôt help users achieve their goals, but it keeps negative occurrences from
spoiling the effort.
Users visualize the Undo facility in different ways, depending on the situation and their
expectations. If a user is very computer-naive, he might see it as an unconditional panic

---

## Chunk 2565

button for extricating himself from a hopelessly tangled misadventure. A more experi-
enced computer user might visualize Undo as a storage facility for deleted data. A really
computer-sympathetic user with a logical mind might see it as a stack of procedures that
can be undone one at a time in reverse order. To create an effective Undo facility, we must

---

## Chunk 2566

satisfy as many of these mental models as we expect our personas will bring to bear.
The secret to designing a successful Undo system is to make sure that it supports typi-
cally used tools and avoids any hint that Undo signals (whether visually, audibly, or tex-
tually) a failure by the user. It should be less a tool for reversing errors and more a tool

---

## Chunk 2567

for supporting exploration. Errors are generally single, incorrect actions. Exploration,
CH 15. Preventing Errors and Informing Decisions 365

---

## Chunk 2568

--- Page 396 ---
by contrast, is a long series of probes and steps, some of which are keepers and some of
which must be abandoned.
Undo works best as a global, app-wide function that undoes the last action, regardless
of whether it was done by direct manipulation or through a dialog. One of the biggest
problems in current implementations of Undo functionality is when users lose the ability

---

## Chunk 2569

to reverse their actions after they save the document (in Excel, for example). Just because
the user has saved her work to avoid losing it in a crash doesn‚Äôt necessarily mean that
she wants to commit to all the changes she has made. Furthermore, with our large disk
drives, there is no reason not to save the Undo buffer with the document.

---

## Chunk 2570

Undo can also be problematic for documents with embedded objects. If the user makes
changes to a spreadsheet embedded in a Word document, clicks the Word document,
and then invokes Undo, the most recent Word action is undone instead of the most
recent spreadsheet action. Users have a difficult time with this. It forces them to aban-

---

## Chunk 2571

don their mental model of a single unified document and forces them to think in terms
of the implementation model: One document is embedded within another, and each has
a separate editor with a separate Undo buffer.
Common types of undo
As is so common in the world of software, there is no adequate terminology to describe

---

## Chunk 2572

the different types of Undo‚Äîthey are uniformly referred to as ‚ÄúUndo‚Äù and left at that. This
language gap contributes to the lack of innovation in producing new and better variants
of Undo. In this section, we define several Undo variants and explain their differences.
Incremental and procedural actions
Undo operates on the user‚Äôs actions. A typical user action in a typical application has a

---

## Chunk 2573

procedure component‚Äîwhat the user did‚Äîand often a data component‚Äîwhat infor-
mation was affected. When the user requests an Undo function, the procedure com-
ponent of the action is reversed. If the action had a data component‚Äîresulting in the
addition, modification, or deletion of data‚Äîthat data is modified appropriately. Cutting,

---

## Chunk 2574

pasting, drawing, typing, and deleting are all actions that have a data component, so
undoing them involves removing or replacing the affected text or image parts. Actions
that include a data component are called incremental actions.
Many undoable actions are data-free transformations such as a paragraph reformatting

---

## Chunk 2575

operation in a word processor or a rotation in a drawing app. Both of these operations
act on data, but neither of them adds, modifies, or deletes data (from the perspective
of the database, although a user may not share this view). Actions like these (with only
a procedure component) are procedural actions. Most existing Undo functions don‚Äôt
366 Part II: Making Well-Behaved Products

---

## Chunk 2576

--- Page 397 ---
discriminate between procedural and incremental actions but simply reverse the most
recent action.
blind and explanatory undo
Normally, Undo is invoked by a menu item or toolbar control with an unchanging label
or icon. Users know that triggering the idiom undoes the last operation, but there is no

---

## Chunk 2577

indication of what that operation is. This is called a blind Undo. On the other hand, if the
idiom includes a textual or visual description of the particular operation that will be
undone, it is an explanatory Undo.
For example, if the user‚Äôs last operation was to type the word design, the Undo function
on the menu says ‚ÄúUndo Typing design.‚Äù Explanatory Undo is, generally, a much more

---

## Chunk 2578

pleasant feature than blind Undo. It is fairly easy to put on a menu item, but it is more
difficult to put on a toolbar control, although putting the explanation in a ToolTip is a
good compromise. (See Chapter 18 for more about toolbars and ToolTips.)
single and multiple undo
The two most familiar types of Undo in common use today are single Undo and multi-

---

## Chunk 2579

ple Undo. Single Undo is the most basic variant, reversing the effects of the most recent
user action, whether procedural or incremental. Performing a single Undo twice usually
undoes the Undo and brings the system back to the state it was in before the first Undo
was activated.
This facility is very effective because it is so simple to operate. The user interface is basic

---

## Chunk 2580

and clear, easy to describe and remember. The user gets precisely one free lunch. This is
by far the most frequently implemented Undo, and it is certainly adequate, if not opti-
mal, for many applications. For some users, the absence of this simple Undo is sufficient
grounds to abandon a product.
A user generally notices most of his command mistakes right away: Something about

---

## Chunk 2581

what he did doesn‚Äôt feel or look right, so he pauses to evaluate the situation. If the repre-
sentation is clear, he sees his mistake and selects the Undo function to reset things to the
previously correct state; then he proceeds.
Multiple Undo can be performed repeatedly in succession. It can undo more than one
previous operation, in reverse temporal order‚Äîa reversible history. Any app with sim-

---

## Chunk 2582

ple Undo must remember the user‚Äôs last operation and, if applicable, cache any changed
data. If the application implements multiple Undo, it must maintain a stack of opera-
tions, the depth of which the user may set as an advanced preference. Each time Undo is
CH 15. Preventing Errors and Informing Decisions 367

---

## Chunk 2583

--- Page 398 ---
invoked, it performs an incremental Undo: It reverses the most recent operation, replac-
ing or removing data as necessary and discarding the restored operation from the stack.
limitations of single undo
The biggest limitation of single-level, functional Undo occurs when the user accidentally
short-circuits the capability of the Undo facility to rescue him. This problem crops up

---

## Chunk 2584

when the user doesn‚Äôt notice his mistake immediately. For example, assume he deletes
six paragraphs of text, and then deletes one word, and then decides that the six para-
graphs were erroneously deleted and should be replaced. Unfortunately, performing
Undo now merely brings back the one word, and the six paragraphs are lost forever. The

---

## Chunk 2585

Undo function has failed him by behaving literally rather than practically. Anybody can
clearly see that the six paragraphs are more important than the single word, yet the app
freely discarded those paragraphs in favor of the one word. The application‚Äôs blindness
caused it to keep a quarter and throw away a fifty-dollar bill, simply because the quarter
was offered last.

---

## Chunk 2586

In some applications, any click of the mouse, however innocent of function it might
be, causes the single Undo function to forget the last meaningful thing the user did.
Although multiple Undo solves these problems, it introduces some significant problems
of its own.
limitations of multiple undo
The response to the weaknesses of single-level Undo has been to create a multiple-level

---

## Chunk 2587

implementation of the same incremental Undo. The application saves each action the
user takes. When the user selects Undo repeatedly, each action is undone in the reverse
order of its original invocation. In the example given in the preceding section, the user
can restore the deleted word with the first invocation of Undo and restore the precious

---

## Chunk 2588

six paragraphs with a second invocation. Having to redundantly re-delete the single
word is a small price to pay for being able to recover those six valuable paragraphs. The
excision of the one-word re-deletion tends to go unnoticed, just as we don‚Äôt notice the
cost of ambulance trips: Don‚Äôt quibble over the little stuff when lives are at stake. But this

---

## Chunk 2589

doesn‚Äôt change the fact that the Undo mechanism is built on a faulty model, and in other
circumstances, undoing functions in a strict LIFO (last in, first out) order can make the
cure as painful as the disease.
Imagine again our user deleting six paragraphs of text, calling up another document, and
performing a global find-and-replace function. To retrieve the missing six paragraphs,

---

## Chunk 2590

the user must first unnecessarily undo the rather complex global find-and-replace oper-
ation. This time, the intervening operation was not the insignificant single-word dele-
tion of the earlier example. The intervening operation was complex and difficult, and
368 Part II: Making Well-Behaved Products

---

## Chunk 2591

--- Page 399 ---
having to undo it is clearly an unpleasant excision effort. It would sure be nice to be able
to choose which operation in the queue to undo and to be able to leave intervening‚Äîbut
valid‚Äîoperations untouched.
The problems with multiple Undo are not so much due to its behavior as much as they
are due to its representation. Most Undo facilities are constructed in an unrelentingly

---

## Chunk 2592

function-centric manner. They remember what the user does function by function and
separate her actions by individual function. In the time-honored way of creating repre-
sented models that follow implementation models, Undo systems tend to model code and
data structures instead of user goals. Each click of the Undo button reverses precisely one

---

## Chunk 2593

function-sized bite of behavior. Reversing on a function-by-function basis is an appropriate
mental model for solving most simple problems that arise when the user makes an errone-
ous entry. The mistake is noticed right away, and the user takes action to fix it right away,
usually by the time he‚Äôs taken two or three actions. However, when the problem grows

---

## Chunk 2594

more convoluted, the incremental, multiple-step Undo model doesn‚Äôt scale very well.
undo and redo
The Redo function came into being as the result of the implementation model for Undo,
wherein operations must be undone in reverse sequence, and in which no operation may
be undone without first undoing all the valid intervening operations. Redo essentially

---

## Chunk 2595

undoes Undo and is easy to implement if developers have already gone to the effort of
implementing Undo.
Redo prevents a diabolical situation in multiple Undo. If the user wants to back out of a
sequence of actions, he clicks the Undo control a few times, waiting to see things return
to the desired state. It is very easy in this situation to press Undo one time too many. The

---

## Chunk 2596

user immediately sees that he has undone something desirable. Redo solves this problem
by allowing him to undo the Undo, putting back the last good action.
Many applications that implement single Undo treat the last undone action as an undo-
able action. In effect, this makes a second invocation of the Undo function a minimal
Redo function.
group multiple undo

---

## Chunk 2597

Microsoft Word contains what has unfortunately become a somewhat typical facility‚Äîa
variation of multiple Undo that we will call group multiple Undo. It has several levels,
showing a textual description of each operation in the Undo stack. You can examine the
list of past operations and select an operation in the list to undo. However, you are not

---

## Chunk 2598

undoing that one operation, but rather all operations back to that point, inclusive (see
Figure 15-4). This style of multiple Undo is also employed by many Adobe products.
CH 15. Preventing Errors and Informing Decisions 369

---

## Chunk 2599

--- Page 400 ---
Figure 15-4: With Microsoft Office‚Äôs Undo/Redo facility, you can
undo multiple actions, but only as a group; you can‚Äôt choose to
undo only the thing you did three actions ago. Redo works in the
same manner.
As a result, you cannot recover your six missing paragraphs without first reversing all

---

## Chunk 2600

the intervening operations. After you select one or more operations to undo, the list of
undone operations becomes available in reverse order in the Redo control. Redo works
exactly the same way as Undo. You can select as many operations to redo as you want,
and all operations up to that specific one are redone.

---

## Chunk 2601

The application offers two visual clues to this fact. If the user selects the fifth item in the
list, that item and all four items before it in the list are selected. Also, the text legend says
‚ÄúUndo 5 actions.‚Äù The fact that the designers had to add that text legend tells us that,
regardless of how developers constructed it, the users were applying a different mental

---

## Chunk 2602

model. The users imagined that they could go down the list and select a single action
from the past to Undo. The app didn‚Äôt offer that option, so the signs were posted. This
is like a door with a pull handle that has a Push sign‚Äîwhich everybody still pulls on
anyway. While multiple Undo is certainly a very useful mechanism, there‚Äôs no reason not

---

## Chunk 2603

to finish the job and use our ample computing resources to allow users to undo just the
undesirable actions, instead of everything that has happened since them.
other types of undo
Undo in its simplest form‚Äîsingle Undo‚Äîconforms to the user‚Äôs mental model: ‚ÄúI just did
something I now wish I hadn‚Äôt. I want to click a button and undo that last thing I did.‚Äù

---

## Chunk 2604

Unfortunately, this represented model rapidly diverges from the user‚Äôs mental model as
the complexity of the situation grows. In this section, we discuss models of Undo-like
behavior that work a bit differently from the more standard Undo and Redo idioms.
Discontiguous multiple undo
When the user goes down a logical dead end (rather than merely mistyping data), he

---

## Chunk 2605

can often take several complex steps into the unknown before realizing that he is lost
and needs to get a bearing on known territory. At this point, however, he may have per-
formed several interlaced functions, only some of which are undesirable. He may want
370 Part II: Making Well-Behaved Products

---

## Chunk 2606

--- Page 401 ---
to keep some actions and nullify others, not necessarily in strict reverse order. What if
he entered some text, edited it, and then decided to undo the entry of that text but not
undo the editing of it? Such an operation is problematic to implement and explain. Neil
Rubenking offers this pernicious example: Suppose that the user did a global replace,

---

## Chunk 2607

changing tragedy to catastrophe, and then another changing cat to dog. To undo the first
without undoing the second, can the application reliably fix all the dogastrophes?
In this more complex situation, the simplistic representation of Undo as a single LIFO
stack doesn‚Äôt satisfy the way it does in simpler situations. The user may want to study

---

## Chunk 2608

his actions as a menu and choose a discontinuous subset of them for reversion while
keeping others. This demands an explanatory Undo with a more robust presentation
than might otherwise be necessary for a normal blind multiple Undo. Additionally, the
means for selecting from that presentation must be more sophisticated. Representing

---

## Chunk 2609

the operation in the queue to show the user what he is actually undoing is a more diffi-
cult problem.
Category-specific undo
The Backspace key is really an Undo function, albeit a special one. When the user mis-
types, the Backspace key ‚Äúundoes‚Äù the erroneous characters. If the user mistypes some-
thing, and then performs an unrelated function such as paragraph formatting, and

---

## Chunk 2610

then presses the Backspace key repeatedly, the mistyped characters are erased, and the
formatting operation is ignored. Depending on how you look at it, this can be a great,
flexible advantage, allowing users to undo discontiguously at any selected location. You
could also see it as a trap for users, because they can move the cursor and inadvertently

---

## Chunk 2611

backspace away characters that were not the last ones keyed in.
Logic says that this latter case is a problem. Empirical observation says that it is rarely a
problem for users. Such discontiguous, incremental Undo‚Äîso hard to explain in words‚Äî
is so natural and easy to use because everything is visible: Users can clearly see what will

---

## Chunk 2612

be backspaced away. Backspace is a classic example of an incremental Undo, reversing
only some data while ignoring other, intervening actions. Yet if you imagined an Undo
facility that had a pointer that could be moved and that could undo the last function
that occurred where the pointer points, you‚Äôd probably think that such a feature would

---

## Chunk 2613

be patently unmanageable and would confuse a typical user. Experience tells us that
Backspace does nothing of the sort. It works as well as it does because its behavior is
consistent with the user‚Äôs mental model of the cursor: Because it is the source of added
characters, it can also reasonably be the locus of deleted characters.

---

## Chunk 2614

Granted, Backspace is a special case. But using this concept as a springboard, we could
perhaps create different categories of incremental Undo, like a format-Undo function
that would undo only previous format commands and other types of category-specific
Undo actions. If the user entered some text, changed it to italic, entered some more text,
CH 15. Preventing Errors and Informing Decisions 371

---

## Chunk 2615

--- Page 402 ---
increased the paragraph indentation, entered some more text, and then clicked the
Format-Undo button, only the indentation increase would be undone. A second click
of the Format-Undo button would reverse the italic operation. Neither invocation of the
Format-Undo would affect the content.
What are the implications of category-specific Undo in a nontext application? A drawing

---

## Chunk 2616

app, for example, could have separate Undo commands for pigment application tools,
transformations, and cut-and-paste. There is really no reason that we couldn‚Äôt have inde-
pendent Undo functions for each particular class of operation.
Pigment application tools include all drawing implements‚Äîpencils, pens, fills, spray-

---

## Chunk 2617

ers, brushes‚Äîand all shape tools‚Äîrectangles, lines, ellipses, arrows. Transformations
include all image-manipulation tools‚Äîshear, sharpness, hue, rotate, contrast, and line
weight. Cut-and-paste tools include all lassos, marquees, clones, drags, and other repo-
sitioning tools. Unlike the Backspace function in the word processor, undoing a pigment

---

## Chunk 2618

application in a drawing app would be temporal and would work independently of selec-
tion. That is, the pigment that is removed first would be the last pigment applied, regard-
less of the current selection. Western text has an implied reading order from the upper
left to the lower right. Deleting from the lower right to the upper left maps to a strong,

---

## Chunk 2619

intrinsic mental model, so it seems natural. In a drawing, no such conventional order
exists, so any deletion order other than one based on entry sequence would be discon-
certing to users.
A better alternative might be to undo within the current selection only. The user selects
a graphic object, for example, and requests a transformation-Undo. The last transforma-

---

## Chunk 2620

tion to have been applied to that selected object would be reversed.
Most software users are familiar with incremental Undo and would find a category-
specific Undo novel and possibly disturbing. However, the ubiquity of the Backspace key
shows that incremental Undo is a learned behavior that users find helpful. If more apps

---

## Chunk 2621

had modal Undo tools, users would soon adapt to them. They would even come to expect
them, the way they expect to find the Backspace key on word processors.
Deleted data buffers
As the user works on a document for an extended time, she may want a repository of
deleted text. Consider the six missing paragraphs from the earlier example. If they are

---

## Chunk 2622

separated from the user by a couple of complex search and replaces, they can be as diffi-
cult to reclaim through Undo as they are to rekey. Our user is thinking, ‚ÄúIf the app would
just remember the stuff I deleted and keep it in a special place, I could go get what I want
directly.‚Äù
372 Part II: Making Well-Behaved Products

---

## Chunk 2623

--- Page 403 ---
The user is imagining a repository of the data components of her actions, rather than
merely a LIFO stack of functions‚Äîa deleted data buffer. The user wants the missing
text without regard to which function got rid of it. The usual manifest model forces her
not only to be aware of every intermediate step but also to reverse each one in turn. To

---

## Chunk 2624

create a facility more amenable to our user, we can create, in addition to the normal
Undo stack, an independent buffer that collects all deleted text or data. At any time,
she can open this buffer as a document and use standard cut-and-paste or click-and-
drag idioms to examine and recover the desired text. If the entries in this deletion

---

## Chunk 2625

buffer were headed with simple date stamps and document names, navigation would
be simple and visual.
The user can then browse the buffer of deleted data at will, randomly rather than
sequentially. Finding those six missing paragraphs would be a simple, visual procedure,
regardless of the number or type of complex, intervening steps the user had taken. A

---

## Chunk 2626

deleted data buffer should be offered in addition to the regular, incremental, multiple
Undo because it complements it. The data must be saved in a buffer, anyway. This fea-
ture would be quite useful in most applications, whether spreadsheet, drawing app, or
invoice generator.
Versioning and reversion
Users occasionally want to back up long distances, but when they do, the granular

---

## Chunk 2627

actions are not terrifically important. The need for an incremental Undo remains, but
discerning the individual components of more than the last few operations is over-
kill in most cases. Versioning (as we discussed in Chapter 14) simply makes a copy of
the entire document the way a camera snapshot captures an image in time. Because

---

## Chunk 2628

versioning involves the entire document, it is typically implemented by direct use of
the file system. The biggest difference between versioning and other Undo systems is
that the user must explicitly request the version‚Äîrecording a copy or snapshot of the
document. After he has done this, he can safely modify the original. If he later decides

---

## Chunk 2629

that his changes were undesirable, he can return to the saved copy‚Äîa previous version
of the document.
Many tools exist to support the versioning concept in source code, but this concept
is just emerging in the world outside of software development. 37signals‚Äô Writeboard,
for example (see Figure 15-5), automatically creates versions of a collaborative text

---

## Chunk 2630

document. It allows users to compare versions and, of course, revert to any previous
version.
CH 15. Preventing Errors and Informing Decisions 373

---

## Chunk 2631

--- Page 404 ---
Figure 15-5: Google Docs allows multiple people to collaborate on a single document. It creates a
new version every time the user saves changes to the document and allows users to view the different
versions. This can be quite useful because it allows collaboration without worry that valuable work
will be overwritten.

---

## Chunk 2632

Critical to the effectiveness of a versioning facility is the behavior of the revert com-
mand. It should provide a list of the available saved versions of the document in question.
This should include some information about each document, such as the time and day
it was recorded, the name of the person who recorded it, the size, and some optional

---

## Chunk 2633

user-entered notes. A user should be able to understand the differences among versions
and ultimately choose to revert to any one of these versions. In the case of reversion, the
current state of the document should be saved as another version that can be reverted to.
Freezing
Freezing involves locking selected data within a document so that it cannot be changed.

---

## Chunk 2634

Anything that has already been entered becomes uneditable, although new data can
be added. Existing paragraphs are untouchable, but new ones can be added between
older ones.
374 Part II: Making Well-Behaved Products

---

## Chunk 2635

--- Page 405 ---
This idiom is much more useful for a graphic document than for a text document. It is
much like an artist spraying a drawing with fixative. All marks made up to that point are
now permanent, yet new marks can be made at will. Images already placed on the screen
are locked down and cannot be changed, but new images can be freely superimposed

---

## Chunk 2636

on the older ones. Corel Painter offers a similar feature with its Wet Paint and Dry Paint
commands.
undoing the undoable
Some operations simply cannot be undone because they involve some action that trig-
gers a device not under the application‚Äôs direct control. For example, after an e-mail mes-
sage has been sent, there is no undoing it. (Gmail gives you a short amount of time to halt

---

## Chunk 2637

an e-mail by not actually sending it for a few seconds after you click Send, which is really
quite clever. See Figure 15-6.)
Figure 15-6: Gmail lets you temporarily undo the undoable‚Äîsending an e-mail message‚Äîby waiting
a few seconds after you click Send before really sending it.
Why isn‚Äôt a filename Undo provided? Because it doesn‚Äôt fall into the traditional view of

---

## Chunk 2638

what Undo is for; developers generally don‚Äôt provide a true Undo function for changing
a filename.
There are also situations where we‚Äôre told that it‚Äôs impossible to undo an action because
of business rules or institutional policies. Examples include records of financial trans-
actions and entries in medical charts. In these cases, it may very well be true that Undo

---

## Chunk 2639

isn‚Äôt an appropriate function, but you can still better support human goals and mental
models by providing a way to reverse or adjust the action while leaving an audit trail.
CH 15. Preventing Errors and Informing Decisions 375

---

## Chunk 2640

--- Page 406 ---
Spend some time looking at your own application and see if you can find functions that
seem as if they should be undoable but currently aren‚Äôt. You may be surprised by how
many you find.
what If: Compare and Preview
Besides providing robust support for the terminally indecisive, the paired Undo-Redo
function is a convenient comparison tool. Suppose you want to compare the visual

---

## Chunk 2641

effect of ragged-right margins versus justified right margins. You start with ragged
right and then invoke Justification. Then you invoke Undo to see ragged right. Then
you invoke Redo to see justified margins again. In effect, toggling between Undo and
Redo implements a comparison or what-if function; it just happens to be represented

---

## Chunk 2642

in the form of its implementation model. If this same function were added to the
interface following a user‚Äôs mental model, it might be represented as a comparison or
what-if control. This function would let you compare several states before confirming
action.
Some TV remote controls include a Jump button that switches between the current

---

## Chunk 2643

channel and the previous channel‚Äîvery convenient for viewing two programs con-
currently. The Jump function provides the same utility as the Undo-Redo function pair
with a single command‚Äîa 50 percent reduction in excise (see Chapter 12) for the same
functionality.
When used as comparison functions, Undo and Redo are really one function and not

---

## Chunk 2644

two. One says ‚ÄúApply this change,‚Äù and the other says ‚ÄúDon‚Äôt apply this change.‚Äù A sin-
gle Compare button might more accurately represent the action to users. Although we
have been describing this tool in the context of a text-oriented word processing app,
a Compare function might be most useful in an image processing or drawing applica-

---

## Chunk 2645

tion, where users apply successive visual transformations. The ability to see the image
with the transformation (or even multiple variants of it simultaneously) and quickly and
easily compare it to the image without the transformation would be a great help to the
digital artist. Many products address this with thumbnail ‚Äúpreview‚Äù images, as shown
in Figure 15-7.

---

## Chunk 2646

Compare may seem like an advanced function, and it is for some applications. Just as
the Jump function may not be used by the majority of TV watchers, the Compare but-
ton would remain a nicety for frequent users. This shouldn‚Äôt detract from its usefulness,
however. And for some applications, like photo manipulation and other media author-

---

## Chunk 2647

ing apps, visual comparison tools that show the future before it happens have become
almost a necessity.
376 Part II: Making Well-Behaved Products

---

## Chunk 2648

--- Page 407 ---
Figure 15-7: Numerous photo processing apps on the iPad, including Photo Toaster, provide preview
thumbnails of the image you are working on, each showing the result of a different effect or image
parameter change. Tapping the thumbnail applies the change to the image, which is in itself a sort of
preview, since it can be undone with a single additional tap.

---

## Chunk 2649

CH 15. Preventing Errors and Informing Decisions 377

---

## Chunk 2650

--- Page 409 ---
Ch 16
DEsIgnIng For
DIFFErEnT nEEDs
As we discussed in Part I, personas and scenarios help us focus our design efforts on the
goals, behaviors, needs, and mental models of real users. In addition to the specific focus
that personas can give a design effort, some consistent and generalizable patterns of user

---

## Chunk 2651

needs should inform how our products are designed. In this chapter, we‚Äôll explore some
strategies for serving these well-known needs: learnability and help, customizability,
localization and globalization, and accessibility.
learnability and help
Two concepts are particularly useful in sorting out the needs of users with different lev-

---

## Chunk 2652

els of experience trying to learn an interface: command modalities and working sets. The
fallback option, should these prove insufficient, is online help in its various forms. This
section covers each of these methods of helping users understand and learn an interface.
Command modalities
User interfaces are, in a reductionist sense, a means for users to enter data and issue

---

## Chunk 2653

commands to the computer. Data entry is generally fairly straightforward: dictating to
a speech recognition algorithm, typing into an empty page or text field, using a finger or
stylus to draw, clicking and dragging objects, or picking a value from a menu or similar

---

## Chunk 2654

--- Page 410 ---
widget. Commands that activate functions are a bit more difficult to learn, since users
need to figure out both what commands are available and how they are to be used.
Command modalities are the distinct techniques for allowing users to issue these
instructions to the application. Direct-manipulation handles, drop-down and pop-up

---

## Chunk 2655

menu items, toolbar controls, and keyboard accelerators are all examples of command
modalities.
Considerate user interfaces often provide multiple command modalities for critical func-
tions‚Äîmenu items, toolbar items, keyboard accelerators, gestures, or direct-manipula-
tion controls‚Äîeach with the parallel capability to invoke a single, particular command.

---

## Chunk 2656

This redundancy enables users with different skill sets and aptitudes to direct the appli-
cation according to their abilities and inclinations. Mobile apps have less capacity for
multiple modalities, but the tradeoff is that there is usually fewer interface elements to
search when looking for a particular function.
Pedagogic, immediate, and invisible commands

---

## Chunk 2657

Some command modalities offer new users more support. Dialog boxes and command
menus (such as those found on a traditional desktop application‚Äôs menu bar, as shown
in Figure 16-1) teach the user with descriptive text. This is why commands presented in
this manner express a pedagogic modality‚Äîcommands that teach their behavior using

---

## Chunk 2658

inspection. Beginners use the pedagogical behavior of menus as they get oriented in a
new application. But perpetual intermediates often want to leave menus behind to find
more immediate and efficient tools, in the form of immediate and invisible commands.
Direct-manipulation controls like drag handles; real-time manipulation controls like

---

## Chunk 2659

sliders and knobs; and even pushbuttons and their toolbar variants, are commands that
express an immediate modality. Immediate modality controls have an immediate effect
on data (or its presentation) without any intermediary. Neither menus nor dialog boxes
have this immediate property. Each one requires an intermediate step, sometimes more
than one.

---

## Chunk 2660

Keyboard accelerators and gestures take the idea of immediacy one step further: There
is no locus of these commands in the visual interface‚Äîonly invisible keystrokes, swipes,
pinches, or flicks of the finger. These types of command interfaces express an invisible
modality. Users must memorize invisible commands, because typically the interface

---

## Chunk 2661

offers little or no visual indication that they exist. Invisible commands also need to be
initially identified for the user, unless they follow widely used conventions (such as flick-
ing up or down to scroll on a touchscreen interface) or by having a reliable way to inform
new users that they exist. Invisible commands are used extensively by intermediates and
even more by experts.

---

## Chunk 2662

380 Part II: Making Well-Behaved Products

---

## Chunk 2663

--- Page 411 ---
Figure 16-1: Menus on the Windows version of Adobe Reader
give users a textual overview of the application‚Äôs functionality,
call out keyboard mnemonics and accelerators, and offer
toolbar icons. Unfortunately, this pedagogic idiom is seldom
available in mobile apps, due to space constraints.
Information in the world versus information in the head

---

## Chunk 2664

Donald Norman provides a useful perspective on command modalities. In The Design of
Everyday Things (Basic Books, 2002), Norman uses the phrases information in the world
and information in the head to refer to different ways that users access information.
When he talks about information in the world, Norman refers to situations in which

---

## Chunk 2665

insufficient information is available in an environment or interface to accomplish some-
thing. A kiosk showing a map of downtown, for example, is information in the world. We
don‚Äôt have to bother remembering exactly where the Transamerica Building is, because
we can find it by reading a map.
Opposing this is information in your head, which refers to knowledge that you have

---

## Chunk 2666

learned or memorized, like the back-alley shortcut that isn‚Äôt printed on any map.
Information in your head is much faster and easier to use than information in the world,
but you are responsible for ensuring that you learn it, that you don‚Äôt forget it, and that
it stays up to date. Information in the world is slower and more cumbersome, but very
dependable.

---

## Chunk 2667

CH 16. Designing for Different Needs 381

---

## Chunk 2668

--- Page 412 ---
Pedagogic commands are designed to be learnable via information in the world. Invisi-
ble commands must be memorized and thus count as information in the head. Immedi-
ate commands fall somewhere in between.
A menu item or dialog is necessarily filled with informational context, which is why it is

---

## Chunk 2669

a pedagogic command. Conversely, keyboard accelerators constitute invisible commands
because using them requires the user to have memorized information about the func-
tions and their keyboard equivalents, which may not be expressed in the visual interface.
memorization vectors
New users are happy with pedagogic commands, but as they progress to become perpet-

---

## Chunk 2670

ual intermediates, the slow, repetitive verbosity of pedagogic interfaces starts to seem
tedious. Users like to find more immediate commands for frequent tasks. This is a natu-
ral and appropriate user desire, and, if our software is to be judged easy to use, we must
satisfy it. The solution consists of two components. First, we must provide immediate (or

---

## Chunk 2671

invisible) commands in addition to the pedagogic ones. Second, we must provide a path
by which the user can learn the immediate command corresponding to each pedagogic
command. This path is called a memorization vector.
There are several ways to provide memorization vectors for users. The least effective
method is to mention the vector only in the user documentation. The slightly better,

---

## Chunk 2672

but still ineffective, method is to mention it in the app‚Äôs main online help system. These
methods put the onus of finding the memorization vector on users and also leave it up to
users to realize that they need to find it in the first place.
Better still is to integrate memorization vectors directly into the main interface. The

---

## Chunk 2673

menus of most desktop applications already have two standard methods. As defined by
Microsoft, a typical Windows application has two sets of immediate, keyboard-based
commands: mnemonics and accelerators. In Microsoft Word, for example, the mne-
monic for Save is Alt+F and then S. Alt+F navigates to the File menu and S issues the save

---

## Chunk 2674

command. The memorization vector mnemonics in Windows is shown when the user
presses the alt key. The characters are shown with an underline, or‚Äîin the case of the
Office Suite‚Äîwith modal tooltips (see Figure 16-2). The user then presses the appropri-
ate key or presses Alt again to hide the hints.
The accelerator for Save is Ctrl+S (Cmd+S on the Mac). Accelerators are noted explicitly

---

## Chunk 2675

on the right side of a menu item; this acts as a memorization vector. Adobe Reader, as
shown in Figure 16-1, takes this a step further by also including the icons for toolbar
commands to the left of their corresponding menu commands. Microsoft, meanwhile,
shows accelerators as part of the ToolTips on the controls in the Ribbon UI in their Office
Suite applications (see Figure 16-2).

---

## Chunk 2676

382 Part II: Making Well-Behaved Products

---

## Chunk 2677

--- Page 413 ---
Figure 16-2: Office Suite applications use small pop-up boxes to display mnemonics when Alt
is pressed, and ToolTips to display keyboard accelerators, since the standard menus have been
replaced by the toolbar-ish Ribbon UI.
Mac applications usually don‚Äôt support mnemonics, but they often do have accelerator
and palette or toolbar icon mappings.

---

## Chunk 2678

None of these vectors intrudes on a new user. He may not even notice their existence
until he has used the app for some time‚Äîthat is, until he becomes an intermediate user.
Eventually, he will notice these visual hints and will wonder about their meaning. Most
reasonably intelligent people‚Äîmost users‚Äîwill comprehend the accelerator connec-

---

## Chunk 2679

tion without any help. The mnemonic is slightly tougher. But once the user is clued in to
the use of the Alt metakey, by either direction or accident, the idiom is easy to remember
and use wherever it occurs.
Mobile operating systems, notably, lack common memorization vectors. It may be
because there aren‚Äôt any ‚Äúspare‚Äù real estate or compound interactions (see Chapter 13)

---

## Chunk 2680

in which to place these signals. The closest they come to is the first-run tours (see below)
and tutorials that play when the user first uses the device or app. As the mobile platform
matures, we are eager to see how designers will help provide this bridge, or whether
users are satisfied perpetually using the slow-but-discoverable controls until someone
tells them about faster gestures.

---

## Chunk 2681

As we‚Äôll discuss in Chapter 18, icon buttons are an excellent technique whereby icons are
used to provide memorization vectors for transitioning from menus to toolbars. The icon
identifying each function or facility should be shown on every artifact of the user inter-
face that deals with it: each menu, each icon button, each dialog box, every mention in

---

## Chunk 2682

the help text, and every mention in the printed documentation. A memorization vector
CH 16. Designing for Different Needs 383

---

## Chunk 2683

--- Page 414 ---
formed of visual symbols in the interface is the most effective technique, yet it remains
underexploited in the industry at large.
working sets
Because we all learn (by repetition) the things we do frequently, perpetual intermediates
end up memorizing a moderately sized subset of commands and features. We call this

---

## Chunk 2684

set of memorized features a working set. The commands that comprise any user‚Äôs work-
ing set are idiosyncratic to that individual, although they will likely overlap significantly
with the working sets of other users who exhibit similar use patterns. In Excel, for exam-
ple, almost every user will enter formulas, specify fonts and labels, and print pages. But

---

## Chunk 2685

Sally‚Äôs working set might include drawing graphs, whereas Elliot‚Äôs working set might
include linking spreadsheets.
Modeling usage patterns can yield a subset of functions that designers can confidently
conclude will be frequently accessed by most users. This minimal working set can be
determined via usage analytics if you‚Äôre working with an existing app that provides

---

## Chunk 2686

them and/or Goal-Directed Design methods, using scenarios to discover the functional
needs of your personas. These needs translate directly into the contents of the minimal
working set.
The commands in any person‚Äôs working set are those that they use most often. Users
want those commands to be especially quick and easy to invoke. This means that the

---

## Chunk 2687

designer should, at the very least, use immediate modality for all commands in the min-
imal working set of the application‚Äôs primary users.
Although an application‚Äôs minimal working set is by definition part of each user‚Äôs full
working set, individual user preferences and job requirements will dictate which addi-

---

## Chunk 2688

tional features are included. Even custom software written for corporate operations can
offer a range of features from which each user can pick and choose. This means that the
designer, while providing immediate access to the minimal working set, must also pro-
vide means for promoting other commands to immediate modality. Similarly, any com-

---

## Chunk 2689

mands with immediate modality also require duplicate pedagogic versions to enable
beginners to learn the interface. This implies that most functions in the interface should
have multiple command modalities.
There is an exception to the rule of multiple command modalities: dangerous commands
such as Erase All, Clear, and Abandon Changes should not have accidentally-activated

---

## Chunk 2690

or easy, immediate modality commands associated with them. Instead, they need to be
protected within menus and dialog boxes (in keeping with our design principle from
Chapter 11: Hide the ejector seat levers).
384 Part II: Making Well-Behaved Products

---

## Chunk 2691

--- Page 415 ---
Contextual help and assistive interfaces
Needless to say, the best kind of application help is the kind that provides assistance
when and where in the interface it is needed, without the user‚Äôs needing to break his or
her flow (see Chapter 11) to seek it out. Whether the situation is the first use of an app or

---

## Chunk 2692

specific to the use of an individual control or feature, a number of patterns support help
in context or help users accomplish involved tasks more easily.
guided tours and overlays
Guided tours and overlays are patterns that have become popular on mobile platforms
because they provide reasonable solutions to the problem of initial learnability. Since

---

## Chunk 2693

mobile apps must rely more on immediate and invisible command modalities (because
there‚Äôs usually insufficient screen real estate for pedagogic command modalities), tours
and overlays fill the need for some sort of pedagogy to bootstrap new users.
These patterns, while more optimized for mobile, have seen increasing use in desktop

---

## Chunk 2694

apps as well. Both try to tackle the problem of introducing a new app to users by provid-
ing a brief overview of the most important functions for typical use.
Guided tours provide the needed introduction to features and interface behaviors
through a sequential set of screens or cards, each of which contains brief text and

---

## Chunk 2695

images (see Figure 16-3). They either describe a set of basic functions in order of impor-
tance or take the user through a typical sequential process, such as creating, editing,
and sharing a document using the app. Users advance to the next screen in a tour by
swiping or tapping. Tours have a structure somewhat similar to a wizard. The major

---

## Chunk 2696

difference is that, instead of asking for user input to configure something in the app,
the sequence of cards, screens, or dialogs exists purely to demonstrate product function
and behavior.
OS X has an interesting variant of this in the settings for mouse and trackpad gesture
configuration: Rather than showing a sequence of mostly static cards, the UI demon-

---

## Chunk 2697

strates the gestures being configured using short, repeating video clips of hands per-
forming the gestures.
Guided tours usually launch automatically the first time an app is run, and sometimes
when a new version of an app is released with significant new features. It‚Äôs important
that tours have a ‚Äúskip‚Äù button available on each screen of the tour, in case the user

---

## Chunk 2698

wants to get straight to work without visiting each screen. Of course, a screen to dismiss
the tour at the end also is needed. The final screen of the tour should include a way to
manually relaunch the tour.
CH 16. Designing for Different Needs 385

---

## Chunk 2699

--- Page 416 ---
Figure 16-3: FiftyThree Inc.‚Äôs iOS app, Paper, uses a guided tour to explain its main features and
interactions. The user swipes through a set of illustrated cards, each of which describes a different
pair of features or interactions. When the app is opened for the first time, the Welcome tour is avail-
able from an About menu accessed by tapping the company logo.

---

## Chunk 2700

Generally speaking, tours shouldn‚Äôt go on for more than five to seven screens at most. If
you make them too long, your users probably will be unable to remember what they‚Äôve
just seen. They also will begin getting antsy if the tour seems interminable.
Overlays are a different approach to introducing functionality, best suited to relatively

---

## Chunk 2701

simple apps whose functions are not pedagogically evident. As the name implies, an
overlay is like a transparent sheet laid over the interface on which arrows and descrip-
tive text are embedded. The end result is a set of annotations that point out the app‚Äôs key
features or behaviors and give brief descriptions of their usage (see Figure 16-4).
386 Part II: Making Well-Behaved Products

---

## Chunk 2702

--- Page 417 ---
Figure 16-4: The Snapseed app uses an overlay to show key features and behaviors. Unlike some
overlays that use a close box, Snapseed‚Äôs allows you to tap anywhere on the screen to dismiss. After
initial use, the overlay remains accessible from the Help menu.
Like guided tours, overlays typically are launched when an app is first run (or when

---

## Chunk 2703

it is updated with a major new release version). An overlay should include a means to
relaunch it somewhere in the app‚Äîoften in a settings menu or via a tiny help icon placed
in an unobtrusive corner of the screen.
Zite, shown in Figure 16-5, is a newsreader app that combines the sequential guided
tour concept with the idea of an overlay. It walks the user through a series of full-screen

---

## Chunk 2704

overlays accessed by swiping. It ends with a large Done button in the center of the screen.
CH 16. Designing for Different Needs 387

---

## Chunk 2705

--- Page 418 ---
Figure 16-5: Zite is a newsreader app that uses
a combination of guided tour and overlay to intro-
duce readers to the app. The tour is available at
any time from a tab in the menu system.
This approach is useful in that each feature discussed can be shown in the spatial con-
text of a full screen, potentially making it a bit easier for users to orient themselves.

---

## Chunk 2706

galleries and templates
Not all users of document-creation applications are capable of building nicely-formatted
documents from scratch. Many apps, however, offer users only atomic tools: the equiva-
lent of hammers, saws, and chisels. That is fine for some users, but others require more:
the equivalent of an unfinished table or chair that they can then sand and paint.

---

## Chunk 2707

For example, consider an app like OmniGraffle on the Mac, shown in Figure 16-6, which
lets you create diagrams, flowcharts, and user interface mock-ups.
388 Part II: Making Well-Behaved Products

---

## Chunk 2708

--- Page 419 ---
Figure 16-6: OmniGraffle Pro offers galleries of templates at both the document level and the level of
line and shape styles.
Undoubtedly some users will want to create their diagrams from scratch, but most
would jump at the chance to start with some stylistic choices made for them in the form

---

## Chunk 2709

of layout templates. Similarly, some users may want to draw their own shapes for things
such as arrows and stars, but most people would be happy to select from a gallery of
predefined shapes (OmniGraffle calls them stencils). Naturally, users should be able to
tweak a template after they choose it.
Offer users a gallery of ready-to-use templates.

---

## Chunk 2710

Some applications already offer galleries of predesigned templates (Microsoft‚Äôs Office
and Apple‚Äôs iWork suites, for example), but more should do the same. Blank slates intim-
idate most people, and users shouldn‚Äôt have to deal with one if they don‚Äôt want to. A gal-
lery of basic document types is a fine solution.
Input and content area hints

---

## Chunk 2711

A common but subtle form of contextual help is known as hints: small and often grayed-
back text that provides brief directions or examples of use in input fields. This text can
live below the input field (usually at a small point size) but is frequently inside the field
CH 16. Designing for Different Needs 389

---

## Chunk 2712

--- Page 420 ---
before it gets input focus. Once the field gets a cursor in it, the input hint text is cleared,
and the field is ready for input. An expansion of this idea has become popular in apps that
have a larger or central content area that is initially empty. Rather than sit there emptily
without lifting a finger to help the user figure out how to get started, clever apps use this

---

## Chunk 2713

empty space to provide a more verbose description of what to do. Or they even provide
one-time configuration controls as part of a content area hint, as shown in Figure 16-7.
Figure 16-7: Camera+ is an iOS photo app that
uses the otherwise empty photo content area at
initial launch to provide some verbose hinting and
configuration controls.
Pros and cons of wizards

---

## Chunk 2714

Wizards are an idiom invented by Microsoft that rapidly gained popularity among devel-
opers and user-interface designers. A wizard attempts to guarantee success in using a
feature by stepping users through a series of steps. These ease the user through a complex
390 Part II: Making Well-Behaved Products

---

## Chunk 2715

--- Page 421 ---
process, typically for configuring a feature of the application, operating system, or con-
nected hardware device.
Each of the wizard‚Äôs dialogs asks users a question or two in sequence, and in the end the
application performs whatever configuration task was requested. Although they are well

---

## Chunk 2716

meaning, the barrage of questions a wizard asks can feel like an interrogation to users, and
it violates the design principle of Provide choices rather than ask questions (see Chapter 11).
Wizards have other problems, too. Most are written as rigid step-by-step procedures,
rather than as intelligent conversations between the user and the application. These sorts

---

## Chunk 2717

of wizards rapidly devolve into exercises in confirmation messaging. The user learns that
he merely needs to click the Next button on each screen, without critically analyzing why.
Poorly designed wizards also tend to ask obscure questions. A user who doesn‚Äôt know
what an IP address is in a normal dialog will be equally mystified by it in a wizard.

---

## Chunk 2718

Wizards are appropriate in a few cases. One is during the initial configuration of a hard-
ware device, where registration, activation, or other handshaking between devices and
services is required. iPhones and iPads start with a short wizard to select a language and
activate various services before releasing the user to the home screen. Similarly, Sonos

---

## Chunk 2719

smart speakers use a wizard to identify a new device added to a whole-home audio net-
work, which requires the controller to detect a button press.
A second appropriate use of the wizard format is for online survey interfaces. Since sur-
veys are a set of questions, a wizard can appropriately break a survey into unintimidat-
ing chunks, while providing encouragement using a progress bar.

---

## Chunk 2720

For most other contexts, a better way to create a wizard is to make a simple, automatic func-
tion that asks no questions of users. It just does the job, making reasonable assumptions
(based on past behavior, or using well-researched defaults) about proper attributes and
organization. The user then can change the output as he or she sees fit using standard tools.

---

## Chunk 2721

In other words, the best wizard is really more like a smart version of a gallery or template.
Wizards were purportedly designed to improve user interfaces. But in many cases they
are having the opposite effect. They give developers and designers license to put raw
implementation model interfaces on complex features with the bland assurance that

---

## Chunk 2722

‚ÄúWe‚Äôll make it easy with a wizard.‚Äù This is all too reminiscent of the standard abdication
of responsibility to users and usability: ‚ÄúWe‚Äôll be sure to document it in the manual.‚Äù
ToolTips and ToolTip overlays
ToolTips (see Chapter 18) are an example of modeless interactive help, and they are very
effective for desktop or stylus applications. If you were to ask the user to explain how to

---

## Chunk 2723

CH 16. Designing for Different Needs 391

---

## Chunk 2724

--- Page 422 ---
perform an interface task, he would likely point to objects on the screen to augment his
explanation. This is the essence of how ToolTips work, so the interaction is quite natural.
Unfortunately for mobile interfaces, touchscreens cannot yet support a finger hover
state. But most mobile apps don‚Äôt have enough real estate to permit modeless explana-

---

## Chunk 2725

tions onscreen while primary interactions are occurring anyway. The mobile solution to
this conundrum is a hybrid of desktop-style ToolTip and mobile overlay concepts‚ÄîTool-
Tip overlays.
ToolTip overlays are usually triggered by tapping a help button. Brief, ToolTip-like labels
or notes for the primary functions on the current screen are displayed, each in proximity

---

## Chunk 2726

and pointing to its associated control (see Figure 16-8). The difference is that they are all
turned on at once and presented modally, often with a close box that must be tapped to
dismiss them.
Figure 16-8: Pinnacle Studio has a Tooltip overlay facility, which they call pop-up help. It is launched
from the app‚Äôs help menu. Their implementation is interesting because you can continue to use the

---

## Chunk 2727

app while the pop-up help is activated (not that you‚Äôd typically want to); it is dismissed by tapping
the yellow button in the lower left corner.
392 Part II: Making Well-Behaved Products

---

## Chunk 2728

--- Page 423 ---
While this approach can be overwhelming, it can be appropriate for complex authoring
apps if used as a kind of ‚Äúcheat sheet‚Äù for helping users remember controls and functions.
As such, this idiom is best not used as a welcome screen.
Traditional online help
It‚Äôs important to have guided tours, overlays, or other ‚Äúquick start‚Äù help for beginners. But

---

## Chunk 2729

the more verbose traditional online help should be focused on people who are already
successfully using the product and who want to expand their horizons: the perpetual
intermediates.
A complex application with many features and functions should come with a ref-
erence document: a place where users who want to expand their horizons can find

---

## Chunk 2730

definitive answers. Many users will turn to a general internet search engine to find
an answer, and you need to make sure your answer is out there as the definitive one.
Printed user manuals can be comfortable to use when users are studying applica-
tion functionality as a whole, but they are cumbersome for getting quick answers to

---

## Chunk 2731

specific questions. This is the area where online help, with its indexed and full-text
search capability, can shine.
Full-text search versus indexing
Although it might be tempting to forgo the extensive work involved in indexing because
of the existence of a full-text search capability, there are good reasons to reconsider this

---

## Chunk 2732

decision. Full-text search is only as complete as the wording of the help text itself, and
this might not encompass language that reflects users‚Äô mental models.
A user who needs to solve a problem might be thinking ‚ÄúHow do I turn this cell black?,‚Äù
rather than ‚ÄúHow can I set the shading of this cell to 100 percent?‚Äù If the help text or its

---

## Chunk 2733

index does not capture a user‚Äôs way of phrasing or thinking, the help system will fail. It
is usually easier to create these kinds of synonym mappings in an index, rather than in
the help text itself. This index needs to be generated by examining the app and all its
features, not simply by examining the help text itself. This is not always easy, because it

---

## Chunk 2734

demands that a highly skilled indexer also be intimately familiar with each of the appli-
cation‚Äôs features and functions.
The set of index entries is arguably as important as the help text itself. The user will
forgive a poorly written help entry more easily than he will forgive what he believes to
be a missing help entry. The more goal-directed the thinking in creating the text and

---

## Chunk 2735

CH 16. Designing for Different Needs 393

---

## Chunk 2736

--- Page 424 ---
the index, the better they will map to what might occur to the user when he searches
for an answer.
A great example of a useful index can be found in The Joy of Cooking by Irma S. Rombauer
and Marion Rombauer Becker (Scribner, 2006). Its index is one of the most complete and
robust of any the authors have used.

---

## Chunk 2737

It may sometimes be easier to rework the interface to improve its learnability than it is
to create a really good index. While good online help is very useful and often critical,
it should never be a crutch for a poorly designed product. Good design should greatly
reduce users‚Äô reliance on any help system.
overview descriptions

---

## Chunk 2738

The other missing ingredient from most online help systems is the overview. For exam-
ple, if users want to know how the Enter Macro command works, and the help system
explains uselessly that it is the facility that lets you enter macros into the system. What
we need to know is scope, effect, power, upside, downside, general process, and why we

---

## Chunk 2739

might want to use this facility both in absolute terms and in comparison to similar prod-
ucts from other vendors. Be sure and lead your sections with overviews to explain these
fundamental concepts.
In-app user guides
Software applications are increasingly delivered online, without printed manuals, but the
need for reference documentation still exists. User guides typically shouldn‚Äôt be neces-

---

## Chunk 2740

sary for a well-designed mobile app or a simple desktop application. But for tablet-based
authoring tools of particular complexity, such as digital audio workstation and other pro-
level media editing apps, or for desktop productivity software of almost any sort, it‚Äôs use-
ful to provide an integrated user guide that‚Äôs always accessible from the help menu (see
Figure 16-9).

---

## Chunk 2741

In-app guides should not be the first line of help; that task should be handled by guided
tours or overlays. Instead, in-app guides should be a reference for detailed information
on using complex functions. If your app is a complex pro tool, your users will appreciate
the inclusion of the guide in-app so that they don‚Äôt have to go looking for it on your web-

---

## Chunk 2742

site, and even more so if the guide‚Äôs table of contents is hyperlinked, and the guide itself
is full-text searchable, well-indexed, and printable.
394 Part II: Making Well-Behaved Products

---

## Chunk 2743

--- Page 425 ---
Figure 16-9: Steinberg‚Äôs Cubasis app has a sophisticated help system that includes a searchable
in-app user guide, as well as links to user forums and video tutorials.
Customizability
Interaction designers often face the conundrum of whether to make their products
user-customizable. It is easy to be torn between some users‚Äô need to have things done

---

## Chunk 2744

their way and the clear problem this creates when the app‚Äôs navigation suffers due to
familiar elements being moved or hidden. The solution is to cast the problem in a differ-
ent light.
Personalization
People like to change things around to suit themselves. Even beginners, not to men-
tion perpetual intermediates, like to put their own personal stamp on a frequently used

---

## Chunk 2745

application, changing it so that it looks or acts the way they prefer, uniquely suiting their
tastes. People will do this for the same reason they fill their identical cubicles with pic-
tures of their spouses and kids, plants, favorite paintings, quotes, and cartoons.
CH 16. Designing for Different Needs 395

---

## Chunk 2746

--- Page 426 ---
Decorating the persistent objects‚Äîthe walls‚Äîgives them individuality without major
structural changes. It also allows you to recognize a hallway as being different from doz-
ens of identical hallways because it is the one with the M. C. Escher poster hanging in it.
The term personalization describes the decoration or embellishment of persistent objects.

---

## Chunk 2747

Changing the color of objects on the screen is a personalization task. Windows has always
been very accommodating in this respect, allowing users to independently change the
color of each component of the Windows interface, including the color and pattern of
the desktop itself. Windows gives users a practical ability to change the system font, too.

---

## Chunk 2748

Personalization is idiosyncratically modal (discussed a bit later in this chapter): People
either love it, or they don‚Äôt. You must accommodate both categories of users.
Tools for personalizing must be simple and easy to use, giving users a visual preview of
their selections. Above all, they must be easy to undo. A dialog box that lets users change

---

## Chunk 2749

colors should offer a function that returns everything to the factory settings.
Personalization makes the places in which we work more likable and familiar. It makes
them more human and pleasant to be in. The same is true of software. Giving users the
ability to decorate their personal applications is both fun and potentially useful as a
navigational aid.

---

## Chunk 2750

On the other hand, moving the persistent objects themselves can hamper navigation. If
the facilities people come into your office over the weekend and rearrange all the cubi-
cles, finding your office again on Monday morning will be tough. (Persistent objects and
their importance to navigation are discussed in Chapter 12.)

---

## Chunk 2751

Is this an apparent contradiction? Not really. Adding decoration to persistent objects
helps navigation, whereas moving persistent objects hinders navigation. The term
configuration describes moving, adding, or deleting persistent objects.
Configuration
Configuration is desirable for more experienced users. Perpetual intermediates, after

---

## Chunk 2752

they have established a working set of functions, will want to configure the interface to
make those functions easier to find and use. They will also want to tune the application
itself for speed and ease, but in all cases, the level of custom configuration will be light
to moderate.
Configuration is a necessity for expert users. They are already beyond the need for more

---

## Chunk 2753

traditional navigation aids because they are so familiar with the product. Experts may
use the application for several hours every day; in fact, it may be the main application for
accomplishing the bulk of their job.
396 Part II: Making Well-Behaved Products

---

## Chunk 2754

--- Page 427 ---
Moving controls around on toolbars is a form of personalization. However, the three left-
most toolbar controls on many desktop apps, which correspond to File New, File Open,
and File Save, are now so common that they can be considered persistent objects. A user
who moves these around is configuring his application as much as he is personalizing it.

---

## Chunk 2755

Thus, there is a gray area between configuration and personalization.
Most intermediate users won‚Äôt squawk if they can‚Äôt configure their app, as long as it does
its job well. Some expert users may feel slighted, but they will still use and appreciate the
application if it works how they expect. In some cases, however, flexibility is critical. If

---

## Chunk 2756

you‚Äôre designing for a rapidly evolving workflow, it‚Äôs of utmost importance that the soft-
ware used to support the workflow can evolve as quickly as the state of the art.
Also, corporate IT managers value configuration. It allows them to subtly coerce cor-
porate users into practicing common methods or adhere to standards. They appreciate

---

## Chunk 2757

the ability to add macros and commands to menus and toolbars that make the off-the-
shelf software work more intimately with established company processes, tools, and
software. Many IT managers base their buying decisions on how easily an application
can be configured for their enterprise environment. If they are buying 10 or 20 thousand

---

## Chunk 2758

copies of an app, they rightly feel that they should be able to adapt it to their particular
style of work. Thus, it is not by accident that Microsoft Office applications are among the
most configurable shrink-wrapped software titles available.
Idiosyncratically modal behavior
Often usability testing may show that the user population is split almost equally on the

---

## Chunk 2759

effectiveness of a user interface idiom. Half of the users clearly prefer one idiom, and the
other half prefer another. This sort of clear division of a population‚Äôs preferences into two
or more large groups indicates that their preferences are idiosyncratically modal.
Development organizations can become similarly emotionally split on issues like this.

---

## Chunk 2760

One group becomes the menu-item camp, and the rest of the developers are in the tool-
bar camp. As they wrangle and argue over the relative merits of the two methods, the
answer is staring them in the face: Use both!
When the user population splits on preferred idioms, the software designers must offer
both idioms. Both groups should be satisfied. It is no good to satisfy one-half of the pop-

---

## Chunk 2761

ulation while angering the other half, regardless of which group you or your developers
align yourselves with.
Windows offers an excellent example of how to cater to idiosyncratically modal desires
in its menu implementation. Some people like menus that work how they did on the orig-
inal Apple Macintosh. You click a menu bar item to make the menu appear; then‚Äîwhile

---

## Chunk 2762

CH 16. Designing for Different Needs 397

---

## Chunk 2763

--- Page 428 ---
still holding down the button‚Äîyou drag down the menu and release the mouse button
on your choice. Other people find this process difficult and prefer to accomplish it with-
out having to hold down the mouse button while they drag. Windows satisfies this pref-
erence by letting users click and release on the menu bar item to make the menu appear.

---

## Chunk 2764

Then users can move the mouse‚Äîbutton released‚Äîto the menu item of choice. Another
click and release selects the item and closes the menu. The user can also still click and
drag to select a menu item. The brilliance of these idioms is that they coexist peacefully
with each other. Any user can mix the two idioms or stick with one or the other. No pref-

---

## Chunk 2765

erences or options need to be set; it just works.
Starting in Windows 95, Microsoft added a third idiosyncratically modal idiom to stan-
dard menu behavior: The user clicks and releases as before, but now he can drag the
mouse along the menu bar, and the other menus are triggered automatically in turn (they
did not carry this behavior over to their Ribbon UI, however). The Mac now supports

---

## Chunk 2766

each of these idioms on its menus; amazingly, all three are accommodated seamlessly.
localization and globalization
Localization refers to translating an application for a particular language and culture.
Globalization refers to making an application as universal as possible across many lan-
guages and cultures. Designing applications for use in different languages and cultures

---

## Chunk 2767

presents some special challenges to designers. Here again, consideration of command
modalities can provide guidance.
Immediate interfaces such as direct manipulation and toolbar icon buttons are idiom-
atic (see Chapter 13) and visual rather than textual. Therefore, they can be globalized
with considerable ease. Of course, it is important for designers to do their homework to

---

## Chunk 2768

ensure that colors or symbols chosen for these idioms do not have particular meanings
in different cultures that the designer does not intend. (In Japan, for example, an X in a
check box would likely be interpreted as deselection rather than selection.) However, in
general, nonmetaphorical idioms should be fairly safe for globalized interfaces.

---

## Chunk 2769

Pedagogic interfaces such as menu items, field labels, ToolTips, and instructional hints
are language-dependent and thus must be the subject of localization via translation into
appropriate languages. Here are some issues to bear in mind when creating interfaces
that must be localized:
‚Ä¢ The words and phrases in some languages tend to be longer than in others. German

---

## Chunk 2770

words, for example, on average can be significantly longer than those in English, and
Spanish sentences tend to be some of the longest. Plan button and other text label
layouts accordingly, especially on space-constrained mobile devices.
398 Part II: Making Well-Behaved Products

---

## Chunk 2771

--- Page 429 ---
‚Ä¢ Words in some languages, Asian languages in particular, can be difficult to sort
alphabetically.
‚Ä¢ Ordering of day-month-year and the use of 12- or 24-hour notation for time vary from
country to country.
‚Ä¢ Decimal points in numbers and currency are represented differently. Some countries
use periods and commas the opposite of how they are used in the U.S.

---

## Chunk 2772

‚Ä¢ Some countries use week numbers (for example, week 50 is in mid-December), and
some countries use calendars other than the Gregorian calendar.
Menu items and dialogs, when they are translated, need to be considered holistically. It
is important to make sure that translated interfaces remain coherent as a whole. Items

---

## Chunk 2773

and labels that translate straightforwardly in a vacuum may become confusing when
grouped with other independently translated items. Semantics of the interface need to
be preserved at the higher level as well as at the detail level.
Accessibility
Designing for accessibility means designing your app so that it can be effectively used by

---

## Chunk 2774

people with cognitive, sensory, or motor impairments due to age, accident, or illness‚Äîas
well as those without such impairments.
The World Health Organization estimates that 750 million people worldwide have some
kind of disability.1 Nevertheless, accessibility is an area within interaction design‚Äîand
user experience in general‚Äî that is frequently overlooked. Disabled users are often

---

## Chunk 2775

underserved by technology products.
While it is true that not every application may require an accessibility strategy or design,
it‚Äôs safe to say that most enterprise and consumer applications have users for whom
accessible interfaces are necessary. This is particularly true for any application targeted
at seniors, or at patients suffering from serious or debilitating illnesses.

---

## Chunk 2776

goals of accessibility
For a product or service to be considered accessible, it should meet the following condi-
tions for both unimpaired and impaired users:
‚Ä¢ Users can perceive and understand all instructions, information, and feedback.
‚Ä¢ Users can perceive, understand, and easily manipulate any controls and inputs.

---

## Chunk 2777

‚Ä¢ Users can navigate easily, and always be aware of where there are in an interface and
navigational structure.
CH 16. Designing for Different Needs 399

---

## Chunk 2778

--- Page 430 ---
It‚Äôs not necessary that these conditions (especially the first two) be accomplished within
a single presentation of an interface for all users. A typical accessibility strategy is to
design a separate accessibility mode or set of accessibility options. These options alter
screen contrast and colors, change the size and weight of text, or turn on a screen reader

---

## Chunk 2779

and audible navigation system.
Accessibility personas
During the research and modeling phase of your design, as part of your accessibility
strategy, you might want to consider creating an accessibility persona to add to your per-
sona set. Naturally, the ideal method of creating this persona would be to interview users

---

## Chunk 2780

or potential users of your product who have disabilities that would affect their use of the
product. If this isn‚Äôt possible, you can still create a provisional persona to help focus on
accessibility issues in a somewhat less targeted way. Typically, an accessibility persona
would be considered a secondary persona‚Äîsomeone with needs similar to your primary

---

## Chunk 2781

personas, but with some special needs that must be addressed without compromising
their experience. Sometimes, though, selecting an accessibility persona as a primary can
result in breakthrough products, as OXO and Smart Design did with their Good Grips
product‚Äîit turns out that kitchen tools that are optimized for people with arthritis are
more satisfying for everyone.
Accessibility guidelines

---

## Chunk 2782

The following 10 guidelines are not a replacement for exploring the specific needs of
disabled users regarding your product and the design trade-offs involved. But they do
provide a reasonable starting point for approaching accessible application design. More
details about each appear below.
‚Ä¢ Leverage OS accessibility tools and guidelines.
‚Ä¢ Don‚Äôt override user-selected system settings.

---

## Chunk 2783

‚Ä¢ Enable standard keyboard access methods.
‚Ä¢ Incorporate display options for those with limited vision.
‚Ä¢ Provide visual-only and audible-only output.
‚Ä¢ Don‚Äôt flash, flicker, or blink visual elements.
‚Ä¢ Use simple, clear, brief language.
‚Ä¢ Use response times that support all users.
‚Ä¢ Keep layouts and task flows consistent.
‚Ä¢ Provide text equivalents for visual elements.

---

## Chunk 2784

400 Part II: Making Well-Behaved Products

---

## Chunk 2785

--- Page 431 ---
leverage os accessibility tools and guidelines
Some operating systems offer accessibility support such as screen readers and audi-
ble navigation aids for the vision-impaired, such as VoiceOver for iOS and TalkBack for
Android. Your application should be structured to support the use of these OS-level tools

---

## Chunk 2786

and should conform to user interface guidelines for designing and implementing acces-
sibility functionality. Keep in mind the following points:
‚Ä¢ Your application shouldn‚Äôt use keystrokes or gestures that are already committed to
enabling OS-level accessibility features for application functions.
‚Ä¢ Your application should work properly when accessibility features are turned on.

---

## Chunk 2787

‚Ä¢ Your application should use standard application programming interfaces (APIs)
for input and output when possible to ensure compatibility with OS and third-party
assistive technologies, such as screen readers.
Don‚Äôt override user-selected system settings
The application should not override system-level settings that support accessibility

---

## Chunk 2788

options for interface attributes such as color schemes, font sizes, and typefaces. This
need not be true in the default application settings, but some accessibility options should
revert to OS-level hints for visual style. Similarly, your application should accommodate
any system-level accessibility settings for input methods and devices.
Enable standard keyboard access methods

---

## Chunk 2789

For desktop applications, keyboard accelerators and mnemonics should be employed
(see Chapter 18), as well as a rational tab navigation scheme. The user should be able
to traverse the entire set of user interface controls and content areas using the Tab key.
Arrow keys should let the user traverse list, table, and menu contents. The Enter key
should activate buttons and toggles.

---

## Chunk 2790

Incorporate display options for those with limited vision
Application settings should support a range of options for users with vision problems:
‚Ä¢ A high-contrast (minimum 80 percent) display option, using predominantly black text
on white backgrounds
‚Ä¢ Options for enlarging the typeface and increasing its weight (ideally, these are
independent settings)

---

## Chunk 2791

‚Ä¢ An option for color-blind-friendly information display, if applicable
CH 16. Designing for Different Needs 401

---

## Chunk 2792

--- Page 432 ---
‚Ä¢ An option for minimizing motion and animation in UI elements, if these are used in the
default interface
Furthermore, your application should not rely on color alone as the sole method of con-
veying the meaning of data or functionality. It should use other attributes, such as size,
position, brightness, shape, and/or textual labeling, to make meaning clear.

---

## Chunk 2793

Provide visual-only and audible-only output
Support for vision-impaired users should be available in the form of audible interfaces,
such as those provided by screen readers and OS-level accessibility services.. Applica-
tions should also support redundant visual and audio feedback for hearing-impaired
users. Typically, the UI for vision-impaired users is realized as a separate application

---

## Chunk 2794

mode. Support for the hearing-impaired usually can be managed within the standard
UI through careful design of the standard user feedback mechanisms to include both
audible and visual elements.
Don‚Äôt flash, flicker, scroll, or blink visual elements
This suggestion is pretty self-explanatory. Flashing and other blinking at speeds greater

---

## Chunk 2795

than twice a second (2 Hz) can be confusing to the vision-impaired. They also can cause
seizures in individuals with epilepsy and other brain disorders. Plus, it‚Äôs usually annoy-
ing for everyone else as well. Automatically scrolling text and other animations can be
confusing and difficult for those with visual impairments to perceive.
use simple, clear, brief language

---

## Chunk 2796

This is another straightforward suggestion that needs little explanation. This is some-
thing you should be doing anyway. The shorter and simpler the text labels and instruc-
tional text in your interface (as long as they are still appropriately descriptive), the easier
they will be to learn and use.
use response times that support all users

---

## Chunk 2797

Allow users to elect for longer response times. A good rule of thumb for the longer dura-
tion is 10 times the average response times currently in your application. This includes
the length of time that transitory notifiers are left visible after they launch. It also should
apply to any timers on actions. In general, unless there is a really good reason to time out

---

## Chunk 2798

on an action (such as security), you should ideally avoid doing so, or if you must, make
the time-out period user-adjustable.
402 Part II: Making Well-Behaved Products

---

## Chunk 2799

--- Page 433 ---
keep layouts and task flows consistent
Again, this advice is good for all users. People with cognitive, motor, or vision impair-
ments are best served if they need to remember and execute only a single navigation
and action paradigm, rather than several different or incompatible ones. Consider how

---

## Chunk 2800

navigating your interface using a keyboard is likely to work on your screens, and try to
make it as consistent as possible across all views and panes.
Provide text equivalents for visual elements
Finally, make sure that any purely visual elements or controls in your desktop applica-
tion or website are marked with text, so that screen readers can enunciate them. Micro-

---

## Chunk 2801

soft Windows, for example, allows invisible ToolTips that can be enunciated by screen
readers. They don‚Äôt appear for users of the default application.
Similarly, it‚Äôs important for web interfaces to assign tags to visual elements. This allows
them to be understood by people using text-based browsers, browser-based voice read-
ers, and other web-based accessibility tools.
Notes

---

## Chunk 2802

1. World Health Organization, 2003
CH 16. Designing for Different Needs 403

---

## Chunk 2803

--- Page 435 ---
Ch 17
InTEgrATIng
VIsuAl DEsIgn
As an interaction designer, you put a lot of effort into understanding your product‚Äôs
users. You also spend time crafting the interface‚Äôs behaviors and the presentation of the
content that helps users achieve their goals. However, these efforts will fall short unless

---

## Chunk 2804

you also dedicate significant work to clearly communicating to your users both what
content is available and how they can interact with it. With interactive products this
communication almost always happens visually, via a display. (With custom hardware,
you can also communicate some product behavior through physical properties.)

---

## Chunk 2805

In this chapter, we‚Äôll talk about effective, goal-directed visual interface design strategies.
In Part III, we will provide more details about specific interaction and interface idioms.
Visual Art and Visual Design
Practitioners of fine art and practitioners of visual design share a visual medium. How-
ever, while both must be skilled in and knowledgeable about that medium, their work

---

## Chunk 2806

serves different ends. Art is a means of self-expression on topics of emotional or intel-
lectual concern to the artist and, sometimes, to society at large. Few constraints are
imposed on the artist, and the more singular and unique the product of the artist‚Äôs exer-
tions, the more highly it is valued.

---

## Chunk 2807

--- Page 436 ---
Designers, on the other hand, typically aim to create artifacts with specific utility for
the people who use them. Whereas the concern of contemporary artists is primarily
self-expression, visual designers are concerned with clear communication. As Kevin
Mullet and Darrell Sano note in their book Designing Visual Interfaces (Prentice Hall,

---

## Chunk 2808

1994), ‚Äúdesign is concerned with finding the representation best suited to the communi-
cation of some specific information.‚Äù In keeping with a Goal-Directed approach, visual
designers should endeavor to present behavior and information in such a way that it is
understandable and useful, supporting the organization‚Äôs branding objectives as well as
the personas‚Äô goals.

---

## Chunk 2809

To be clear, this approach does not exclude aesthetic concerns, but rather places such
concerns within a goal-directed framework. Although visual communication always
involves some subjective judgment, we endeavor to minimize questions of taste. We‚Äôve
found that the clear articulation of user experience goals and business objectives is an

---

## Chunk 2810

invaluable foundation to designing the aspects of an interface in support of brand iden-
tity, user experience, and emotional response. (See Chapter 3 for more about visceral
processing.)
The Elements of Visual Interface Design
At its root, visual interface design is concerned with the treatment and arrangement of
visual elements to communicate behavior and information. Every element in a visual

---

## Chunk 2811

composition has a number of properties, such as shape and color, that work together to
create meaning. The ways in which these properties are applied to each element (and
how they change over time and with interaction) allow users to make sense of content
and the graphical interface. For example, when two interface objects share the same

---

## Chunk 2812

color, users assume they are related or similar. When two objects have contrasting col-
ors, users assume the objects have some categorical difference. Visual interface design
capitalizes on the human ability to differentiate between objects by distinct visual
appearance, and in so doing creates meaning that is richer than the use of words alone.

---

## Chunk 2813

When crafting a visual interface, keep in mind the following considerations.
Context, context, context
Every single visual design guideline is subject to the context in which it is used. Are
your users doing information work on large-screened desktop computers with overhead
lighting? Are they standing in a dark room scanning the screen for the tiniest of biolog-

---

## Chunk 2814

ical details? Are they walking across a city holding your design in the glare of the sun?
Are they cuddled up on a couch just playing around? Similar to conveying the brand (see
below), the context of use must be taken as part of the givens that constrain the visual
design.
406 Part II: Making Well-Behaved Products

---

## Chunk 2815

--- Page 437 ---
shape
Is it round, square, or amoeba-like? Shape is the primary way we recognize what an
object is. We tend to recognize objects by their outlines; a silhouette of a pineapple that‚Äôs
been textured with blue fur still reads as a pineapple. However, distinguishing among
different shapes takes a higher level of attention than distinguishing some other prop-

---

## Chunk 2816

erties, such as color or size. This means it‚Äôs not the best property to contrast when your
purpose is to capture the user‚Äôs attention. The weakness of shape as a factor in object
recognition is apparent to anyone who‚Äôs glanced at Apple‚Äôs OS X dock and mistakenly
selected the round iTunes icon instead of the round iDVD icon, or latched on to the photo

---

## Chunk 2817

in iWeb and mistook it for iPhoto. These icons have different shapes, but they are of sim-
ilar size, color, and texture.
size
How big or small is it in relation to other items on the screen? Larger items draw our
attention more, particularly when they‚Äôre much larger than similar things around them.
Size is also an ordered and quantitative variable, which means that people automatically

---

## Chunk 2818

sequence objects in terms of their size and tend to assign relative quantities to those
differences. If we have four sizes of text, for example, we assume that relative impor-
tance increases with size, and that bolded content is more important than regular. This
makes size a useful property in conveying information hierarchies (more on them in a

---

## Chunk 2819

minute). Sufficient distinction in size is also enough to draw our attention quickly. Be
aware that using size can have a cost. In his classic The Semiology of Graphics (University
of Wisconsin Press, 1983), Jacques Bertin describes size as a dissociative property, which
means that when something is very small or very large, it can be difficult to decipher
other variables, such as shape.
Color

---

## Chunk 2820

Though most people speak of color loosely, designers must be very precise and deliberate
when considering colors in an interface. Any choices should first take into account the
users‚Äô goals, environment, the content, and the brand. After that, it‚Äôs most useful to think
of interface color in terms of value, hue, and saturation.
Value

---

## Chunk 2821

How light or dark is it? Of course, the idea of lightness or darkness is meaningful primar-
ily in the context of an object compared to the background. On a dark background, dark
type is faint, whereas on a light background, dark type is pronounced. Like size, value
can be dissociative. If a photo is too dark or too light, for example, you can no longer

---

## Chunk 2822

perceive other details about it. People perceive contrasts in value quickly and easily, so
CH 17. Integrating Visual Design 407

---

## Chunk 2823

--- Page 438 ---
value can be a good tool for drawing attention to elements that need to stand out. Value
is also an ordered variable. For example, lower-value (darker) colors on a map are easy to
interpret as deeper water or denser population.
hue
Is it yellow, red, or orange? Great differences in hue draw our attention quickly, but users

---

## Chunk 2824

often have multilayered associations with hue. In some professions, hue has specific
meaning we can take advantage of. For example, an accountant sees red as negative and
black as positive, and (at least in the Western systems we‚Äôre familiar with) a securities
trader sees blue as ‚Äúbuy‚Äù and red as ‚Äúsell.‚Äù Colors also take on meaning from the social

---

## Chunk 2825

contexts in which we‚Äôve grown up. To Westerners who‚Äôve grown up with traffic signals,
red means ‚Äústop‚Äù and sometimes even ‚Äúdanger,‚Äù whereas in China, red is the color of
good luck. Similarly, white is associated with purity and peace in the West, but with
funerals and death in Asia. Unlike size or value, though, hue is not intrinsically ordered

---

## Chunk 2826

or quantitative, so it‚Äôs less ideal for conveying that sort of data.
Color is best used judiciously to convey important meaning in an interface. To create an
effective visual system that allows users to keep track of implied meanings, you should
use a limited number of hues. The ‚Äúcarnival effect‚Äù of having a crowded color palette over-

---

## Chunk 2827

whelms users and limits your ability to communicate. Hue is also where an interface‚Äôs
branding and communication needs can collide; it can take a talented visual designer
(and skilled diplomat) to navigate these waters. Hue is also tricky since color blindness
is common among the general population, and there are many types of color blindness.
saturation

---

## Chunk 2828

Is the hue brilliant, like springtime flowers, or dull, like a gray stone? Saturation draws
attention similar to the way that hue and value do, that is, when there is a strong con-
trast at play. The sapphire object will stand out amidst an array of moss green objects.
Saturation is quantitative, in that greater saturation ties tightly to higher values. Though

---

## Chunk 2829

saturated colors can imply excitement and dynamism, it can also read as loud and
cacophonous. The ‚Äúcarnival effect‚Äù mentioned above can be exacerbated with too much
saturation across the palette, and can compete with actual content.
hsV in combination
Hue, saturation, and value are three variables that together can describe any color in an

---

## Chunk 2830

interface, in a model sensibly named HSV. (Another common system, RGB, lets designers
specify the red, green, and blue values for a given color.) Designers should be judicious in
how they use contrasts within these variables as well as how they relate across the entire
palette.
408 Part II: Making Well-Behaved Products

---

## Chunk 2831

--- Page 439 ---
orientation
Is it pointing up, down, or sideways? This is a useful variable to employ when you have
directional information to convey (up or down, backward or forward). Orientation can
be difficult to perceive with some shapes or at small sizes, though, so it‚Äôs best used as a
secondary communication vector. For example, if you want to show that the stock mar-

---

## Chunk 2832

ket is going down in a single graphic, you might want to use a downward-pointing arrow
that‚Äôs also red.
Texture
Is it rough or smooth, regular or uneven? Of course, elements on a screen don‚Äôt have real
texture, but they can have the appearance of it. Texture is seldom useful for conveying
differences or calling attention, since it requires a lot of attention to distinguish. Texture

---

## Chunk 2833

also takes a fair number of pixels and higher color resolutions to convey. However, it
can be an important affordance cue; when we see a textured rubber area on a physical
device, we assume that‚Äôs where we‚Äôre meant to grab it. Ridges or bumps on a user inter-
face (UI) element generally indicate that it‚Äôs draggable, and a bevel or drop shadow on a
button makes it seem more clickable.

---

## Chunk 2834

The current fashion for ‚Äúflat‚Äù or non-skeumorphic design has brought about a dimin-
ished use of texture or simulated materiality. But we have found that even in a highly
minimalist design, a small amount of texture applied appropriately can greatly improve
the learnability of a user interface.
Position

---

## Chunk 2835

Where is it relative to other elements? Like size, position is both an ordered and q uantitative
variable, which means it‚Äôs useful for conveying information about hierarchy.
We can leverage a screen‚Äôs reading order to locate elements sequentially. For Western
readers, this puts the most important or first-used element in the top left. Position can

---

## Chunk 2836

also be used to create spatial relationships between objects on the screen and objects in
the physical world, as often happens with medical and piloting interfaces.
Spatial relationships can in turn be used to allude to conceptual relationships: Items
that are grouped together on the screen are interpreted to be similar. The use of spatial

---

## Chunk 2837

positioning to express logical relationships can be further enhanced with motion. In the
Mail app on iOS, the horizontal animation that transitions from the inbox to an individ-
ual e-mail helps reinforce the logical hierarchy that is used to organize the application.
CH 17. Integrating Visual Design 409

---

## Chunk 2838

--- Page 440 ---
Text and Typography
Text is a critical component of almost all user interfaces. Written language can con-
vey dense and nuanced information, but you must be careful to use text appropriately,
because it also has great potential to confuse and complicate. Good and effective typog-
raphy is its own field of study, but the following are good rules of thumb.

---

## Chunk 2839

People recognize words primarily by their shapes. The more distinct the shape, the easier
the word is to recognize, which is why WORDS TYPED IN ALL CAPITAL LETTERS ARE
HARDER TO READ than a mixture of upper and lowercase. They also seem to be shout-
ing. The familiar pattern-matching hints of word shape are absent in capitalized words,

---

## Chunk 2840

so we must pay much closer attention to decipher what is written. Avoid using all caps
in your interfaces.
Recognizing words is also different from reading, in which we scan the lines of text and
interpret the meaning of words in context. This is fine for content of course, but less so
for interfaces. Interfaces should try to minimize the amount of text that must be read in

---

## Chunk 2841

order to use it successfully.
Visually show what; textually tell which.
When text must be read in interfaces, the following guidelines apply:
‚Ä¢ Use high-contrast text‚ÄîMake sure that the text contrasts with its background, and
do not use complementary colors that may affect readability. We aim for 80 percent
contrast as a general rule.

---

## Chunk 2842

‚Ä¢ Choose an appropriate typeface and size‚ÄîIn general, a crisp sans-serif font
such as Verdana or Tahoma is your best bet for readability. Serif typefaces such as
Times and Georgia can appear ‚Äúhairy‚Äù onscreen, but this can be mitigated with very
high-resolution displays, using a large-enough size, and sub-pixel font smoothing

---

## Chunk 2843

technologies. Type sizes of less than 10 pixels are difficult to read in most situations. If
you must use small type, it‚Äôs usually best to go with an aliased sans-serif typeface.
‚Ä¢ Phrase your text succinctly‚ÄîMake your text understandable by using the fewest
words necessary to clearly convey meaning. Also, try to avoid abbreviations. If you
must abbreviate, try to use standard abbreviations.

---

## Chunk 2844

Information hierarchy
When users are presented with a visual interface, they go through an unconscious process
of evaluating the most important object or information there, and what the relationships
410 Part II: Making Well-Behaved Products

---

## Chunk 2845

--- Page 441 ---
are between it and the other visible content and controls. To make this decoding process
as quick and easy as possible for users, visual designers create an information hierarchy,
using differences in visual attributes (large vs. small, light vs. dark, top vs. bottom, etc.)
to stratify the interface. For transient applications, the information hierarchy should be

---

## Chunk 2846

very apparent, with strong contrasts between the ‚Äúlevels‚Äù of importance in a given lay-
out. With sovereign applications, the information hierarchy can be more subtle.
motion and change over time
Any of the elements mentioned in this section can change over time to convey informa-
tion, relationship between parts, command attention, ease transitions between modes,

---

## Chunk 2847

and confirm the effects of commands. In iOS for desktop, for example, elements rarely
simply appear and disappear. After clicking an application icon in the dock, it will bounce
to confirm that the command was received and the application is loading. Minimizing a
window doesn‚Äôt just make it vanish: The ‚Äúgenie‚Äù animation shrinks and deforms it, slid-

---

## Chunk 2848

ing it into a thumbnail position on the dock. The animation confirms that the minimize
command was received and tells the user exactly where the window waits, minimized,
until the user summons it again. Mastery of how building blocks change over time, and
especially motion, is a vital skill for the visual interface designer.
Visual Interface Design Principles

---

## Chunk 2849

The human brain is a powerful pattern-recognition computer, making sense of the dense
quantities of visual information that bombard us everywhere we look. Our brains man-
age the overwhelming amount of data flowing into our eyes by discerning visual patterns
and establishing priorities to the things we see. This in turn allows us to make sense of

---

## Chunk 2850

the visual world. Pattern recognition is what allows us to process visual information so
quickly. For example, imagine manually calculating the trajectory of a thrown baseball
to predict where it lands. With a pen and paper you‚Äôd need a formula and measurements
of its path, speed, weight, wind. But our eyes and brains together do it in a split second,

---

## Chunk 2851

without conscious effort on our part. To most effectively convey the behavior of an appli-
cation to users, visual interface designers should be taking advantage of users‚Äô innate
visual processing ability.
One chapter is not nearly enough to do justice to the topic of visual interface design.
However, some important principles can help make your visual interface more com-

---

## Chunk 2852

pelling and easier to use. As mentioned earlier in the chapter, Mullet and Sano provide
an accessible and detailed analysis of these fundamental principles; we will summa-
rize some of the most important visual interface design concepts here to get you up and
running.
CH 17. Integrating Visual Design 411

---

## Chunk 2853

--- Page 442 ---
Visual interfaces should do the following:
‚Ä¢ Convey a tone / communicate the brand
‚Ä¢ Lead users through the visual hierarchy
‚Ä¢ Provide visual structure and flow at each level of organization
‚Ä¢ Signal what users can do on a given screen
‚Ä¢ Respond to commands
‚Ä¢ Draw attention to important events
‚Ä¢ Build a cohesive visual system to ensure consistency across the experience

---

## Chunk 2854

‚Ä¢ Minimize the amount of visual work
‚Ä¢ Keep it simple
We discuss each of these principles in more detail in the following sections.
Convey a tone/communicate the brand
More and more, interactive systems are the main way through which customers expe-
rience brands. So while the brand considerations should never override users‚Äô goals, an

---

## Chunk 2855

effective interface should embody the brand promise of its product line and organiza-
tion. Photoshop feels similar to the Creative Suite and fits in with the Adobe brand. Out-
look feels similar to the rest of the Office Suite, and helps distinguish Microsoft from
competitor‚Äôs products.
It‚Äôs therefore necessary for you to understand what that brand promise is before undertak-

---

## Chunk 2856

ing the design of an interface. This can be tricky if the company doesn‚Äôt have it well artic-
ulated. It‚Äôs rarely if ever communicated explicitly in marketing and advertising materials,
and younger or smaller companies may not have had the chance to identify what it is.
Larger and public companies almost always have a marketing or design department able

---

## Chunk 2857

to provide it or are willing to work with interaction designers to build one out.
Cooper works with its clients to help identify experience attributes, a collection of a hand-
ful of adjectives that together describe how any interaction through the product or service
should feel (see Chapter 5 for a discussion of how these are created). These attributes are

---

## Chunk 2858

often presented as a ‚Äúword cloud‚Äù that includes smaller words that help inflect or disambig-
uate the attributes themselves. Once determined, the attributes act as a set of guidelines for
the interface design. Most often this directly affects the visual design, but can also be used
to guide interaction designers when deciding between functionally similar designs.

---

## Chunk 2859

The attributes sometimes express tension between its words. ‚ÄúSecure‚Äù and ‚Äúnimble‚Äù
might be in the same cloud, for example. These are useful tensions, as early style studies
412 Part II: Making Well-Behaved Products

---

## Chunk 2860

--- Page 443 ---
can optimize for one or two of the experience attributes. This makes them in turn easier
to distinguish and discuss with stakeholders, and shows how each relates to the brand.
lead users through the visual hierarchy
In looking at any set of visual elements, users unconsciously ask themselves ‚ÄúWhat‚Äôs

---

## Chunk 2861

important here?‚Äù followed almost immediately by ‚ÄúHow are these things related?‚Äù We
need to make sure our user interfaces provide answers to both of these questions by
creating hierarchy and establishing relationships.
Based on scenarios, determine which controls and bits of data users need to understand
instantly, which are secondary, and which are needed only by exception. This ranking

---

## Chunk 2862

informs the visual hierarchy.
Next use the basic visual elements (position, color, size, etc.) to distinguish levels of hier-
archy. The most important elements could be larger; have greater contrast in hue, satu-
ration, and/or value in relation to the background; and be positioned above and indented
or outdented in relation to other items. Less important elements could be less saturated,

---

## Chunk 2863

have less value and hue contrast against the background, and should be smaller than
and placed in consistent alignment with other items.
Of course, you should adjust these properties with restraint, since the most important
element doesn‚Äôt need to be huge, red, and outdented. Often, varying just one of these
properties does the trick. If you find that two items of different importance are com-

---

## Chunk 2864

peting for attention, it‚Äôs often a good approach to ‚Äúturn down‚Äù the less important one,
rather than ‚Äúturn up‚Äù the more important. This will leave you with more ‚Äúheadroom‚Äù to
emphasize critical elements. Think about it this way: If every word on a page is red and
bold, do any of them stand out?
Establishing a clear visual hierarchy is one of the harder tasks in visual interface design.

---

## Chunk 2865

It takes skill and talent to keep an overall style, optimize information density, and
respect the needs of the particular screen. Though users almost never notice good visual
hierarchy, a bad one will jump out for its confusion and difficulty.
Establish relationships
To convey which elements are related, return to your scenarios to determine not only

---

## Chunk 2866

which elements have similar functions but also which elements are used together most
often. Elements that tend to be used together generally should be grouped spatially
and perhaps sequentially to reinforce conceptual relationships and to minimize mouse
movement. Elements that aren‚Äôt necessarily used together but have similar functions

---

## Chunk 2867

may be grouped visually even if they are not grouped spatially.
CH 17. Integrating Visual Design 413

---

## Chunk 2868

--- Page 444 ---
Items in proximity to one another generally are related. In many interfaces, this group-
ing is done in a heavy-handed fashion, with bounding boxes everywhere you look, some-
times even around just one or two elements. In many cases, you can accomplish the
same thing more effectively with differences in proximity. For example, on a toolbar, per-

---

## Chunk 2869

haps there are 4 pixels between buttons. To group the File commands, such as Open,
New, and Save, you could simply leave 8 pixels between the File command buttons and
other groups of buttons.
So group items that are not adjacent by giving them common visual properties, forming a
pattern that eventually takes on meaning for users. The standard blue links in HTML, for

---

## Chunk 2870

example, make it easy for a user to parse a screen for content-related navigation options.
After you have decided what the groups are and how best to communicate them visually,
consider how distinguishable they need to be, and how prominent the group needs to
appear in the display.
occasionally, squint at it
A good way to help ensure that a visual interface design employs hierarchy and relation-

---

## Chunk 2871

ships effectively is to use what graphic designers call the squint test. Close one eye and
squint at the screen with the other eye to see which elements pop out, which are fuzzy,
and which seem to be grouped. Changing your perspective can often uncover previously
undetected issues in layout and composition.
Provide visual structure and flow at each level
of organization

---

## Chunk 2872

It‚Äôs useful to think of user interfaces as being composed of visual and behavioral ele-
ments, which are used in groups, which are then grouped into panes, which then may, in
turn, be grouped into screens, views, or pages. These groupings, as discussed earlier, can
be accomplished through spacing or shared visual properties. A sovereign application

---

## Chunk 2873

may have many such levels of structure. Therefore, it is critical that you maintain a clear
visual structure so that the user can easily navigate from one part of your interface to
another, as his workflow requires. The rest of this section describes several important
attributes that help define a crisp visual structure.
Align to a grid

---

## Chunk 2874

Aligning visual elements is one of the key ways that designers can help users experience a
product in an organized, systematic way. Grouped elements should be aligned both hor-
izontally and vertically, as shown in Figure 17-1. In general, every element on the screen
should be aligned with as many other elements as possible. The decision not to align
414 Part II: Making Well-Behaved Products

---

## Chunk 2875

--- Page 445 ---
elements or groups of elements should be made judiciously, and always to achieve a spe-
cific differentiating effect. In particular, designers should take care to do the following:
‚Ä¢ Align labels‚ÄîLabels for controls stacked vertically should be aligned with each
other; unless labels differ widely in length, left justification is easier for users to scan
than right justification.

---

## Chunk 2876

‚Ä¢ Align within a set of controls‚ÄîA related group of check boxes, radio buttons, or
text fields should be aligned according to a regular grid.
‚Ä¢ Align across control groups and panes‚ÄîGroups of controls and other screen
elements should all follow the same grid wherever possible.
Figure 17-1: Adobe Lightroom makes very effective use of alignment to a layout grid. Text, controls,

---

## Chunk 2877

and control groups are all tightly aligned, with a consistent atomic spacing grid. It should be noted
that the right alignment of controls and control group labels may compromise scanability.
A grid system is one of the most powerful tools available to the visual designer. Popu-
larized by Swiss typographers in the years after World War II, a grid provides a uniform

---

## Chunk 2878

and consistent structure to layout, which is particularly important when you‚Äôre design-
ing an interface with several levels of visual or functional complexity. After interaction
designers have defined the overall framework for the application and its user interface
elements (as discussed in Chapter 5), visual interface designers should help regularize

---

## Chunk 2879

the layout into a grid structure. It should emphasize top-level elements and structures
and provide room for lower-level or less-important controls.
Typically, the grid divides the screen into several large horizontal and vertical regions, as
shown in Figure 17-2. A well-designed grid employs an atomic grid unit that represents

---

## Chunk 2880

the smallest spacing between elements. For example, if your atomic unit is 4 pixels, spac-
ing between screen elements and groups will all be in multiples of 4 pixels.
CH 17. Integrating Visual Design 415

---

## Chunk 2881

--- Page 446 ---
Figure 17-2: This sample layout grid prescribes the size and position of the various screen areas
employed by a website. This grid ensures regularity across different screens. It also reduces the
amount of work that a designer must do to lay out the screens and the work that the user must do to
read and understand the screens.

---

## Chunk 2882

Ideally, a grid should also have consistent relationships between different-sized screen
areas. These relationships typically are expressed as ratios. Here are three commonly
used ratios:
‚Ä¢ The celebrated ‚Äúgolden section,‚Äù or phi (approximately 1.61), is found frequently in
nature and is thought to be particularly pleasing to the human eye.
416 Part II: Making Well-Behaved Products

---

## Chunk 2883

--- Page 447 ---
‚Ä¢ The square root of 2 (approximately 1:1.14) is the basis of the international paper size
standard (the A4 sheet).
‚Ä¢ 4:3 is the aspect ratio of most computer displays.
Of course, you must strike a balance between idealized geometric relationships and the
specific spatial needs of the functions and information that must be presented onscreen.

---

## Chunk 2884

A perfect implementation of the golden section will do nothing to improve the readabil-
ity of a screen where things are jammed together with insufficient spacing.
A good layout grid is modular, which means that it should be flexible enough to han-
dle necessary variation while maintaining consistency wherever possible. And, as with

---

## Chunk 2885

most things in design, simplicity and consistency are desirable. If two areas of the screen
require approximately the same amount of space, make them exactly the same size. If
two areas have different requirements, make them substantially different. If the atomic
grid unit is too small, the grid will become unrecognizable in its complexity. Slight dif-

---

## Chunk 2886

ferences can feel unstable to users (although they are unlikely to know the source of
these feelings) and ultimately fail to capitalize on the potential strength of a strong grid
system.
The key is to be decisive in your layout. Almost a square is no good. Almost a double square
is also no good. Almost a golden rectangle is no good. If your layout is close to a simple

---

## Chunk 2887

fraction of the screen, such as a half, third, or fifth, adjust the layout so that it is exactly
a half, third, or fifth. Make your proportions bold, crisp, and exact.
Using a grid system in visual interface design provides several benefits:
‚Ä¢ Usability‚ÄîBecause grids attempt to regularize positioning of elements, users can

---

## Chunk 2888

quickly learn where to find key interface elements. If a screen header is always in
precisely the same location, the user doesn‚Äôt have to think or scan to find it. Consistent
spacing and positioning support people‚Äôs innate visual-processing mechanisms. A well-
designed grid greatly improves the screen‚Äôs readability.

---

## Chunk 2889

‚Ä¢ Aesthetic appeal‚ÄîIf you carefully apply an atomic grid and choose the appropriate
relationships between the various areas of the screen, your design can create a sense of
order that feels comfortable to users.
‚Ä¢ Efficiency‚ÄîStandardizing your layouts will reduce the amount of labor required to
produce high-quality visual interfaces. We find that defining and implementing a grid

---

## Chunk 2890

early in design refinement results in less iteration and ‚Äútweaking‚Äù of interface designs.
A well-defined and communicated grid system results in designs that can be modified
and extended, allowing developers to make appropriate layout decisions should
alterations prove necessary.
CH 17. Integrating Visual Design 417

---

## Chunk 2891

--- Page 448 ---
Create a logical path
In addition to precisely following a grid, the layout must properly structure an efficient
logical path for users to follow through the interface, as shown in Figure 17-3. It must
take into account the fact that (for Western users who read this way) the eye moves from
top to bottom and left to right.
Logical path No logical path

---

## Chunk 2892

Eye movements match the path Everything is all over the place
through the interface
Figure 17-3: Eye movement across an interface should
form a logical path that enables users to efficiently and
effectively accomplish goals and tasks.
balance the interface elements
Perfectly symmetrical interfaces lack a sense of hierarchy that encourages the user‚Äôs

---

## Chunk 2893

eye to flow through the screen. Balanced asymmetry provides visual entry points to
the screen and major screen areas. Experienced visual designers are adept at achieving
asymmetrical balance by controlling the visual weight of individual elements much as
you might balance people of different weights on a seesaw. Asymmetrical design is diffi-

---

## Chunk 2894

cult to achieve in the context of user interfaces because of the high premium placed on
white space by screen real-estate constraints. The squint test is again useful for seeing
whether a display looks lopsided.
signal what users can do on a given screen
A user encountering a screen or a function for the first time looks to the visual design to

---

## Chunk 2895

help him determine what he can do on the screen. This is the principle of affordance, dis-
cussed in Chapter 13. Affordance breaks down to design of controls and content categories
with layout (of course), icons, visual symbols, and by pre-visualizing results when possible.
use icons
In addition to their functional value, icons can play a significant role in conveying

---

## Chunk 2896

the desired brand attributes. Bold, cartoonish icons may be great if you‚Äôre designing a
418 Part II: Making Well-Behaved Products

---

## Chunk 2897

--- Page 449 ---
website for kids, whereas precise, conservatively rendered icons may be more appropri-
ate for a productivity application. Whatever the style, it should be consistent. If some of
your icons use bold black lines and rounded corners, and others use thin, angular lines,
the visual style won‚Äôt hold together.

---

## Chunk 2898

Icon design and rendering is a craft in and of itself; rendering understandable images at
low resolution takes considerable time and practice and is better left to trained visual
designers. Icons are a complicated topic from a cognitive standpoint, so we will highlight
only a few key points here. If you want to understand more about what makes usable

---

## Chunk 2899

icons, we highly recommend William Horton‚Äôs The Icon Book (Wiley, 1994). You may find
the examples dated, but the principles still hold true.
Convey a sense of the function
Designing icons to represent functions or operations performed on objects leads to inter-
esting challenges. The most significant challenge is to represent an abstract concept in

---

## Chunk 2900

iconic, visual language. In these cases, it is best to rely on idioms rather than to force a
concrete representation where none makes sense. You also should consider adding Tool-
Tips (see Chapter 18) or text labels.
For more obviously concrete functions, some guidelines apply:
‚Ä¢ Represent both the action and an object acted on to improve comprehension.

---

## Chunk 2901

Nouns and verbs are easier to comprehend tÓ≈uÿö≠H¨]Î—Ÿ“»N@CF_Zn¨¢üw◊ë¨ogether than verbs alone. (For example, a
Cut command represented by a document with an X through it may be more readily
understood than a more metaphorical image of a pair of scissors.)
‚Ä¢ Beware of metaphors and representations that may not have the intended meanings
for your target audience. For example, although the thumbs-up gesture means ‚ÄúOK‚Äù

---

## Chunk 2902

in Western cultures and might strike you as an appropriate way to communicate
approval, it is offensive in Middle Eastern (and other) cultures and should be avoided in
any internationalized application.
‚Ä¢ Group related functions to provide context, either spatially or, if this is not appropriate,
using color or other common visual themes.
‚Ä¢ Keep icons simple; avoid excessive visual detail.

---

## Chunk 2903

‚Ä¢ Reuse elements when possible so that users need to learn them only once.
Associate visual symbols with objects
Most applications will need visual symbols to represent objects in the user‚Äôs workflow.
For example, in a photo management app, each image file is represented by a thumbnail.
When these symbols can‚Äôt be representational or metaphoric, they can idiomatic. (See

---

## Chunk 2904

CH 17. Integrating Visual Design 419

---

## Chunk 2905

--- Page 450 ---
Chapter 13 for more information on the strengths of idioms.) You could represent these
objects with text alone, such as with a filename, but a unique visual helps an interme-
diate user locate it onscreen quickly. To establish the connection between symbol and
object, try to use the symbol whenever the object is represented onscreen.

---

## Chunk 2906

Designers must also take care to visually differentiate symbols representing different
object types. Discerning a particular icon within a screen full of similar icons is as
difficult as discerning a particular word within a screen full of words. It‚Äôs particularly
important to visually differentiate objects that exhibit different behaviors, such as but-
tons, sliders, and check boxes.

---

## Chunk 2907

Visually distinguish elements that behave differently.
render icons and visual symbols simply
The graphics capabilities of color screens is now commonly at a very high resolution,
so it is tempting to render icons and visuals with ever-increasing detail, producing an
almost photographic quality. However, this trend ultimately does not serve user goals,

---

## Chunk 2908

especially in productivity applications. Icons should remain simple and schematic, min-
imizing the number of colors and shades and retaining a modest size.
Although fully-rendered icons may look great, they tend to fail for a number of reasons.
They draw undue attention to themselves. They render poorly at small sizes, meaning

---

## Chunk 2909

that they must take up extra real estate to be legible. They encourage a lack of visual
cohesion in the interface, because only a small number of functions (mostly those related
to hardware) can be adequately represented with such concrete photorealistic images.
Pre-visualize results when possible
Instead of using words alone to describe the results of interface functions (or, worse,

---

## Chunk 2910

not giving any description), use visual elements to convey users what the results will
be. Don‚Äôt confuse this with using icons on control affordances. Rather, in addition to
using text to communicate a setting or state, render an illustrative picture or diagram
that communicates the behavior. Although visualization often consumes more space, its

---

## Chunk 2911

capability to clearly communicate is well worth the pixels. In recent years, Microsoft has
discovered this fact, and the dialogs in Microsoft Word, for example, have begun to bris-
tle with visualizations of their meaning in addition to the textual controls. Photoshop
and other image-manipulation applications have long shown thumbnail previews of the
results of visual-processing operations.

---

## Chunk 2912

420 Part II: Making Well-Behaved Products

---

## Chunk 2913

--- Page 451 ---
Visually communicate function and behavior.
Microsoft Word‚Äôs Print Preview view, shown in Figure 17-4, shows what a printed doc-
ument will look like with the current paper size and margin settings. Many users have
trouble visualizing what a 1.2-inch left margin looks like; the Preview control shows

---

## Chunk 2914

them. Microsoft could go one better by allowing direct input on the Preview control
in addition to output, allowing users to drag the picture‚Äôs left margin and watch the
numeric value in the corresponding spinner ratchet up and down. The associated text
field is still important‚Äîyou can‚Äôt just replace it with the visual one. The text shows the

---

## Chunk 2915

precise values of the settings, whereas the visual control accurately portrays the look of
the resulting page.
Figure 17-4: Microsoft Word Print Preview is a good example of a visual expression of application
functionality. Rather than requiring users to visualize what a 1.2-inch margin might look like, this
function allows the user to easily understand the ramifications of different settings.

---

## Chunk 2916

CH 17. Integrating Visual Design 421

---

## Chunk 2917

--- Page 452 ---
respond to commands
After executing a command from a swipe, tap, or click, the user needs to see some
response, to know that the system has ‚Äúheard‚Äù them. In some cases, the output is instant
and immediate. The user selected a new typeface for some selected text, and that text
changes to display in the new one. This response does not need extra visual design

---

## Chunk 2918

beyond that of the tools itself.
If the response takes longer than a tenth of a second but less than a second, you will need
to provide one subtle visual cue that the command was received, and another when the
activity is complete.
If the response takes longer than that up to ten seconds, you‚Äôll need to let the user know

---

## Chunk 2919

about the small delay and provide some visual cue that the process is running, most
commonly with a looping animation of some sort along with an estimate of the time it
will take. A common example is the single-pixel progress bars at the top of web pages
expected to load quickly.
If a process will take longer than ten seconds, its usually best to design an alert explain-

---

## Chunk 2920

ing the delay, another for a running status update that lets them know the process is
continuing in the background, followed by a respectful cue when the process is complete
so they can return to the task.
Draw attention to important events
Older software was conceived as a tool, with users needing to look around to find import-

---

## Chunk 2921

ant system events. But better, more goal-oriented software offers that information to
users proactively. Badges are an example on many smartphones that embody this princi-
ple. At a glance, the user is aware that he has two games where his opponents have com-
pleted their moves, a few text messages, and some social media mentions to check on.

---

## Chunk 2922

The tools to draw attention involve the fundamentals of human perception and are all
based on contrast: Contrast of size, color, motion, etc. Make the thing you want to get
attention different, and it will command attention. This sounds simple, but there are two
challenges.
The first is that the attention-getting mechanisms are not under our conscious control.

---

## Chunk 2923

That makes sense when you consider that they evolved to alert us to sudden changes in
the environment. So present them with a large contrast on screen, and you draw them
away from their current task. This can be perceived as rude if it‚Äôs misapplied. (See Chap-
ter 8 for more about this principle.) The deservedly vilified blink tag from early days of

---

## Chunk 2924

the web is a prime example. Blinking objects command our attention so strongly that it‚Äôs
difficult to pay attention to anything else.
422 Part II: Making Well-Behaved Products

---

## Chunk 2925

--- Page 453 ---
The second challenge is that it can be difficult to keep the attention signal effective but
in line with the experience keywords. If your app is meant to be serene, yes, a klaxon will
get the users attention, but will also break the promise that the app has made.
minimize the amount of visual work

---

## Chunk 2926

Visual noise within an interface is caused by superfluous visual elements that detract
from the primary objectives of communicating affordances and information. The same
is true for user interfaces. Visual noise can take many forms:
‚Ä¢ Ornate embellishment
‚Ä¢ 3D rendering that doesn‚Äôt add information
‚Ä¢ Rule boxes and other visually ‚Äúheavy‚Äù elements to separate controls
‚Ä¢ Crowding of elements

---

## Chunk 2927

‚Ä¢ Intense colors, textures, and contrast
‚Ä¢ Using too many colors
‚Ä¢ Weak visual hierarchy
Cluttered interfaces attempt to provide an excess of functionality in a constrained space,
resulting in controls that visually interfere with each other. Visually baroque, disorderly,
or crowded screens increase the user‚Äôs cognitive load.
keep it simple

---

## Chunk 2928

In general, visual interfaces should strive to be minimal, such as simple geometric forms
or a restricted color palette composed primarily of less-saturated or neutral colors bal-
anced with a few high-contrast accent colors that emphasize important information.
Typography should not vary widely in an interface: Typically one or two typefaces, spec-

---

## Chunk 2929

ified to just a few sizes, is sufficient for most applications.
Unnecessary variation is the enemy of a coherent, usable design. If the spacing between
two sets of elements is nearly the same, make that spacing exactly the same. If two type-
faces are nearly the same size, adjust them to be the same size. Every visual element and

---

## Chunk 2930

every difference in color, size, or other visual property should be there for a reason. If you
can‚Äôt articulate a good reason why it‚Äôs there, get rid of it.
Good visual interfaces, like any good visual design, are visually efficient. They make the
best use of the minimal set of visual and functional elements. A popular technique used
CH 17. Integrating Visual Design 423

---

## Chunk 2931

--- Page 454 ---
by both graphic designers and industrial designers is to experiment with removing indi-
vidual elements to test their contribution to the clarity of the intended message.
Take things away until the design breaks, and then put that last thing back in.
As pilot and poet Antoine de Saint-Exup√©ry famously said, ‚ÄúPerfection is attained not

---

## Chunk 2932

when there is no longer anything to add, but when there is no longer anything to take
away.‚Äù As you create your interfaces, you should constantly be looking to simplify, visu-
ally. The more useful work a visual element can accomplish while still retaining clarity,
the better.
Related to the drive for simplicity is the concept of leverage, which is where a single inter-

---

## Chunk 2933

face element is used for several related purposes. For example, in Microsoft Windows 8,
an icon appears next to the window‚Äôs title, as shown in Figure 17-5. This icon visually
communicates the window‚Äôs contents (for example, whether it is an Explorer window
or a Word document) and provides access to window configuration commands such as
Minimize, Maximize, and Close.

---

## Chunk 2934

Figure 17-5: The icon in the title bar of windows in Windows 8 is a good example of lever-
age. It communicates the window‚Äôs contents and provides access to window configuration
commands.
424 Part II: Making Well-Behaved Products

---

## Chunk 2935

--- Page 455 ---
Visual Information Design Principles
Like visual interface design, visual information design has many principles that the
designer can use to her advantage. Information design guru Edward Tufte asserts that
good visual design is ‚Äúclear thinking made visible‚Äù and that good visual design is achieved

---

## Chunk 2936

through an understanding of the viewer‚Äôs ‚Äúcognitive task‚Äù and a set of design principles.
Tufte claims that information design has two important problems:
‚Ä¢ It is difficult to display multidimensional information (information with more than
two variables) on a two-dimensional surface.
‚Ä¢ The resolution of the display surface often is not high enough to display dense

---

## Chunk 2937

information. Computers present a particular challenge. Although they can add motion
and interactivity, computer displays have a lower information density compared to
paper. (The retina displays sold by Apple with some of their products have a much
higher pixel density, but are not standard, and risky to presume for all users.)

---

## Chunk 2938

Although both points are certainly true, the visual interface designer can leverage one
capability not available to the print information designer: interactivity. Unlike a print
display, which must convey all the data at once, electronic displays can progressively
reveal information as users need more detail. This helps make up, at least in part, for the
resolution limitations.

---

## Chunk 2939

Even with the differences between print and digital media, some universal informa-
tion design principles‚Äîindifference to language, culture, and time‚Äîhelp maximize the
effectiveness of any information display.
In his beautifully executed volume, The Visual Display of Quantitative Information
(Graphics Press, 2001), Tufte introduces seven ‚ÄúGrand Principles,‚Äù which we briefly dis-

---

## Chunk 2940

cuss in the following sections as they relate specifically to digital interfaces and content.
According to Tufte, visually displayed information should do the following:
‚Ä¢ Enforce visual comparisons
‚Ä¢ Show causality
‚Ä¢ Show multiple variables
‚Ä¢ Integrate text, graphics, and data in one display
‚Ä¢ Ensure the content‚Äôs quality, relevance, and integrity

---

## Chunk 2941

‚Ä¢ Show things adjacent in space, not stacked in time
‚Ä¢ Don‚Äôt dequantify quantifiable data
CH 17. Integrating Visual Design 425

---

## Chunk 2942

--- Page 456 ---
We will briefly discuss each of these principles as they apply to the information design of
software-enabled media.
Enforce visual comparisons
You should provide a means for users to compare related variables and trends or to com-
pare before-and-after scenarios. Comparison provides a context that makes the infor-

---

## Chunk 2943

mation more valuable and comprehensible to users (see Figure 17-6). Adobe Photoshop,
along with many other graphics tools, makes frequent use of previews, which allow users
to easily do before-and-after comparisons interactively.
Figure 17-6: This graph from Google finance compares the performance
of two stocks with the S&P 500 over a period of time. The visual patterns

---

## Chunk 2944

allow a viewer to see that Barclays Bank (BCS) and UBS are closely cor-
related to each other and only loosely correlate to the S&P 500.
show causality
Within information graphics, clarify cause and effect. In his books, Tufte relates the
classic example of the space shuttle Challenger disaster. Tufte believes the tragedy could

---

## Chunk 2945

have been avoided if charts prepared by NASA scientists had been organized to more
clearly present the relationship between air temperature at launch and severity of O-ring
failure. In interactive interfaces, you should employ rich visual modeless feedback (see
Chapter 15) to inform users of the potential consequences of their actions or to provide
hints on how to perform actions.

---

## Chunk 2946

show multiple variables
Data displays that provide information on multiple related variables should be able to
display them all simultaneously without sacrificing clarity. In an interactive display, the
user should be able to selectively turn off and on the variables to make comparisons
426 Part II: Making Well-Behaved Products

---

## Chunk 2947

--- Page 457 ---
easier and correlations (causality) clearer. Investors are often interested in the correla-
tions between different securities, indexes, and indicators. Graphing multiple variables
over time helps uncover these correlations, as shown in Figure 17-6.
Integrate text, graphics, and data in one display

---

## Chunk 2948

Diagrams that require separate keys or legends to decode require additional cognitive
processing by users and are less effective than diagrams with integrated legends and
labels. Reading and deciphering diagram legends is yet another form of navigation-re-
lated excise. Users must move their focus between diagram and legend and then reconcile

---

## Chunk 2949

the two in their minds. Figure 17-7 shows an interactive example that integrates text,
graphics, and data, as well as input and output‚Äîa highly efficient combination for users.
Figure 17-7: This ‚ÄúCommunication Plan‚Äù is an interface element from a tool for managing out-
bound marketing campaigns that was designed by Cooper. It gives textual information a visual

---

## Chunk 2950

structure, which in turn is augmented by iconic representations of different object types. Not
only does this tool provide output of the current structure of the Communication Plan, but it
also allows the user to modify that structure directly through drag-and-drop interactions.
Ensure the content‚Äôs quality, relevance, and integrity

---

## Chunk 2951

Don‚Äôt show information simply because it‚Äôs technically possible to do so. Make sure that
any information you display will help your users achieve particular goals that are relevant
to their context. Unreliable or otherwise poor-quality information will damage the trust
you must build with users through your product‚Äôs content, behavior, and visual brand.
CH 17. Integrating Visual Design 427

---

## Chunk 2952

--- Page 458 ---
show things adjacent in space, not stacked in time
If you are showing changes over time, it‚Äôs much easier for users to understand the changes
if they are shown adjacent in space, rather than superimposed. When information is
stacked in time, you are relying on their short term memory to make the comparison,

---

## Chunk 2953

which is not as reliable or fast as a side-by-side comparison. Cartoon strips are a good
example of showing flow and change over time arranged adjacent in space.
Of course, this advice applies to static information displays. In software, animation can
be used even more effectively to show change over time, as long as technical issues (such

---

## Chunk 2954

as memory constraints and connection speed over the Internet) don‚Äôt come into play.
Don‚Äôt dequantify quantifiable data
Although you may want to use graphs and charts to make trends and other quantitative
information easy to grasp, you should not abandon the display of the numbers them-
selves. For example, in the Windows Disk Properties dialog, a pie chart is displayed to

---

## Chunk 2955

give users a rough idea of their free disk space, but the numbers of gigabytes free and
used are also displayed in numeric form.
Consistency and standards
Many in-house usability organizations view themselves as, among other things, the gate-
keepers of consistency in digital product design. Consistency implies a similar look, feel,

---

## Chunk 2956

and behavior across the various modules of a software product, and this is sometimes
extended to apply across all the products a vendor sells. For large software vendors, such
as Adobe and Google, which regularly acquire new software titles from smaller vendors,
the branding concerns of consistency take on particular urgency. It is obviously in their

---

## Chunk 2957

best interests to make acquired software look as though it belongs, as a first-class offer-
ing, alongside products developed in-house. Beyond this, both Apple and Microsoft have
an interest in encouraging their own and third-party developers to create applications
that have the look and feel of the OS platform on which the application is being run. This

---

## Chunk 2958

way, the user perceives their respective platforms as providing a seamless and comfort-
able user experience.
benefits of interface standards
User interface standards provide benefits that address these issues when executed appro-
priately, although they come at a price. According to Jakob Nielsen, relying on a single

---

## Chunk 2959

interface standard improves users‚Äô ability to quickly learn interfaces and enhances their
productivity by raising throughput and reducing errors. These benefits accrue because
428 Part II: Making Well-Behaved Products

---

## Chunk 2960

--- Page 459 ---
users can more easily predict application behavior based on past experience with other
parts of the interface or with other applications following similar standards.
At the same time, interface standards also benefit software vendors. Customer training
and technical support costs are reduced because the consistency that standards bring

---

## Chunk 2961

improves ease of use and learning. Development time and effort are also reduced because
formal interface standards provide ready-made decisions on the rendering of the inter-
face that development teams would otherwise be forced to debate during project meet-
ings. Finally, good standards can lead to reduced maintenance costs and improved reuse
of design and code.
risks of interface standards

---

## Chunk 2962

The primary risk of any standard is that the product that follows it is only as good as the
standard itself. Great care must be taken in developing the standard to ensure, as Niel-
sen says, that it specifies a truly usable interface and that it can be used by the developers
who must build the interface according to the standard‚Äôs specifications.

---

## Chunk 2963

It is also risky to see interface standards as a panacea for good interfaces. Assuming that
a standard is the solution to interface design problems is like saying the Chicago Manual
of Style is all it takes to write a good novel. Most interface standards emphasize the inter-
face‚Äôs syntax‚Äîits look and feel‚Äîbut say little about the interface‚Äôs deeper behaviors or

---

## Chunk 2964

its higher-level logical and organizational structure. There is a good reason for this: A
general interface standard has no knowledge of context incorporated into its formal-
izations. It takes into account no specific user behaviors and usage patterns within a
context. Instead, it focuses on general issues of human perception and cognition and,

---

## Chunk 2965

sometimes, visual branding as well. These concerns are important, but they are presen-
tation details, not the interaction framework on which such rules hang.
standards, guidelines, and rules of thumb
Although standards are unarguably useful, they need to evolve as technology and our
understanding of users and their goals evolve. Some practitioners and developers invoke

---

## Chunk 2966

Apple‚Äôs or Microsoft‚Äôs user interface standards as if they were delivered from Mt. Sinai
on a tablet. Both companies publish user interface standards, but both companies also
freely and frequently violate them and update the guidelines after the fact. When Mic-
rosoft proposes an interface standard, it has no qualms about changing it for something

---

## Chunk 2967

better in the next version. This is only natural. Interface design is still coming into matu-
rity, and it is wrong to think that there is benefit in standards that stifle innovation.
The original Macintosh was a spectacular achievement precisely because it transcended
all of Apple‚Äôs previous platforms and standards. Conversely, much of the strength of the
CH 17. Integrating Visual Design 429

---

## Chunk 2968

--- Page 460 ---
Mac came from the fact that vendors followed Apple‚Äôs lead and made their interfaces
look, work, and act alike. Similarly, many successful Windows applications are unabash-
edly modeled after Word, Excel, and Outlook.
Interface standards thus are most appropriately treated as detailed guidelines or rules

---

## Chunk 2969

of thumb. Following interface guidelines too rigidly or without carefully considering
user needs in context can result in force-fitting an application‚Äôs interface into an inap-
propriate interaction model.
when to violate guidelines
So, what should we make of interface guidelines? Instead of asking if we should follow

---

## Chunk 2970

standards, it is more useful to ask when we should violate standards? The answer is when
we have a very good reason.
Obey standards unless there is a truly superior alternative.
But what constitutes a very good reason? Is it when a new idiom is measurably better?
Usually this sort of measurement can be elusive, because it can rarely be reduced to a

---

## Chunk 2971

quantifiable factor alone. The best answer is that when an idiom is clearly seen to be
significantly better by most people in the target user audience (your personas) who try
it, there‚Äôs a good reason to keep it in the interface. This is how the toolbar came into
existence, along with outline views, tabs, and many other idioms. Researchers may have

---

## Chunk 2972

examined these artifacts in the lab, but it was their useful presence in real-world soft-
ware that confirmed their success.
Your reasons for diverging from guidelines ultimately may not prove to be good enough,
and your product may suffer, but you and other designers will learn from the mistake.
This is what Berkeley professor Christopher Alexander calls the ‚Äúunselfconscious pro-

---

## Chunk 2973

cess‚Äù‚Äîan indigenous and unexamined process of slow and tiny forward increments as
individuals attempt to improve solutions. New idioms (as well as new uses for old idioms)
pose a risk. This is why careful, goal-directed design and appropriate testing with real
users in real working conditions are so important.
Consistency and standards across applications

---

## Chunk 2974

Using standards or guidelines can involve special challenges when a company that sells
multiple software titles decides that all its various products must be completely consis-
tent from a user-interface perspective.
430 Part II: Making Well-Behaved Products

---

## Chunk 2975

--- Page 461 ---
From the perspective of visual branding, as discussed earlier, this makes a great deal of
sense, although there are some intricacies. Suppose an analysis of personas and mar-
kets indicates that there is little overlap between the users of two distinct products and
that their goals and needs also are distinct. You might question whether it makes more

---

## Chunk 2976

sense to develop two visual brands that speak specifically to these different customers,
rather than using a single, less-targeted look. When it comes to the software‚Äôs behav-
ior, these issues become even more urgent. A single standard might be important if cus-
tomers will be using the products together as a suite. But even in this case, should a

---

## Chunk 2977

graphics-oriented presentation application like PowerPoint share an interface structure
with a text processor like Word? Microsoft‚Äôs intentions were good, but it went a little
too far in enforcing global style guides. PowerPoint doesn‚Äôt gain much from having a
menu structure similar to that of Excel and Word. It also loses quite a bit in ease of use

---

## Chunk 2978

by conforming to an alien structure that diverges from the user‚Äôs mental models. On the
other hand, the designers did draw the line somewhere. PowerPoint has a slide-sorter
display‚Äîan interface unique to that application.
Designers, then, should bear in mind that consistency doesn‚Äôt imply rigidity, especially
where it isn‚Äôt appropriate. Interface and interaction style guidelines need to grow and

---

## Chunk 2979

evolve like the software they help describe. Sometimes you must bend the rules to best
serve your users and their goals (and sometimes even your company‚Äôs goals). When this
has to happen, try to make changes and additions that are compatible with standards.
The spirit of the law, not the letter of the law, should be your guide.
Consistency doesn‚Äôt imply rigidity.
The design language

---

## Chunk 2980

One of the visual interface designer‚Äôs most important tools is the idea of a ‚Äúdesign lan-
guage.‚Äù Think of this design language as a ‚Äúvocabulary‚Äù of design elements such as shape,
color, typography, and how these elements are composed and combined. They create the
appropriate emotional tone and establish patterns that a person can recognize, under-

---

## Chunk 2981

stand, and, ideally, use to create positive associations with the brand of the product or
service being created.
A good example is Microsoft‚Äôs Metro design language, the foundation of Windows 8,
Windows Phone, and Xbox user interfaces. By using a common set of visual elements
such as content tiles, Microsoft has created a variety of interfaces and experiences that

---

## Chunk 2982

are clearly recognizable (see Figure 17-8).
CH 17. Integrating Visual Design 431

---

## Chunk 2983

--- Page 462 ---
Figure 17-8: Cross-platform examples of Microsoft‚Äôs
Metro design language.
In some cases, this language emerges as a vernacular. But in our experience, it is best
arrived at through an explicit process that evaluates a variety of potential visual and
interaction languages in terms of brand appropriateness and fitness for purpose. The

---

## Chunk 2984

best design languages evolve through the product design process in a user-centric way.
Every design decision is rationalized against other decisions, and variation is reduced to
just what is required to create meaning, utility, and the right emotional tone for users.
Design languages are often communicated through standards and style guides, but it‚Äôs

---

## Chunk 2985

important to note that the two are not synonymous. Just because you have a style guide
doesn‚Äôt mean you have a well-developed design language, and vice versa. It is possible to
have a useful design language without having a style guide or standards manual. (How-
ever, it should be said that compiling a style guide can help designers rationalize and
simplify a design language.)

---

## Chunk 2986

432 Part II: Making Well-Behaved Products

---

## Chunk 2987

--- Page 463 ---
III
InTErACTIon
DETAIls
Ch 18 Designing for the Desktop
Ch 19 Designing for mobile and other Devices
Ch 20 Designing for the web
Ch 21 Design Details: Controls and Dialogs

---

## Chunk 2988

--- Page 465 ---
Ch 18
DEsIgnIng For
ThE DEskToP
Most modern desktop interfaces derive their appearance from the Xerox Alto, an experi-
mental computer system developed in 1973 at Xerox‚Äôs Palo Alto Research Center (PARC),
now PARC, Inc. PARC‚Äôs Alto was the first computer with a graphical interface and was
designed to explore the potential of computers as desktop business systems. In creating

---

## Chunk 2989

the Alto, PARC researchers developed what became the four pillars of the desktop UI
paradigm: windows, icons, menus (and other widgets), and pointer, or WIMP for short.
The Alto was designed as a networked office system in which documents could be com-
posed, edited, and viewed in WYSIWYG (what you see is what you get) form; stored;

---

## Chunk 2990

retrieved; transferred electronically between workstations; and printed. The Alto system,
and its commercially unsuccessful progeny, the Xerox Star, contributed many significant
innovations to the vernacular of desktop computing that we now regard as commonplace:
the mouse, the rectangular window, the scrollbar, the (virtual) pushbutton, the ‚Äúdesktop

---

## Chunk 2991

metaphor,‚Äù object-oriented programming, multitasking, Ethernet, and laser printing.
PARC‚Äôs effect on the industry and contemporary computing was profound. Both Steve
Jobs and Bill Gates saw the Alto at PARC in the late 1970s and were indelibly impressed.
After hiring away many of PARC‚Äôs most brilliant minds‚Äîwho jumped ship after it was

---

## Chunk 2992

clear that Xerox was about to fumble the entire future of computing‚ÄîSteve Jobs set about
reincarnating the Alto/Star in the form of the Lisa. The Lisa was remarkable, accessible,
exciting, far too expensive ($9,995 in 1983), and frustratingly slow. It also introduced new
graphical idioms, such as drop-down menus, to the new visual language of computing.

---

## Chunk 2993

--- Page 466 ---
About this time, less visually polished desktop interfaces also began to appear on expen-
sive and more powerful UNIX workstations from companies like Sun Microsystems,
which fared somewhat better with hardcore scientific and engineering audiences. Not
deterred by the commercial failure of the Lisa, Jobs began a secret project to develop an
affordable incarnation of the Alto.

---

## Chunk 2994

The result was the legendary Macintosh, a machine that has had enormous influence on
our technology, design, and culture. The Mac single-handedly brought an awareness of
design and aesthetics to the industry. It not only raised the standards for user-friendli-
ness, but it also enfranchised a whole population of skilled individuals from disparate

---

## Chunk 2995

fields who were previously locked out of computing because of the industry‚Äôs self-absorp-
tion in techno-trivia. Microsoft, after creating some of the first software for the Mac,
went on to develop its own WIMP interface for PCs‚ÄîWindows‚Äîbetween them defining
our personal computing paradigms for over two decades.

---

## Chunk 2996

This chapter covers detailed design considerations for modern desktop GUIs of all fla-
vors. It focuses on the behaviors of windows and their structural and navigational com-
ponents, as well as pointer-driven selection and manipulation of onscreen objects.
Anatomy of a Desktop App
As you may remember from our earlier discussion of software posture (see Chapter 9), the

---

## Chunk 2997

two primary types of desktop interfaces are sovereign and transient. By far, the majority
of actual work that gets done on desktop applications is done in sovereign applications.
Transients exist in supporting roles for brief, intermittent, or largely background tasks
(such as music playback or instant messaging). Consequently, this section focuses on the

---

## Chunk 2998

basic structural patterns of sovereign desktop apps, the building blocks of which we‚Äôll
discuss later in this chapter, as well as in Chapter 21.
Primary and secondary windows
The top-level structure of desktop applications (as opposed to the operating system
itself) is the window‚Äîthe movable, resizable container within which both content and

---

## Chunk 2999

functional controls for the app primarily reside. In terms of structuring your applica-
tion, you can think of it as having a primary window and, in many cases, one or more
secondary windows.
Primary window
The primary window contains your application‚Äôs content, typically expressed in the form
of documents that can be created, edited, and shared. Less frequently, it contains other

---

## Chunk 3000

436 Part III: Interaction Details

---

## Chunk 3001

--- Page 467 ---
sorts of objects with properties that can be manipulated and configured, or media that
can be viewed or played. Primary windows often are divided into panes that contain
content, a means of navigating between different content objects, and sets of frequently
used functions for manipulating or controlling the content. Primary windows typically

---

## Chunk 3002

are designed to assume sovereign posture, filling most of the screen and supporting full-
screen modes.
secondary windows
Secondary windows support the primary window, providing access to less frequently
used properties and functions, typically in the form of dialogs. We‚Äôll discuss dialogs and
their structure at length in Chapter 21. If your application allows panes located in the

---

## Chunk 3003

primary window to be detached and manipulated separately, these floating panels or
palettes also take on a role as secondary windows.
Primary window structure
Primary windows, as mentioned, frequently are subdivided into multiple functional areas:
‚Ä¢ A content or work area
‚Ä¢ A menu bar
‚Ä¢ Multiple toolbars, panels, or palettes that help you navigate to or select content objects

---

## Chunk 3004

or operate on selected content objects within the work area
menus and toolbars
Menus and toolbars are collections of related actions the user can instruct the applica-
tion to perform, such as ‚Äúclose this document‚Äù or ‚Äúinvert the colors of the current selec-
tion.‚Äù Menus are accessed by clicking on words arranged near the top of the screen, and

---

## Chunk 3005

are often subject to standardization rules from the operating system. Toolbars are more
specific to the application, often summoned or dismissed through menus, and‚Äîonce
active‚Äîpresent their functions as a collection of visual icons, often with small labels.
When function menus are included within the primary window, they appear across the

---

## Chunk 3006

top of the window within a menu bar. Traditional toolbars appear directly below the
menu bar (or, in OS X, across the top of the window). Newer UI idioms such as Microsoft‚Äôs
ribbon seek to take the place of both menus and toolbars, replacing them with a tabbed
toolbar-like construct. It is more verbose than a toolbar and therefore shares some of

---

## Chunk 3007

the pedagogic features of menus. We discuss menus, toolbars, and related UI idioms in
detail later in this chapter.
CH 18. Designing for the Desktop 437

---

## Chunk 3008

--- Page 468 ---
Content panes
Content panes form the primary work area within most desktop applications, whether it is
the editable view of a form or document or (as in the case of a software music synthesizer,
for example) a complex control panel. An application typically has one primary content
area. But applications that support editing multiple documents or views of a document

---

## Chunk 3009

(such as in CAD software) side-by-side may have multiple content panes. These panes may
affect each other or allow dragging and dropping of objects between them.
Index panes
Index panes provide navigation and access to documents or objects that ultimately
appear in the content view(s) for editing or configuration. Sometimes selecting an object

---

## Chunk 3010

in an index view displays it in the content area (such as in an e-mail app, where selecting
an e-mail in the index pane displays its contents in the content pane). In other cases,
objects dragged from an index pane to a content pane are added to the pane, leaving its
existing contents intact. This behavior is typical in authoring tools, where index panes

---

## Chunk 3011

are often used to house asset libraries or metadata.
Tool palettes
Although they have many visual similarities to toolbars, tool palettes serve a unique
purpose. They allow the user to rapidly switch between the application‚Äôs modes of oper-
ation by selecting one tool from a set of tools. Each tool assigns a different set of opera-

---

## Chunk 3012

tions to actions, such as clicking or dragging. This mode change typically is hinted at by
a change in the cursor‚Äôs visual design to match the semantics of the currently selected
mode or tool.
Tool palettes typically are vertically oriented and are typically positioned (at least by
default) on the left edge of the primary window. We discuss tool palettes in detail later
in this chapter.
sidebars

---

## Chunk 3013

Sidebars are a relatively recent but popular interaction idiom. They most often allow
object or document properties to be manipulated without the need to resort to modal
or modeless dialogs. This streamlines the workflow in complex authoring applications.
Typically sidebars are positioned on either the right or left side of the primary window.

---

## Chunk 3014

But they can be in both places, and even positioned along the bottom of the window, or
in place of a toolbar. We discuss sidebars in detail later in this chapter.
438 Part III: Interaction Details

---

## Chunk 3015

--- Page 469 ---
windows on the Desktop
A WIMP fundamental that emerged from PARC is the idea of rectangular windows con-
taining application controls and documents. The rectangular theme of modern GUIs
is so dominating and omnipresent that it is often seen as vital to the success of visual
interaction.
There are good reasons to display data in rectangular panes. Probably the least import-

---

## Chunk 3016

ant is that rectangular panes are a good match for our display technology: CRTs and
LCDs have an easier time with rectangles than with other shapes. More important is the
fact that most data output used by humans is in a rectangular format: We have viewed
text on rectangular sheets since Gutenberg, and most other forms, such as photographs,

---

## Chunk 3017

film, and video also conform to a rectangular grid. Rectangular graphs and diagrams
are also the easiest for us to make sense of. Rectangles are also quite space-efficient. So
they just seem to work, cognitively and efficiently.
overlapping windows
Application windows on the PARC systems, as well as on the Lisa and the Mac, were

---

## Chunk 3018

rendered as overlapping shapes on the metaphorical desktop. They could be dragged
over one another (obscuring windows underneath), stacked, and independently resized.
Overlapping windows demonstrated clearly that there are better ways to transfer con-
trol between concurrently running applications other than typing obscure commands.

---

## Chunk 3019

The visual metaphor of overlapping shapes seems to work well initially. Your physical
desk, if it is like ours, is covered with papers. When you want to read or edit one, you pull
it out of the pile, lay it on top, and get to work. The virtual desktop mimics this real-world
interaction reasonably well.
The problem is that, just like in the real world, this metaphor doesn‚Äôt scale, especially if

---

## Chunk 3020

your desk is covered with papers and, like your laptop‚Äôs screen, is only 15 inches across
diagonally. The overlapping window concept is good, but its execution is somewhat
impractical without the addition of other idioms to aid navigation between multiple
applications and documents.
Overlapping windows create other problems, too. A user who mis-clicks the mouse a few

---

## Chunk 3021

pixels in the wrong direction can find that his application has apparently disappeared,
replaced by another one that was lurking beneath it. User testing at Microsoft showed
that a typical user might launch the same word processor several times in the mistaken
belief that he had somehow ‚Äúlost‚Äù the application and needed to start over. Problems like

---

## Chunk 3022

these prompted Microsoft to introduce the taskbar. In OS X, Apple decided to address
this problem with Expose. Even though it provides an innovative idiom for keeping track
CH 18. Designing for the Desktop 439

---

## Chunk 3023

--- Page 470 ---
of open windows, Expose suffers from a curious lack of integration with applications
minimized to Apple‚Äôs taskbar-like Dock.
A final point of confusion regarding overlapping windows is the multitude of other desk-
top idioms that are also represented by overlapping shapes. The familiar dialog box is

---

## Chunk 3024

one, as are menus and floating tool palettes. Such overlapping within a single applica-
tion is natural and a well-formed idiom. It even has a faint trace of metaphor: that of
someone handing you an important note. The problem arises when you scale up to using
many open applications. The sheer number of overlapping layers can lead to visual noise

---

## Chunk 3025

and clutter, as well as obscuring which layers belong to which application.
Tiled windows
After the commercial success of the Macintosh, Bill Gates and his engineering team at
Microsoft created a response to the Apple/Xerox GUI paradigm.
The first version of Windows diverged somewhat from the pattern established by Xerox

---

## Chunk 3026

and Apple. Instead of using overlapping rectangular windows to represent the overlap-
ping sheets of paper on one‚Äôs desktop, Windows 1.0 relied on what was called tiling to
allow users to have more than one application onscreen at a time (Xerox PARC‚Äôs CEDAR,
however, predated Windows as the first tiling window manager).

---

## Chunk 3027

Tiling meant that applications divided the screen into uniform rectangular tiles, evenly
parceling out the available space to each running application. Tiling was invented as an
idealistic means to solve the orientation and navigation problems caused by overlapping
windows. Navigation between tiled windows is much easier than between overlapped

---

## Chunk 3028

windows, but the cost in pixel real estate for each tiled app is horrendous.
Windows 1.0, however, didn‚Äôt rigidly enforce tiling like CEDAR did, so as soon as the
user moved any of the neatly tiled windows, he was thrust right back into the excise of
window manipulation. Tiling window managers failed as a mainstream idiom, although

---

## Chunk 3029

remnants can still be found. Try right-clicking the current Windows taskbar, and choose
‚ÄúShow windows side by side.‚Äù The new Start screen on Windows 8, with its mosaic of
dynamically updating app content tiles, harks back to the tiled windows concept as well,
but in a more appropriate and useful incarnation.
Virtual desktop spaces

---

## Chunk 3030

Overlapping windows don‚Äôt make it easy to navigate between multiple running appli-
cations, so vendors continue to search for new ways to achieve this. The virtual desktop
or session managers on some platforms extend the desktop to many times the size of
the physical display by, in essence, adding a set of virtual screens. (Apple calls this fea-

---

## Chunk 3031

ture Spaces in OS X.) The virtual desktop UI typically shows thumbnail images of all the
440 Part III: Interaction Details

---

## Chunk 3032

--- Page 471 ---
desktop spaces, each of which can display different sets of apps and open windows, the
state of which can be preserved across login sessions. You switch between these virtual
desktops by clicking the one you want to make active (or pressing a key command to
move between them). In some versions, you can even drag tiny window thumbnails from

---

## Chunk 3033

one desktop to another. This kind of metamanagement of apps and windows can be use-
ful to power users who keep many apps they work with open simultaneously.
Full-screen applications
While virtual desktops are a reasonably elegant solution to a complex problem for power
users, the basic problem of working with windows seemed to have been lost in the shuf-

---

## Chunk 3034

fle: How can a more typical user easily navigate between applications?
Multiple windows sharing a small screen‚Äîwhether overlapping or tiled‚Äîis not a good
general solution (although it has important occasional uses). However, with recent OS
releases from both Apple and Microsoft, we are moving toward a world of full-screen

---

## Chunk 3035

applications. Each application occupies the entire screen when it is ‚Äúup at bat.‚Äù Tools
like the taskbar borrow the minimum quantity of pixels from the running application
to provide a visual method of changing the lineup. (This concept is actually quite sim-
ilar to the early days of the Mac with its Switcher facility, which transitioned the Mac

---

## Chunk 3036

display between one full-screen application and another.) This solution is much more
pixel-friendly, less confusing to users, and highly appropriate when an application is
being used for an extended period of time. In OS X and Windows 8, users can make their
applications full-screen or overlapping. With growing influence from tablet (and even

---

## Chunk 3037

phone) experiences, the bias is increasingly toward full-screen experiences.
multipaned applications
It turns out that a powerful idiom takes the best elements of tiled windows and provides
them within a sovereign, full-screen application‚Äîthe idiom of multipaned windows.
Multipaned windows consist of independent views or panes that share a single window.

---

## Chunk 3038

Adjacent panes are separated by fixed or movable dividers or splitters. The classic exam-
ple of a multipaned application is Microsoft Outlook. Separate panes are used to display
the list of mailboxes, contents of the selected mailbox, a selected message, and upcom-
ing appointments and tasks, all on one screen (see Figure 18-1).

---

## Chunk 3039

The advantage of multipaned applications is that independent but related information
can be easily displayed in a single, sovereign posture screen in a manner that reduces both
navigation and window management excise to almost nil. For a sovereign application of
any complexity, multipane design is practically a requirement. Specifically, designs that

---

## Chunk 3040

provide navigation and/or building blocks in one pane and allow viewing or construc-
tion of data in an adjacent pane are an effective pattern that bears consideration.
CH 18. Designing for the Desktop 441

---

## Chunk 3041

--- Page 472 ---
Figure 18-1: Microsoft Outlook is a classic example of a multipaned application. The far-left pane
contains a list of mailboxes. It also lets you switch between views such as Mail and Calendar. The
top-center pane shows all the messages in the selected mailbox, and the pane below it shows the

---

## Chunk 3042

contents of the selected message. The pane on the right shows the next three appointments and
upcoming tasks.
Another form of multiple panes is stacked panes or tabs. These are common to prefer-
ences, settings, and other complex dialogs; they are also sometimes useful in sovereign
windows. Most modern web browsers let users have many sites open at a time, accessible

---

## Chunk 3043

through tabs at the top. Another good example is Microsoft Excel, which allows related
spreadsheets to be accessible via inverted tabs at the bottom of the screen. Excel makes
use of stacked panes with its Sheets.
window states
With the ability to expand to full screen, an application‚Äôs primary window can be in one
of three states: minimized, maximized, or pluralized.

---

## Chunk 3044

Minimized windows get collapsed into icons on the desktop (on older OSs) or into the
taskbar (Windows) or the Dock (OS X). Maximized windows fill the entire screen, cover-
ing whatever is beneath them.
Microsoft and Apple both somehow manage to avoid referring directly to the third state.
The only hint of a name is on the Microsoft system menu (click the application icon in the

---

## Chunk 3045

upper-left corner of the window to see it) where the Restore command describes how to
442 Part III: Interaction Details

---

## Chunk 3046

--- Page 473 ---
get to it. This function switches a maximized primary window to that other state‚Äîthe
pluralized or restored state.
The pluralized state is that in-between condition where the window is neither an icon
nor maximized to cover the entire screen. When a window is pluralized, it shares the
screen with icons and other pluralized windows. Pluralized windows can be either tiled

---

## Chunk 3047

or overlapping (but are usually the latter).
The normal state for a sovereign application is maximized. There is little reason for such
an application to be pluralized, other than to support switching between applications
or dragging and dropping data between applications or documents Transient-posture
applications, such as Windows Explorer, the Finder, the calculator, or the many IM and

---

## Chunk 3048

other social media applications in popular use today, are appropriately displayed in a
pluralized window.
windows and documents: mDI vs sDI
If you want to copy a cell from one spreadsheet and paste it to another, opening and
closing both spreadsheets in turn is tedious. It‚Äôs much easier to have two spreadsheets
open simultaneously. There are two ways to accomplish this. You can have one spread-

---

## Chunk 3049

sheet application that can contain two or more spreadsheet instances. Or you can have
multiple instances of the entire spreadsheet application, each one containing a single
instance of a spreadsheet.
In the early days of Windows, Microsoft chose the first option for the simple, practi-
cal reason of resource frugality, and called it the multiple document interface, or MDI.

---

## Chunk 3050

One application with multiple spreadsheets (documents) conserved more bytes and
CPU cycles than multiple instances of the same application, and performance was a
serious issue then. Eventually, as technology improved, Microsoft abandoned MDI and
embraced the other approach, the single document interface, or SDI.

---

## Chunk 3051

MDI is actually reasonable enough in certain contexts. In particular, it is useful when
users need to work on multiple related views of information in a single environment (for
example, a set of related screen mockups in Photoshop).
The utility of any interaction idiom is context-dependent.
SDI generally works well, and seems simpler for users, but it‚Äôs not a global panacea.

---

## Chunk 3052

While it‚Äôs reasonably convenient to switch between instances of Word to go back and
forth between different documents, you wouldn‚Äôt want a purchasing agent to have to
CH 18. Designing for the Desktop 443

---

## Chunk 3053

--- Page 474 ---
switch between multiple instances of his massive enterprise planning system to look at
an invoice and the vendor‚Äôs billing history.
MDI, due to its window-in-a-window nature, can be abused. Navigation becomes oppres-
sive if document views require full window management within the MDI container (as

---

## Chunk 3054

some early versions of MDI did). Everything described in our earlier discussion of excise
introduced by minimizing, maximizing, and pluralizing windows goes double for doc-
ument windows inside an MDI application‚Äîa truly heinous example of window man-
agement excise. In most cases it is far superior to transition cleanly from one fully open

---

## Chunk 3055

document to the next‚Äîor allow tiling or tabbing of open documents, as Photoshop does.
making use of windows
As described above, desktop applications are constructed of two kinds of windows: pri-
mary and secondary (dialog boxes). Determining how to use windows in an application
is an important aspect of defining the application‚Äôs Design Framework (see Chapter 5).
unnecessary rooms

---

## Chunk 3056

If we imagine our application as a house, each application window is a separate room.
The house itself is represented by the application‚Äôs primary window, and each room is a
pane, document window, or dialog box. We don‚Äôt add a room to our house unless it has
a purpose that cannot be served by other rooms. Similarly, we shouldn‚Äôt add windows to

---

## Chunk 3057

our application unless they have a purpose that can‚Äôt or shouldn‚Äôt be served by existing
windows.
It‚Äôs important to think through this question of purpose by considering prospective
users‚Äô goals and mental models. The way we think about it, saying that a room has a pur-
pose implies that using it is associated with a goal, but not necessarily with a particular
task or function.

---

## Chunk 3058

A dialog box is another room; have a good reason to go there.
Even today, a preponderance of secondary windows is a problem that haunts desktop
software. Developers often work by breaking the application into discrete functions, and
the user interface is then constructed in close parallel. Combine this with the incredible

---

## Chunk 3059

ease with which developers can implement a dialog box, and the obvious (and unfortu-
nate) result is one dialog box per function or feature. The developer who wants to create a
better user interface often must build his own without much help from GUI tool vendors.
444 Part III: Interaction Details

---

## Chunk 3060

--- Page 475 ---
The result, then, when expediency trumps concern for user experience, is too many
unnecessary rooms‚Äîthose secondary windows containing functions that should really
be integrated into panes or other surfaces within the primary window.
For example, in Adobe Photoshop, if you want to make a simple change to a photo‚Äôs

---

## Chunk 3061

brightness and contrast (without worrying about adjustment layers), you must go to the
Image menu, select the Adjustments submenu, and then select the Brightness/Contrast
command. This triggers a dialog box where you can make your adjustments, as shown
in Figure 18-2. This sequence is so common that it is completely unremarkable, and yet

---

## Chunk 3062

it is undeniably poor design. Adjusting the image is the primary task in a photo editing
application. The image is in the main window, so that‚Äôs also where the tools that affect it
should be. Changing the brightness and contrast isn‚Äôt a tangential task; it is integral to
the application‚Äôs purpose.
Figure 18-2: One of Adobe Photoshop‚Äôs many rooms: Brightness/Contrast. We‚Äôre all used to the fact

---

## Chunk 3063

that we have to invoke a dialog to perform a basic function, so we hardly notice it. But this creates
unnecessary work for users, and of course the dialog obscures the most important thing on the
screen‚Äîthe image. Recent versions of Photoshop have begun to move controls like these into mode-
less sidebars.
Putting functions in a dialog box emphasizes their separateness from the main task.

---

## Chunk 3064

Putting the brightness and contrast adjustment in a dialog box works just fine, but it cre-
ates an awkward interaction. From a developer‚Äôs point of view, adjusting brightness and
contrast is a single function, independent of many other functions, so it seems natural to
segregate it into its own container. From the user‚Äôs point of view, however, it is integral

---

## Chunk 3065

to the job at hand and should be obvious in the main window.
CH 18. Designing for the Desktop 445

---

## Chunk 3066

--- Page 476 ---
The image editing UI is considerably improved in Adobe Lightroom. The application is
divided into views or ‚Äúrooms,‚Äù each concerned with a specific purpose: Library, Develop,
Slideshow, Print, and Web. In the Develop view, brightness and contrast adjustment are
presented in a pane on the right side of the main window, along with every other imag-

---

## Chunk 3067

inable way of adjusting an image, as shown in Figure 18-3.
Figure 18-3: Adobe Lightroom shows vast improvements over Photoshop. Critical tools are grouped
by purpose and presented directly in the main window, adjacent to the image being adjusted.
Provide functions in the window where they are used.
Needless to say, a preponderance of secondary windows leads to navigational and

---

## Chunk 3068

window management excise for the user. Try to avoid this kind of window pollution in
your apps.
necessary rooms
Sometimes, however, separate rooms for certain functions are appropriate or even nec-
essary. When you want to go swimming, it would be odd if you were offered a living room
446 Part III: Interaction Details

---

## Chunk 3069

--- Page 477 ---
full of people as a place to change your clothes. Decorum and modesty are excellent
reasons for you to want a separate room in which to change. It is entirely appropriate to
provide a separate room when one is needed.
When users perform a function outside their normal sequence of events, it‚Äôs usually

---

## Chunk 3070

desirable to provide a special place in which to perform it. For example, purging a data-
base is not a normal activity. It involves setting up and using features and facilities that
are not part of the normal operation of the database application. The more prosaic parts
of the application support daily tasks like entering and examining records, but erasing

---

## Chunk 3071

records en masse is not an everyday occurrence. The purge facility correctly belongs in
a separate dialog box. It is entirely appropriate for the application to lead the user into a
separate room‚Äîa window or dialog‚Äîto handle that function.
Using goal-directed thinking, we can examine each function to good effect. If someone is

---

## Chunk 3072

using a graphics application to develop a drawing, his goal is to create an appealing and
effective image. All the drawing tools are directly related to this goal, but the pencils,
paintbrushes, and erasers are the most tightly connected functions. These tools should
be intimately integrated into the workspace itself in the same way that the conventional

---

## Chunk 3073

artist arranges his tools on his drawing board, close at hand. They are ready for immedi-
ate use without his having to reach far, let alone having to get up and walk into the next
room. In the application, drawing tools should be arrayed on the edges of the drawing
space, available with a single click of the mouse. Users shouldn‚Äôt have to go to the menu
or to dialog boxes to access these tools.

---

## Chunk 3074

For example, Corel Painter arranges artists‚Äô tools in trays and lets you move the things
that you use frequently to the front of the tray. Although you can hide the various trays
and palettes if you want, they appear as the default and are part of the main drawing
window. They can be positioned anywhere on the window as well. And if you create a

---

## Chunk 3075

brush that is, for example, thin charcoal in a particular shade of red that you‚Äôll need
again, you simply ‚Äútear it off‚Äù the palette and place it wherever you want on your work-
space. This is just like laying that charcoal in the tray on your easel. This tool selection
design closely mimics how we manipulate tools while drawing.

---

## Chunk 3076

On the other hand, if you decide to import a piece of clip art, although the function is
related to the goal of producing a good drawing, the tools used are not immediately
related to drawing. The clip art directory is incongruent with the user‚Äôs goal of draw-
ing‚Äîit is only a means to an end. The conventional artist probably does not keep a book

---

## Chunk 3077

of clip art right on his drawing board. But you can expect that it is close by, probably on
a bookshelf immediately adjacent to the drawing board and available without his even
getting up. In the drawing application, the clip art facility should be easy to access. But
because it involves a whole suite of tools that normally are unneeded, it should be placed
in a separate facility: a dialog box.

---

## Chunk 3078

CH 18. Designing for the Desktop 447

---

## Chunk 3079

--- Page 478 ---
When you‚Äôre done creating the artwork, you‚Äôve achieved your initial goal of creating an
effective image. At this point, your goals change. Your new goal is to preserve the picture,
protect it, and communicate through it. The need for pens and pencils is over. The need
for clip art is over. Leaving these tools behind now is no hardship. The conventional artist

---

## Chunk 3080

would now unpin the drawing from his board, take it into the hall and spray it with fixa-
tive, and then roll it up and put it in a mailing tube. He purposely leaves behind his draw-
ing tools. He doesn‚Äôt want them affected by fixative overspray and doesn‚Äôt want accidents
with paint or charcoal to mar the finished work. He uses mailing tubes infrequently, and

---

## Chunk 3081

they are sufficiently unrelated to the drawing process, so he stores them in a closet. In
the software equivalent of this process, you end the drawing application, put away your
drawing tools, find an appropriate place on the hard drive to store the image, and send
it to someone via e-mail. These functions are clearly separated from the drawing process
by goals and motivations.

---

## Chunk 3082

By examining users‚Äô goals, we are naturally guided to an appropriate form for the appli-
cation. Instead of merely putting every function in a dialog box, we can see that some
functions shouldn‚Äôt be enclosed in a dialog. Others should be put in a dialog that is inte-
gral to the interface‚Äôs main body, and still other functions should be removed from the
application.
menus

---

## Chunk 3083

Menus are perhaps the oldest idiom in the GUI pantheon. Many concepts and technol-
ogies had to come together to make them possible: the mouse, memory-mapped video,
powerful (for the time) processors, and pop-up windows. A pop-up window is a rectangle
on the screen that appears, overlapping and obscuring the main part of the screen, until

---

## Chunk 3084

it has completed its work, whereupon it disappears, leaving the original screen behind,
untouched. The pop-up window is the mechanism used to implement drop-down menus
(also called pull-down menus), as well as dialog boxes.
In modern GUIs, menus are visible across the top row of a screen or window in a menu
bar. The user points at and clicks one of a set of menu titles on the menu bar, and a list

---

## Chunk 3085

of options (the menu itself) appears in a small window that opens just below it. Menu
titles in Windows have a visual rollover effect to indicate pliancy (interactivity). A variant
of the drop-down menu is a menu that ‚Äúpops up‚Äù when you click‚Äîor, more frequently,
right-click‚Äîan object, even though it has no menu title. This is a pop-up menu.

---

## Chunk 3086

After the menu is open, the user makes a single choice by clicking once or by dragging
and releasing. The selection the user makes on the menu either takes immediate effect
or launches a dialog box of further options or settings, after which the menu collapses
back into its menu title.
448 Part III: Interaction Details

---

## Chunk 3087

--- Page 479 ---
menus as a pedagogic vector
As discussed briefly in Chapter 16, menus represent a pedagogic vector. Contrary to
user-interface paradigms of 25 years ago, menus and dialog boxes aren‚Äôt the main meth-
ods by which normal users perform everyday functions. So when a user looks at an appli-

---

## Chunk 3088

cation for the first time, it is often difficult to size up what that application is capable of.
An excellent way to get an impression of an application‚Äôs power and purpose is to glance
at the set of available functions by way of its menus and the dialogs they open. We do this
in the same way we look at a restaurant‚Äôs menu posted at its entrance to get an idea of the

---

## Chunk 3089

type of food, the presentation, the setting, and the price.
Use menus to provide a pedagogic vector.
Understanding the scope of what an application can and can‚Äôt do is one of the funda-
mental aspects of creating an atmosphere conducive to learning to use a piece of soft-
ware. Many otherwise easy-to-use applications put off users because there is no simple,

---

## Chunk 3090

nonthreatening way for them to find out just what the application can do.
Toolbars and direct-manipulation idioms can be too inscrutable for a first-time user to
understand, but the textual nature of the menus explains the functions. Reading the
words ‚ÄúFormat Gallery‚Äù (see Figure 18-4) is more enlightening to the new user than try-

---

## Chunk 3091

ing to interpret an icon button that looks like the one shown in the figure (although
ToolTips obviously help).
Figure 18-4: A menu item reading
‚ÄúFormat Gallery‚Äù is likely to be more
enlightening to new users than an
icon button like this one. But after
new users become intermediates,
it‚Äôs a different story.
CH 18. Designing for the Desktop 449

---

## Chunk 3092

--- Page 480 ---
For an infrequent user who is somewhat familiar with an application, the menu‚Äôs main
task is as an index to known tools: a place to look when he knows there is a function but
he can‚Äôt remember where it is or what it‚Äôs called. He doesn‚Äôt have to keep such trivia in his
head. He can depend on the menu to keep it for him, available when he needs it.

---

## Chunk 3093

For a frequent user, menus provide a stable physical location at which to access one of
hundreds of possible commands, or a quick reminder about keyboard shortcuts.
If the main purpose of menus were to execute commands, terseness would be a virtue.
But because the main justification of their existence is to teach us about what is avail-

---

## Chunk 3094

able, how to get it, and what shortcuts are available, terseness is really the exact opposite
of what we need. Our menus have to explain what a given function does, not just where
to invoke it. Therefore, it behooves us to be a little more verbose in our menu item text.
Menus shouldn‚Äôt say ‚ÄúOpen,‚Äù but rather ‚ÄúOpen Report‚Äù; not ‚ÄúAuto-arrange,‚Äù but rather

---

## Chunk 3095

‚ÄúAuto-arrange icons.‚Äù We should stay away from jargon, because our menu‚Äôs users won‚Äôt
yet be acquainted with it. A scan of the menus should make clear the scope of the appli-
cation and the depth and breadth of its various facilities. For this reason, most every
function available to the user should be available in menus, so that they are available to
be learned.

---

## Chunk 3096

Another teaching purpose is served by providing hints in the menu to related controls
for the same command. Having button icons next to menu commands and including
hints that describe keyboard equivalents teaches users about quicker command meth-
ods that are available (we discuss this later in the chapter). When you put this informa-

---

## Chunk 3097

tion right in the menu, the user may register it subconsciously. It won‚Äôt intrude upon her
conscious thoughts until she is ready to learn it, and then she will find it readily available
and already familiar.
Finally, for people to best learn how to use an application, they should be able to examine
and experiment without fear of commitment or causing irreparable harm. A global Undo

---

## Chunk 3098

function and the Cancel buttons on dialogs that launch from menu items support this
ability well.
Disabled menu items
An important menu convention is to disable (make nonfunctional) menu items when
they are unavailable in a given state or are irrelevant to the selected data object or item.
The disabled state typically is indicated by lightening or ‚Äúgraying out‚Äù the text for the

---

## Chunk 3099

item in the menu. This is a useful and expected idiom. It helps the menu become an even
better teaching tool, because users can better understand the context in which certain
commands are applicable.
450 Part III: Interaction Details

---

## Chunk 3100

--- Page 481 ---
Disable menu items when they are not applicable.
Check mark menu items
Check marks next to menu items are usually used to enable and disable aspects of the
application‚Äôs interface (such as turning toolbars on and off) or adjusting the display of
data objects (such as wireframe versus fully rendered images). Users can easily grasp

---

## Chunk 3101

this idiom. It is effective because not only does it provide a functional control, but it also
indicates the control‚Äôs state.
This idiom is probably best used in applications with fairly simple menu structures. If
there are lots of possible toggles in the application it can clog up the menu, making it dif-
ficult to find more important commands. Opening and scrolling through a menu to find

---

## Chunk 3102

the right item may become laborious. If the attributes in question are frequently toggled,
they should also be accessible from a toolbar. If they are infrequently accessed and menu
space is at a premium, all similar attributes could be gathered in a dialog box that would
provide more instruction and context (as is commonly required for infrequently used
functionality).

---

## Chunk 3103

A check mark menu item is vastly preferable to a flip-flop menu item that alternates
between two states, always showing the one currently not chosen. The problem with the
flip-flop menu is the same issue we identified with flip-flop buttons in Chapter 21‚Äînamely,
that users can‚Äôt tell if the menu is offering a choice or describing a state. If it says Display

---

## Chunk 3104

Toolbar, does that mean tools are now being displayed, or does it mean that by selecting
the option you can begin displaying tools? By using a single check mark menu item instead
(the Status bar is either checked or unchecked), you can make the meaning clear.
Icons on menus
Visual symbols next to text items help users recognize them without having to read, so

---

## Chunk 3105

they can be identified faster. They also provide a helpful visual connection to other con-
trols that do the same task. To create a strong visual language, a menu item should show
the same icon as its corresponding toolbar icon button.
Use consistent visual symbols on related commands.
CH 18. Designing for the Desktop 451

---

## Chunk 3106

--- Page 482 ---
With its adoption of the ribbon control, Microsoft has combined menus and toolbars
into a single entity in its Office Suite, but for applications continuing to provide standard
menus, making a visual link between menu and toolbar remains a powerful means of
improving learnability.
Accelerators
Accelerators or keyboard shortcuts provide an easy way to invoke functions from the

---

## Chunk 3107

keyboard. These are commonly function keys (such as F9) or combinations involving
modifier keys (Ctrl, Alt, Option, and Command). By convention, they are shown to the
right of drop-down menu items‚Äîor in ToolTips for applications using the ribbon con-
trol‚Äîto allow users to learn them as they access menus. Inclusion of these annotations,

---

## Chunk 3108

while called for in style guides, is up to the individual designer, and too often forgotten.
Three tips help you successfully create good accelerators:
‚Ä¢ Follow standards.
‚Ä¢ Provide for the daily use of accelerators.
‚Ä¢ Show how to access accelerators.
Where standard accelerators exist, use them. In particular, this refers to the standard

---

## Chunk 3109

editing set as shown on the Edit menu of most applications. Users quickly learn how
much easier it is to press Ctrl+C and Ctrl+V (or the Mac clover-key equivalents) than it
is to pull down the Edit menu, select Copy, pull down the Edit menu again, and select
Paste. Don‚Äôt disappoint users when they use your application. Don‚Äôt forget standards like
Ctrl+P for print and Ctrl+S for save.

---

## Chunk 3110

Identifying the set of commands that will be needed for daily use is the tricky part. You
must select the functions that are likely to be used frequently and ensure that those
menu items are given accelerators. The good news is that this set won‚Äôt be large. The bad
news is that it can vary significantly from user to user.

---

## Chunk 3111

The best approach is to perform a triage operation on the available functions. Divide
them into three groups: those that are definitely part of everyone‚Äôs daily use, those that
are definitely not part of anyone‚Äôs daily use, and everything else. The first group must
have accelerators, and the second group must not. The final group will be the toughest

---

## Chunk 3112

to configure, and it will inevitably be the largest. You can perform a subsequent triage
on this group and assign the best accelerators, like F2, F3, F4, and so on, to the winners.
More obscure accelerators, like Alt+7, should go to those least likely to be part of some-
one‚Äôs everyday commands.
452 Part III: Interaction Details

---

## Chunk 3113

--- Page 483 ---
Don‚Äôt forget to show the accelerator in the menu. An accelerator won‚Äôt do anyone any
good if he has to go to the manual or online help to find it. Put it to the right of the corre-
sponding menu item, where it belongs. Users won‚Äôt notice it at first, but eventually they
will find it, and they will be happy to make the discovery as perpetual intermediates (see

---

## Chunk 3114

Chapter 11). It will give them a sense of accomplishment and a feeling of being an insider.
These feelings are well worth encouraging in your customers.
When assigning the key to be paired with the modifier key, try to use the first letter of the
command name, such as Ctrl+C for ‚Äúcopy‚Äù and Ctrl+P for ‚Äúpaste.‚Äù This makes the acceler-
ator memorable and easier to learn.

---

## Chunk 3115

Some applications offer user-configurable accelerators. Often this is a good idea, even
a necessity, especially for expert users. Allowing users to customize accelerators on the
sovereign applications they use most of the time really lets them adapt the software to
their own style of working. Be sure to include a Return to Defaults control along with any
customization tools.
Access keys

---

## Chunk 3116

Access keys or mnemonics are another Windows standard (they are also seen in some
UNIX GUIs) for adding keystroke commands in parallel to the direct manipulation of
menus and dialogs.
The Microsoft style guide covers access keys and accelerators in detail, so we will simply
stress that they should not be overlooked. Mnemonics are accessed using the Alt key,

---

## Chunk 3117

arrow keys, and the underlined letter in a menu item or title. Pressing the Alt key places
the application in mnemonic mode, and the arrow keys can be used to navigate to the
appropriate menu. After the menu opens, pressing the appropriate letter key executes
the function. The main purpose of mnemonics is to provide a keyboard equivalent for

---

## Chunk 3118

each menu command. For this reason, mnemonics should be complete, particularly for
text-oriented applications. Don‚Äôt think of them as a convenience so much as a pipeline to
the keyboard. Keep in mind that your most experienced users will rely heavily on their
keyboards, so to keep them loyal, ensure that the mnemonics are consistent and thor-
oughly thought out. Mnemonics are not optional.

---

## Chunk 3119

Cascading menus versus monocline groupings
A variant of the standard drop-down menu provides a secondary menu when the user
selects certain items in the primary menu that are marked with a right arrow to the
right of the menu item. This mechanism, called a cascading menu (see Figure 18-5), is
notoriously difficult to use. Cascading menus not only make it much more difficult for

---

## Chunk 3120

users to locate items, but also require precise mouse movements in two dimensions to
CH 18. Designing for the Desktop 453

---

## Chunk 3121

--- Page 484 ---
navigate them smoothly. (If you trace the path required to select an item in a multilevel
cascading menu‚Äîsuch as the Windows Start menu‚Äîyou will notice that it looks like a
path through a maze.)
Figure 18-5: An example of a cascading menu from
Microsoft Word. Cascading menus make it difficult for
users to find and browse the command set, but they

---

## Chunk 3122

do allow menus to usefully contain much larger com-
mand sets.
Cascading or hierarchical menus were prevalent in the early days of graphical user inter-
faces. Menus in modern GUIs have flattened considerably, until most are now only one
level deep‚Äîa monocline grouping, or flat hierarchy. In many cases, especially when opti-

---

## Chunk 3123

mizing interactions for novice users, flattening the organization of user choices (whether
they be commands or objects) can greatly improve the discoverability and learnability of
application user interfaces.
The dialog box (which we‚Äôll discuss at length later in this chapter) was the mechanism
that allowed this simplification of the menu. Dialog boxes enabled software designers to

---

## Chunk 3124

encapsulate all the subchoices of any menu item within a single interactive container.
With the rise of modern high-resolution displays, enough choices can be displayed on a
menu bar to organize all an application‚Äôs functions into about a half-dozen meaningful
groups, each group represented by a one-word menu title. The menu for each group also

---

## Chunk 3125

was roomy enough to include all its related functions. The need to go to additional levels
of menus is today almost superfluous.
If they must be used at all, cascading menus should be employed only in sophisticated
sovereign applications, for rarely used functions. If you implement cascading menus, be
sure to allow for a wide threshold in mouse movement so that the submenu doesn‚Äôt dis-

---

## Chunk 3126

appear if the mouse cursor deviates slightly from it.
454 Part III: Interaction Details

---

## Chunk 3127

--- Page 485 ---
Toolbars, Palettes, and sidebars
The ubiquitous toolbar is a relatively recent GUI development. Microsoft was the first
to introduce the toolbar to mainstream user interfaces. The invention of the toolbar
addressed the shortcomings of the modal pull-down menu: slow discoverability and
extra physical work to execute functions. Toolbar functions are modeless: always plainly

---

## Chunk 3128

visible, which users can trigger with a single mouse movement and click.
The typical toolbar is a collection of icon buttons in a slab attached to the top (when hori-
zontal) or side (when vertical) of the main window, as shown in Figure 18-6. Essentially, a
toolbar consists of one or sometimes two rows (or columns) of visible, immediate, graph-
ically labeled functions.

---

## Chunk 3129

Figure 18-6: Toolbars for Word (top), InDesign (center), and Omnigraffle (bottom) on the Mac. Notice
how the Word and InDesign toolbars use icon buttons that show a button outline only on mouseover
or selection. This saves space and improves readability.
Toolbars and menus
Toolbars work together with menus to satisfy user needs as they mature: Whereas menus

---

## Chunk 3130

are complete toolsets with the main purpose of teaching inexperienced users and orga-
nizing seldom-used advanced functions, toolbars are for frequently used commands and
cater to perpetual intermediates. They complement each other perfectly, addressing dif-
ferent user needs at different times.
Toolbars give experienced users fast access to frequently used functions.

---

## Chunk 3131

It‚Äôs thus a mistake to think of toolbars as simply a speedy version of menus. Think of
them rather as receptacles for the essential functions that most users will use the most.
Toolbars versus modeless dialogs
Above, we discussed how the modality of menus make them problematic. Traditionally,
two modeless tool idioms have been commonly used to get around some of the problems

---

## Chunk 3132

CH 18. Designing for the Desktop 455

---

## Chunk 3133

--- Page 486 ---
that reliance on menus introduce. The modeless dialog box (which we‚Äôll discuss at length
in Chapter 21) is the older of the two idioms. The more recent idiom is the toolbar. Is one
better than the other?
Toolbars are modeless, but they don‚Äôt introduce the conundrums that modeless dialogs
do. They also posess two useful characteristics that modeless dialog boxes don‚Äôt: First,

---

## Chunk 3134

they are visually different from modal dialog boxes, and second, there is no need to
worry about dismissing them, because they are always available. They solve other prob-
lems, too. Toolbars are incredibly efficient in screen space, especially compared to dialog
boxes, and they don‚Äôt cover what they are operating on.

---

## Chunk 3135

Users also really seem to understand that the toolbar state reflects what is selected and
that interactions with the widgets in a toolbar have a direct and immediate impact on
the selection or application, which helps overall learnability.
Modeless dialogs, by contrast, are conventional free-floating windows; users can posi-

---

## Chunk 3136

tion them on the screen wherever they like. However, this results in window manage-
ment excise. While this is certainly a chore, it can also sometimes be handy to have your
toolset right next to what you are working on.
Docking toolbars are a good solution to this conundrum. If you click and drag a docking

---

## Chunk 3137

toolbar and pull it away from the edge of the application, it instantly forms its own small
window, frequently with a more compact rectangular layout. You can move it to where
you need it, and drag it back to any edge of the application‚Äôs main window when you are
done with it‚Äîwhere it reverts to a toolbar and becomes docked against the edge, either
vertically or horizontally.
Toolbar buttons

---

## Chunk 3138

The toolbar gave birth to the toolbar button, or icon button, a happy marriage between a
button and an icon. Icon buttons are an excellent visual mnemonic for a function. They
can be hard for newcomers to interpret, but then, they‚Äôre not for newcomers.
Because toolbars are primarily for providing quick access to frequently used tools, their

---

## Chunk 3139

identifiers must elicit quick recognition from experienced users. The pictorial imagery
of symbols suits that role better than text does. Icon buttons have the pliancy of buttons,
along with the fast-recognition capability of images. They pack a lot of power into a very
small space, but their great strength is also their great weakness: the icon.

---

## Chunk 3140

Some designers think that they must invent visual metaphors for icon buttons that
adequately convey meaning to first-time users. This is a quixotic quest that reflects not
only a misunderstanding of the purpose of toolbars but also a futile hope in the magical
power of metaphors. As we discussed in Chapter 13, metaphors don‚Äôt really exist.
456 Part III: Interaction Details

---

## Chunk 3141

--- Page 487 ---
The image on the icon button doesn‚Äôt need to teach users its purpose; it merely needs to
be easy to distinguish from the other icons in the set. Users should have help learning its
purpose through other means. One of the most effective (as discussed earlier) is includ-
ing the toolbar icons on the corresponding menu items. In this way, the pedagogy of the

---

## Chunk 3142

menus is extended to an understanding of the toolbar‚Äôs controls.
ToolTips
It might seem like a good idea to label toolbar buttons with both text and images. This
argument has not only logic but also precedent. The original icons on the Macintosh
desktop had text subtitles, as did the icon controls on some older web browsers. Icons are

---

## Chunk 3143

useful for allowing quick classification, but beyond that, we need text to tell us exactly
what the object is for.
The problem is that using both text and images can be very expensive in terms of pixels.
Screen space is often too much at a premium to permit verbose labeling of every toolbar
or panel icon. Designers who choose to label their icons are trying to satisfy two groups

---

## Chunk 3144

of users with different needs. One wants to learn in a gentle, forgiving environment, and
the other knows where frequently used items are but sometimes needs a brief reminder
about less-used functions. ToolTips provide an effective way to bridge the gap between
these two classes of users.
ToolTips are a clever and effective user interface idiom that adds a pedagogical vector to

---

## Chunk 3145

icon buttons without any of the drawbacks of text labeling (see Figure 18-7). In essence,
ToolTips provide a text label on a tiny, transient pop-up window. The real genius of Tool-
Tips is that they have a well-timed lag that displays the helpful information only after the
user has hovered the mouse cursor on the item for a second or so. This is just enough of a

---

## Chunk 3146

delay for the user to be able point to and select the function without getting the ToolTip if
she doesn‚Äôt need it. This ensures that users aren‚Äôt barraged by little pop-ups as they move
the mouse across the toolbar. It also means that if the user forgets what a rarely used
icon button is for, she needs to invest only a half-second to find out.

---

## Chunk 3147

Figure 18-7: This ToolTip from Microsoft Word helps users who have for-
gotten the icon‚Äôs meaning without using much real estate on text labels.
CH 18. Designing for the Desktop 457

---

## Chunk 3148

--- Page 488 ---
ToolTips initially contained a single word or very short phrase that described the hov-
ered-upon icon button. As of Microsoft Office 2007 on Windows, ToolTips now integrate
lightweight help content into the ToolTip. By taking advantage of the inherent context
sensitivity of ToolTips, better integration with other help mechanisms reduces the excise

---

## Chunk 3149

involved in learning an application.
Use ToolTips with all toolbar and iconic controls.
ToolTips make the controls on the toolbar much more accessible for intermediate users.
As a result, toolbars took the lead as the primary idiom for issuing commands to sov-
ereign applications. This has allowed the menu to recede into the background as a tool

---

## Chunk 3150

for beginners and for invoking advanced or seldom-used functions. The natural order
of icon buttons as the primary idiom, with menus as a backup, makes sovereign appli-
cations much easier to use. In fact, this trajectory continued into Microsoft Office 2007
with its ribbon control, which replaced menus with visually and textually expressive

---

## Chunk 3151

tabbed toolbars. We discuss the ribbon later in this chapter.
Disabling toolbar controls
Toolbar controls should become disabled if they are not applicable to the current selec-
tion. They must not offer a pliant response: The icon button must not depress, for exam-
ple, and controls should also gray themselves out to make matters absolutely clear.

---

## Chunk 3152

Some applications make disabled toolbar controls disappear. This can have undesirable
effects, especially if the positions of other controls change as well. Users remember tool-
bar layouts by position. If icon buttons disappear, the trusted toolbar becomes a skittish,
tentative idiom that scares new users and disorients the more experienced.
Toolbar control proliferation

---

## Chunk 3153

After people started to regard the toolbar as something more than just an accelerator
for the menu, its growth potential became more apparent. Designers soon realized that
there was no reason to restrict the controls on toolbars to icon buttons, and they began
inventing new idioms expressly for the toolbar. With the advent of these new construc-

---

## Chunk 3154

tions, the toolbar truly came into its own as a primary control surface.
After the icon button, the next control to find a home on the toolbar was the combo box,
as can be seen in many applications‚Äô font style, typeface, and size controls. It is perfectly
natural that these selectors be on a toolbar. They offer the same functionality as those
458 Part III: Interaction Details

---

## Chunk 3155

--- Page 489 ---
on the drop-down menu, but they also show the current style, font, and font size as a
property of the current selection. The idiom delivers more information in return for less
effort by users.
After combo boxes were admitted onto the toolbar, the precedent was set, and all kinds
of idioms appeared. Some of these toolbar idioms are shown in Figure 18-6.

---

## Chunk 3156

This variety of controls contributed to a broadening use of the toolbar. When it first
appeared, the toolbar was merely a place for fast access to frequently used functions. As
it developed, controls on the toolbar began to reflect the state of the application‚Äôs data.
Instead of an icon button that simply changed a word from plain to italic text, the icon

---

## Chunk 3157

button now began to indicate‚Äîby its state‚Äîwhether the currently selected text was
already italicized. The icon button not only controlled the application of the style but
also represented the status of the selection with respect to the style.
It was only a matter of time before toolbars began sporting their own menus. The Word

---

## Chunk 3158

toolbar shown in Figure 18-8 shows the Undo drop-down menu. Such sophisticated and
powerful idioms continue to push the old-fashioned menu bar further into the back-
ground as a purely pedagogic tool.
Figure 18-8: Toolbars now contain drop-down menus such as the Undo
menu shown here. This provides a compact way to provide powerful
functionality.
movable toolbars

---

## Chunk 3159

Some applications, such as Adobe‚Äôs Creative Suite, support movable and detachable tool-
bars or palettes. Pre-2007, the Microsoft Office suite had a battery of toolbars that users
could choose to make visible or invisible. If they were visible, they could be dynamically
positioned in one of five locations. They also could be attached‚Äîor docked‚Äîto any of

---

## Chunk 3160

the four sides of the application‚Äôs main window. If the user dragged the toolbar away
from the edge, it configured itself as a floating toolbar, complete with a mini title bar, as
shown in Figure 18-9.
CH 18. Designing for the Desktop 459

---

## Chunk 3161

--- Page 490 ---
Figure 18-9: Toolbars can be docked horizontally (top), vertically (left), and dragged off the
toolbar to form free-floating palettes.
Allowing users to move toolbars around so flexibly also provided the possibility for users
to obscure parts of toolbars with other toolbars. Microsoft addressed that problem with

---

## Chunk 3162

an expansion icon button and drop-down menu that appeared only when a toolbar was
partly obscured. It provided access to hidden items via a drop-down menu, as shown in
Figure 18-10.
Figure 18-10: Microsoft‚Äôs clever way of allowing users to overlap toolbars (or fit them in
smaller sizes) but still get at all their functions.

---

## Chunk 3163

Since 2007, Microsoft has moved away from the ultimate flexibility of toolbars to the
more predictable and inviting ribbon control (discussed later in the chapter) and single
quick-access toolbar. However, they still make use of the same menu idiom for accessing
hidden ribbon and toolbar items.
460 Part III: Interaction Details

---

## Chunk 3164

--- Page 491 ---
Customizable toolbars
A dilemma arises from the fact that toolbars represent the frequently used functions
for all users: At least a few of those functions are different for each type of user. Micro-
soft arrived at a solution for this conundrum years ago: Ship the application with the
best guess at what typical users‚Äô daily-use controls are, and let users with more exact-

---

## Chunk 3165

ing needs customize. (In Office 2007 and later, the ribbon, discussed later, is similarly
customizable.)
This solution, while reasonable, gets diluted by the addition of non-daily-use functions
to the default toolbars. For example, Word‚Äôs default toolbar button suite contained func-
tions that were not frequently used, such as the cryptic Insert Autotext. Items like this

---

## Chunk 3166

were perhaps part of a feature checklist or the result of concessions to product man-
agement. Although they may have been useful at times, most users did not use them
frequently. Personas and scenarios are useful tools for helping to sort out which items
belong on default toolbar configurations (see Chapters 3 and 4).

---

## Chunk 3167

Word allows advanced users to customize and configure its ribbon control to their
hearts‚Äô content. There is a certain danger in providing this level of customizability to
the toolbars, because it is possible for a reckless user to make it unrecognizable and
unusable. However, it takes some effort to totally wreck things. People generally won‚Äôt

---

## Chunk 3168

invest much effort in creating something that is ugly and hard to use. More likely, they
will make just a few custom changes and enter them one at a time over the course of
months or years.
Contextual (pop-up) toolbars
A useful evolution of the toolbar idiom is the contextual toolbar. Similar to a right-click
contextual pop-up menu, it provides a small group of icon buttons adjacent to the mouse

---

## Chunk 3169

cursor. In some implementations, the specific icon buttons presented are dependent on
the object selected. If text is selected, the buttons provide text-formatting options; if a
drawing object is selected, the buttons enable users to change object properties. A vari-
ation of this idiom was also popularized with Microsoft Office 2007, where it was called

---

## Chunk 3170

the Mini Toolbar. However, similar idioms have been used in several applications. These
include Adobe Photoshop (where the toolbar is docked but changes based on context)
and Apple‚Äôs Logic music production environment (where the toolbar is a modal cursor
palette).
The ribbon control
As we discussed earlier in this chapter, Microsoft introduced a new GUI idiom with

---

## Chunk 3171

Office 2007: the ribbon control (see Figure 18-11). In essence, it is an oversized, horizon-
tal, tabbed toolbar with textual labels for groups of functions, as well as a heterogeneous
CH 18. Designing for the Desktop 461

---

## Chunk 3172

--- Page 492 ---
presentation of icon buttons and textual commands. The tabs provide groupings simi-
lar to those used in menus (such as File, Home, Insert, Design, Transitions, Animations,
Slide Show, Review, and View in PowerPoint 2010).
Figure 18-11: The ribbon in PowerPoint replaces the menu system and classic toolbars with what is
essentially a tabbed, hybrid menu/toolbar.
Tool palettes

---

## Chunk 3173

The tool palette predates the toolbar as an interaction idiom; the original MacPaint is
perhaps the first application to use it. It has been a staple of graphics applications and
authoring environments of all kinds ever since.
Tool palettes differ from toolbars in an important way. As already discussed, toolbars are

---

## Chunk 3174

a collection of immediate-access commands that typically act on the current selection,
often by changing the values of selected object properties. Tool palettes, on the other
hand, contain a set of mutually exclusive controls (meaning that only one may be active
at a time), each of which represents an operating mode of the application, including:.
‚Ä¢ object creation modes
‚Ä¢ object selection modes

---

## Chunk 3175

‚Ä¢ object manipulation modes
Tool palettes also, mostly for historical reasons dating back to MacPaint, tend to be
vertically oriented and usually consist of two columns of icon buttons or combo icon
buttons. Combo icon buttons can be clicked to reveal other, similar tools. In Adobe Illus-
trator, for example, clicking and holding on the Eraser gives access to the Scissors and
Knife tools as well.

---

## Chunk 3176

Palettes typically dock and float, mimicking the functionality from the toolbar. Palettes
are, as we mentioned, popular in graphics applications, where modeless access to tools is
useful‚Äîor even critical‚Äî for users to maintain a productive flow. Adobe Fireworks (RIP)
and other applications originally developed by Macromedia were among the first to pro-

---

## Chunk 3177

vide a more robust docking structure to minimize screen management excise. Recent
versions of Photoshop and Illustrator have taken up the idiom, as shown in Figure 18-12.
462 Part III: Interaction Details

---

## Chunk 3178

--- Page 493 ---
Figure 18-12: The docked palettes in Adobe Illustrator provide interactivity similar to that of mode-
less dialog boxes, but they don‚Äôt require users to spend as much effort and attention invoking,
moving, and dismissing dialogs. It doesn‚Äôt take a lot of imagination to see that these are really quite

---

## Chunk 3179

similar to toolbars in the sense that they use standard controls and widgets to provide application
functionality directly, visibly, and persistently in the user interface.
sidebars, task panes, and drawers
The final step in the evolution of workflow-friendly modeless command idioms was the
introduction of the sidebar or task pane‚Äîa pane in the application window dedicated to

---

## Chunk 3180

providing the kind of functions that were formerly delivered through dialog boxes. One
of the first applications to do this was Autodesk‚Äôs 3ds Max, a 3D modeling application
that lets you adjust object parameters modelessly through a sidebar. Mainstream appli-
cations that feature sidebars include Microsoft Windows Explorer and Internet Explorer

---

## Chunk 3181

with their Explorer Bars, Mozilla Firefox with its Side Bar, Apple‚Äôs iLife applications
with their Inspectors, and Microsoft Office through its Task Pane. Adobe Lightroom
has adopted this approach wholeheartedly: Almost all the application‚Äôs functionality is
provided modelessly via sidebars, as shown in Figure 18-13. Recent versions of Adobe

---

## Chunk 3182

Creative Suite applications have begun to adopt similar approaches, with robust tabbed
task panes replacing most modal access to functions.
CH 18. Designing for the Desktop 463

---

## Chunk 3183

--- Page 494 ---
Figure 18-13: Sidebars in Adobe Lightroom replace the need for dozens of dialog boxes. This
approach is similar to the palette approach shown in Figure 18-12. But unlike palettes, the sidebar
doesn‚Äôt require users to position it on the screen and doesn‚Äôt allow users to undock or dismiss it indi-

---

## Chunk 3184

vidually (although the entire sidebar may be hidden). This further reduces screen management excise
and represents a significant improvement over using dialog boxes to present application functions.
Sidebars hold a lot of promise as an interaction idiom‚Äîand they also need not be limited
to the sides of the screen. A commonly employed pattern is the dedicated properties area

---

## Chunk 3185

below a document pane or ‚Äúwork space.‚Äù It lets you modify a selected object while min-
imizing confusion and screen management excise, as shown in Figure 18-14. Sidebars
can contain either persistent controls or contextual controls that change based on the
current selection.
Drawers represent a final variant of task panes. The pane can, for purposes of conserving

---

## Chunk 3186

screen real estate for the primary content area, be stowed mostly or completely offscreen
in a pop-open drawer. While this can be handy on smaller desktop screens, it also brings
back some of the screen management excise that task panes so neatly removed. An alter-
native to this, supported by many Adobe products, is the ability to hide (and restore) all

---

## Chunk 3187

secondary panes and palettes with a keystroke. This allows power users to temporarily
remove the clutter of tools to better focus on the content they are authoring.
464 Part III: Interaction Details

---

## Chunk 3188

--- Page 495 ---
Figure 18-14: This design by Cooper for a customer relationship management (CRM) application
features dedicated properties. When the user selects an object in the work space (the top half of the
screen, on the left), its properties are displayed below. This retains the user‚Äôs context and minimizes
screen management excise.
Pointing, selection, and Direct
manipulation

---

## Chunk 3189

Objects on a screen can be manipulated directly through the use of a pointing device.
When you think about it, the best way to point to something is with your fingers. They‚Äôre
always handy; you probably have several nearby right now. Their only real drawbacks
are that their ends are too blunt for precisely pointing at tiny objects on high-resolution

---

## Chunk 3190

desktop screens, and that most desktop screens still can‚Äôt recognize being pointed at.
(Eyes are also great for pointing, but we usually need them for other things). Because
of these limitations, we use a variety of other pointing devices, the most popular‚Äî and
arguably the most effective‚Äî of which is the mouse.
CH 18. Designing for the Desktop 465

---

## Chunk 3191

--- Page 496 ---
A designer may also take into consideration several other common options for pointers,
including trackballs, trackpads, and digitizing tablets. It‚Äôs worth considering that while
the first two behave much like mice (with different ergonomic factors), tablets‚Äîas well
as their touchscreen cousins‚Äîare a bit different.

---

## Chunk 3192

The mouse is a ‚Äúrelative‚Äù pointing device: Moving the mouse moves the cursor based on
the current cursor position. Tablets and slates are usually ‚Äúabsolute‚Äù pointing devices:
Each location on the tablet maps directly to a specific location on the screen. If you pick up
the pen from the top-left corner and put it down in the bottom-right corner, the cursor

---

## Chunk 3193

immediately jumps from the top-left to the bottom-right of the screen.
Touchscreens, when they are implemented on desktop or laptop computers, tend, rather
unfortunately as of this writing, to carry over the idea of a pointer, or cursor, even though
this is unnecessary and confusing once you can actually point at things using your fin-

---

## Chunk 3194

gers. Attempting to wed direct touchscreen interactions to relative pointing idioms is
simply confusing.
Desktop touchscreen devices‚Äîif they must exist‚Äîshould take a cue from mobile touch-
screen UIs, such as iOS, and eliminate the cursor‚Äîand everything else that it entails. At
the same time, these devices should support horizontal orientation for touch input, since

---

## Chunk 3195

nobody wants to hold his or her arm aloft, interacting with a vertical screen, for hours
on end.
The remainder of this section focuses on the more common mouse-based and other rel-
ative, pointer-based desktop interactions.
mouse ergonomics
When you mouse around on the screen, there is a distinct dividing line between near

---

## Chunk 3196

motions and far motions. Either your destination is near enough that you can keep the
heel of your hand stationary on your desktop, or you must pick up your hand. When the
heel of your hand is down and you move the cursor from place to place, you use the fine
motor skills of the muscles in your fingers. When you lift the heel of your hand from the

---

## Chunk 3197

desktop to make a larger move, you use the gross motor skills of the muscles in your arm.
Transitioning between gross and fine motor skills is challenging. It involves coordinat-
ing two muscle groups that require dexterity to use together, which typically requires
time and practice for computer users to master. (It‚Äôs actually similar to drawing, another

---

## Chunk 3198

skill that requires practice to do well.) Touch typists dislike anything that forces them to
move their hands from the home position on the keyboard, because doing so requires a
transition between their muscle groups. Similarly, moving the mouse cursor across the
screen to manipulate a control forces a change from fine to gross and back to fine motor

---

## Chunk 3199

skills. Don‚Äôt force users to do this continually.
466 Part III: Interaction Details

---

## Chunk 3200

--- Page 497 ---
Clicking a mouse button also requires fine motor control. Without it, the mouse and
cursor move inadvertently, botching the intended action. The user must learn to plant
the heel of his hand and go into fine motor control mode to position the cursor in the
desired location. Then he must maintain that position when he clicks. Furthermore, if

---

## Chunk 3201

the cursor starts far away from the desired control, the user must first use gross motor
control to move the cursor near the control before shifting to fine motor control to finish
the job. Some controls, such as scrollbars, compound the problem by forcing users to
switch between fine and gross motor skills several times to complete an interaction, as
shown in Figure 18-15.

---

## Chunk 3202

Figure 18-15: The familiar scrollbar, shown on the left,
is one of the more difficult-to-use GUI controls. To
switch between scrolling up and scrolling down, the user
must transition from the fine motor control required for
clicking the up button to the gross motor control needed
to move her hand to the bottom of the bar. Then she
must return to fine motor control to accurately position

---

## Chunk 3203

the mouse and click the down button. If the scrollbar
were modified only slightly, as in the center, so that the
two buttons were adjacent, the problem would go away.
(Macintosh scrollbars can be similarly configured to
place both arrow buttons at the bottom.) The scrollbar
on the right is a bit visually cluttered, but it has the
most flexible interaction. Scroll wheels and capacitive

---

## Chunk 3204

gesture sensors on the input device are also a great
solution to the problem.
CH 18. Designing for the Desktop 467

---

## Chunk 3205

--- Page 498 ---
It‚Äôs important that designers pay significant attention to users‚Äô aptitudes, skills, and
usage contexts and make a conscious decision about how much complex motor work
using an interface should require. This is a delicate balancing act between reducing
complexity and user effort and providing useful and powerful tools. It‚Äôs almost always a

---

## Chunk 3206

good idea for things that are used together to be placed together.
Not only do less manually-dexterous users find the mouse problematic, but many expe-
rienced computer users, particularly touch typists, find the mouse difficult at times.
For many data-intensive tasks, the keyboard is superior to the mouse. With minimum

---

## Chunk 3207

movement, a proficient keyboardist has access to around 1600 discrete commands at
any one time. The mouse, decidedly less so. It is frustrating to have to pull your hands
away from the keyboard to reposition the cursor with the mouse, only to have to return
to the keyboard. In the early days of personal computing, it was the keyboard or nothing,

---

## Chunk 3208

and today, it is sometimes the mouse or nothing. Applications should fully support both
the mouse and the keyboard for all navigation and selection tasks.
Support both mouse and keyboard use for navigation and selection tasks.
A significant portion of computer users have some trouble using the mouse, so if we
want to be successful, we must design our software in sympathy with them as well as

---

## Chunk 3209

with expert mouse users. This means that each mouse idiom should have at least one
nonmouse alternative. Of course, this may not always be possible. It would be ridiculous
to try to support drawing interactions without a mouse. However, most enterprise and
productivity software lends itself pretty well to keyboard commands.
mouse buttons and controls

---

## Chunk 3210

The inventors of the mouse tried to decide how many buttons to put on it, and they
couldn‚Äôt agree. Some believed one button would be sufficient, whereas others swore by
two or three buttons. Still others advocated a mouse with several buttons that could be
clicked separately or together. Five buttons could yield up to 32 distinct combinations.

---

## Chunk 3211

Ultimately, though, Microsoft chose two for its PC, Apple settled on one button for its
Macintosh, and the UNIX workstation community went with three. Apple‚Äôs extensive
user testing determined that the optimum number of buttons for beginners was one,
thereby enshrining the single-button mouse in personal computing history. This was

---

## Chunk 3212

unfortunate, because the right mouse button and the context menus typically mapped
to it usually come into play soon after someone graduates from beginner status and
becomes a perpetual intermediate. A single button sacrifices power for the majority
of computer users in exchange for simplicity for beginners. Eventually Apple added a
468 Part III: Interaction Details

---

## Chunk 3213

--- Page 499 ---
second (hidden) mouse button, and for a brief time it even added a third beneath a hard-
ware scroll ball. But today‚Äôs Apple mouse eliminates the affordance for both buttons and
gestural swipes with a nearly featureless mouse surface, leaving users to figure out their
existence and purpose on their own. Microsoft, on the other hand, seems content to

---

## Chunk 3214

carry on with its familiar two mouse buttons and scroll wheel.
left mouse button
In general, the left mouse button is used for all the primary direct-manipulation func-
tions, such as triggering controls, making selections, drawing, and so on. The most com-
mon meaning of the left mouse button is activation or selection. For standard controls,

---

## Chunk 3215

such as buttons or check boxes, clicking the left mouse button means pushing the button
or checking the box. If you are clicking in data, the left mouse button generally means
selecting. We‚Äôll discuss selection idioms later in the chapter.
right mouse button
The right mouse button was long treated as nonexistent by Microsoft and many others.

---

## Chunk 3216

Only a few brave developers connected actions to the right mouse button, and those
actions were considered to be extra, optional, or advanced functions. When Borland
International used the right mouse button as a tool for accessing a dialog box that
showed an object‚Äôs properties, the industry seemed ambivalent toward this action even

---

## Chunk 3217

though it was, as they say, critically acclaimed. This changed with Windows 95, when
Microsoft finally followed Borland‚Äôs lead. Apple reluctantly followed Microsoft‚Äôs lead as
well, and today the right mouse button serves an important and extremely useful role.
It enables direct access to properties and other context-specific actions on objects and
functions via the ubiquitous context menu.

---

## Chunk 3218

scroll wheels and scroll balls
One of the most useful innovations in pointing devices is the scroll wheel. It has several
variations, but it is typically a small wheel embedded in the mouse under the user‚Äôs mid-
dle finger. Rolling the wheel forward scrolls the window up, and rolling it backwards
scrolls the window down. Pressing it acts like a third mouse button, but few apps actu-

---

## Chunk 3219

ally make good use of this feature. This is fine, because pressing a scroll wheel is rather
difficult to do without accidentally scrolling it a bit.
The best thing about the scroll wheel is that it allows users to avoid dealing with the chal-
lenges of interacting with scrollbars (see Figure 18-15). Some incarnations of the scroll

---

## Chunk 3220

wheel allow for horizontal as well as vertical scroll control. Some mice, such as the Apple
Magic Mouse, have replaced a physical wheel or ball with a capacitive gesture sensor.
CH 18. Designing for the Desktop 469

---

## Chunk 3221

--- Page 500 ---
modifier keys
Using modifier keys in conjunction with the mouse can extend direct-manipulation idi-
oms. Metakeys include Ctrl, Alt, Command (on Apple computers), and Shift.
Commonly, these keys are used to modify commands. For example, pressing the C key
usually inserts a ‚Äúc‚Äù into a text field, but hold the Ctrl key and that same button press

---

## Chunk 3222

means ‚ÄúCopy the selection.‚Äù In Windows Explorer, holding down the Ctrl key while drag-
ging and dropping a file turns the function from a Move into a Copy. These keys are
also commonly used to adjust mouse behavior. Holding down Shift while dragging often
constrains cursor movement to a single direction (either up/down or right/left). We‚Äôll
discuss these conventions more later in the chapter.

---

## Chunk 3223

Apple has a history of well-articulated standards for the use of modifier keys in combi-
nation with the mouse, and there tends to be a fair amount of consistency in their usage.
In the Windows world, no single source championed modifier key standards in the same
way, but some conventions (often rather similar to Apple‚Äôs) have emerged.

---

## Chunk 3224

Using cursor hinting to dynamically show the meanings of modifier keys for non text-re-
lated functions is a good idea. While the modifier key is pressed, the cursor should
change to reflect the idiom‚Äôs new function.
Use cursor hinting to show the meanings of modifier keys.
Pointing
This simple operation is a cornerstone of the graphical user interface and is the basis of

---

## Chunk 3225

nearly every mouse operation. The user moves the mouse until the onscreen cursor is
pointing to, or placed over, the desired object. Objects in the interface can know when
they are being pointed at, even when they are not clicked. Objects that can be directly
manipulated often change their appearance subtly to indicate this attribute when the

---

## Chunk 3226

mouse cursor moves over them. This property is called pliancy and is discussed in detail
later in this chapter.
Clicking
While the user holds the cursor over a target, he clicks and releases the mouse button.
In general, this action is defined to trigger a state change in a control or selecting an
470 Part III: Interaction Details

---

## Chunk 3227

--- Page 501 ---
object. In a matrix of text or cells, the click means ‚ÄúBring the selection point over here.‚Äù
For a pushbutton control, a state change means that while the mouse button is down
and directly over the control, the button enters and remains in the pushed state. When
the mouse button is released, the button is triggered, and its associated action occurs.

---

## Chunk 3228

Single-clicking selects data or an object or changes the control state.
However, if the user moves the cursor off the control while still holding down the mouse
button, the pushbutton control returns to its unpushed state (but the input focus
remains on the control until the mouse button is released). When the user releases the

---

## Chunk 3229

mouse button, input focus is severed, and nothing happens. This provides a convenient
escape route if the user changes his mind or inadvertently clicks the wrong button. The
mechanics of mouse-down and mouse-up events in clicking are discussed in more detail
later in this chapter.
Point-and-click combinations
You can perform two basic operations with the mouse: You can move it to point at dif-

---

## Chunk 3230

ferent things, and you can click the buttons. Most mouse actions beyond pointing and
clicking are a combination of these actions. The following list summarizes the complete
set of common mouse actions that can be accomplished without using modifier keys.
For the sake of discussion, we have assigned a short name to each of the actions (shown
in parentheses):
‚Ä¢ Point (point)

---

## Chunk 3231

‚Ä¢ Point, click left button, release (click)
‚Ä¢ Point, click right button, release (right click)
‚Ä¢ Point, click and hold down left button, drag, release (click and drag)
‚Ä¢ Point, click left button, release, quickly again click left button, release (double click)
‚Ä¢ Point, click left button and right button simultaneously, release both buttons (chord
click)

---

## Chunk 3232

‚Ä¢ Point, double-click without releasing the mouse button, drag, release (double drag)
An expert mouse user may perform all seven actions, but most users will not perform
the last two.
CH 18. Designing for the Desktop 471

---

## Chunk 3233

--- Page 502 ---
Clicking and dragging
This versatile operation has many common uses, including selecting, reshaping, reposi-
tioning, drawing, and dragging and dropping. We‚Äôll discuss all of these in this chapter
and the rest of the book.
As with clicking, it‚Äôs often important to have an escape hatch for users who become dis-

---

## Chunk 3234

oriented or have made an error. The Windows scrollbar provides a good example of this:
It allows users to scroll successfully without having the mouse directly over the scroll-
bar, as long as it was first clicked within the scrollbar. (Imagine how hard it would be
to use if it behaved like a button.) However, if the user drags too far from the scrollbar,

---

## Chunk 3235

it resets itself to the position it was in before being clicked. This behavior makes sense,
since scrolling over long distances requires gross motor movements that make it dif-
ficult to stay within the bounds of the narrow scrollbar control. If the drag is too far
off base, the scrollbar makes the reasonable assumption that the user didn‚Äôt mean to

---

## Chunk 3236

scroll. Some applications set this limit too close, resulting in frustratingly temperamen-
tal scroll behavior.
Clicking and dragging on a trackpad, while possible, is hardly ideal, especially in the
scenarios just described. Drag actions on capacitive surfaces aren‚Äôt as robust as mouse
dragging, and the relatively small surface area of most track pads doesn‚Äôt help. Apple

---

## Chunk 3237

has gradually enlarged its trackpads while supporting more touch gestures, probably for
this very reason.
Double-clicking
If double-clicking is composed of single-clicking twice, it seems logical that the first
thing double-clicking should do is the same thing that a single click does. This is indeed
its meaning when the mouse is pointing at data. Single-clicking selects something; dou-

---

## Chunk 3238

ble-clicking selects something and then takes action on it.
Double-clicking means single-clicking plus action.
This fundamental interpretation comes from the Xerox Alto/Star by way of the Mac-
intosh, and it remains a standard in contemporary GUI applications. The fact that
double-clicking is difficult for less-dexterous users‚Äîpainful for some and impossible

---

## Chunk 3239

for a few‚Äîwas largely ignored. The solution to this accessibility problem is to include
double-click idioms but ensure that their functions have equivalent single-click idioms.
472 Part III: Interaction Details

---

## Chunk 3240

--- Page 503 ---
Although double-clicking file and application icons is well defined, double-clicking most
controls has no meaning, and the extra click is discarded. Or, more often, it is inter-
preted as a second, independent click. Depending on the control, this can be benign or
problematic. If the control is a toggle button, you may find that you‚Äôve just returned it to

---

## Chunk 3241

the state it started in (rapidly turning it on and then off). If the control is one that goes
away after the first click, like the OK button in a dialog box, for example, the results
can be unpredictable. Whatever was directly below the pushbutton gets the second but-
ton-down message. There are also no affordances that indicate if an object is double-

---

## Chunk 3242

clickable. Generally speaking, double-clicking should be avoided where a single click
would suffice.
Chord-clicking
Chord-clicking means clicking two buttons simultaneously, although they don‚Äôt really
have to be clicked or released at precisely the same time. To qualify as a chord click, the
second mouse button must be clicked before the first mouse button is released.

---

## Chunk 3243

Chord-clicking can be done in two ways. The first is the simplest: The user merely points
to something and clicks both buttons at the same time. This idiom is clumsy and has not
found much currency in existing software, although some creative and desperate devel-
opers have implemented it as a substitute for the Shift key on selection.

---

## Chunk 3244

The second method is using chord-clicking to cancel a drag. The drag begins as a sim-
ple, one-button drag, and then the user adds the second button. Although this tech-
nique sounds more obscure than the first, it actually has found wider acceptance in the
industry.
Double-clicking and dragging
This is another expert-only idiom. Faultlessly executing a double-click-and-drag gesture

---

## Chunk 3245

can be like patting your head while rubbing your stomach. Like triple-clicking, it is use-
ful only in specialized sovereign applications. Use it as a variant of selection extension.
In Microsoft Word, for example, you can double-click text to select an entire word; so,
expanding that function, you can extend the selection word by word by double-dragging.

---

## Chunk 3246

In a big sovereign application that has many permutations of selection, idioms like this
one are appropriate. But for most products, we recommend that you stick with more
basic mouse actions.
CH 18. Designing for the Desktop 473

---

## Chunk 3247

--- Page 504 ---
mouse-up and mouse-down events
Each time the user clicks a mouse button (or taps a trackpad), the application must deal
with two discrete events: the mouse-down event and the mouse-up event. How these
events are interpreted varies from platform to platform and product to product. Within
a given product (and ideally a platform), these actions should be made rigidly consistent.

---

## Chunk 3248

When an object is selected, the selection should always take place on mouse-down. The
button click may be the first step in a dragging sequence, and you can‚Äôt drag something
without first selecting it.
Mouse-down over an object or data should select the object or data.
On the other hand, if the cursor is positioned over a control rather than selectable data,

---

## Chunk 3249

the action on the mouse-down event is to tentatively activate the control‚Äôs state tran-
sition. When the control finally sees the button-up event, it then commits to the state
transition, as shown in Figure 18-16.
Figure 18-16: These images depict feedback and
state change of a check box in Windows 8. The first
image shows an unselected check box. The second is

---

## Chunk 3250

the mouseover state (or hover). The third shows the
feedback to the click (or mouse-down). The fourth
shows what happens when the button is released
(mouse-up) but with a hover. The final image shows
the selected state of the check box without a hover.
Notice that although the click has visual feedback, the
check box control doesn‚Äôt register a state change until
the mouse-up or release.

---

## Chunk 3251

Mouse-down over controls means proposing an action; mouse-up means commit-
ting to an action.
This mechanism allows users to gracefully bow out of an inadvertent click. After click-
ing a button, for example, the user can just move the mouse outside of the button and
release the mouse button. For a check box, the meaning is similar: On mouse-down the

---

## Chunk 3252

check box shows that it has been activated, but the check doesn‚Äôt actually appear until
474 Part III: Interaction Details

---

## Chunk 3253

--- Page 505 ---
the mouse-up transition. This idiom is called pliant response hinting and is further
described in Chapter 13.
Trackpads, trackballs, and gesture sensors
Almost anybody who has used a laptop has used a trackpad. Many people eschew their
mouse when they take their laptop with them to meetings, coffee shops, kitchen tables,

---

## Chunk 3254

and bed. Keep in mind that trackpads are a bit more prone to glitchy behavior than mice,
since they rely on finger contact on their capacitive surface, and that drag and drop or
fine positioning control are difficult. This shouldn‚Äôt affect your design of typical desktop
apps much, but it‚Äôs something to consider if you know your users will be making heavy
or exclusive use of trackpads.

---

## Chunk 3255

Windows trackpads typically include distinct left and right buttons in addition to the
trackpad. Recent Apple trackpads have cleverly and invisibly built these buttons into
the trackpad itself. Pressing the Apple trackpad yields a satisfying button click and acti-
vates either a left or right mouse button action. A one-finger tap equals a left-click, and a
two-finger tap equals a right-click.

---

## Chunk 3256

Trackballs are uncommon but are still used for specialized applications where fine
movement control is desirable and space is at a premium, or where the ball‚Äôs rotational
movement maps well to the manipulation of objects onscreen (3D modeling applica-
tions). Click-and-drag operations are somewhat awkward using trackballs, so any ded-

---

## Chunk 3257

icated application using a trackball as input probably should be designed to minimize
the need for such interactions.
Mice (and trackpads) with multi-touch gesture sensors are becoming more and more
common and are the standard for Apple‚Äôs computers. The operating system typically
reserves supported gestures for its own use. But in the event that gestures are made

---

## Chunk 3258

available for use by your application, think carefully about their implementation.
Such gestures shouldn‚Äôt interfere with OS gestures without excellent reason, and they
shouldn‚Äôt be the primary method of accessing functionality or performing navigation.
Because gestures lack affordance, they should be considered power-user features, rather
like keyboard accelerators and other command shortcuts.

---

## Chunk 3259

Cursors
Pointing and selection on the desktop are achieved via the cursor, the visible representa-
tion of the mouse‚Äôs position onscreen. By convention, it is normally a small arrow point-
ing diagonally up and left, but under application control it can change to any shape as
long as it stays relatively small (32 √ó 32 pixels in Windows 8). Because the cursor fre-

---

## Chunk 3260

quently must resolve to a single pixel to point at small things, there must be some way for
CH 18. Designing for the Desktop 475

---

## Chunk 3261

--- Page 506 ---
the cursor to indicate precisely which pixel is the one pointed to. This is accomplished by
designating a single pixel of any cursor as the actual locus of pointing, called the hotspot.
For the standard arrow, the hotspot is, logically, the tip of the arrow. Regardless of which
shape the cursor assumes, it always has a single hotspot pixel.

---

## Chunk 3262

As discussed, the key to successful direct manipulation is rich visual feedback. It should
be obvious to users which aspects of the interface can be manipulated, which are infor-
mational, and which are d√©cor. Especially important for creating effective interaction
idioms is attention to mouse cursor hinting, as discussed in Chapter 13.
selection

---

## Chunk 3263

The act of choosing an object or control is called selection. This is a simple idiom, typi-
cally accomplished by pointing to and clicking the item in question (although there are
other keyboard- and button-actuated ways to do this). Selection is often the basis for
more-complex interactions. After the user chooses something, she is in the appropriate

---

## Chunk 3264

context to perform an action on that thing. The sequence of events implied by such an
idiom is called object verb ordering.
Command ordering and selection
At the foundation of every user interface is the way in which the user can express com-
mands. Almost every command has a verb that describes the action and an object that
describes what will be acted on.

---

## Chunk 3265

If you think about it, you can express a command in two ways: with the verb first, fol-
lowed by the object, or with the object first, followed by the verb. (‚ÄúThrow me that ball‚Äù
vs. ‚ÄúThat ball, throw it to me.‚Äù) These are commonly called verb-object and object-verb
orders, respectively. Modern user interfaces use both orders.

---

## Chunk 3266

Verb-object ordering is consistent with how commands are formed in English. As a
result, it was only logical that command-line systems mimic this structure in their syn-
tax. (For example, to remove a file in UNIX, you type rm filename.txt.)
When graphical user interfaces first emerged, it became clear that verb-object ordering

---

## Chunk 3267

created a problem. Without the rigid, formal structures of command-line idioms, graph-
ical user interfaces must use the construct of state to tie together different interactions
in a command. If the user chooses a verb, the system must then enter a state‚Äîa mode‚Äî
to indicate that it is waiting for the user to select an object to act on. In the simple case,

---

## Chunk 3268

the user then chooses a single object, and all is well. However, if the user wants to act on
more than one object, the system can know this only if the user tells it in advance how
many operands he will enter, or if the user enters a second command indicating that he
has completed his object list. These are both clumsy interactions and require users to
476 Part III: Interaction Details

---

## Chunk 3269

--- Page 507 ---
express themselves in an unnatural manner that is difficult to learn. What works just
fine in a highly structured linguistic environment falls apart in the looser universe of the
graphical user interface.
With an object-verb command order, we don‚Äôt need to worry about termination. Users
select which objects will be operated on and then indicate which verb to execute on

---

## Chunk 3270

them. The application then executes the indicated function on the selected data. A bene-
fit of this is that users can easily execute a series of verbs on the same complex selection.
A second benefit is that when the user chooses an object, the application can show only
appropriate commands. This potentially reduces the user‚Äôs cognitive load and reduces

---

## Chunk 3271

the amount of visual work required to find the command. (In a visual interface, all com-
mands should be represented visually.)
Notice that a new concept has crept into the equation‚Äîone that doesn‚Äôt exist and that
isn‚Äôt needed in a verb-object world. That new concept is called selection. Because the
identification of the objects and the verb are not part of the same interaction, we need a

---

## Chunk 3272

mechanism to indicate which operands are selected.
The object-verb model can be difficult to understand in the abstract, but selection is
an idiom that is easy to grasp and, once shown, is rarely forgotten. (Clicking an e-mail
in Outlook and deleting it, for example, quickly becomes second nature.) Explained
through the linguistic context of the English language, it doesn‚Äôt sound too useful that

---

## Chunk 3273

we must choose an object first. On the other hand, we use this model frequently in our
nonlinguistic actions. We pick up a can and then use a can opener on it.
In interfaces that don‚Äôt employ direct manipulation, such as some modal dialog boxes,
the concept of selection isn‚Äôt always needed. Dialog boxes naturally come with one of

---

## Chunk 3274

those object-list-completion commands: the OK button. Here, users may choose a func-
tion first and one or more objects second.
While object-verb orderings are more consistent with the notion of direct manipulation,
there are certainly cases where the verb-object command order is more useful or usable.
These are cases where it isn‚Äôt possible or reasonable to define the objects up front without

---

## Chunk 3275

the context of the command. An example is mapping software, where the user probably
can‚Äôt always select the address he wants to map from a list (although we should allow
this for his address book). Instead, it is most useful for him to say ‚ÄúI want to see a map for
the following address....‚Äù
Discrete and contiguous selection

---

## Chunk 3276

Selection is a pretty simple concept, but a couple of basic variants are worth discussing.
Because selection typically is concerned with objects, these variants are driven by two
broad categories of selectable data.
CH 18. Designing for the Desktop 477

---

## Chunk 3277

--- Page 508 ---
In some cases, data is represented by distinct visual objects that can be manipulated
independently of other objects. Icons on the desktop and vector objects in drawing appli-
cations are examples. These objects are also commonly selected independently of their
spatial relationships with each other. We refer to these as discrete data and to their selec-

---

## Chunk 3278

tion as discrete selection. Discrete data is not necessarily homogeneous, and discrete
selection is not necessarily contiguous.
Conversely, some applications represent data as a matrix of many small, contiguous
pieces of data. The text in a word processor or the cells in a spreadsheet are made up
of hundreds or thousands of similar little objects that together form a coherent whole.

---

## Chunk 3279

These objects are often selected in contiguous groups, so we call them contiguous data
and selection within them contiguous selection.
Both contiguous selection and discrete selection support single-click selection and
click-and-drag selection. Single-clicking typically selects the smallest useful discrete
amount, and clicking and dragging selects a larger quantity, but there are other signifi-

---

## Chunk 3280

cant differences.
There is a natural order to the text in a word processor‚Äôs document‚Äîit consists of contig-
uous data. Scrambling the order of the letters destroys the document‚Äôs sense. The char-
acters flow from the beginning to the end in a meaningful continuum, and selecting a
word or paragraph makes sense in the context of the data. Random, disconnected selec-

---

## Chunk 3281

tions generally are meaningless. Theoretically it is possible to allow a discrete, discon-
tiguous selection, such as several disconnected paragraphs. However, the user‚Äôs task of
visualizing the selections and avoiding inadvertent, unwanted operations on them is
more trouble than it‚Äôs worth.
Discrete data, on the other hand, has no inherent order. Many meaningful orders can

---

## Chunk 3282

be imposed on discrete objects, such as sorting a list of files by their modification dates.
However, the lack of a single inherent relationship means that users are likely to want
to make discrete selections, such as Ctrl+clicking multiple files that are not listed adja-
cently. Of course, users may also want to make contiguous selections based on some

---

## Chunk 3283

organizing principle (such as the old files at the bottom of that chronologically ordered
list). The utility of both approaches is evident in a vector drawing application (such as
Illustrator or PowerPoint). In some cases, the user will want to perform a contiguous
selection on objects that are close together, and in other cases, she will want to select a
single object.
mutual exclusion

---

## Chunk 3284

Typically, when a selection is made, any previous selection is unmade. This behavior is
called mutual exclusion, because the selection of one excludes the selection of the other.
478 Part III: Interaction Details

---

## Chunk 3285

--- Page 509 ---
Typically, the user clicks an object and it becomes selected. That object remains selected
until the user selects something else. Mutual exclusion is the rule in both discrete and
contiguous selection.
Some applications allow users to deselect a selected object by clicking it a second time.
This can lead to a curious condition in which nothing is selected, and there is no inser-

---

## Chunk 3286

tion point. You must decide whether this condition is appropriate for your product.
Additive selection
Mutual exclusion is often appropriate for contiguous selection because users cannot see
or know what effect their actions will have if selections can readily be scrolled off the
screen. Selecting several independent paragraphs of text in a long document might be

---

## Chunk 3287

useful, but it isn‚Äôt easily controllable. It‚Äôs also easy for users to get into situations where
they cause unintended changes because they cannot see all the data they are acting on.
Scrolling‚Äînot contiguous selection‚Äîcreates the problem, but most applications that
manage contiguous data are scrollable.
However, if there is no mutual exclusion for interactions involving discrete selection, the

---

## Chunk 3288

user can select many independent objects by clicking them sequentially, in what is called
additive selection. A list box, for example, can allow users to make as many selections as
desired and to deselect them by clicking them a second time.
Most discrete-selection systems implement mutual exclusion by default and allow

---

## Chunk 3289

additive selection only by using a modifier key. In Windows, the Shift key is used
most frequently for this task in contiguous selection; the Ctrl key is frequently used
for discrete selection. In a drawing application, for example, after you‚Äôve clicked
to select a graphical object, typically you can add another one to your selection by
Shift-clicking.

---

## Chunk 3290

Interfaces employing contiguous selection should not, generally speaking, allow addi-
tive selection (at least not without an overview mechanism to make additive selections
manageable). However, contiguous-selection interfaces do need to allow selection to be
extended. Again, modifier keys should be used. In Word, the Shift key causes everything

---

## Chunk 3291

between the initial selection and the Shift+click to be selected.
Some list boxes, as well as the file views in Windows (both examples of discrete data), do
something a bit strange with additive selection. They use the Ctrl key to implement ‚Äúnor-
mal‚Äù discrete additive selection, but then they use the Shift key to extend the selection,

---

## Chunk 3292

as if it were contiguous, not discrete data. In most cases this mapping adds confusion,
because it conflicts with the common idiom for discrete additive selection.
CH 18. Designing for the Desktop 479

---

## Chunk 3293

--- Page 510 ---
group selection
The click-and-drag operation is also the basis for group selection. For contiguous data,
it means ‚Äúextend the selection‚Äù from the mouse-down point to the mouse-up point.
This can also be modified with modifier keys. In Word, for example, Ctrl+click selects a
complete sentence, so Ctrl+drag extends the selection sentence by sentence. Sovereign

---

## Chunk 3294

applications should rightly enrich their interaction with these sorts of variants as appro-
priate. Experienced users will eventually come to memorize and use them, as long as the
variants are manually simple.
In a collection of discrete objects, the click-and-drag operation generally begins a drag-
and-drop move. If the mouse button is clicked in an area between objects, rather than

---

## Chunk 3295

on any specific object, it has a special meaning. It creates a drag rectangle, as shown in
Figure 18-17.
Figure 18-17: When the cursor is not on any particular object at
mouse-down time, the click-and-drag operation normally creates a
drag rectangle that selects any object wholly enclosed by it when the
mouse button is released. This is a familiar idiom to users of drawing

---

## Chunk 3296

applications and many word processors. This example is taken from
Windows Explorer. The rectangle has been dragged from the upper
left to the lower right.
A drag rectangle is a dynamically sizable rectangle whose upper-left corner is the mouse-
down point and whose lower-right corner is the mouse-up point. When the mouse but-

---

## Chunk 3297

ton is released, any and all objects enclosed within the drag rectangle are selected as a
group.
Visual indication of selection
Selected objects must be clearly, boldly indicated as such to users. The selected state
must be easy to spot on a crowded screen, must be unambiguous, and must not obscure
normally visible details of the object.
480 Part III: Interaction Details

---

## Chunk 3298

--- Page 511 ---
The selection state should be visually evident and unambiguous.
You must ensure that, in particular, users can easily tell which items are selected and
which are not. It‚Äôs not good enough just to be able to see that the items are different.
Keep in mind that a significant portion of the population is color-blind, so color alone is
insufficient to distinguish between selections.

---

## Chunk 3299

Historically, inversion has been used to indicate selection (such as making white pixels
black and black pixels white). Although this is visually bold, it is not necessarily very
readable, especially when it comes to full-color interfaces. Other approaches include col-
ored backgrounds, outlines, pseudo-3D depression, handles, and animated marquees.

---

## Chunk 3300

In drawing, painting, animation, and presentation applications, where users deal with
visually rich objects, it‚Äôs easy for selections to get lost. The best solution here is to add
selection indicators to the object, rather than merely indicating selection by chang-
ing any of the selected object‚Äôs visual properties. Most drawing applications take this

---

## Chunk 3301

approach, with handles: little boxes that surround the selected object, providing points
of control.
With irregularly shaped selections (such as those in an image-manipulation application
like Adobe Photoshop), handles can be confusing and get lost in the clutter. However,
there is one way to ensure that the selection will always be visible, regardless of the col-

---

## Chunk 3302

ors used: Indicate the selection by movement.
One of the first applications on the Macintosh, MacPaint, had a wonderful idiom in
which a selected object was outlined with a simple dashed line, and the dashes all moved
in synchrony around the object. The dashes looked like ants in a row; thus, this effect
earned the colorful sobriquet marching ants. Today, this is commonly called a marquee,

---

## Chunk 3303

after the flashing lights on old cinema signs that exhibited similar behavior.
Adobe Photoshop uses this idiom to show selected regions of photographs, and it works
extremely well. (Expert users can toggle it off and on with a keystroke so that they can
see their work without visual distraction.) The animation is not hard to do, although it

---

## Chunk 3304

takes some care to get it right, and it works regardless of the color mix and intensity of
the background.
Insertion and replacement
As we‚Äôve established, selection indicates on which object subsequent actions will oper-
ate. If that action involves creating or pasting new data or objects (via keystrokes or
CH 18. Designing for the Desktop 481

---

## Chunk 3305

--- Page 512 ---
a Paste command), they are somehow added to the selected object. In discrete selec-
tion, one or more discrete objects are selected, and the incoming data is handed to the
selected discrete objects, which process the data in their own ways. This may cause a
replacement action, in which the incoming data replaces the selected object. Alterna-

---

## Chunk 3306

tively, the selected object may treat the incoming data in some predetermined way. In
PowerPoint, for example, when a shape is selected, incoming keystrokes result in a text
annotation of the selected shape.
In contiguous selection, however, the incoming data always replaces the currently
selected data. When you type in a word processor or text-entry box, you replace what

---

## Chunk 3307

is selected with what you are typing. Contiguous selection exhibits a unique quirk:
The selection can simply indicate a location between two elements of contiguous data,
rather than any particular element of the data. This in-between place is called the
insertion point.
In a word processor, the caret (usually a blinking vertical line that indicates where the

---

## Chunk 3308

next character will go) indicates a position between two characters in the text, with-
out actually selecting either one. By pointing and clicking anywhere else, you can eas-
ily move the caret, but if you drag to extend the selection, the caret disappears and is
replaced by the contiguous selection of text.
Spreadsheets also use contiguous selection but implement it somewhat differently than

---

## Chunk 3309

word processors do. The selection is contiguous because the cells form a contiguous
matrix of data, but there is no concept of selecting the space between two cells. In the
spreadsheet, a single click selects exactly one whole cell. There is currently no concept
of an insertion point in a spreadsheet, although the design possibilities are intriguing.

---

## Chunk 3310

(That is, select the line between the top and bottom of two vertically adjacent cells and
start typing to insert a row and fill a new cell in a single action.)
A blend of these two idioms is possible as well. In PowerPoint‚Äôs slide-sorter view,
insertion-point selection is allowed, but single slides can be selected too. If you click

---

## Chunk 3311

a slide, that slide is selected, but if you click in between two slides, a blinking inser-
tion-point caret is placed there.
If an application allows an insertion point, contiguous objects must be selected by
either clicking and dragging, or if they are part of the same logical group, by double- or
triple-clicking. Most people select text by dragging the mouse across it. This means that

---

## Chunk 3312

the user will be doing quite a bit of clicking and dragging in the normal course of using
the application, with the side effect that any drag-and-drop idiom will be more difficult
to express. You can see this in Word, where dragging and dropping text involves first
a click-and-drag operation to make the selection, and then another mouse move back

---

## Chunk 3313

into the selection to click and drag again for the actual move. To do the same thing,
Excel makes you find a special pliant zone (only a pixel or two wide) on the border of
482 Part III: Interaction Details

---

## Chunk 3314

--- Page 513 ---
the selected cell. To move a discrete selection, the user must click and drag the object
in a single motion. To relieve the click-and-drag burden of selection in word processors,
other direct-manipulation shortcuts are also implemented, like double-clicking to select
a word.
Drag and drop
Of all the direct-manipulation idioms, nothing distinguishes a WIMP interface more

---

## Chunk 3315

than the drag-and-drop operation: clicking and holding the button while moving an
object across the screen and releasing it in a meaningful location. Surprisingly, drag and
drop isn‚Äôt used as widely as we‚Äôd like to think, and it certainly hasn‚Äôt lived up to its full
potential.
In particular, the popularity of the web and the myth that web-like behavior is synony-

---

## Chunk 3316

mous with superior ease of use have set back the development of drag and drop on the
desktop. Developers have mistakenly emulated the crippled interactions of web browsers
in other, far less appropriate contexts. Luckily, as web technology has been refined, devel-
opers have been able to provide rich drag-and-drop behavior in the browser. Although

---

## Chunk 3317

this task is still somewhat challenging, it seems that there has been a resurgence in rich,
expressive command idioms for all platforms.
We might define drag and drop as ‚Äúclicking an object and moving it to a new location,‚Äù
although that definition is somewhat narrow in scope for such a broad idiom. A more
accurate description of drag and drop is ‚Äúclicking an object and moving it to imply a

---

## Chunk 3318

transformation.‚Äù
The Macintosh was the first successful system to offer drag and drop. It raised a lot of
expectations with the idiom that were never fully realized for two simple reasons. First,
drag and drop wasn‚Äôt a systemwide facility, but rather an artifact of the Finder, a single
application. Second, because the Mac was at the time a single-tasking computer, the

---

## Chunk 3319

concept of drag and drop between applications didn‚Äôt surface as an issue for many years.
To Apple‚Äôs credit, it described drag and drop in its first user-interface standards guide.
On the other side of the fence, Microsoft not only failed to put drag-and-drop aids in
its early releases of Windows but also didn‚Äôt even describe the procedure in its devel-

---

## Chunk 3320

oper documentation. However, Microsoft eventually caught up and even pioneered some
novel uses of the idiom, such as movable toolbars and dockable palettes.
Generally we use the term ‚Äúdirect manipulation‚Äù to refer to all kinds of GUI interac-
tion idioms, but drag and drop has two levels of directness. First, with true direct-

---

## Chunk 3321

manipulation idioms, dragging and dropping represents putting the object somewhere.
Examples include moving a file between two directories, opening a file in a specific
CH 18. Designing for the Desktop 483

---

## Chunk 3322

--- Page 514 ---
application (by dropping a file icon onto an application icon), or arranging objects on a
canvas in drawing applications.
The second type of drag-and-drop idiom is a little more indirect: The user drags the
object to a specific area or onto another object to perform a function. These idioms are
less popular but can be very useful. A good example of this can be found in the OS X

---

## Chunk 3323

Automator, as shown in Figure 18-18.
Figure 18-18: Apple‚Äôs Automator tool in OS X allows users to set up com-
mon workflows, such as renaming an image, that are then represented as an
icon. Users can then drag and drop files or folders onto the workflow icon to
perform the function. While strictly speaking this isn‚Äôt direct manipulation, it

---

## Chunk 3324

does provide a reasonably direct way to invoke a command.
Visual feedback for drag and drop
As we‚Äôve discussed, an interface should visually hint at its pliancy‚Äîeither statically, in
how it is drawn, or actively, by becoming animated as the cursor passes over it. The idea
that an object can be dragged is easily learned idiomatically. It is difficult for the user to

---

## Chunk 3325

forget that an icon, selected text, or other distinct object can be directly manipulated
484 Part III: Interaction Details

---

## Chunk 3326

--- Page 515 ---
after he learns the behavior. However, he may forget the details of the action, so feedback
is very important after the user clicks the object and starts dragging. The first-timer or
very infrequent user will probably also require some additional help to get started (such
as textual hints built into the interface). Forgiving interactions and Undo encourage

---

## Chunk 3327

users to try direct manipulation without trepidation.
As soon as the user clicks the mouse button with the cursor on an object, that object
becomes the source object for the duration of the drag and drop. As the user moves the
mouse around with the button held down, the cursor passes over a variety of objects. It

---

## Chunk 3328

should be obvious which of these objects are meaningful drop targets. Until the button
is released, these are called drop candidates. A drag can have only one source and one
target, but there may be many drop candidates.
The only task of each drop candidate is to visually indicate that the hotspot of the captive

---

## Chunk 3329

cursor is over it. This means that it will accept the drop‚Äîor at least comprehend it‚Äîif
the user releases the mouse button. Such an indication is, by its nature, active visual
hinting.
Drop candidates must visually indicate their receptivity.
The weakest way to offer the visual indication of receptivity to being dropped upon is by

---

## Chunk 3330

changing the cursor. It is the cursor‚Äôs primary job to represent what is being dragged. It
is best to leave indication of drop candidacy to the drop candidate itself.
The drag cursor must visually identify the source object.
It is important that these two visual functions not be confused. Unfortunately, Micro-
soft seems to have done so in Windows, with its use of cursor hinting to indicate that

---

## Chunk 3331

something is not a drop target. This decision was likely made more for the ease of coding
than for any design considerations. It is much easier to change the cursor than it is to
highlight drop candidates to show their drop receptivity. The cursor‚Äôs role is to represent
the master‚Äîthe dragged object. It should not be used to represent the drop candidate.

---

## Chunk 3332

As if that wasn‚Äôt bad enough, Microsoft performs this cursor hinting using the detestable
circle with a bar‚Äîthe universal icon for Not Permitted. This symbol is an unpleasant
idiom, because it tells users what they can‚Äôt do. It is negative feedback. The user can
easily construe its meaning to be ‚ÄúDon‚Äôt let go of the mouse now, or you‚Äôll do irreversible
CH 18. Designing for the Desktop 485

---

## Chunk 3333

--- Page 516 ---
damage‚Äù instead of ‚ÄúGo ahead and let go now; nothing will happen.‚Äù Adding the Not Per-
mitted symbol to cursor hinting is an unfortunate combination of two weak idioms and
should be avoided, regardless of what the Microsoft style guide says.
After the user finally releases the mouse button, the current drop candidate becomes

---

## Chunk 3334

the target. If the user releases the mouse button in the interstice between valid drop
candidates, or over an invalid drop candidate, there is no target, and the drag-and-drop
operation ends with no action. Silence, or visual inactivity, is a good way to indicate this
termination. It isn‚Äôt a cancelation, exactly, so there is no need to show a cancel indicator.
Indicating drag pliancy

---

## Chunk 3335

Active cursor hinting to indicate drag pliancy is problematic. In an increasingly
object-oriented world, more things can be dragged than not. A cursor flicking and
changing rapidly can be more visual distraction than help. One solution is to just assume
that things can be dragged and let users experiment. This method is reasonably success-

---

## Chunk 3336

ful in the Windows Explorer and Macintosh Finder windows. Without cursor hinting,
drag pliancy can be a hard-to-discover idiom, so you might consider building some other
indication into the interface, such as a textual hint or ToolTip-style pop-up.
After the source object is picked up and the drag operation begins, there must be some

---

## Chunk 3337

visual indication of this. The most visually rich method is to fully animate the drag oper-
ation, showing the entire source object moving in real time.
One problem is that a drag-and-drop operation can require a pretty precise pointer. For
example, the source object may be 6-centimeters square, but it must be dropped on a

---

## Chunk 3338

target that is 1-centimeter square. The source object must not obscure the target, and
because the source object is big enough to span multiple drop candidates, we need to use
a cursor hotspot to precisely indicate which candidate it will be dropped on. This means
that dragging a transparent outline or thumbnail of the object may be much better than

---

## Chunk 3339

actually dragging an exact image of the source object or data. It also means that the
dragged object can‚Äôt obscure the normal arrow cursor. The tip of the arrow is needed to
indicate the exact hotspot.
Dragging an outline also is appropriate for most repositioning, because the outline can
be moved relative to the source object, still visible in its original position.
Indicating drop candidacy

---

## Chunk 3340

As the cursor traverses the screen, carrying with it an outline of the source object, it
passes over one drop candidate after another. These drop candidates must visually
486 Part III: Interaction Details

---

## Chunk 3341

--- Page 517 ---
indicate that they are aware of being considered as potential drop targets. By visually
changing, the drop candidate alerts users that they can do something constructive with
the dropped object. (Of course, this requires that the software be smart enough to iden-
tify meaningful source-target combinations.)

---

## Chunk 3342

A point so obvious that it is difficult to see is that the only objects that can be drop can-
didates are ones that are currently visible. A running application doesn‚Äôt have to worry
about visually indicating its readiness to be a target if it isn‚Äôt visible. Usually, the num-
ber of objects occupying screen real estate is very small‚Äîa couple dozen at most. This

---

## Chunk 3343

means that the implementation burden should not be overwhelming.
Insertion targets
In some applications, the source object can be dropped into the spaces between other
objects. Dragging text in Word is such an operation, as are most reordering operations
in lists or arrays. In these cases, a special type of visual hinting is drawn on the back-

---

## Chunk 3344

ground ‚Äúbehind‚Äù the GUI objects of the application or in its contiguous data. This is an
insertion target.
Rearranging slides in PowerPoint‚Äôs slide-sorter view is a good example of this type of
drag and drop. The user can pick up a slide and drag it into a different place in the pre-
sentation. As the user drags, the insertion target (a vertical black bar that looks like a big

---

## Chunk 3345

text edit caret) appears between slides. Word, too, shows an insertion target when you
drag text. Not only is the loaded cursor apparent, but you also see a vertical dotted-line
bar showing the precise location, between characters, where the dropped text will land.
Whenever something can be dragged and dropped on the space between other objects,

---

## Chunk 3346

the application must show an insertion target. Like a drop candidate in source-target
drag and drop, the application must visually indicate where the dragged object can be
dropped.
Visual feedback at completion
If the source object is dropped onto a valid drop candidate, the appropriate operation
then takes place. A vital step at this point is visual feedback that the operation has

---

## Chunk 3347

occurred. For example, if you‚Äôre dragging a file from one directory to another, the source
object must disappear from its source and reappear in the target. If the target represents
a function rather than a container (such as a print icon), the icon must visually hint that
it received the drop and is now printing. It can do this with animation or by otherwise
changing its visual state.

---

## Chunk 3348

CH 18. Designing for the Desktop 487

---

## Chunk 3349

--- Page 518 ---
Auto-scrolling
What action should the application take when the selected object is dragged beyond the
border of the enclosing application? Of course, the object is being dragged to a new posi-
tion, but is that new position inside or outside of the enclosing application?
Take Microsoft Word, for example. When a piece of selected text is dragged outside the

---

## Chunk 3350

visible text window, is the user saying ‚ÄúI want to put this piece of text into another appli-
cation‚Äù or is he saying ‚ÄúI want to put this piece of text somewhere else in this same docu-
ment, but that place is currently scrolled off the screen‚Äù? If it‚Äôs the former, we proceed as
already discussed. But if the user desires the latter, the application must automatically

---

## Chunk 3351

scroll (auto-scroll) in the direction of the drag to reposition the selection at a distant, not
currently visible location in the same document.
Auto-scroll is a very important adjunct to drag and drop. Wherever the drop target can
possibly be scrolled offscreen, the application needs to auto-scroll.
Any scrollable drag-and-drop target must auto-scroll.

---

## Chunk 3352

In early implementations, auto-scrolling worked if you dragged outside the application‚Äôs
window. This had two fatal flaws. First, if the application filled the screen, how could you
get the cursor outside the app? Second, if you wanted to drag the object to another appli-
cation, how could the app tell the difference between that and the desire to auto-scroll?

---

## Chunk 3353

Microsoft developed an intelligent solution to this problem. Basically, it begins auto-
scrolling just inside the application‚Äôs border instead of outside the border. As the drag
cursor approaches the borders of the scrollable window‚Äîbut is still inside it‚Äîa scroll
in the direction of the drag is initiated. If the drag cursor comes within about 30 pixels

---

## Chunk 3354

of the bottom of the text area, Word begins to scroll the window‚Äôs contents upward. If
the drag cursor comes equally close to the top edge of the text area, Word scrolls down.
Thankfully, in recent times developers have commonly implemented a variable auto-
scroll rate, as shown in Figure 18-19. The automatic scrolling increases in speed as the

---

## Chunk 3355

cursor gets closer to the window edge. For example, when the cursor is 30 pixels from the
upper edge, the text scrolls down at one line per second. At 15 pixels, the text scrolls at
two lines per second, and so on. This gives the user sufficient control over the auto-scroll
to make it useful in a variety of situations.

---

## Chunk 3356

Another important detail required by auto-scrolling is a time delay. If auto-scrolling
begins as soon as the cursor enters the sensitive zone around the edges, it is too easy
for a slow-moving user to inadvertently auto-scroll. To cure this, auto-scrolling should
488 Part III: Interaction Details

---

## Chunk 3357

--- Page 519 ---
begin only after the drag cursor has been in the auto-scroll zone for a reasonable amount
of time‚Äîabout a half-second.
Fast autoscrolling zone
Medium autoscrolling zone
Slow autoscrolling zone
Figure 18-19: This image expresses the concept of variable-speed auto-scroll, as it could be
applied to Windows Explorer. Unfortunately, auto-scroll moves at a single speed that is impos-

---

## Chunk 3358

sible to control. It would be better if the auto-scroll went faster the closer the cursor gets to the
window‚Äôs edge. (But it‚Äôs also important to have a speed limit. Auto-scroll doesn‚Äôt help anyone
if it goes too fast.) To its credit, Microsoft‚Äôs idea of auto-scrolling as the cursor approaches the
inside edges of the enclosing scrollbox, rather than the outside, is clever indeed.

---

## Chunk 3359

If the user drags the cursor completely outside Word‚Äôs scrollable text window, no
auto-scrolling occurs. Instead, the repositioning operation terminates in an application
other than Word. For example, if the drag cursor goes outside Word and is positioned
over PowerPoint, when the user releases the mouse button, the selection is pasted into

---

## Chunk 3360

the PowerPoint slide at the position indicated by the mouse. Furthermore, if the drag
cursor moves within 3 or 4 millimeters of any of the borders of the PowerPoint Edit win-
dow, PowerPoint begins auto-scrolling in the appropriate direction. This is a convenient
feature, because the confines of contemporary screens mean that we often find ourselves

---

## Chunk 3361

with a loaded drag cursor and no place to drop its contents.
Avoiding drag-and-drop twitchiness
When an object can be either selected or dragged, it is vital that the mouse be biased
toward the selection operation. Because it is so difficult to click something without inad-
vertently moving the cursor a pixel or two, the frequent act of selecting something must

---

## Chunk 3362

not accidentally cause the application to misinterpret the action as the beginning of a
drag-and-drop operation. Users rarely want to drag an object only one or two pixels.
(And even in cases where they do, such as in drawing applications, it‚Äôs useful to require a
little extra effort to do so, to prevent frequent accidental repositioning.)
CH 18. Designing for the Desktop 489

---

## Chunk 3363

--- Page 520 ---
In the hardware world, controls like pushbuttons that have mechanical contacts can
exhibit what engineers call bounce. This means that the switch‚Äôs tiny metal contacts
literally bounce when someone presses them. For electrical circuits like doorbells, the
milliseconds the bounce takes aren‚Äôt meaningful, but in modern electronics, those

---

## Chunk 3364

extra clicks can be significant. The circuitry backing up such switches has special logic
to ignore extra transitions if they occur within a few milliseconds of the first one. This
keeps your stereo from turning back off a thousandth of a second after you turned it on.
This situation is analogous to the oversensitive mouse problem. The solution is to copy
switch makers and debounce the mouse.

---

## Chunk 3365

To avoid inadvertent repositioning, applications should establish a drag threshold. All
mouse-movement messages that arrive after the mouse-down event are ignored unless
the movement exceeds a small threshold amount, such as 3 pixels. This provides some
protection against initiating an inadvertent drag operation. If the user can keep the

---

## Chunk 3366

mouse button within 3 pixels of the mouse-down point, the entire click action is inter-
preted as a selection command, and all tiny, spurious moves are ignored. As soon as the
mouse moves beyond the 3-pixel threshold, the application can confidently change the
operation into a drag, as shown in Figure 18-20. Whenever an object can be selected and
dragged, the drag operation should be debounced.

---

## Chunk 3367

Mouse-down
coordinate 6 px
Uncommitted zone,
interpret as selection
6 px
Figure 18-20: Any object that can be both selected and dragged must be debounced. When
the user clicks the object, the action must be interpreted as a selection rather than a drag,
even if the user accidentally moves the mouse a pixel or two between the click and the

---

## Chunk 3368

release. The application must ignore any mouse movement as long as it stays within the
uncommitted zone, which extends 3 pixels in each direction. After the cursor moves more
than 3 pixels from the mouse-down coordinate, the action changes to a drag, and the object
is considered ‚Äúin play.‚Äù This is called a drag threshold.
490 Part III: Interaction Details

---

## Chunk 3369

--- Page 521 ---
Debounce all drags.
Some applications may require more-complex drag thresholds. Three-dimensional appli-
cations often require drag thresholds that enable movement in three projected axes on
the screen. Another such example arose in the design of a report generator for one of our
clients. The user could reposition columns on the report by dragging them horizontally.

---

## Chunk 3370

For example, he could put the First Name column to the left of the Last Name column
by dragging it into position from anywhere in the column. This was by far the most fre-
quently used drag-and-drop idiom. However, another infrequently used drag operation
allowed the values in one column to be interspersed vertically with the values of another

---

## Chunk 3371

column‚Äîfor example, an address field and a state field (see Figure 18-21).
Name Address City
1 Ginger Beef 342 Easton Lane Waltham
2 C.U. Lator 339 Disk Drive Borham
3 Justin Case 83 Elm Alboin
4 Creighton Barrel 9348 N. Blenheim Five Island
5 Dewey Decimal 1003 Water St. Freeport
Name Address
1 Ginger Beef 342 Easton Lane
Waltham
2 C. U. Lator 339 Disk Drive
Borham
3 Justin Case 83 Elm
Alboin

---

## Chunk 3372

4 Creighton Barrel 9348 N. Blenheim
Five Island
5 Dewey Decimal 1003 Water St.
Freeport
Figure 18-21: This report-generator application offered an interesting feature that
enabled the contents of one column to be interspersed with the contents of another
by dragging and dropping it. This direct-manipulation action conflicted with the

---

## Chunk 3373

more-frequent drag-and-drop action of reordering the columns (like moving City to
the left of Address). We used a special two-axis drag threshold to accomplish this.
CH 18. Designing for the Desktop 491

---

## Chunk 3374

--- Page 522 ---
We wanted to follow the persona‚Äôs mental model and enable him to drag the values of
one column on top of the values of another to perform this stacking operation. However,
this conflicted with the simple horizontal reordering of columns. We solved the problem
by differentiating between horizontal drags and vertical drags. If the user dragged the

---

## Chunk 3375

column left or right, it meant that he was repositioning the column as a unit. If the user
dragged the column up or down, it meant that he was interspersing the values of one
column with the values of another.
Because the horizontal drag was the predominant user action, and vertical drags were
rare, we biased the drag threshold toward the horizontal axis. Instead of a square

---

## Chunk 3376

uncommitted zone, we created the spool-shaped zone shown in Figure 18-22. Because
the horizontal-motion threshold was set to 4 pixels, it didn‚Äôt take a big movement to
commit users to the normal horizontal move while still insulating users from an inad-
vertent vertical move. To commit to the far less frequent vertical move, the user had to

---

## Chunk 3377

move the cursor 8 pixels on the vertical axis without deviating more than 4 pixels left or
right. That motion is quite natural and easily learned.
Commit to vertical move
Mouse-down
coordinate 16 px
Commit to
horizontal move
Uncommitted zone
8 px
Figure 18-22: This spool-shaped drag threshold allowed a bias toward horizon-

---

## Chunk 3378

tal dragging in a client‚Äôs application. Horizontal dragging was by far the most
frequently used type of drag in this application. This drag threshold made it
difficult for the user to inadvertently begin a vertical drag. However, if the user
really wanted to drag vertically, a bold move either up or down would cause
the application to commit to the vertical mode with a minimum of excise.

---

## Chunk 3379

This axially asymmetric threshold can be used in other ways, too. Visio implements a
similar idiom to differentiate between drawing a straight line and a curved line.
492 Part III: Interaction Details

---

## Chunk 3380

--- Page 523 ---
Fine scrolling
The weakness of the mouse as a precision pointing tool is readily apparent, particularly
when dragging objects around in drawing applications. It is hard to drag something to
the exact desired spot, especially when the screen resolution is 72 pixels per inch (or
sometimes much more) and the mouse is running at a 6-to-1 ratio to the screen. To move

---

## Chunk 3381

the cursor 1 pixel, you must move the mouse about 1/500th of an inch.
This is solved by adding a fine scrolling function, whereby users can quickly shift into a
mode that allows much finer resolution for mouse-based manipulation of objects. During
a drag, if the user decides that he needs more-precise maneuvering, he can change the

---

## Chunk 3382

ratio of the mouse‚Äôs movement to the object‚Äôs movement on the screen. Any application
that might demand precise alignment must offer a fine scrolling facility. This includes,
at a minimum, all drawing and painting, presentation, and image-manipulation appli-
cations. This idiom has several variants. Commonly, using a modifier key while dragging

---

## Chunk 3383

puts the mouse into vernier mode, in which every 10 pixels of mouse movement are inter-
preted as a single pixel of object movement.
Any program application that demands precise alignment must offer a vernier.
Another effective method is to make the arrow keys active during a drag operation.
While holding down the mouse button, the user can manipulate the arrow keys to move

---

## Chunk 3384

the selection up, down, left, or right‚Äî1 pixel at a time. The drag operation is still termi-
nated by releasing the mouse button. Many pixel-pushing applications like Adobe Pho-
toshop let users move selections by single pixels with the arrow keys, and by 10x the
standard amount when modified with a Shift key.

---

## Chunk 3385

The problem with a vernier is that the simple act of releasing the mouse button can often
cause the user‚Äôs hand to shift a pixel or two. This causes the perfectly placed object to
slip out of alignment just at the moment of acceptance. The solution is, upon receipt of
the first vernier keystroke, to desensitize the mouse. You do so by making the mouse

---

## Chunk 3386

ignore all subsequent movements under some reasonable threshold, such as 5 pixels.
This means that the user can make the initial gross movements with the mouse; and
then make a final, precise placement with the arrow keys; and then release the mouse
button without disturbing the placement. If the user wants to make additional gross

---

## Chunk 3387

movements after beginning the vernier, he simply moves the mouse beyond the thresh-
old, and the system shifts back out of vernier mode.
If the arrow keys are not otherwise spoken for in the interface, as in a drawing applica-
tion, they can be used to control vernier movement of the selected object. This means that

---

## Chunk 3388

the user does not have to hold down the mouse button. Adobe Illustrator and Photoshop
CH 18. Designing for the Desktop 493

---

## Chunk 3389

--- Page 524 ---
do this, as does PowerPoint. In PowerPoint, the arrow keys move the selected object one
step on the grid‚Äîabout 2 millimeters using the default grid settings. If you hold down
the Alt key while using the arrow keys, the movement is 1 pixel per arrow keystroke.
Control manipulation
Controls are the fundamental building blocks of the modern graphical user interface.

---

## Chunk 3390

While we discuss the topic in detail in Chapter 21, in our current discussion of direct
manipulation it is worth addressing the mouse interactions required by several controls.
Many controls, particularly menus, require the moderately difficult motion of a click
and drag rather than a mere click. This direct-manipulation operation demands more of

---

## Chunk 3391

users because of its juxtaposition of fine motions with gross motions to click, drag, and
then release the mouse button. Although menus are not used as frequently as toolbar
controls, they are still used often, particularly by new and infrequent users. Thus, we find
one of the more intractable conundrums of GUI design: The menu is the primary control

---

## Chunk 3392

for beginners, yet it is one of the more difficult controls to operate.
There is no solution to this problem other than to provide additional idioms to accom-
plish the same task. If a function is available from the menu, and it is one that will be
used more than just rarely, be sure to provide idioms for invoking the function that don‚Äôt

---

## Chunk 3393

require a click-and-drag operation, such as a toolbar button.
One nice feature in Windows, which Mac OS has also adopted, is the ability to work its
menus with a series of single clicks rather than clicking and dragging. You click the menu,
and it drops. You point to the desired item, click to select it, and close the menu. Microsoft

---

## Chunk 3394

further extended this idea by putting applications into a sort of menu mode as soon as you
click any menu. In this mode, all the top-level menus in the application and all the items
on those menus are active, just as though you were clicking and dragging. As you move
the mouse around, each menu, in turn, drops without your having to click the mouse.
modal tools and palettes

---

## Chunk 3395

With modal tools, the user selects a tool from a tool palette, as discussed earlier in this
chapter. The application‚Äôs display area is then completely in that tool‚Äôs mode: It does only
that one tool‚Äôs job. The cursor usually changes to indicate the active tool.
When the user clicks and drags with the tool on the drawing area, the tool does its thing.

---

## Chunk 3396

If the active tool is a spray can, for example, the application enters Spray Can mode, and
it can only spray. The tool can be used repeatedly, spraying as much ink as the user wants
until he clicks a different tool. If the user wants to use some other tool on the graphic,
like an eraser, he must return to the toolbox and select the eraser tool. The application
494 Part III: Interaction Details

---

## Chunk 3397

--- Page 525 ---
then enters Eraser mode, and on the canvas, the cursor erases things only until the user
chooses another tool. There is usually a selection-cursor tool on the palette to let the user
return the cursor to a selection-oriented pointer, as in Adobe Photoshop, for example.
Modal tools work for tools that perform actions on drawings, such as an eraser, or for

---

## Chunk 3398

shapes that can be drawn, such as ellipses. The cursor can become an eraser tool and
erase anything previously entered, or it can become an ellipse tool and draw any num-
ber of new ellipses. The mouse-down event anchors a corner or center of the shape (or its
bounding box), the user drags to stretch the shape to the desired size and aspect, and the
mouse-up event confirms the draw.

---

## Chunk 3399

Modal tools are not bothersome in an application like Paint, where the number of draw-
ing tools is very small. In a more advanced drawing application, such as Adobe Photo-
shop, however, the modality is disruptive. As users get more agile with the cursor and
tools, the percentage of time and motion devoted to selecting and deselecting tools‚Äîthe

---

## Chunk 3400

excise‚Äîincreases dramatically. Modal tools are excellent idioms for introducing users
to the range of features of such an application, but they usually don‚Äôt scale well for inter-
mediate users of more sophisticated applications. Luckily, Photoshop makes extensive
use of keyboard commands for power users.
The difficulty of managing a modal tool application isn‚Äôt caused by the modality as much

---

## Chunk 3401

as it is by the sheer quantity of tools. More precisely, the efficiencies break down when
the quantity of tools in the user‚Äôs working set gets too large. A working set of more than
a handful of modal tools tends to become hard to manage. If the number of necessary
tools in Adobe Illustrator could be reduced from 24 to eight, for example, its user inter-

---

## Chunk 3402

face problems might diminish below the threshold of user pain.
To compensate for the profusion of modal tools, products like Adobe Illustrator use mod-
ifier keys to modify the various modes. The Shift key is commonly used for constrained
drags, but Illustrator adds many nonstandard modifier keys and uses them in nonstandard

---

## Chunk 3403

ways. For example, holding down the Alt key while dragging an object drags away a copy
of that object, but the Alt key is also used to promote the selector tool from single-vertex
selection to object selection. The distinction between these uses is subtle: If you click some-
thing and then hold down the Alt key, you drag away a copy of it. Alternatively, if you hold

---

## Chunk 3404

down the Alt key and then click something, you select all of it, rather than a s ingle vertex of
it. But then, to further confuse matters, you must release the Alt key, or you will drag away
a copy of the entire object. To do something as simple as selecting an entire object and
dragging it to a new position, you must hold down the Alt key, point to the object, click and

---

## Chunk 3405

hold down the mouse button without moving the mouse, release the Alt key, and then drag
the object to the desired position! What were these people thinking?
Admittedly, the possible combinations are powerful, but they are hard to learn, hard to
remember, and hard to use. If you are a graphic arts professional working with Illustrator
CH 18. Designing for the Desktop 495

---

## Chunk 3406

--- Page 526 ---
for eight hours a day, you can turn these shortcomings into benefits in the same way that
a race car driver can turn the cantankerous behavior of a finely tuned automobile into
an asset on the track. The casual user of Illustrator, however, is like an average driver
behind the wheel of an IndyCar: way out of his league with a temperamental and unsuit-
able tool.

---

## Chunk 3407

Charged cursor tools
With charged cursor tools, users again select a tool or shape from a palette. But this time,
rather than switching permanently (until the user switches again) to the selected tool,
the cursor becomes loaded‚Äîor charged‚Äîwith a single instance of the selected object.
When the user clicks in the drawing area, an instance of the object is created on the

---

## Chunk 3408

screen at the mouse-up point. The charged cursor doesn‚Äôt work too well for functions
(even though Microsoft uses it ubiquitously for its Format Painter function), but it is
nicely suited for graphic objects. PowerPoint, for example, uses it extensively. The user
selects a rectangle from the graphics palette, and the cursor then becomes a modal rec-
tangle tool charged with exactly one rectangle.

---

## Chunk 3409

In many charged cursor applications like PowerPoint, the user cannot always deposit the
object with a simple click. Instead, she must drag a bounding rectangle to determine the
size of the deposited object. Some applications, like Visual Basic, allow either method.
A single click of a charged cursor creates a single instance of the object in a default size.

---

## Chunk 3410

The new object is created in a state of selection, surrounded by handles (which we‚Äôll dis-
cuss in the section ‚ÄúResizing and Reshaping‚Äù) and ready for immediate precision reshap-
ing and resizing. This dual mode, allowing either a single click for a default-sized object
or dragging a rectangle for a custom-sized object, is certainly the most flexible and dis-

---

## Chunk 3411

coverable method that will satisfy the most users.
Sometimes charged-cursor applications forget to change the cursor‚Äôs appearance. For
example, although Visual Basic changes the cursor to crosshairs when it‚Äôs charged, D elphi
doesn‚Äôt change it at all. If the cursor has assumed a modal behavior‚Äîif clicking it some-

---

## Chunk 3412

where will create something‚Äîit is important that it visually indicate this state. A charged
cursor also demands good cancel idioms. Otherwise, how do you harmlessly discharge
the cursor? Pressing the Esc key is one widely used and effective discharge idiom.
2D object manipulation
Like controls, data objects on the screen, particularly 2D graphical objects in drawing

---

## Chunk 3413

and modeling applications, can be manipulated by clicking and dragging. Objects (other
than icons, which were discussed earlier in this chapter) depend on click-and-drag
motions for four main operations: repositioning, resizing, reshaping, and connecting.
496 Part III: Interaction Details

---

## Chunk 3414

--- Page 527 ---
repositioning
Repositioning is the simple act of clicking an object and dragging it to a new location.
The most significant design issue regarding repositioning is that it usurps the place of
other direct-manipulation idioms. The repositioning function demands the click-and-
drag action, making it unavailable for other purposes. This is not an issue for content in

---

## Chunk 3415

an application, since the direct manipulation is a likely intention of a drag and drop, but
it can mean problems for objects in the interface.
The most common solution to this conflict is to dedicate a specific physical area of the
object to the repositioning function. For example, you can reposition a window in Win-

---

## Chunk 3416

dows or on the Macintosh by clicking and dragging its title bar. The rest of the window is
not pliant for repositioning, so the click-and-drag idiom is available for functions within
the window, as you would expect. The only hints that the window can be dragged are
its color and the slight dimensionality of the title bar, a subtle visual hint that is purely

---

## Chunk 3417

idiomatic. (Thankfully, the idiom is very effective.)
In general, however, you should provide more explicit visual hinting about an area‚Äôs pli-
ancy. For a title bar, you could use cursor hinting or a gripable texture as a pliancy hint.
Before you move an object, you must select it. This is why selection must take place on

---

## Chunk 3418

the mouse-down transition: The user can drag without having to first click and release
an object to select it, and then click and drag it to reposition it. It feels so much more nat-
ural to simply click it and then drag it to where you want it in one easy motion.
This creates a problem for moving contiguous data. In Word, for example, Microsoft uses

---

## Chunk 3419

this clumsy click-wait-click operation to drag chunks of text. You must click and drag to
select a section of text, wait a second or so and click, and then drag to move it. This is
unfortunate, but there is no good alternative for contiguous selection. If Microsoft were
willing to dispense with its modifier key idioms for extending the selection, those same

---

## Chunk 3420

modifier keys could be used to select a sentence and drag it in a single movement. But
this still wouldn‚Äôt solve the problem of selecting and moving arbitrary chunks of text.
When you do repositioning, a modifier key (such as Shift) is often used to constrain the
drag to a single dimension (either horizontal or vertical). This type of drag is called a

---

## Chunk 3421

constrained drag. Constrained drags are extremely helpful in drawing applications, par-
ticularly when you draw neatly organized diagrams. The predominant motion of the first
5 or 10 pixels of the drag determines the angle of the drag. If the user begins dragging on
a predominantly horizontal axis, for example, the drag henceforth is constrained to the

---

## Chunk 3422

horizontal axis. Some applications interpret constraints differently, letting users shift
angles in mid-drag by dragging the mouse across a threshold.
CH 18. Designing for the Desktop 497

---

## Chunk 3423

--- Page 528 ---
Another way to assist users as they move objects around onscreen is by providing guides.
In the most common implementations (such as in Adobe Illustrator), they are special
lines that the user may place as references to be used when positioning objects. Com-
monly, the user may tell the application to ‚Äúsnap‚Äù to the guides. This means that if an

---

## Chunk 3424

object is dragged within a certain distance of the guide, the application will assume
that it should be aligned directly with the guide. Typically this can be overridden with a
keyboard nudge.
A novel and useful variation on this concept is OmniGraffle‚Äôs Smart Guides. They provide
dynamic visual feedback on and assistance with positioning objects. This is based on

---

## Chunk 3425

the (very reasonable) assumption that users are likely to want to align objects to each
other and to create evenly spaced rows and columns of these aligned objects. Google‚Äôs
SketchUp (described in greater detail later in the chapter) provides similar help with
three-dimensional sketches.
resizing and reshaping
When it comes to windows in a GUI, there isn‚Äôt really any functional difference between

---

## Chunk 3426

resizing and reshaping. The user can adjust a window‚Äôs size and aspect ratio at the same
time by dragging a control on a window‚Äôs lower-right corner. It is also possible to drag
any window edge. These interactions typically are supported by clear cursor hinting.
Such idioms are appropriate for resizing windows. But when the object to be resized is a

---

## Chunk 3427

graphical element (as in a drawing or modeling application), it is important to commu-
nicate clearly which object is selected and where the user must click to resize or reshape
the object. A resizing idiom for graphical objects must be visually bold to differentiate
itself from parts of the drawing, especially the object it controls. It also must not obscure

---

## Chunk 3428

the user‚Äôs view of the object and the area around it. The resizer also must not obscure the
resizing action.
A popular set of idioms accomplishes these goals; Shown in Figure 18-23, they are called
resize handles (or, simply, handles). Handles serve double-duty because they can also
indicate selection. This is a naturally symbiotic relationship, because an object usually

---

## Chunk 3429

must be selected to be resizable.
The handle centered on each side moves only that side, while the other sides remain
motionless. The handles on the corners simultaneously move both the sides they touch,
an interaction that is quite visually intuitive.
Handles tend to obscure the object they represent, so they don‚Äôt make very good per-

---

## Chunk 3430

manent controls. This is why we don‚Äôt see them on top-level resizable windows. For that
situation, frame or corner resizers are better idioms. If the selected object is larger than
498 Part III: Interaction Details

---

## Chunk 3431

--- Page 529 ---
the screen, the handles may not be visible. If they are hidden offscreen, not only are they
unavailable for direct manipulation, but they are also useless as selection indicators.
Figure 18-23: The selected object has eight handles, one at each corner and one
centered on each side. The handles indicate selection and are a convenient idiom for

---

## Chunk 3432

resizing and reshaping the object. Handles are sometimes implemented with pixel
inversion, but in a multicolor universe they can get lost in the clutter. These handles
from Microsoft PowerPoint 2010 feature a small amount of dimensional rendering to
help them stand out on the slide. Non-rectangular objects display their drag handles in
a rectangular bounding box around the object.

---

## Chunk 3433

As with dragging, a modifier key is often used to constrain the direction of a resize inter-
action. Another example of a constrained drag idiom, Shift is again used to force the
resize to maintain the object‚Äôs original aspect ratio. This can be quite useful. In some
cases, it‚Äôs also useful to constrain the resize to either a vertical, horizontal, or locked
aspect ratio.

---

## Chunk 3434

Notice that the assumption in this discussion of handles is that the object in question
is rectangular or can be easily bounded by a rectangle. If the user is creating an organi-
zation chart, this may be fine, but what about reshaping more complex objects? A very
powerful and useful variant of the resize handle is a vertex handle.

---

## Chunk 3435

Many applications draw objects on the screen with polylines. A polyline is a graphics
developer‚Äôs term for a multisegment line defined by an array of vertices. If the last seg-
ment connects back to the first vertex, it is a closed form, and the polyline forms a poly-
gon. When the object is selected, the application, rather than placing eight handles as
CH 18. Designing for the Desktop 499

---

## Chunk 3436

--- Page 530 ---
it does on a rectangle, places one handle on top of every vertex of the polyline. The user
can then drag any vertex of the polyline independently and actually change one small
aspect of the object‚Äôs internal shape rather than affecting it as a whole. This is shown in
Figure 18-24.
Figure 18-24: These are vertex handles, so named because each ver-

---

## Chunk 3437

tex of the polygon has one handle. The user can click and drag any
handle to reshape the polygon, one segment at a time. This idiom is
primarily useful for drawing applications.
Freeform objects in PowerPoint are rendered with polylines. If you click a freeform object,
it is given a bounding rectangle with the standard eight handles. If you right-click the

---

## Chunk 3438

freeform object and choose Edit Points from the context menu, the bounding rectangle
disappears, and vertex handles appear instead. It is important that both these idioms
are available. The former is necessary to scale the image in proportion, and the latter is
necessary to fine-tune the shape.
If the object in question is curved, rather than a collection of straight lines, the best

---

## Chunk 3439

mechanism to allow for reshaping is the B√©zier handle. Like a vertex of a polyline, it
expresses a point on the object, but it also expresses the shape of the curve at the point.
B√©zier curves require a good deal of skill to operate effectively and are probably best
reserved for specialized drawing and modeling applications.
Connecting

---

## Chunk 3440

A direct-manipulation idiom that can be very powerful in some applications is c onnection.
The user clicks and drags from one object to another. But instead of dragging the first
500 Part III: Interaction Details

---

## Chunk 3441

--- Page 531 ---
object onto the second, a connecting line or arrow is drawn from the first object to the
second.
If you use project management or organization chart applications, you are undoubtedly
familiar with this idiom. For example, to connect one task box in a project manager‚Äôs
network diagram (often called a PERT chart) with another, you click and drag an arrow

---

## Chunk 3442

between them. In this case the direction of the connection is significant: The task where
the mouse button went down is the from task, and the task where the mouse button is
released is the to task.
As a connection is dragged between objects, it provides visual feedback in the form of
rubber-banding: The arrow forms a line that extends from the first object to the current

---

## Chunk 3443

cursor position. The line is animated, following the movement of the cursor with one end
while remaining anchored at its other end. As the user moves the cursor over connection
candidates, cursor hinting should suggest that the two objects may be connected. After
the user releases the mouse button over a valid target, the application draws a more

---

## Chunk 3444

permanent line or arrow between the two objects. In some applications, it also links the
objects logically. As with drag and drop, it‚Äôs vital to provide a convenient means of can-
celing the action, such as the Esc key or chord-clicking.
Connections can also be full-fledged objects themselves, with reshape handles and edit-

---

## Chunk 3445

able properties. This sort of implementation would mean connections could be inde-
pendently selected, moved, and deleted as well. For applications where connections
between objects need to contain information (such as in a project-planning application),
it makes sense for connections to be first-class citizens.
Connection doesn‚Äôt require as much cursor hinting as other idioms do because the

---

## Chunk 3446

rubber-banding effect is so clearly visible. However, it would be a big help in applications
where objects are adjacent and connected logically, to show which currently pointed-to
objects are valid targets for the arrow. In other words, if the user drags an arrow until it
points to some icon or widget on the screen, how can he tell if that icon or widget can be

---

## Chunk 3447

connected to? The answer is to have the potential drop target visually hint at its pliancy.
This hinting for potential targets can be quite subtle, or even eschewed completely when
all objects in the application are equally valid targets for any connection. Target objects
should always highlight, however, when a connection is dragged over them, to indicate
willingness to accept the connection.

---

## Chunk 3448

3D object manipulation
Working with precision on three-dimensional objects presents considerable interaction
challenges for users equipped with 2D input devices and displays. Some of the most inter-
esting research in UI design involves trying to develop better paradigms for 3D input
CH 18. Designing for the Desktop 501

---

## Chunk 3449

--- Page 532 ---
and control. So far, however, there seem to be no real revolutions‚Äîmerely evolutions of
2D idioms extended into the world of 3D.
Most 3D applications are concerned with either precision drafting (for example, archi-
tectural CAD) or 3D animation. When models are being created, animation presents

---

## Chunk 3450

problems similar to those of drafting. An additional layer of complexity is added, how-
ever, in making these models move and change over time. Often, animators create mod-
els in specialized applications and then load these models into different animation tools.
There is such a depth of information about 3D-manipulation idioms that an entire chap-

---

## Chunk 3451

ter or even an entire book could be written about them. We will thus only briefly address
some of the broader issues of 3D object manipulation.
Display issues and idioms
Perhaps the most significant issue in 3D interaction on a 2D screen is the lack of paral-
lax, the binocular ability to perceive depth. Without resorting to expensive, esoteric gog-

---

## Chunk 3452

gle peripherals, designers are left with a small bag of tricks with which to conquer this
problem. Another important issue is one of occlusion: near objects obscuring far objects.
These navigational issues, along with some of the input issues discussed later, are proba-
bly a large part of the reason virtual reality hasn‚Äôt yet become the GUI of the future.
multiple viewpoints

---

## Chunk 3453

Use of multiple viewpoints is perhaps the oldest method of dealing with both of these
issues, but it is, in many ways, the least effective from an interaction standpoint. None-
theless, most 3D modeling applications present multiple views on the screen, each dis-
playing the same object or scene from a different angle. Typically, there is a top view, a

---

## Chunk 3454

front view, and a side view, each aligned on an absolute axis, which can be zoomed in or
out. There is also usually a fourth view‚Äîan orthographic or perspective projection of the
scene, the precise parameters of which the user can adjust. When these views are pro-
vided in completely separate windows, each with its own frame and controls, this idiom

---

## Chunk 3455

becomes quite cumbersome: Windows invariably overlap each other, getting in each
others‚Äô way, and valuable screen real estate is squandered with repetitive controls and
window frames. A better approach is to use a multipane window that permits one-, two-,
three-, and four-pane configurations (the three-pane configuration has one big pane

---

## Chunk 3456

and two smaller panes). Configuration of these views should be as close to single-click
actions as possible, using a toolbar or keyboard shortcut.
The shortcoming of multiple viewpoint displays is that they require users to look in sev-
eral places at the same time to figure out an object‚Äôs position. Forcing the user to locate

---

## Chunk 3457

something in a complex scene by looking at it from the top, side, and front, and then
expecting him to triangulate in his head in real time, is a bit much to expect, even from
502 Part III: Interaction Details

---

## Chunk 3458

--- Page 533 ---
modeling whizzes. Nonetheless, multiple viewpoints are helpful for precisely aligning
objects along a particular axis.
baseline grids, depthcueing, shadows, and poles
Baseline grids, depthcueing, shadows, and poles are idioms that help get around some
of the problems created by multiple viewpoints. The idea behind these idioms is to allow

---

## Chunk 3459

users to successfully perceive the location and movement of objects in a 3D scene pro-
jected in an orthographic or perspective view.
Baseline grids provide virtual floors and walls to a scene, one for each axis, which orient
users. This is especially useful when (as is usually the case) the camera viewpoint can be
freely rotated.

---

## Chunk 3460

Depthcueing is a means by which objects deeper in the field of view appear dimmer. This
effect typically is continuous, so even a single object‚Äôs surface will exhibit depthcueing,
giving useful clues about its size, shape, and extent. Depthcueing, when used on grids,
helps disambiguate the orientation of the grid in the view.

---

## Chunk 3461

One method used by some 3D applications to position objects is the idea of shadows‚Äî
outlines of selected objects projected onto the grids as if a light is shining perpendicular
to each grid. As the user moves the object in 3D space, she can track, by virtue of these
shadows or silhouettes, how she is moving (or sizing) the object in each dimension.

---

## Chunk 3462

Shadows work pretty well, but all those grids and shadows can get in the way visually.
An alternative is the use of a single floor grid and a pole. Poles work in conjunction with
a horizontally oriented grid. When the user selects an object, a vertical line extends from
the center of the object to the grid. As she moves the object, the pole moves with it, but

---

## Chunk 3463

the pole remains vertical. The user can see where in 3D space she is moving the object by
watching where the base of the pole moves on the surface of the grid (x- and y-axes) and
also by watching the length and orientation of the pole in relation to the grid (z-axis).
guidelines and other rich visual hints
The idioms described in the previous section are all examples of rich visual modeless feed-

---

## Chunk 3464

back, which we will discuss in detail in Chapter 15. However, for some applications, lots of
grids and poles may be overkill. For example, Google‚Äôs SketchUp is an architectural sketch-
ing application that lets users lay down their own drafting lines using a tape measure and
protractor. As they draw their sketches, they get color-coded hinting that keeps them ori-

---

## Chunk 3465

ented to the right axes. Users can also turn on a blue-gradient sky and a ground color to
help keep them oriented. Because the application is focused on architectural sketching,
not general-purpose 3D modeling or animation, the designers were able to pull off a spare,
powerful, and simple interface that is easy to both learn and use (see Figure 18-25).
CH 18. Designing for the Desktop 503

---

## Chunk 3466

--- Page 534 ---
Figure 18-25: SketchUp is a gem of an application that combines powerful 3D architectural sketch-
ing capability with smooth interaction, rich feedback, and a manageable set of design tools. Users
can set sky color and real-world shadows according to location, orientation, and time of day and year.

---

## Chunk 3467

These help not only in presentation but also in orienting users. Users also can lay down 3D grid and
measurement guides just as in a 2D sketching application. Camera rotate and zoom functions are
cleverly mapped to the mouse scroll wheel, allowing fluid access while using other tools. ToolTips
provide textual hints that help users draw lines and align objects.
wireframes and bounding boxes

---

## Chunk 3468

Wireframes and bounding boxes solve problems of object visibility. In the days of slower
processors, all objects needed to be represented as wireframes, because computers
weren‚Äôt fast enough to render solid surfaces in real time. It is fairly common these days
for modeling applications to render a rough surface for selected objects while leaving

---

## Chunk 3469

unselected objects as wireframes. Transparency would also work, but it can be very
processor-intensive. In highly complex scenes, it is sometimes necessary or desirable,
but not ideal, to render only the bounding boxes of unselected objects.
Input issues and idioms
3D applications use many idioms such as drag handles and vertex handles that have

---

## Chunk 3470

been adapted from 2D to 3D. However, some special issues surround 3D input.
504 Part III: Interaction Details

---

## Chunk 3471

--- Page 535 ---
Drag thresholds
One of the fundamental problems with direct manipulation in a 2D projection of a 3D
scene is the problem of translating 2D cursor motions in the plane of the screen into a
more meaningful movement in the virtual 3D space.
In a 3D projection, a different kind of drag threshold is required to differentiate between

---

## Chunk 3472

movement along three, not just two, axes. Typically, up and down mouse movements
translate into movement along one axis, whereas 45-degree-angle drags are used for
each of the other two axes. SketchUp provides color-coded hinting in the form of dotted
lines when the user drags parallel to a particular axis, and it also hints with T oolTips.

---

## Chunk 3473

In a 3D environment, rich feedback in the form of a cursor and other types of hinting
becomes a necessity.
The picking problem
The other significant problem in 3D manipulation is known as the picking problem.
Because objects need to be in wireframe or need to be otherwise transparent when
assembling scenes, it becomes difficult to know which of many overlapping items the

---

## Chunk 3474

user wants to select when she mouses over it. Locate highlighting can help but is insuf-
ficient because the object may be completely occluded by others. Group selection is even
trickier.
Many 3D applications resort to less-direct techniques, such as an object list or object
hierarchy that users can select from outside of the 3D view. Although this kind of inter-

---

## Chunk 3475

action has its uses, there are more direct approaches.
One obvious approach is to let users type in or speak the name of the object they wish
to select. If there‚Äôs only one cube in the scene, it‚Äôs easy for the system to distinguish.
Another might be by attribute. ‚ÄúSelect the green shape.‚Äù If the user has bothered to name

---

## Chunk 3476

objects in the interface, their unique ID could also be used. Since most 3D manipulations
are performed with the mouse, though, this forces a bit of mode-shifting that is less than
ideal. There are more mouse-centric ways to handle it.
For example, hovering over part of a scene could open a ToolTip-like menu that lets users

---

## Chunk 3477

select one or more overlapping objects. (This menu would be unnecessary in the simple
case of one unambiguous object.) If individual facets, vertices, or edges can be selected,
each should hint at its pliancy as the mouse rolls over it.
Although it doesn‚Äôt address the issue directly, a smooth and simple way to navigate

---

## Chunk 3478

around a scene can also ameliorate the picking problem. SketchUp has mapped both
zoom and orbit functions to the mouse scroll wheel. Spin the wheel to zoom in toward
or away from the central zero point in 3D space. Press and hold the wheel to switch from
CH 18. Designing for the Desktop 505

---

## Chunk 3479

--- Page 536 ---
whatever tool you are using to orbit mode, which allows the camera to circle around the
central axes in any direction. This fluid navigation makes manipulating an architectural
model almost as easy as rotating it in your hand.
object rotation, camera movement, rotation, and zoom
One more issue specific to 3D applications is the number of spatial manipulation func-

---

## Chunk 3480

tions that can be performed. Objects can be repositioned, resized, and reshaped in three
axes. They also can be rotated in three axes. Beyond this, the camera viewpoint can be
rotated in place or revolved around a focal point, also in three axes. Finally, the camera‚Äôs
field of view can be zoomed in and out.
Not only does this mean that assignment of modifier keys and keyboard shortcuts is

---

## Chunk 3481

critical in 3D applications, but another problem also occurs: It can be difficult to tell the
difference between camera transformations and object transformations by looking at a
camera viewpoint, even though the actual difference between the two can be quite signif-
icant. One way around this problem is to include a thumbnail, absolute view of the scene

---

## Chunk 3482

in a corner of the screen. It could be enlarged or reduced as needed and could provide a
reality check and global navigation method in case the user gets lost in space. (Note that
this kind of thumbnail view is useful for navigating large 2D diagrams as well.)
506 Part III: Interaction Details

---

## Chunk 3483

--- Page 537 ---
Ch 19
DEsIgnIng For mobIlE
AnD oThEr DEVICEs
The mobile device user experience changed forever in June of 2007, when Apple intro-
duced the iPhone. Almost overnight, the definition of what it meant to be a mobile infor-
mation device experienced a radical reboot. Before the iPhone‚Äôs introduction, the mobile

---

## Chunk 3484

user experience meant tiny hardware keyboards on the device surface or hidden within
a sliding drawer. It also meant small, clumsy, resistive mono-touchscreens that more
often than not required a stylus to operate effectively without resorting to a miniature
five-way D-pad that was equally cumbersome to use.
The iPhone replaced this mess of a user experience with the following:

---

## Chunk 3485

‚Ä¢ A giant, high-resolution, multi-touchscreen, an OS that specified on-screen controls
big enough for fingers to use successfully
‚Ä¢ A set of now-iconic gestural idioms that were relatively easy to discover and learn
‚Ä¢ A set of sensors delivering contextual information about orientation, location, ambient
light, and movement that added an extraordinary level of intelligence to a new

---

## Chunk 3486

generation of mobile apps
Scarcely more than a year later, Google introduced its own multi-touch mobile oper-
ating system, Android, borrowing many of its gestural and navigational idioms from
its iOS competitor. Although it took Google several years of iteration to begin match-
ing iOS from an aesthetic and user experience refinement perspective, it has become

---

## Chunk 3487

--- Page 538 ---
the Windows of the mobile world, taking the majority share of the smartphone market.
(Windows Phone OS, ironically, was quite late to the game; it lags severely in market
share.) As of this writing, the basic mobile user experience is remarkably uniform across
‚Äúsmart‚Äù mobile platforms. More than 90 percent of these devices sport large, gestural,

---

## Chunk 3488

multi-touchscreens with similar idioms, similar sensor-laden hardware, and even (as of
iOS 7) converging ‚Äúflat‚Äù visual styles.
Almost exactly the same story can be told regarding the release of the iPad. This device
rewrote the story on tablet devices, a market that Microsoft and many others had
repeatedly tried and abandoned. However, the success of the iPhone practically ensured

---

## Chunk 3489

that the iPad (despite early naysaying from the desktop computing world) would be an
instant success.
Today, iPad, Android, and Microsoft multi-touch tablet sales are seriously eroding the
sales of low-end laptop computers, and this trend will most likely continue. For most
people, a computing device that turns on instantly, saves its state automatically on shut-

---

## Chunk 3490

down, manages its own software updates in the background, installs from the cloud,
eliminates window management excise, and allows direct interaction with fingertips is
a rather dramatic improvement over the complexities of desktop software and pointer-
based input. It isn‚Äôt difficult to imagine what this means for the future of desktop and
even laptop computers.

---

## Chunk 3491

The majority of this chapter describes some of the most important design concerns and
design patterns for phone and tablet format mobile devices. We‚Äôll also briefly discuss
other device platform interfaces at the end of the chapter, including public kiosk, device,
and automotive interfaces.
Anatomy of a mobile App
While the posture of desktop applications is most often sovereign (see Chapter 9),

---

## Chunk 3492

mobile apps, by contrast, are by their very nature transient. The on-the-go and highly
context-driven nature of the majority of mobile apps (games perhaps being the excep-
tion, but the interaction design of games in general is a unique topic in itself) dictates
a transient stance, especially on handheld mobile devices. The fact that these transient

---

## Chunk 3493

apps take up their host device‚Äôs entire screen makes them no less transient. Transience
here is dictated by the character of the user‚Äôs interaction with the app: brief, intermit-
tent, and focused on particular tasks.
Most mobile apps have transient posture.
508 Part III: Interaction Details

---

## Chunk 3494

--- Page 539 ---
The other major factor that contributes to the transient nature of mobile apps is the
physical form factor of the host device. Phone-sized screens that support multi-touch
interactions require onscreen objects to be large enough that they can be activated easily
with fingers, without the user accidentally triggering other interactions while doing so.

---

## Chunk 3495

Tablet-sized screens have a bit more breathing room but still need finger-scale controls.
These two factors lead to an information and control density on mobile screens simi-
lar to the information and control density of dialogs on the desktop. While high-resolu-
tion display technology does help allow for detailed information graphics and crisp text

---

## Chunk 3496

on mobile devices, the number and spacing of individual objects on the screen remain
fairly limited if usability and readability are to be maintained. The alternative solution of
zooming (see Chapter 12), while technically possible, would only add a layer of complex-
ity and confusion, since logical zoom‚Äîitself a bit problematic already‚Äîis the typical (if

---

## Chunk 3497

awkward) method of navigating between apps on many mobile platforms.
mobile form factors
While it‚Äôs safe to say that mobile apps are almost always transient, the form factor of the
mobile device has a significant effect on the navigation, the layout, and even the behav-
ioral strategies and patterns employed.
Modern multi-touch mobile devices fall primarily into three form factor categories:

---

## Chunk 3498

‚Ä¢ Handhelds consist of phones and media devices like the iPod Touch. They are
characterized by tall, narrow (typically 16:9 aspect ratio) screens that are 4 to 6 inches
diagonally and are used most frequently in portrait orientation.
‚Ä¢ Tablets consist of devices sporting 9-to-10-inch diagonal screens. (Apple‚Äôs tablets are

---

## Chunk 3499

4:3; Google and Microsoft‚Äôs are 16:9.) Android and Windows tablets seem biased toward
landscape use in their design, while Apple tablets seem to be used more frequently in
both orientations.
‚Ä¢ Mini-tablets consist of devices sporting screens that are 7 to 8 inches diagonally.
Like their larger cousins, they have either a 4:3 aspect ratio (Apple) or 16:9 aspect ratio
(Google, Microsoft).

---

## Chunk 3500

The next section focuses on the basic structural patterns for each of these form factors,
the building blocks of which we‚Äôll discuss later in this chapter, as well as in Chapter 21.
handheld format apps
Mobile touchscreen operating systems thankfully eschew the complexities of window
management, opting instead for full-screen applications that make much better use

---

## Chunk 3501

of the limited available real estate. This decision dates back to the earliest handheld
CH 19. Designing for Mobile and Other Devices 509

---

## Chunk 3502

--- Page 540 ---
touchscreen devices, including Apple‚Äôs Newton and Palm‚Äôs very popular PalmPilot. It con-
tinues to make sense even though modern mobile displays are many times the resolution
of those now crude-looking screens.
Modern handheld-format devices also continue to use some of the same basic layout

---

## Chunk 3503

patterns employed in these early systems‚Äîvertical stacks of UI elements, including lists,
grids, bars, and drawers. Newer structural patterns made possible by high-performance,
high-resolution graphics and multi-touch screens‚Äîsuch as carousels, swimlanes, and
cards‚Äîare now widely recognized mobile idioms.
stacks
Stacks are perhaps the primary pattern used by most non-game mobile apps‚Äîespecially

---

## Chunk 3504

on handheld devices. The tall and narrow form factor of smartphones and other hand-
held mobile devices dictates a list-like display for most types of content or control. The
main exception is icons and thumbnails; more about these below. Stacks are vertically
organized structures with a content area, usually arranged in a list or grid, with a top

---

## Chunk 3505

and/or bottom bar for navigating content and accessing functions. Most iOS, Android,
and Windows Phone apps follow this top-level pattern, as shown in Figure 19-1.
Figure 19-1: Typical mobile apps use a stack layout pattern including content, control, and naviga-
tion elements.
510 Part III: Interaction Details

---

## Chunk 3506

--- Page 541 ---
screen carousels
Screen carousels are an alternative top-level pattern that is most appropriate for a dash-
board-like display that has multiple instances or variants between which the user can
quickly navigate via a swipe gesture to the left or right. The classic example of this pat-
tern is the iOS Weather app, shown in Figure 19-2. The user swipes between identically

---

## Chunk 3507

laid-out cards or screens that, in the case of the Weather app, represent different loca-
tions. The few interactions on a carousel screen occur in place on the card; there usually
is no drill-down navigation, as you typically see in the Stacks pattern. Carousels may or
may not have top or bottom bars associated with them, but they usually do have a page

---

## Chunk 3508

marker widget that shows the user‚Äôs place in the carousel content. Carousels often don‚Äôt
provide circular flow, but rather disallow further swiping at the far left and right. In most
cases, there‚Äôs no reason not to make it circular, which makes navigating between screens
much easier.
Figure 19-2: The iOS Weather app is the classic example of a screen carousel pattern, where you

---

## Chunk 3509

can navigate between several instances of self-contained dashboard-like screens by swiping left or
right. A place marker widget in the bottom bar shows the user his current position in the sequence
of screens. This implementation of the pattern doesn‚Äôt wrap around from the end to the beginning of
the carousel, making navigation across the set harder than it needs to be.
orientation and layout

---

## Chunk 3510

Most modern mobile devices can detect their screen orientation (portrait or landscape),
which means that the app can dynamically rearrange its layout to better suit the current
orientation. The majority of apps, however, stick with portrait orientation even when
rotated. For list- and grid-based content browsing (more on these topics in the section

---

## Chunk 3511

CH 19. Designing for Mobile and Other Devices 511

---

## Chunk 3512

--- Page 542 ---
‚ÄúBrowse Controls‚Äù), assuming portrait orientation is a good bet because users usually
operate the phone one-handed in portrait orientation.
However, for applications such as photo or video capture and editing, it makes sense to
allow rotation to landscape orientation, since the medium itself can be in that orienta-

---

## Chunk 3513

tion. For these sorts of apps, iconic controls make the most sense, since they can simply
be rotated right along with the screen and thus minimize user disorientation (see Fig-
ure 19-3). However, this means that extra care must be taken to ensure that users can
easily figure out what the controls mean.

---

## Chunk 3514

Figure 19-3: The Slow Shutter app on iOS does a great job of making a smooth transition from por-
trait to landscape. iOS‚Äôs native Camera app also allows this sort of transition. But since it uses a
scrolling selection bar containing text labels, the result is difficult-to-read, rotated text when the app
is in landscape orientation.
Tablet format apps

---

## Chunk 3515

Tablet format apps have considerably more breathing room than handheld-format
apps as far as screen real estate is concerned. The iPad‚Äôs 4:3 aspect ratio and large
screen size ensures plenty of room for navigational and functional controls, but Win-
dows and Android tablets also manage quite serviceably with the movie-like 16:9
aspect ratios.
512 Part III: Interaction Details

---

## Chunk 3516

--- Page 543 ---
stacks and index panes
Like handheld format mobile apps, tablet format apps also rely on the stack pattern,
vertically stacking a primary area and one or more tab, navigation, and action bars.
However, the extra real estate available on a tablet also allows the addition of one or
more supporting panes, should the app require it. Typically the additional pane is an

---

## Chunk 3517

index pane (see Chapter 18) that lists content items, such as your e-mail inbox or search
results, the current selection of which is displayed in detail in the main content pane.
This is a good use of display real estate, because it eliminates one level of drill down and
allows users to quickly navigate and inspect a long list of content.

---

## Chunk 3518

These additional index panes can themselves have navigation and functions associated
with them, which are housed in bars at the top or bottom of the pane. Frequently, the
list of objects in the index pane can come from several sources such as e-mail (see Fig-
ure 19-4). This requires either tabbed or drill-down approaches to navigation. We dis-

---

## Chunk 3519

cuss these in more detail later in the chapter. Search and filter widgets are also common
controls in tablet index panes.
In portrait mode, index panes typically are launched from a button and overlap the main
content area. Unless the content of your app‚Äôs index pane is particularly narrow, you will
probably want to opt for this approach (see Figure 19-4). Non-overlapping panes provide

---

## Chunk 3520

a superior interaction, even in portrait, if they are narrow enough to fit.
Figure 19-4: iOS‚Äôs iPad Mail app presents a navigable index pane containing mail folders and their
contents. In portrait mode, the pane is launched from a button on the left of the app‚Äôs nav bar and
overlaps the rest of the screen until it is dismissed. In landscape mode, the pane is permanently

---

## Chunk 3521

placed adjacent to the detailed content pane.
CH 19. Designing for Mobile and Other Devices 513

---

## Chunk 3522

--- Page 544 ---
When rotated to landscape, the standard pattern calls for the overlapping pane to
become a permanent adjacent pane.
Pop-up control panels
Tablet screens are large enough to support pop-up panels that don‚Äôt overlay the entire
screen and that can replace navigation to a full-screen control panel screen, as is usually

---

## Chunk 3523

required in handheld format apps. These pop-ups, when used judiciously, can improve
task flow by retaining the context of the background screen and not feel as much to the
user like going to a different room (see Chapter 18).
Pop-up panels are different from dialogs, in that they are attached to a particular con-

---

## Chunk 3524

trol or content object and are used to make changes to parameters associated with that
object. This association typically is shown via a speech balloon caret that extends from
the pop-up canvas to the control it is associated with, as shown in Figure 19-5.
Figure 19-5: The Procreate digital painting app on iOS makes extensive use of pop-up control panels

---

## Chunk 3525

as a means of configuring the drawing tools in the app‚Äôs tool bar. These pop-up panels show their
connection to the tool via a speech-balloon-like caret that emerges from the otherwise rectangular
panel.
514 Part III: Interaction Details

---

## Chunk 3526

--- Page 545 ---
orientation-based layout
More so than on handheld format apps, tablet apps need to be concerned about orienta-
tion. On tablet apps, rotating controls in place usually is an insufficient or undesirable
approach. Instead, tabs, navigation, and tool bars need to reorient themselves on the
screen in a sensible way by relocating to the top or sides of the screen as appropriate.

---

## Chunk 3527

Overlapping panes that were available from a button need to be laid out adjacent to
the main content pane (see Figure 19-4). This approach makes sense for simple apps.
But more complex apps, or those dedicated to activities that have a heavy bias toward
one orientation‚Äîsuch as a streaming video app (landscape), e-reader (portrait), or any

---

## Chunk 3528

authoring tool that relies on a fixed layout of complex controls‚Äîmay select to support
only one orientation. The next two sections elaborate on two of these cases.
mobile versus desktop-like layout
The high-resolution displays on modern touchscreen tablets rival those of many laptop
and even desktop displays, shrunk to fit a 10-inch diagonal screen. It might be tempt-

---

## Chunk 3529

ing to treat your tablet app like a shrunken, touch-enabled version of your desktop app.
In most cases, however, this isn‚Äôt a good idea. For media browsing and other search,
browse, and view/purchase types of apps, the approaches outlined in this chapter are
appropriate.
However, due to the complexity of productivity and creative authoring apps that seek

---

## Chunk 3530

to replace similar desktop apps, there is more of a case for adopting more desktop-like
tool bars and panes. Audio and video production apps in particular seem well-suited
to a more desktop-like approach, as shown in Figure 19-6. Here relatively dense control
layouts, multiple panes, complex tool bars and control panels, large pop-up panels or
drawers, and drag-and-drop idioms make sense.

---

## Chunk 3531

Figure 19-6: Steinberg‚Äôs Cubasis and Corel‚Äôs Pinnacle Studio are examples of media production apps
that are well suited to a more complex layout that more closely resembles desktop apps.
CH 19. Designing for Mobile and Other Devices 515

---

## Chunk 3532

--- Page 546 ---
If your app is in this category, keep the following principles in mind:
‚Ä¢ Make sure that tool bar, control panel, and menu items have areas that register taps
(known as hit areas) and inter-item spacing properly scaled for finger use.
‚Ä¢ Drag and drop is prone to accidental drops on a touchscreen, so either avoid it or be
forgiving of them.

---

## Chunk 3533

‚Ä¢ Pop-up panels should point to where they came from when possible and have clearly
labeled headers.
‚Ä¢ Pay close attention to function hierarchy so as to keep workflow as linear as possible.
Put the user on a single path to accomplish a task whenever possible.
‚Ä¢ Apps with complex layouts should in most cases choose an orientation and stick to

---

## Chunk 3534

it, rather than trying to support both portrait and landscape. Consider the alternate
orientation an opportunity for a completely different display.
hardware-like control layout
For certain apps, especially those in the domain of music production, interfaces that
resemble hardware-based control surfaces appeal to users in that domain. While

---

## Chunk 3535

such interfaces can be quite awkward on the desktop due to the necessity of operat-
ing faux-hardware controls with a mouse or trackpad, the introduction of a multi-touch
input surface on the display changes this equation substantially. Designers should still
take into account fingertip use for hit areas and spacing. They should allow horizontal

---

## Chunk 3536

or vertical drag gestures (and be consistent about their use) to operate rotary controls
in addition to circular drag gestures. Also remember not to let your key interactions
be artificially limited by hardware metaphors. A knob or slider might make sense for
setting volume or mixing tracks, but using direct manipulation for activities such as

---

## Chunk 3537

shaping and scrubbing audio waveforms can provide a whole new level of richness to the
creative process, as shown in Figure 19-7.
mini-tablet format apps
Mini-tablets such as Google‚Äôs Nexus 7 and the Kindle Fire are popular, inexpensive
mobile devices that handily fit into a large purse or pocket, making them popular with

---

## Chunk 3538

consumers. From a user experience perspective, however, their combination of a nar-
row 16:9 aspect ratio, support for both screen orientations, and a small size represent
challenges for a designer of touch-based experience. There simply isn‚Äôt as much room for
finger-sized controls as on a full-sized tablet. But at the same time, there‚Äôs a bit too much

---

## Chunk 3539

room for apps designed for phones to look aesthetically well proportioned, especially
using standard OS widgetry.
516 Part III: Interaction Details

---

## Chunk 3540

--- Page 547 ---
Figure 19-7: Positive Grid‚Äôs Final Touch app provides pro-quality audio mastering on the iPad. While
making extensive use of hardware control metaphors, its smart layout and workflow, along with judi-
cious use of direct-manipulation idioms in combination with the hardware-like controls, make it both
extremely powerful and easy to use.

---

## Chunk 3541

Navigation and layout strategies employed by handheld and tablet format apps will work
for mini-tablets, with some caveats:
‚Ä¢ Adjacent panes‚ÄîGenerally not a good idea on full-sized tablets in portrait
orientation, adjacent panes are usually far too cramped to consider on mini-tablets.
In landscape, at most two adjacent panes (and perhaps a vertical tab bar) can be

---

## Chunk 3542

supported. In portrait in particular, overlapping pop-up panes and drawers make more
sense. Drawers are discussed in the next section.
‚Ä¢ Tool bars‚ÄîIn portrait view, these can feel distant from the action due to the tall,
narrow form factor and increased screen size over handhelds. In landscape orientation,
tool bars stacked with navigation bars leave little vertical space for content. Vertical

---

## Chunk 3543

tool bars may sometimes make more sense on mini-tablets. Tool bars are discussed in
the next section.
‚Ä¢ Lists‚ÄîSingle-column lists tend to look out of proportion on mini-tablets, even in
portrait orientation. Grid, swimlane, and card approaches tend to work better for the
CH 19. Designing for Mobile and Other Devices 517

---

## Chunk 3544

--- Page 548 ---
user‚Äôs sense of flow in both orientations. If your content is truly list-based, consider
using vertical tabs or tool bars in portrait and adjacent index and detail panes in
landscape. Each of these idioms is discussed in more detail in the next section.
‚Ä¢ Pop-up versus full-screen dialogs‚ÄîMini-tablets are big enough that using

---

## Chunk 3545

phone-style full-screen idioms for menus and dialogs won‚Äôt work; these should be
implemented as pop-up dialogs as on full-size tablets. Pop-up control panels for tool
bar tools will also work, but these may take up the majority of the screen when open.
mobile navigation, Content, and
Control Idioms
Mobile applications share many controls with desktop and web applications, as dis-

---

## Chunk 3546

cussed at length in Chapter 21. However, due to the unique form factor and multi-touch
input technology employed by the majority of modern mobile devices, they have evolved
a unique set of idioms especially suited to mobile app use.
We‚Äôll enumerate the most common and important of these in this section.
browse controls

---

## Chunk 3547

Most mobile apps are optimized for browsing. Whether it‚Äôs music, videos, social network-
ing updates, restaurant reviews, e-mail, shopping, or search results, we do an awful lot of
casual surveying in our mobile apps. Due to the limitations of the form factor and input
options, it is much easier on mobile devices to browse and select content than to input

---

## Chunk 3548

data. Given this situation, it‚Äôs unsurprising that mobile apps have developed a rich set of
patterns around browsing through content.
lists
Lists are the most frequently used pattern for organizing content on handheld format
touchscreen devices. List content often includes line items or blocks of text, controls
(such as check boxes or buttons) and their labels, and image or video thumbnails.

---

## Chunk 3549

Tapping a content item in a list typically drills down a level in the hierarchy, revealing
either the content or the next level of grouping. Sometimes tapping a list item may also
launch a modal pop-up or screen that provides a set of options for controlling the item,
or it may navigate to a detailed view of the item itself.
518 Part III: Interaction Details

---

## Chunk 3550

--- Page 549 ---
As we‚Äôll discuss in a minute, list views often work in conjunction with tab bars to pro-
vide access to multiple screens of content, each in its separately maintained list. Apple‚Äôs
Music app is a good example of this, with lists of albums, artists, and songs available on
different tabs, each with its own (slightly different, but related) drill-down hierarchies
(see Figure 19-8).

---

## Chunk 3551

Figure 19-8: The iOS Music app has tabbed lists of
albums, artists, and songs, among others. Navigating
between lists is accomplished via a bottom tab bar.
Lists can either be finite in length or allow infinite scrolling. This kind of scrolling pre-
sents an initial subset of items from a very large set (such as web search results) and then

---

## Chunk 3552

presents an additional block of results each time the user reaches the bottom of the list.
While infinite scrolling is a necessary compromise due to limited computing resources,
it is a reasonably elegant solution, as long as the incremental load time can be kept under
a second or so.
CH 19. Designing for Mobile and Other Devices 519

---

## Chunk 3553

--- Page 550 ---
grids
Grids are used to organize content such as apps, thumbnails, and function icons into
regular rows and columns. The most obvious example of this is the home screen of the
iPhone, with its editable grid of app icons. Android supports a similar interface. Micro-
soft has taken the idea of the app icon grid and transformed it into the more innovative

---

## Chunk 3554

Start screen grid. It mixes apps and notifications in an aesthetically pleasing and useful
way, as shown in Figure 19-9.
Figure 19-9: iOS and Android home screens use a similar app grid, both of which are derived from
the original Palm Pilot. Microsoft, on the other hand, evolved its Zune interface into the Metro UI,

---

## Chunk 3555

with its unique Start screen grid that seamlessly‚Äîand beautifully‚Äîcombines apps and notifications.
Within an app, grid views (also called gallery views) often are used to present media
objects. These include photos, videos, and music albums (with cover art), or small, encap-
sulated cards (more on this later) containing image, text, and sometimes button or link

---

## Chunk 3556

elements. One challenge with presenting grids of content objects is making sure users
understand how to navigate them. The iPhone‚Äôs home screen uses horizontal swipes to
navigate between grid ‚Äúpages.‚Äù Most apps that use grids as a primary navigation and
selection mechanism, such as Rdio (see Figure 19-10), use pageless, and sometimes

---

## Chunk 3557

infinite, vertical scrolling to expose more grid objects (albums in this case). The direc-
tion of scrolling is nicely disambiguated by sizing the album art so that the bottom-most
visible row is partly cut off. This provides the necessary visual hint that a vertical swipe
up will reveal more choices.
520 Part III: Interaction Details

---

## Chunk 3558

--- Page 551 ---
Figure 19-10: The Rdio streaming music app using a
two-column scrolling grid to display album choices.
The bottom-most visible row is cut off, which hints that
scrolling is vertical.
Apple‚Äôs Photos app, shown in Figure 19-11, uses a much tighter four-column grid for the
Camera Roll, which also scrolls vertically.

---

## Chunk 3559

Grids also can scroll horizontally, as in Apple‚Äôs Music app when the iPhone is rotated to
landscape orientation, as shown in Figure 19-12.
CH 19. Designing for Mobile and Other Devices 521

---

## Chunk 3560

--- Page 552 ---
Figure 19-11: The Camera Roll in Apple‚Äôs Photos app
uses a tighter grid with four vertically scrolling columns
on the iPhone.
It might be tempting to allow zooming in and out on the grid via a pinch gesture, but
generally this is not a good idea, especially in the narrow portrait orientation of the

---

## Chunk 3561

handheld form factor. Issues quickly arise concerning the legibility and hit area of the
icons or thumbnails, as well as column width of text labels and metadata.
As with lists, tapping a content item in a grid typically drills down into a hierarchy,
revealing either another grid or list of content items or controls. Or it launches a modal

---

## Chunk 3562

pop-up that provides a set of options for controlling the item. Or it opens a detailed view
of the item itself, as shown in Figure 19-12.
Like lists, grids can be either finite or infinitely scrolling, where rows or columns of addi-
tional items are added incrementally when the end of the grid is reached.
522 Part III: Interaction Details

---

## Chunk 3563

--- Page 553 ---
Figure 19-12: When rotated to landscape view on an iPhone, Apple‚Äôs Music app displays a horizon-
tally scrolling grid of album art. Tapping the art drills down to a view of the album that includes the
album art, vertically scrolling track list, and transport controls.
Content carousels
Screen carousels use a horizontal swipe gesture to navigate between similar full-screen

---

## Chunk 3564

layouts containing different data. Content carousels live within a single screen layout but
use the same type of gesture to allow navigation between different content objects that
are presented within that screen. Often they are media thumbnails (or larger images),
but they also can be textual or cards containing both media and formatted text.

---

## Chunk 3565

Content carousels present a row of content items carefully sized and spaced so that they
bleed off the edge of the screen. Or they fill the screen from the left to right edge and use
either arrows near the left and right screen edges or a page marker widget. Some car-
ousels, such as the one at the top of the iPad‚Äôs App Store app, make use of a 3D layering

---

## Chunk 3566

effect that puts the focus item in the carousel in front of the others.
Properly designed carousels should wrap circularly from end to beginning, rather than
making the user swipe all the way back to the start. They also make it visually clear when
the last item in the carousel has been reached.
Typically, content carousels are used to present a relatively small set of objects that the

---

## Chunk 3567

app is meant to feature or highlight. As such, only one carousel should be employed
on a screen, and it should take the most prominent position in the layout. An excellent
CH 19. Designing for Mobile and Other Devices 523

---

## Chunk 3568

--- Page 554 ---
example of this is the Crackle app on iPhone, shown in Figure 19-13. The app has a large
carousel at the top of its Featured tab. It wraps and includes a page marker widget so
that users know when they‚Äôve returned to the beginning. (This trick works only with
carousels containing a short list of items.) It also auto-advances the carousel every few

---

## Chunk 3569

seconds‚Äîa common variation of the idiom. This helps users understand the behavior,
as well as helping the app feel more dynamic and ensuring that users are exposed to the
featured items. Care must be taken not to auto-advance a carousel so fast that users have
trouble reading or focusing on the content. This animation should also pause while the

---

## Chunk 3570

user is interacting with other elements on the screen to avoid disorienting transitions.
Figure 19-13: The Crackle app on the iPhone (left) offers a good example of a content carousel on
its Featured tab. It works well. But the arrow that indicates a drilldown to the details of each carousel
item is sized and positioned such that it looks more like a way to navigate to the next carousel item.

---

## Chunk 3571

Safari on the iPhone (right) offers an example of a vertical carousel in place of browser tabs. The
iPad App Store app (center) makes use of a 3D layered effect.
Much less common is a vertically oriented carousel. Apple employs one in Safari for the
iPhone in iOS 7 in place of browser tabs. The user swipes up and down to browse, taps to
select, and swipes left to delete a tab (see Figure 19-13).

---

## Chunk 3572

swimlanes
Swimlanes are a clever mash-up of the carousel concept with a grid. They combine the
carousel‚Äôs natural browsability with the data density that only a grid can permit.
Simply put, swimlanes are a vertical stack of carousels, each of which can be scrolled
horizontally, independent of the others. Navigating to other swimlanes is a simple mat-

---

## Chunk 3573

ter of vertical scrolling. Swimlanes thus are a clever way to allow the user to browse
multiple categories of content with minimal navigation. Swipe through one category,
and the next is waiting pristinely below it. This is a big advantage over using a fixed grid
that moves columns of content objects all at once.
524 Part III: Interaction Details

---

## Chunk 3574

--- Page 555 ---
The Netflix app makes great use of swimlanes for category-based content. Users scroll
vertically through the categories and horizontally to browse a category. It works well
even though the screen‚Äôs portrait orientation makes for a narrow viewport on the con-
tent, as shown in Figure 19-14. The Apple App Store uses both a carousel and a set of

---

## Chunk 3575

swimlanes on its Featured tab. This combination works well, because the navigational
gestures are identical for all elements on the screen.
Figure 19-14: The Netflix app uses swimlanes as its primary browse paradigm. Apple‚Äôs App Store
combines the use of a carousel and a set of swimlanes for items highlighted on its Featured tab.

---

## Chunk 3576

The authors have seldom seen swimlanes that auto-wrap back to the beginning of the
list. But they probably should, with a marker of some kind between the end and begin-
ning object so that users receive visual feedback that indicates when they have returned
to the starting point in the list. While swimlanes typically are used for finite lists of

---

## Chunk 3577

featured items, you can imagine them being used with infinitely scrolling lists as well.
(Imagine categorized search results, for example.) However, swimlanes‚Äîunlike carou-
sels‚Äîshould never auto-advance.
CH 19. Designing for Mobile and Other Devices 525

---

## Chunk 3578

--- Page 556 ---
Cards
Cards are a relatively new idiom for mobile that can perhaps in some ways trace their
roots to the original HyperCard on the Mac. Back then, Macs had low resolution (much
lower than current mobile devices). Therefore, it seemed to make sense to be able to com-
bine text and visual media into nicely formatted chunks of information suited to the dis-

---

## Chunk 3579

play‚Äôs limitations. HyperCard was meant to be an authoring environment for the masses,
but it ended up being a way for developers to easily create rich-media, content-centric
interactions.
Fast-forward to modern mobile applications, and the same need arises: How do you pre-
sent meaningful chunks of rich-media content for easy consumption on a constrained

---

## Chunk 3580

display? Add to this the social and contextual nature of most mobile interactions, and
you have what exemplifies the modern card-based UI‚Äîa self-contained interactive
object combining media, text, web links, and social actions such as commenting, shar-
ing, tagging, and adding media. Facebook and LinkedIn both use cards as a central
idiom in their handheld apps, as shown in Figure 19-15.

---

## Chunk 3581

Figure 19-15: Facebook and LinkedIn‚Äôs apps both use cards as a central idiom.
The Google Search app‚Äôs Google Now feature has a different approach to cards. It is
more focused on contextual information (time, location, and information pulled from
526 Part III: Interaction Details

---

## Chunk 3582

--- Page 557 ---
the usage of other Google apps) than it is on social interaction. Google‚Äôs cards are small
encapsulations of data pulled from other Google services, such as weather, maps, stocks,
restaurant reviews, and notifications pulled from calendar and e-mail data. Tapping
their content takes the user to the full app or web interface from which they originated,

---

## Chunk 3583

providing an avenue for deeper interaction if desired (see Figure 19-16). Google‚Äôs cards
also have individual settings that can be accessed by tapping an icon in the upper-right
corner. Doing so flips over the card, revealing access to a configuration interface.
Figure 19-16: The Google Search app uses cards that return encapsulated snippets

---

## Chunk 3584

of useful information based on the user‚Äôs current context, including location, time,
and relevant related information pulled from other Google services.
CH 19. Designing for Mobile and Other Devices 527

---

## Chunk 3585

--- Page 558 ---
Cards are most often displayed in a scrolling vertical list, but they also lend themselves
to grid, carousel, and swimlane layouts. Facebook‚Äôs Paper app provides a good example
of the use of cards in a nonstandard layout: The top half of the screen is a category card
that cycles through individual posts. If it is tapped, the post is expanded on a full-screen

---

## Chunk 3586

card, as shown in Figure 19-17. Under the category card is an infinitely scrolling swim-
lane of posts fitting the category. Swiping up on these expands the swimlane to full-
screen height, making more detailed content visible. (Swiping down returns them to the
bottom of the screen.) Tapping any shared content inside the expanded card takes the
user to the content‚Äôs original source.

---

## Chunk 3587

Figure 19-17: Facebook‚Äôs Paper app is a good example of
cards used in a nonlist layout. Content navigation in the app
is achieved via a card carousel of content categories (each
of which automatically cycles through recent content) and an
infinite card swimlane that the user can browse through.
528 Part III: Interaction Details

---

## Chunk 3588

--- Page 559 ---
navigation and tool bars
Bars are the primary mechanism for navigating to the different functional and content
areas of handheld mobile apps. Like lists and grids, they date back to the earliest days
of mobile touchscreens. Bars are narrow horizontal regions at the top or bottom of the
screen that consist of tab-like or button-like controls with either icons or text labels (and

---

## Chunk 3589

sometimes both, as in many iOS apps). The affordance of these controls used to be more
prominent. However, probably to their detriment, the major mobile operating systems
have gravitated toward a flat visual style. Although this significantly reduces visual clut-
ter, it also has the unfortunate side effect of requiring more cognitive work for users to

---

## Chunk 3590

identify active controls. At this point, most users have been trained to assume that any
text or icon living within a bar is a navigational control of some kind.
Tab bars
Tab bars contain a set of text and/or icon buttons. (iOS tab buttons frequently sport an
icon with a text label beneath it.) Tapping a tab button switches to a different list or grid

---

## Chunk 3591

view in the main content area, as you‚Äôd expect a tab to do. Each tab in a tab bar main-
tains its own content hierarchy of associated lists and grids and typically preserves the
state of that hierarchy while the app is running. Tab bars are frequently found at the
bottom of iOS screens and, more frequently, at or near the top of Android and Windows
Phone screens, as shown in Figure 19-18.

---

## Chunk 3592

Figure 19-18: Use of tab bars in iOS, Android, and Windows Phone. iOS tab bars typically are at the
bottom of the screen, and Android tab bars generally form a secondary navigation beneath a nav bar
(or action bar, in Android terms). Windows Phone uses a tab bar that is purely textual, without ren-
dering a bar rectangle.
CH 19. Designing for Mobile and Other Devices 529

---

## Chunk 3593

--- Page 560 ---
Some tablet apps use vertical tab bars aligned to the left edge of the screen. Spotify and
Twitter currently use this tab bar variant in their iOS tablet apps, as shown in Figure 19-19.
Figure 19-19: Twitter and Spotify use vertical tab bars in their tablet apps. They use buttons con-

---

## Chunk 3594

taining both icons and text for clarity, which works well given the large amount of vertical space
available.
more‚Ä¶ controls
The narrow aspect ratio of most handheld screens, as well as the need to provide finger-
tip-sized hit areas, limits the practical number of controls that can live in a bar to no more
than about five. Both iOS and Android deal with this limitation using two strategies.

---

## Chunk 3595

Figure 19-20: More‚Ä¶ controls in iOS‚Äôs Music app (left), and Rdio (right). Rdio‚Äôs More‚Ä¶ control
launches a modal pop-up that allows genre selection of radio stations.
530 Part III: Interaction Details

---

## Chunk 3596

--- Page 561 ---
The More‚Ä¶ control, shown in Figure 19-20, is a tab bar or action bar control that gets around
the limited screen real estate of mobile apps. In iOS this is usually a tab that shows a screen
of additional navigation options. It often has an edit mode that allows the user to drag an
option from that screen onto the bar, which swaps the dragged option with the one occupy-

---

## Chunk 3597

ing the slot in the bar that the new option was dropped on. In Android, a More‚Ä¶ control lives
on the right side of the action menu (see the section on nav and action bars later in this chap-
ter) and opens a pop-up menu of additional navigation options or (more typically) functions.
Some iOS apps, such as the Rdio streaming music app for iPhone, use a similar idiom in the

---

## Chunk 3598

upper right of the screen as a way to select additional options via a full-screen modal pop-up.
Tab carousels
A different approach to the same problem that the More‚Ä¶ control addresses is the tab
carousel, which elegantly marries the concept of tabs with that of horizontally swipable
carousels. Tabs are shown in the tab bar as usual but extend off the edges of the screen.

---

## Chunk 3599

The selected tab is centered or otherwise highlighted in the tab bar. Tapping another tab
selects it. Swiping the tab bar (and, in some cases, the view it controls) selects the adja-
cent tab on the left or right and slides the contents into view, as shown in Figure 19-21.
Figure 19-21: Spotify‚Äôs iPhone app uses a tab
carousel in its Your Music section, which is

---

## Chunk 3600

accessed via its main navigation drawer.
CH 19. Designing for Mobile and Other Devices 531

---

## Chunk 3601

--- Page 562 ---
As with other carousel views, it is important that at least one tab label is initially shown
extending off the edge of the screen, to provide the hint of scrollability in the tab bar. Win-
dows Phone uses a variant of the tab carousel as a primary navigation mechanism in its
apps. The tab bar is not rendered, but purely textual tabs are employed (see Figure 19-18).

---

## Chunk 3602

nav bars and action bars
Nav bars, located at the top of the screen, provide a way to navigate a list or grid hierar-
chy, as shown in Figure 19-22. Typically they contain at the very least a back button on
the left and the title of the current list, grid, or other type of content screen in the center.
Android calls this set of controls an action bar. Frequently, function menus or buttons

---

## Chunk 3603

are included on the right.
Figure 19-22: Use of nav bars in iOS (left), Android (center), and Windows phone (right). Android
encourages an action bar at the top of the screen, which incorporates navigation and access to func-
tions. Android and Windows Phone also makes use of a system-level nav bar at the bottom of the
screen. Windows Phone‚Äôs Metro design language discourages use of top nav bars.

---

## Chunk 3604

Most versions of Android (and Windows Phone, as of 8.1) have a system-level naviga-
tion bar at the bottom. It contains a back control (which takes the user to the previ-
ously viewed screen, regardless of app or hierarchy), a home control, and a ‚Äúrecents‚Äù
control (Windows Phone also includes search). The presence of a ubiquitous bar at the

---

## Chunk 3605

bottom means that Android apps typically place most of their app navigation at the
top of the screen.
532 Part III: Interaction Details

---

## Chunk 3606

--- Page 563 ---
Tool bars and palettes
Tool bars contain buttons that execute functions on the current or selected app content.
Windows Phone permits four action buttons in its action bar (called an app bar), which
typically is placed at the bottom of the screen.
iOS apps often place an action button or two on the right side of their nav bar, but apps

---

## Chunk 3607

designed to let you author or edit media rather than simply viewing or sharing it often
replace the standard bottom-of-screen tab bar with a tool bar.
Google encourages the use of its top-of-screen action bar, which combines back naviga-
tion with action buttons. It recommends adding a tab bar under this if the user needs to

---

## Chunk 3608

navigate multiple views. Google‚Äôs action bar even supports view switching via a drop-
down on the action bar itself if the stacked action and tab bars take up too much space.
Most audio playback apps place a transport bar or control pane containing playback-re-
lated controls at the bottom of their ‚Äúnow playing‚Äù screen.

---

## Chunk 3609

Tool palettes, a variant of tool bars similar to their desktop brethren (see Chapter 18), use
iconic buttons as a way to access tools that operate on a document. (Drawing and paint-
ing tools are the most obvious example.) Tool palettes on tablet apps make heavy use of
pop-up control panels to allow the selection and configuration of tools.
Vertical tool bars and palettes

---

## Chunk 3610

On tablets, more-complex tool bars supporting pop-up control panels and palettes are
used at both the top and bottom of the screen. Vertical tool bars run along the left or right
edge of the screen (and sometimes both). Art Studio, shown in Figure 19-23, is a good
example of an app that makes heavy use of rich, complex tool bars.
Tool carousels

---

## Chunk 3611

Just as carousels have crossbred with tab bars, they have also combined with tool bars,
allowing more functions than can comfortably fit across the screen to be accessible with
a horizontal swipe. Tool carousels seem particularly popular with image processing apps
such as Google‚Äôs Snapseed, shown in Figure 19-24. Each item in the tool carousel is a

---

## Chunk 3612

labeled thumbnail that both describes and shows a small example of the filter or effect
applied to an image. (In an ideal world, the image would be the one you were actually
editing at the time, but scale can become an issue.)
CH 19. Designing for Mobile and Other Devices 533

---

## Chunk 3613

--- Page 564 ---
Figure 19-23: The Art Studio app uses vertical tool bars as well as a desk-
top-like menu bar and sliders embedded in its bottom tool bar. Authoring tools
like this begin to rival the complexity of desktop applications. The tablet screen
becomes quite cluttered with this many controls, so Art Studio lets you hide

---

## Chunk 3614

them while working, similar to desktop design tools such as Adobe Photoshop.
Figure 19-24: Google‚Äôs Snapseed app uses a carousel to let you select the tool.
After it is selected, the appropriate controls for the tool are shown, in some
cases including a secondary tool carousel for choosing a specific setting.
534 Part III: Interaction Details

---

## Chunk 3615

--- Page 565 ---
By stacking two bars, you can build a rather complex set of features in a way that
tames the complexity. A tool bar lets you select the category of tool (effects, filters,
adjustments), and a tool carousel contains items for each specific tool or variant in a
category.
menu bars: an idiom to avoid in mobile

---

## Chunk 3616

As complex authoring tools make their way onto tablets, more of the trappings of desk-
top applications are also making their way to tablet user interfaces. Apps like Art Stu-
dio (see Figure 19-23) and Cubasis (see Figure 19-6) for iOS use complex, desktop-like
control layouts. Art Studio takes this a step too far by implementing a desktop-
like menu bar.

---

## Chunk 3617

This isn‚Äôt a good idea for a couple reasons. First, a row of text labels in a bar typically
means a tab bar, and a desktop-style menu bar interaction is unexpected on a tablet.
Second, most of the functionality remains hidden in the menus. Once it is exposed, it
still isn‚Äôt clear from the menu label what the functions will do. An approach that uses

---

## Chunk 3618

both a tool bar and a tool carousel (as described in the preceding section) can accom-
plish most of what a menu bar can do, but in a less visually dense and more visually
explanatory way.
Drawers
Drawers are a clever idiom that provides access to a vertical list of navigational ele-
ments similar to tabs. They use minimal screen real estate by hiding in a panel that

---

## Chunk 3619

lives in a layer under the main content area. The drawer icon is also called the ham-
burger menu icon due to its shape: three short, stacked lines. Tapping this icon‚Äîor,
sometimes, swiping across the main content area‚Äîslides the content area horizon-
tally to reveal the drawer under it. As with tabs, the current selection is highlighted.

---

## Chunk 3620

Tapping a drawer item simultaneously swaps what is displayed in the content area
and snaps the drawer back shut. Items in the drawer are usually textual, but may
have icons and other adornments. Additional controls may also live in the drawer.
Google‚Äôs Gmail app on the iPhone, shown in Figure 19-25, illustrates a typical use of
the drawer idiom.
CH 19. Designing for Mobile and Other Devices 535

---

## Chunk 3621

--- Page 566 ---
Figure 19-25: The Gmail app on the iPhone uses a
drawer with additional navigation elements inside it.
It‚Äôs a little disconcerting that the account management
UI slides down from the top while the settings UI slides
up from the bottom (and takes up the full screen),
even though both controls are next to each other in the
drawer.
secondary-action drawers

---

## Chunk 3622

Drawers can be used to replace a navigational tab bar or can be used to interact with
a secondary set of objects in the app. Drawers usually slide open from the left, but not
always. Some secondary actions are put in a drawer that deploys from the right. The cur-
rent version of the Facebook app for the iPhone uses a set of fairly standard bottom tabs

---

## Chunk 3623

(including a More‚Ä¶ tab) for its main navigation. It also offers a right-hand drawer that
gives you access to a list of online friends for chatting, as shown in Figure 19-26.
536 Part III: Interaction Details

---

## Chunk 3624

--- Page 567 ---
Figure 19-26: The Facebook app on the iPhone uses
a right-hand drawer to let you access online friends for
chatting.
Double drawers
Path, an intriguing timeline-based social networking app on iOS, has successfully opted
to minimize its use of tab and tool bars in favor of idioms that take up less main screen

---

## Chunk 3625

real estate. The Path design, as shown in Figure 19-27, uses two drawers‚Äîa standard
left-hand drawer for primary navigation between views, and a Facebook-like right-hand
drawer for messaging friends. Path also uses a nonstandard but interesting tool menu
control that fans open from the lower-left corner of the main content area when acti-

---

## Chunk 3626

vated. Although it adds a tap to access these functions, the interaction is both clear and
pleasing in its execution, and it allows the content area to shine.
CH 19. Designing for Mobile and Other Devices 537

---

## Chunk 3627

--- Page 568 ---
Figure 19-27: The Path app on the iPhone uses both a standard left-hand drawer for primary navi-
gation and a right-hand drawer for messaging friends. In addition, Path uses a nonstandard pop-up
action menu that fans out from the lower-left corner of the main content area when tapped.
Item-level drawers

---

## Chunk 3628

Some handheld format apps have taken the concept of a slide-to-reveal drawer and
applied it to individual items in a list. Sliding an item to the left or right (depending
on the app) reveals a tool bar under the item, whose functions perform an action on
that item. This avoids the need for a tool bar at the top or bottom of the content area.

---

## Chunk 3629

Although this approach may seem clever, it actually has a number of drawbacks:
‚Ä¢ It is difficult for users to discover unless some sort of visual cue is added to the list
item. But then it needs to be added to all items, wasting horizontal space. Desktop
applications have the benefit of the hover state to reveal such controls without
cluttering the interface, but mobile apps do not.

---

## Chunk 3630

‚Ä¢ The swiped item can be obscured when the drawer is open, so the user would need to
remember what it is, adding to mnemonic (memory) work.
‚Ä¢ The per-item swipe gesture means that other, more standard horizontal gestures, such
as those for deleting an item or opening a global navigational drawer, may become
either confusing or impossible.

---

## Chunk 3631

The Slacker streaming music app on iPhone, shown in Figure 19-28, provides a workable
example of item-level drawers for both list and grid items. Swiping to the left on grid
items for artists, stations, or albums, and swiping list items for tracks, reveals a drawer
538 Part III: Interaction Details

---

## Chunk 3632

--- Page 569 ---
containing an info button. Tapping it takes the user to a detailed metadata screen. While
this idea reduces UI clutter, its discoverability is low, because swiping individual grid
items is a nonstandard interaction. Therefore, this type of interaction requires some
explanation in a welcome or help UI, and even then it‚Äôs questionable whether most users
will find it.

---

## Chunk 3633

Figure 19-28: Slacker‚Äôs streaming music app uses item-level drawers in both grid
and list views to give access to an info button that takes users to a detailed meta-
data screen for the selected item. Although it is elegant in terms of avoiding clutter,
its discoverability is low.
Drawer behaviors to avoid
The Gmail app‚Äôs drawer implementation, shown in Figure 19-25, also presents an object

---

## Chunk 3634

lesson on the need to carefully consider the overloading of animated transitions for
accessing options.
The Gmail app‚Äôs main drawer opens as expected, with the content pane sliding off to the
right when the drawer icon is tapped or when the content pane is swiped to the right.
Within it, the navigational choices (e-mail folders) scroll up and down as expected.

---

## Chunk 3635

From there, things get complicated. The account management UI is a toggle control in
the action bar at the top of the drawer. Activating it slides down a pane that covers the
drawer‚Äôs contents until either an account is chosen or the pane is dismissed. And, next to
the account management toggle is a settings button, which launches yet another sliding

---

## Chunk 3636

CH 19. Designing for Mobile and Other Devices 539

---

## Chunk 3637

--- Page 570 ---
pane that slides up from the bottom of the screen, covering both the open drawer and
what is visible of the main content area. Sound confusing? Well, it is.
This overloading of popping and sliding panes‚Äîeach moving in a different direction and
affecting different layers of the UI‚Äîcan be both disconcerting and confusing for users.
Limit the number of animated screen transitions.

---

## Chunk 3638

Unlike Google‚Äôs Gmail app, the Google+ app for iOS, shown in Figure 19-29, breaks
drawer convention. It slides the drawer open on top of the main content area, rather than
having the content area slide over to reveal the drawer underneath. This type of behavior
usually is seen on tablets when an index pane of content is opened in portrait mode. It‚Äôs

---

## Chunk 3639

puzzling why Google didn‚Äôt stick with the more appropriate drawer idiom it was already
using for its Gmail app.
Figure 19-29: The Google+ app breaks the drawer
pattern by sliding it over the content area‚Äîmore like
a content index pane‚Äîinstead of sliding away the
content area to reveal the drawer‚Äôs contents.
540 Part III: Interaction Details

---

## Chunk 3640

--- Page 571 ---
The drawer controversy
Drawers using the hamburger menu have come under fire, the claim being that use of
drawers hampers user engagement by hiding functionality. Some in the community have
fiercely advocated for drawers to be abandoned entirely. We believe that this is throwing
the baby out with the bathwater.

---

## Chunk 3641

Certainly there is some truth in these claims: Hiding an entire nav hierarchy behind a
single icon button does have its problems, but these can also be remedied via use of a
text button (e.g., Menu) instead of‚Äîor in addition to‚Äîthe hamburger icon, having the
initial use state of the drawer be open, or making use of an initial help overlay (see the

---

## Chunk 3642

sections on welcome and help screens later in this chapter). In some cases the style of the
hamburger might be the biggest problem‚Äîif the user doesn‚Äôt register it as a control, then
the failure is in visual communication.
Benefits of drawers include a cleaner main interface with more room for content, and a
means of making almost any function a swipe (and possibly a scroll) and a tap away. For

---

## Chunk 3643

an app with a complex feature set, this can be a godsend.
For apps where you expect users to be constantly using many functions, drawers may
also work well. And apps that have many infrequently used but occasionally necessary
functions might benefit from a drawer approach. On the other hand, apps that are only

---

## Chunk 3644

casually used may best use tabs (or one of their variants) for navigation, since users will
not be using the app with enough frequency or dedication to recall the existence of fea-
tures hidden within a drawer.
Tap-to-reveal and direct manipulation
One of the main differentiators of touchscreen mobile apps from desktop apps is the

---

## Chunk 3645

ability to use your fingers to manipulate onscreen objects. Navigational constructs such
as lists, carousels, and drawers allow users to navigate in a more immersive way, and the
same principle can be applied to creating and editing content.
Tap-to-reveal controls
The iDraw app, shown in Figure 19-30, provides a good example tap-to-reveal: Tap an
object, and the manipulation tools are revealed.

---

## Chunk 3646

Similarly, streaming video apps use the tap-to-reveal idiom for controls that normally
are hidden during playback. Tapping anywhere on the video playback area of the You-
Tube app (see Figure 19-31) launches transport, volume, and other controls.
CH 19. Designing for Mobile and Other Devices 541

---

## Chunk 3647

--- Page 572 ---
Figure 19-30: The iDraw app uses traditional desktop-style drag handles that appear when an object
is tapped. An additive selection mode allows successive taps to select additional objects as a group.
Figure 19-31: YouTube makes its transport, volume, and other controls temporarily available as icons

---

## Chunk 3648

superimposed on the video display area when it is tapped. This design method helps eliminate clut-
ter, but it must be discovered. Luckily, most mobile video apps use this idiom, and tapping the play-
back area isn‚Äôt that much of a stretch discovery-wise.
542 Part III: Interaction Details

---

## Chunk 3649

--- Page 573 ---
Direct manipulation controls
Some apps go to the next step of direct manipulation that touch-based screens permit‚Äî
replacing cumbersome indirect-manipulation idioms such as sliders with gestures on
the object being edited. The best of these, such as Google‚Äôs Snapseed image editor, pro-
vide dynamic feedback hints that show roughly how the gestures will affect the object

---

## Chunk 3650

being edited. For instance, when you use the tilt-shift effect, tapping the image displays
a center adjustment point, as well as sets of double lines indicating the effect‚Äôs angle and
transition interval (see Figure 19-32). The user can move the effect‚Äôs center point, swipe
horizontally to widen or narrow the transition area (also tracked by a thermometer-

---

## Chunk 3651

like display below), and twist his or her thumb and forefinger on the screen to change
the angle of the effect. Although some discovery and learning are involved, it quickly
becomes second nature and provides a tremendously immersive way of editing and cor-
recting photos.
Figure 19-32: Snapseed provides innovative and highly immersive direct-manipulation tools for edit-

---

## Chunk 3652

ing images, eliminating the need for the traditional banks of knobs and sliders that such interfaces
usually entail. The price of this approach is a steeper discovery curve, but this disadvantage can be
offset as Snapseed does‚Äîwith one-time welcome/help screens for each tool.
CH 19. Designing for Mobile and Other Devices 543

---

## Chunk 3653

--- Page 574 ---
searching, sorting, and filtering
Searching is a key user activity on mobile apps. In fact, it is arguably the most important
mobile activity besides making a phone call. People use mobile apps to find something,
whether it‚Äôs a recent e-mail, a song or video, something to buy, or something in the real
world that‚Äôs in their vicinity.

---

## Chunk 3654

As mentioned above, complex data entry is not easy or practical in the on-the-go world of
mobile apps. Luckily, you have a variety of helpful ways to minimize the effort in search,
as well as contextual information that mobile apps can provide.
Implicit sorting versus explicit searching
As discussed earlier, mobile apps are, by and large, optimized for browsing. We can uti-

---

## Chunk 3655

lize that browsing behavior to help pre-empt a user‚Äôs need to build search queries. A
smart app might keep track of the kinds of things the user has viewed, liked, or pur-
chased in the past. Then it could serve up those items (more on this first option below)
items that share similar properties or are liked by people with tastes similar to those of

---

## Chunk 3656

the user. Netflix has based its mobile app on this principle (see Figure 19-14), providing
swimlane categories of TV shows and movies gleaned from the user‚Äôs watching habits.
Search is still available but is not the focus of the interface.
building search queries
Of course, even with the best possible browse options, the user‚Äôs need to search for some-

---

## Chunk 3657

thing specific is almost inevitable. The challenge in a mobile app context is to allow suf-
ficient expression of search terms, but with a minimum of data entry for the user. Here
are a few of the most useful approaches:
‚Ä¢ Voice search‚ÄîThe three major mobile platforms support in-app voice search, and
you should certainly make this an option in your app. Voice search can certainly ease

---

## Chunk 3658

entry for simple searches in supported domains. However, we‚Äôre a long way off from
completely reliable general searches, so the need to enter and modify search terms
manually still remains.
‚Ä¢ Auto-complete‚ÄîAs the user types, displaying a list of popular options matching the
entered letters can dramatically decrease keyboard time and user frustration.

---

## Chunk 3659

‚Ä¢ Tap-ahead‚ÄîThis is a refinement on top of auto-complete. Tap-ahead allows users to
take any auto-completed term option the app provides as the result of auto-suggest,
load it into the search box, and run a new auto-complete query. This might be overkill
for some searches, but it is certainly useful for web searches and in more technical

---

## Chunk 3660

domains where precision of search terms might be important. The Google Search app
uses tap-ahead, as shown in Figure 19-33.
544 Part III: Interaction Details

---

## Chunk 3661

--- Page 575 ---
Figure 19-33: Google‚Äôs Search app uses voice search and recent/frequent search suggestions
(left), auto-complete (right), and tap-ahead (both).
‚Ä¢ Recent/frequent searches‚ÄîHumans are creatures of habit who typically search for
the same things repeatedly. Any search functionality should remember past searches

---

## Chunk 3662

and present them as soon as the user taps the search box. Ideally these results should
be organized in order of most frequent and most recent. They also should support tap-
ahead so that they can be used to start a related search if desired, as the Google Search
app does.
‚Ä¢ Auto-suggest‚ÄîA more sophisticated improvement on strict auto-complete, auto-

---

## Chunk 3663

suggest uses fuzzy matching techniques to provide spell-corrected, controlled-
vocabulary, and synonym options in its option list. Typically, auto-suggest options
include a small set of strict auto-complete options at the top, with a larger set of
suggested results beneath.
‚Ä¢ Categorized suggestions‚ÄîBuilding on auto-suggest, an app that needs to search

---

## Chunk 3664

across several types of data can provide suggested options in each category. iOS‚Äôs
Spotlight search, shown in Figure 19-34, does this well. It provides instantaneous
categorized suggestions (with thumbnail images where appropriate) pulled from apps,
contacts, music, videos, mail, messages, calendar, notes, reminders, and more.
CH 19. Designing for Mobile and Other Devices 545

---

## Chunk 3665

--- Page 576 ---
Figure 19-34: iOS‚Äôs Spotlight search uses voice search,
auto-suggest, and categorized suggestions.
sorting and filtering
On mobile devices, sorting and filtering often amount to the same thing. This is because
the combination of limited screen real estate and the limited amount of time users typ-

---

## Chunk 3666

ically have in an on-the-go mobile context limits the number of search results users will
want to scroll through to a few screens at most. Thus, sorting effectively results in fil-
tering out items at the bottom of the sort. Add to this the fact that users don‚Äôt always
understand the difference between sorting and filtering, and you can anticipate the

---

## Chunk 3667

appropriate strategy for these functions on mobile: Merge them into a single set of con-
trols. Unfortunately, many high-profile apps don‚Äôt get this quite right.
Amazon‚Äôs iPhone app, shown in Figure 19-35, has a straightforward search that remem-
bers recent searches. It also has a clear Refine button in the nav bar of the search results;
546 Part III: Interaction Details

---

## Chunk 3668

--- Page 577 ---
this is good so far. But the refine UI infuriatingly forces you to choose a department
before you can even see a sort by option (or any other filter options) and takes you back
to the results page before you can choose it! The consequence is that users may not even
realize that additional sort and filter options are available.

---

## Chunk 3669

Figure 19-35: Amazon‚Äôs iPhone app fails users by allowing them to choose only one refinement
option at a time and by hiding most refinement options until a department filter is selected. Undoubt-
edly this is due to a database integration issue on Amazon‚Äôs back end, but it is Amazon‚Äôs customers
who suffer.
The OpenTable app, shown in Figure 19-36, takes a better approach for users. The search

---

## Chunk 3670

portion of the interface has appropriate filters for a restaurant reservation app built in:
time and location, as well as the expected keyword search for restaurants. Both time and
location are also sensibly prepopulated. Search refinement options are clear and simple,
with the most important at the top, and more fussy criteria collapsed at the bottom. The

---

## Chunk 3671

only faux pas OpenTable makes is placing its filter control behind a somewhat obscure
icon in the lower right of the screen, where people are almost sure to miss it.
Yelp takes a no-nonsense approach to refinement in its app, with a prominent Refine
button to the left of the search box on the results screen (see Figure 19-37). Tapping the

---

## Chunk 3672

button opens a full-screen dialog that mixes filter and sort controls, each of which is
clearly labeled and appropriately prioritized from top to bottom.
Yelp and Amazon both get another detail right: Filtered results are indicated by a narrow
filter bar anchored to the top of the results view. This bar contains a terse textual sum-

---

## Chunk 3673

mary of all current filters on the results. A nice addition to this interface would be the
ability to swipe horizontally to see a full list of active filters (the list is truncated in the
Yelp interface). Another advantage would be the ability to tap to toggle the filters on and
off without needing to return to the refine screen.
CH 19. Designing for Mobile and Other Devices 547

---

## Chunk 3674

--- Page 578 ---
Figure 19-36: OpenTable‚Äôs app does a great job searching (left) and filtering (right), except for the
filter control placement (center). It‚Äôs almost invisible in the lower right of the screen, especially since
it disappears entirely when you scroll down (though it does come back when you scroll up).

---

## Chunk 3675

Figure 19-37: The Yelp app gets searching and filtering right. A clearly labeled Filter button is
at the top left of the results screen (left), and a full-screen modal pop-up appropriately mixes
filter and sort criteria (right). The results screen also shows a narrow filter bar identifying which
filters have been set (left).
548 Part III: Interaction Details

---

## Chunk 3676

--- Page 579 ---
welcome and help screens
While many mobile interfaces are quite easy to learn, some forces unique to mobile
design act in opposition to ease of learnability:
‚Ä¢ Limited screen real estate effectively limits the amount of textual labeling or
instructive text that can be on the screen at any given time.

---

## Chunk 3677

‚Ä¢ Multi-touch interfaces center on the use of gestures to accomplish actions, which have
no visible affordance until fingers touch or move across the screen.
‚Ä¢ Unlike mouse-driven desktop interfaces, there is no hover state to afford tooltips and
other contextual hints.
While some other alternatives exist, the simplest and most effective way to help users

---

## Chunk 3678

learn a mobile interface is through welcome and help screens.
Welcome and help interfaces are most often two sides of the same coin in mobile apps.
On a user‚Äôs first-time entry into an app after purchase and login, welcome screens provide
guidance on what the important activities are in the app and how to perform them. Help

---

## Chunk 3679

in a mobile context provides much the same‚Äîand often identical‚Äîinformation, but on
demand when the user requests it. Most mobile apps aren‚Äôt complex enough to require
separate welcome and help screens for different tabs or other views, but this might make
sense for a more sophisticated authoring tool with many controls, options, and actions.

---

## Chunk 3680

This section describes several popular welcome and help idioms that help users learn
an app‚Äôs primary gestures and interactions. For more detail on these mechanisms, see
Chapter 16.
guided tours
Guided tours usually consist of a carousel of cards, each of which contains text and
images or video that describes the use of a particular function or set of related app func-

---

## Chunk 3681

tions. Guided tours are employed at first use and after a major release to highlight new
functions, and secondarily, as help. Many apps allow users to relaunch the tour from an
in-app settings dialog or, less frequently, from a help button or menu placed in a top or
bottom navigation bar. Guided tours should allow users to exit the tour from any card
or screen.

---

## Chunk 3682

Use guided tours to orient first-time users.
CH 19. Designing for Mobile and Other Devices 549

---

## Chunk 3683

--- Page 580 ---
overlays
Overlays are another simple way to help the user get started. An overlay covers the entire
screen with a semitransparent layer on which instructions‚Äîoften rendered to look
hand-drawn, and employing arrows to indicate gestures or highlight controls‚Äîare dis-
played. Tapping anywhere on the screen dismisses the overlay. (This is sometimes also

---

## Chunk 3684

accomplished with a close box.) As with guided tours, overlays can be activated again
from a help button or settings dialog.
Use overlays to explicate gestures.
ToolTip overlays
ToolTip overlays are an overlay variation that attempts to provide a ToolTip-like display
of all primary functions on a single overlay screen, and is often used in the context of

---

## Chunk 3685

more complex authoring apps. As such, this idiom is best not used as a welcome screen,
but rather as a help screen.
multi-Touch gestures
Gestures are at the heart of the mobile experience. Although the kind of experience
afforded by gestures is quite rich and immersive, the actual number of core gestures is
fairly small‚Äîand this is for the best. Users don‚Äôt need a huge vocabulary of gestures to

---

## Chunk 3686

satisfy their needs; keeping gestures simple and straightforward makes them easy to
discover and learn.
This section describes the primary uses of the most frequently used multi-touch gestures.
Tap to select, activate, or toggle
The tap is used to select objects and toggle the activation state of controls. Tapped

---

## Chunk 3687

items should get an appropriate selection highlight or activation/deactivation state or
animation.
Tap-and-hold
Tap-and-hold is a gestural idiom that is falling out of favor, and probably rightfully so. It
is typically used to open a contextual pop-up menu on an object, similar to the desktop
550 Part III: Interaction Details

---

## Chunk 3688

--- Page 581 ---
right-click idiom. However, this gesture isn‚Äôt very discoverable, and few users are famil-
iar with it. Therefore, this gesture isn‚Äôt recommended.
Instead, a visible menu control should be placed on the object. Or a tap-to-select model,
combined with an action menu, should be used.
Drag to scroll

---

## Chunk 3689

Drag to scroll can work horizontally or vertically, and is a fundamental direct manipu-
lation gesture.
Vertical dragging can be used to scroll lists or, in conjunction with drag handles, reorder
objects in a list. Dragging downward on a list can initiate a refresh when the list has
already been scrolled to the top. A drag upward can initiate an incremental addition of

---

## Chunk 3690

items after the last displayed item in a list.
The top and bottom drawers supported by some mobile OS‚Äôs also can be accessed via
vertical dragging.
Horizontal dragging can scroll a carousel or swimlane, or open a left-hand or right-hand
drawer.
Drag to move
Dragging also can be used to move or copy an object from one list, pane, or container to

---

## Chunk 3691

another, or to move an object arbitrarily within a canvas or grid.
Drag to control
Dragging also can be used to control knobs, switches, sliders, virtual x-y control pads,
and contextual touch controls, and to operate palette tools (such as brushes in a paint-
ing app) on a canvas.
swipe up/down
Swiping up usually is synonymous with dragging up, although iOS uses a swipe up ges-

---

## Chunk 3692

ture in desktop edit mode to close a running app. Swiping a list or grid upward causes it
to continue scrolling for a while with simulated momentum.
Swiping down usually is synonymous with dragging down. Swiping a list or grid down-
ward causes it to continue scrolling for a while with simulated momentum.
CH 19. Designing for Mobile and Other Devices 551

---

## Chunk 3693

--- Page 582 ---
swipe left
Swiping left usually is synonymous with dragging left. Swiping a carousel or swimlane
to the left causes it to continue scrolling for a while with simulated momentum.
Swiping left also can open a right-hand drawer or close a left-hand drawer.
Apple‚Äôs Safari browser uses a swipe left to navigate like the forward button. Google‚Äôs

---

## Chunk 3694

Chrome browser uses a swipe left to delete browser tabs when in tab edit mode.
swipe right
Swiping right usually is synonymous with dragging right. Swiping a carousel or swim-
lane to the right causes it to continue scrolling for a while with simulated momentum.
Swiping right also can open a left-hand drawer or close a right-hand drawer.

---

## Chunk 3695

Apple‚Äôs Safari browser uses a swipe right to navigate like the back button. Google‚Äôs
Chrome browser uses a swipe right to delete browser tabs when in tab edit mode.
Pinch in/out
The pinch-in gesture is used to shrink or zoom out on objects physically (such as on a
map view). Or you can perform a semantic zoom‚Äîzoom out or up one level in the hier-

---

## Chunk 3696

archy in a set of physically or conceptually nested structures.
The pinch-out gesture is used to expand or zoom in on objects physically (such as on a
map view). Or you can perform a semantic zoom‚Äîzooming in or down one level in the
hierarchy in a set of physically or conceptually nested structures.
rotate
Rotate is a gesture employing the thumb and forefinger twisted clockwise or counter-

---

## Chunk 3697

clockwise together on the touchscreen surface. This gesture can be used to actuate knob
controls. But knobs probably should also support a horizontal or vertical drag action
that starts on the knob as an alternative and more discoverable gesture. It can also be
used to rotate objects, like a selection of pixels in an image editing app.

---

## Chunk 3698

This gesture is somewhat awkward to carry out, given the anatomy of the human wrist.
FiftyThree Inc.‚Äôs iOS app, Paper, uses this gesture to control Undo/Redo. Although this is
552 Part III: Interaction Details

---

## Chunk 3699

--- Page 583 ---
a novel approach, it seems inferior to the more standard Undo/Redo arrow icons from a
usability standpoint.
multifinger swipes
The various mobile OS‚Äôs use various multifinger swipe gestures. For example, iOS supports
an option that permits four-finger left/right swipes to switch between running apps.

---

## Chunk 3700

On the whole, multifinger gestures are not very discoverable and when used in apps may
interfere with OS-level gestures. They are best left unused, or reserved for specific needs.
Inter-App Integration
Modern smartphones, with their standalone app approach, have created a marvelous
ecosystem in which users can easily add amazing functionality to their devices through

---

## Chunk 3701

an app store. This approach does have one Achilles heel: Standalone apps tend not to
foster the useful integration of functionality and data between them. For example, the
iPhone has a phone app, a contacts app, a calendar app, a messaging app, a memo app,
and a reminders app. However, these apps are almost completely standalone and do not

---

## Chunk 3702

communicate with each other except in the most rudimentary ways.
The iPhone and other modern smartphones currently do a reasonable job of integrating
the phone and contacts apps. When a call arrives, you can see the full name from the
address book and, by tapping a button in the address book, you can dial it. However,

---

## Chunk 3703

this integration could be taken a step further. Clicking a name in an address book could
give you a reverse chronological list (or set of lists) of all documents that are associated
with that person: appointments, e-mails, phone calls from the log, memos including the
caller‚Äôs name, websites associated with the person, and so on.

---

## Chunk 3704

Similarly, when an incoming call arrives, the phone could check your location (such as
a cinema) or see if you are currently in a meeting that‚Äôs on your calendar. It could auto-
matically silence the ringer (and perhaps even send an ‚ÄúI‚Äôm busy and will call you back
later‚Äù text message to the person calling you) unless the call is from someone on your
VIP list of callers.

---

## Chunk 3705

It‚Äôs unfortunate that phone manufacturers haven‚Äôt yet applied this kind of integration to
the core suite of phone apps. However, some clever apps like IFTTT (If This Then That) do
allow apps that participate in their service to be wired together with customizable rules
that allow for some level of app integration (see Figure 19-38).
CH 19. Designing for Mobile and Other Devices 553

---

## Chunk 3706

--- Page 584 ---
Figure 19-38: The IFTTT app lets users wire
together apps by allowing them to specify output
and input triggers, effectively allowing simple app
integration.
For music production, Audiobus (see Figure 19-39) is an integration-oriented iOS app that
allows other compatible iOS audio applications to route multiple input audio streams to

---

## Chunk 3707

multiple audio outputs. This effectively allows an entire virtual recording studio to exist
within an iPhone or iPad.
554 Part III: Interaction Details

---

## Chunk 3708

--- Page 585 ---
Figure 19-39: The Audiobus app allows users to chain together the audio streams from compatible
running apps. Doing so supports input, output, and effects, allowing an entire virtual recording studio
to exist within an iPad.
other Devices
Unlike software running on a desktop computer or high resolution mobile device, inter-

---

## Chunk 3709

action design for device-embedded interfaces requires special attention to creating an
experience that coexists with the noise and activity of the real world happening around
the product, combined with the typically limited screen and computational resources
needed to render it. Kiosks and other embedded systems, such as TVs, microwave ovens,

---

## Chunk 3710

automobile dashboards, cameras, bank machines, and laboratory equipment, are unique
platforms with their own opportunities and limitations.
general design principles
Embedded systems (physical devices with integrated software systems) involve some
unique challenges that differentiate them from desktop systems, despite the fact that
CH 19. Designing for Mobile and Other Devices 555

---

## Chunk 3711

--- Page 586 ---
they may include typical software interactions. Examples include smart appliances and
medical informatics devices. When designing any embedded system, whether it is a
smart appliance, kiosk system, or handheld device, keep these basic principles in mind:
‚Ä¢ Don‚Äôt think of your product as a computer.
‚Ä¢ Integrate your hardware and software design.
‚Ä¢ Let context drive the design.

---

## Chunk 3712

‚Ä¢ Use modes judiciously, if at all.
‚Ä¢ Limit the scope.
‚Ä¢ Balance navigation with display density.
‚Ä¢ Minimize input complexity.
The following sections discuss each of these principles in more detail.
Don‚Äôt think of your product as a computer
Perhaps the most critical principle to follow while designing an embedded system is that

---

## Chunk 3713

what you are designing is not a computer, even though its interface might be dominated
by a computer-like bitmap display. Your users will approach your product with specific
expectations about what the product can do (if it is an appliance or familiar handheld
device) or with very few expectations (if you are designing a public kiosk). The last thing

---

## Chunk 3714

you want to do is bring all the baggage‚Äîthe idioms and terminology‚Äîof the desktop
computer world with you to a ‚Äúsimple‚Äù device like a camera or microwave oven. Simi-
larly, users of scientific and other technical equipment expect quick and direct access
to data and controls within their domain, without having to wade through a computer
operating system or file system to find what they need.

---

## Chunk 3715

Designers, especially those who have designed for desktop platforms, can easily forget
that even though they are designing software, they are not always designing it for com-
puters in the usual sense: devices with large color screens, lots of power and memory, full-
size keyboards, and mouse pointing devices. Few, if any, of these assumptions are valid

---

## Chunk 3716

for most embedded devices. And, most importantly, these products are used in much dif-
ferent contexts than desktop computers. Idioms that have become accepted on a PC are
inappropriate on an embedded device. ‚ÄúCancel‚Äù is not an appropriate label for a button
to turn off an oven, and requiring people to enter a ‚Äúsettings‚Äù mode to change the tem-

---

## Chunk 3717

perature on a thermostat is preposterous. Much better than trying to squeeze a computer
interface into the form factor of a small-screen device is to see it for what it is and then
figure out how digital technology can be applied to enhance the experience for its users.
556 Part III: Interaction Details

---

## Chunk 3718

--- Page 587 ---
Integrate your hardware and software design
Embedded systems often benefit from custom hardware. Desktop computers are meant
to be all-purpose, but embedded systems are usually intended to help accomplish a very
specific task. Due to cost, power, and form factor constraints, hardware-based naviga-
tion and input controls must often take the place of onscreen equivalents.

---

## Chunk 3719

It is therefore critical to design the hardware and software elements of the system‚Äôs inter-
face‚Äîand the interactions between them‚Äîsimultaneously, and from a goal-directed,
ergonomic, and aesthetic perspective. Many of the best, most innovative digital devices
of the last several decades, such as the TiVo and the original iPod, were designed from

---

## Chunk 3720

such a holistic perspective. Hardware and software combine seamlessly to create a com-
pelling and effective experience for users, as shown in Figure 19-40. This doesn‚Äôt occur
often enough in the standard development process. Hardware engineering teams regu-
larly hand off completed mechanical and industrial designs to the software teams, who

---

## Chunk 3721

must then accommodate them, regardless of what is best from the user‚Äôs perspective.
Figure 19-40: A Cooper design for a smart desktop
phone, exhibiting strong integration of hardware
and software controls. Users can easily adjust
volume/speakerphone, dial new numbers, and con-
trol playback of voicemail messages with hardware
controls. They also can manage known contacts/

---

## Chunk 3722

numbers, incoming calls, call logs, voicemail, and
conferencing features using the touchscreen and
thumbwheel. Rather than attempting to load too
much functionality into the system, the design
focuses on making the most frequent and import-
ant phone features much easier to use. Note the
finger-sized regions devoted to touchable areas on
the screen and the use of text hints to reinforce the

---

## Chunk 3723

interactions.
CH 19. Designing for Mobile and Other Devices 557

---

## Chunk 3724

--- Page 588 ---
let context drive the design
Another distinct difference between embedded systems and desktop applications is the
importance of environmental context. Although desktop applications sometimes can
introduce contextual concerns, designers generally can assume that most software run-
ning on the desktop will be used on a computer that is stationary and located in a rela-

---

## Chunk 3725

tively quiet and private location. Although this is becoming less true as laptops gain both
wireless capabilities and the power of desktop systems, it remains true that users will, by
necessity of the form factor, be stationary and out of the hubbub even when using laptops.
Exactly the opposite is true for many embedded systems, which either are designed for

---

## Chunk 3726

on-the-go use (handhelds), in an active workspace (like an operating theater), or are sta-
tionary but in a location at the center of public activity (kiosks). Even embedded sys-
tems that are mostly stationary and secluded (like household appliances) have a strong
contextual element. For example, a host juggling plates of hot food at a dinner party is

---

## Chunk 3727

distracted, not in a focused state of mind to navigate a cumbersome set of controls for a
smart oven. Navigation systems built into a car‚Äôs dashboard cannot safely use ‚Äúsoft keys‚Äù
that change their meaning in different contexts, because the driver would be forced to
take her eyes off the road to read each function label. Similarly, a technician on a manu-

---

## Chunk 3728

facturing floor should not be required to focus on difficult-to-decipher equipment con-
trols, because that kind of distraction could be life-threatening in some circumstances.
Thus, the design of embedded systems must match very closely the context of use. For
handhelds, this context concerns how and where the device is physically handled. How

---

## Chunk 3729

is it held? Is it a one-handed or two-handed device? Where is it kept when not in imme-
diate use? What other activities are users engaged in while using the device? In what
environments is it used? Is it loud, bright, or dark there? How does the user feel about
being seen and heard using the device if he is in public? We‚Äôll discuss some of these issues
in detail a bit later.

---

## Chunk 3730

For kiosks, the contextual concerns focus more on the environment in which the kiosk is
being placed and also on social concerns. What role does the kiosk play in the environ-
ment? Is the kiosk in the main flow of public traffic? Does it provide ancillary informa-
tion, or is it the main attraction itself? Does the architecture of the environment guide

---

## Chunk 3731

people to the kiosks when appropriate? How many people are likely to use the kiosk at
a time? Are there sufficient numbers of kiosks to satisfy demand without a long wait? Is
there sufficient room for the kiosk and kiosk traffic without impeding other user traffic?
We touch on these and other questions shortly.
use modes judiciously, if at all

---

## Chunk 3732

Desktop computer applications are often rich in modes: The software can be in many
different states in which input and other controls are mapped to different behaviors.
558 Part III: Interaction Details

---

## Chunk 3733

--- Page 589 ---
Tool palettes (such as those in Photoshop) are a good example. When you choose a tool,
mouse and keyboard actions are mapped to a set of functions defined by that particular
tool. When you choose a new tool, the behavior resulting from similar input changes.
Unfortunately, users are easily confounded by modal behavior. Because devices typically

---

## Chunk 3734

have smaller displays and limited input mechanisms, it is very difficult to convey what
mode the product is in. Significant navigational work is often required to change modes.
Take, for example, pre-smartphone mobile telephones. They often required navigation
of seemingly countless modes organized into hierarchical menus. Most of these old-

---

## Chunk 3735

school mobile phone users only mastered the dialing and address book functionality but
quickly got lost when they tried to access other functions. Even an important function
such as silencing the ringer was often a daunting task.
When designing for embedded systems, it‚Äôs important to limit the number of modes.
Ideally, mode switches should result naturally from situational changes in context. For

---

## Chunk 3736

example, it makes sense for a smartphone to shift into telephone mode when an incom-
ing call is received and to shift back to its previous mode when the call is terminated. If
modes are truly necessary, they should be clearly accessible in the interface, and the exit
path should also be immediately clear.
limit the scope

---

## Chunk 3737

Most embedded systems are used in specific contexts and for specific purposes. Avoid
the temptation to turn these systems into general-purpose computers. Users will be bet-
ter served by devices that enable them to do a limited set of tasks more effectively, than
by devices that attempt to address too many disparate tasks in one place.

---

## Chunk 3738

Many devices like smart phones and slate computers share information with desktop
systems. It makes sense to approach the design of such systems as satellites of the desk-
top: The device is an extension, or satellite, of the desktop, providing key information
and functions in contexts where the desktop system is unavailable. Scenarios can help

---

## Chunk 3739

you determine what functions are truly useful for such satellite systems.
balance navigation with display density
Many devices are constrained by limited display real estate. Whether the underlying rea-
sons are hardware cost, form factor, portability, or power requirements, designers must
make the best use of the display technology available while meeting users‚Äô information

---

## Chunk 3740

needs. Every pixel, segment, and square millimeter of display is significant in the design
of display-constrained embedded systems. Such limitations in display real estate almost
always result in a trade-off between clarity of information displayed and complexity of
navigation. By appropriately limiting the scope of functions, you can ameliorate this

---

## Chunk 3741

CH 19. Designing for Mobile and Other Devices 559

---

## Chunk 3742

--- Page 590 ---
situation somewhat, but the tension between display and navigation almost always
exists to some degree.
Certainly it‚Äôs best to completely flatten the information hierarchy if possible. But if not,
you must carefully map out embedded systems‚Äô displays, and develop a simple and
understandable hierarchy of information. Determine the most important information

---

## Chunk 3743

to get across, and make it the most prominent. Then, look to see what ancillary informa-
tion can still fit on the screen. Try to avoid flashing between different sets of information
by blinking the screen. For example, an oven with a digital control might display both
the temperature you set it to reach and how close it is to reaching that temperature by

---

## Chunk 3744

flashing between the two numeric values. However, this solution easily leads to confu-
sion about which number is which. A better solution is to display the temperature that
the oven has been set to reach and, next to that, show a small bar graph that registers
how close to the desired temperature the oven currently is. You must also leave room in

---

## Chunk 3745

the display to show the state of associated hardware controls or, better yet, use controls
that can display their own state, such as hardware buttons with lamps or hardware that
maintains a physical state (such as toggles, switches, sliders, and knobs).
minimize input complexity
Almost all embedded systems have simplified inputs, not general-purpose keyboards or

---

## Chunk 3746

a desktop-style pointing device. This means that any input to the system‚Äîespecially
text input‚Äîis awkward, slow, and difficult for users. Even the most sophisticated of
these input systems, such as touchscreens, voice recognition, handwriting recognition,
and thumb-boards, are cumbersome in comparison to full-sized keyboards and mice. So

---

## Chunk 3747

it‚Äôs important that input be limited and simplified as much as possible.
Kiosks, even though their screens are usually larger, should nonetheless avoid complex
text input whenever possible. Public kiosks run an unfortunate risk of being a disease
vector, so your first pass should try for noncontact inputs like voice, proximity switches,

---

## Chunk 3748

or non-contact gestural inputs. If more is needed, touchscreens can display soft key-
boards if they are large enough; each virtual key should be large enough to make it dif-
ficult for the user to accidentally mistype. Touchscreens should also avoid idioms that
involve dragging; single-tap idioms are easier to control and more obvious (when given

---

## Chunk 3749

proper affordance) to novice users on such a transient application.
Designing for single-purpose handheld devices
For single-purpose handheld devices (ones for which you are designing both the hard-
ware and the software form factors and interfaces), you should keep in mind some addi-
tional considerations:
560 Part III: Interaction Details

---

## Chunk 3750

--- Page 591 ---
‚Ä¢ Think about how the device will be held and carried. Physical models are essential to
understanding how a device will be manipulated. The models should at least reflect
the device‚Äôs size, shape, and articulation (flip covers and so on). They are more effective
when weight is also taken into account. These models should be employed by designers

---

## Chunk 3751

in context and key path scenarios to validate proposed form factors. Labels on buttons
have very different contextual needs, depending on where and when they will be used.
For example, the labels on a package-delivery tracking tool don‚Äôt need to be backlit like
those on a cell phone or TV remote control.
‚Ä¢ Determine early on whether the device or application will support one-handed or two-

---

## Chunk 3752

handed (or even no-handed) operations. Again, scenarios should make it clear which
modes are acceptable to users in various contexts. It‚Äôs okay for a device that is intended
primarily for one-handed use to support some advanced functions that require two-
handed use, as long as they are needed infrequently.
‚Ä¢ Avoid use of pluralized and pop-up windows. Floating windows typically have no place

---

## Chunk 3753

on small, low-resolution screens. In this regard, interfaces should resemble sovereign-
posture applications, using the full screen real estate. Modeless dialogs should always
be avoided. Modal dialogs and errors should, whenever possible, be replaced using the
techniques discussed in Chapter 15.
Designing for kiosks

---

## Chunk 3754

On the surface, kiosks may appear to have much in common with desktop interfaces:
large, colorful screens and reasonably beefy processors behind them. But as far as user
interactions are concerned, the similarity ends there. Kiosk users, in comparison with
sovereign desktop application users, are at best infrequent users of kiosks and, most

---

## Chunk 3755

typically, use any given kiosk only once. Furthermore, kiosk users will have either a spe-
cific goal in mind when approaching a kiosk or no readily definable goal at all. Kiosk
users typically don‚Äôt have access to keyboards or pointing devices, and often they would
be unable to use either effectively even if they did. Finally, kiosk users typically are in a

---

## Chunk 3756

public environment, full of noise and distractions, and may be accompanied by others
who will be using the kiosk in tandem with them. Each of these environmental issues has
a bearing on kiosk design (see Figure 19-41).
Transaction versus exploration
Kiosks generally fall into two categories: transactional and explorational. Transactional

---

## Chunk 3757

kiosks provide a tightly scoped transaction or service. These include bank machines
(ATMs) and ticketing machines such as those used in airports, train and bus depots, and
some movie theaters. Even gasoline pumps and vending machines can be considered a sim-
ple type of transactional kiosk. Users of transactional kiosks have specific goals in mind:

---

## Chunk 3758

to get cash, a ticket, a Tootsie Roll, or a specific piece of information. These users have no
interest in anything but accomplishing their goals as quickly and painlessly as possible.
CH 19. Designing for Mobile and Other Devices 561

---

## Chunk 3759

--- Page 592 ---
Figure 19-41: The GettyGuide, a system of informational kiosks at the J. Getty Center and Villa in
Los Angeles, designed by Cooper in collaboration with the Getty and Triplecode
Explorational kiosks are most often found in museums or as an information display in
a mall. Educational and entertainment-oriented kiosks typically are not a main attrac-

---

## Chunk 3760

tion, but provide additional information and a richer experience for users who have
come to see the main exhibits. (A few museums, such as science museums and the Expe-
rience Music Project in Seattle, have interactive kiosks that can be exhibits.) Explora-
tional kiosks are somewhat different from transactional kiosks in that users typically

---

## Chunk 3761

have open-ended expectations when approaching them. They may be curious, or want to
be entertained or enlightened, but they may not have any specific end goals in mind. (On
the other hand, they may also be interested in finding the caf√© or the nearest restroom,
which are goals that can be supported alongside the more open-ended experience goals.)

---

## Chunk 3762

For explorational kiosks, the act of exploring must engage the user. Therefore, not only
must the kiosk‚Äôs interface be clear and easy to navigate, but it also must be aesthetically
pleasing and visually (and possibly audibly) exciting to users. Each screen must be inter-
esting in itself and also should encourage users to further explore other content in the
system.

---

## Chunk 3763

Interaction in a public environment
Transactional kiosks, as a rule, require no special enticements to attract users. However,
they do need to be placed in an optimal location to be obviously visible and to handle the
flow of user traffic they will generate. Use wayfinding and sign systems in conjunction
562 Part III: Interaction Details

---

## Chunk 3764

--- Page 593 ---
with these kiosks for maximum effectiveness. Some transactional kiosks, especially
ATMs, need to take into account security issues: If their location seems insecure, users
will avoid them or consider them risky. Architectural planning for transactional kiosks
should occur at the same time as the interaction and industrial design planning.

---

## Chunk 3765

As with transactional kiosks, place explorational kiosks carefully, and use wayfinding
systems in conjunction with them. They must not obstruct any main attractions and
yet must be close enough to the attractions to be perceived as connected to them. There
must be adequate room for people to gather, because exploration kiosks are more likely

---

## Chunk 3766

to be used by groups (such as families). A particular challenge lies in choosing the right
number of kiosks to install at a location. Companies employing transactional kiosks
often engage in user flow research at a site to determine optimum numbers. People
don‚Äôt linger long at transactional kiosks, and they are usually more willing to wait in line

---

## Chunk 3767

because they have a definite end goal in mind. Explorational kiosks, on the other hand,
encourage lingering, which makes them unattractive to onlookers. Because potential
users have few expectations of the contents of an explorational kiosk, it becomes diffi-
cult for them to justify waiting in line to use one. It is safe to assume that most people

---

## Chunk 3768

will approach an explorational kiosk only when it is vacant.
When designing kiosk interfaces, carefully consider the use of sound. Explorational
kiosks seem like a natural for the use of rich audible feedback and content, but volume
levels should not encroach on the experience of the main attraction such kiosks often

---

## Chunk 3769

support. Audible feedback should be used sparingly in transactional kiosks, but it can
be useful, for example, to help remind users to take back their bank card or the change
from their purchases.
Also, because kiosks are in public spaces, designing to account for the needs of differ-
ently abled users is especially important. For more about designing for accessibility, see
Chapter 16.

---

## Chunk 3770

Lastly, as mentioned above, public objects can get dirty and become vectors for disease.
Efforts should be taken to see if the kiosk can be made non-contact and still assist users
with their goals.
managing input
Most kiosks use either touchscreens or hardware buttons and keypads that are mapped
to objects and functions on the screen. In the case of touchscreens, the same principles

---

## Chunk 3771

apply as for other touchscreen interfaces:
‚Ä¢ Make sure that your click targets are large enough. Touchable objects should be large
enough to be manipulated with a finger, high contrast, colorful, and well separated on
the screen to avoid accidental selection. A 20mm click target is a typical minimum if
CH 19. Designing for Mobile and Other Devices 563

---

## Chunk 3772

--- Page 594 ---
users will be close to the screen and not in a hurry. This size should be increased for use
at arm‚Äôs length or when in a rush. A good low-tech trick to make sure that your click
targets are large enough is to print the screens at actual size, ink your fingertip with
an ink pad, and run through your scenarios at a realistic speed. If your fingerprints

---

## Chunk 3773

overlap the edges of your click targets, you probably should increase their size. It‚Äôs
messy, but incontrovertible.
‚Ä¢ Use soft-keyboard input sparingly. It may be tempting to use an onscreen keyboard
to enter data on touchscreen kiosks. However, this input mechanism should be used
only to enter very small amounts of text. Not only is it awkward for the user, but it also

---

## Chunk 3774

typically results in a thick coating of fingerprints on the display.
‚Ä¢ Avoid drag and drop. This gesture can be difficult for users to master on a touchscreen,
making it inappropriate for kiosk users who will never spend the necessary time to
master demanding interaction idioms. Scrolling of any kind should also be avoided on
kiosks except when absolutely necessary.

---

## Chunk 3775

Some kiosks use hardware buttons mapped to onscreen functions in lieu of touchscreens.
As in handheld systems, the key concern is that these mappings remain consistent, with
similar functions mapped to the same buttons from screen to screen. These buttons also
should not be placed so far from the screen or arranged spatially so that the mapping

---

## Chunk 3776

becomes unclear. (See Chapter 12 for a more detailed discussion of mapping issues.) In
general, if a touchscreen is feasible, you should strongly consider it in favor of mapped
hardware buttons.
Designing for 10-foot interfaces
Television-based interfaces (also called 10-foot interfaces) such as TiVo and most cable

---

## Chunk 3777

and satellite set-top boxes rely on user interaction through a remote control. Users typ-
ically operate it when they are sitting across the room from the television. Most remote
controls use inexpensive infrared light to communicate, so unless the remote control
uses more expensive radio-frequency technology, this also means that the user needs

---

## Chunk 3778

to point the remote at the TV and set-top boxes. All of this makes for challenges and
limitations in designing effective information display controls for system navigation and
operation.
It turns out that lists, grids, carousels, and swimlanes all map reasonably well to 10-foot
interfaces, because D-pad navigation consists of up-down and left-right movements.

---

## Chunk 3779

This is good news for designers of services like Netflix, which live on both mobile devices
and set-top boxes. Such interfaces can often be adapted across these platforms with only
minor adjustments. As discussed in Chapter 17, Microsoft‚Äôs Metro design language suc-
cessfully spans desktop, mobile, and set-top platforms.
564 Part III: Interaction Details

---

## Chunk 3780

--- Page 595 ---
Here are some additional considerations to keep in mind for 10-foot user interfaces:
‚Ä¢ Use a screen layout and visual design that can be easily read from across the room.
Even if you think you can rely on high-definition television (HDTV) screen resolutions,
your users will not be as close to the TV screen as they would be to, say, a computer

---

## Chunk 3781

monitor. This means that text and other navigable content needs to be displayed in a
larger size, which in turn dictates how screens of information are organized.
‚Ä¢ Keep onscreen navigation simple. People don‚Äôt think about their TV like they do a
computer, and the navigation mechanisms provided by remotes are limited. Therefore,

---

## Chunk 3782

the best approach is one that can be mapped easily to a five-way (up, down, left, right,
and select) controller. There may be room to innovate with scroll wheels and other
input mechanisms for content navigation. But these will likely need to be compatible
with other set-top devices in addition to yours (see the next point), so take care in your

---

## Chunk 3783

design choices. In addition, visual wayfinding techniques are important for ensuring
ease of use. These include color-coding screens by functional area and providing visual
or textual hints about what navigational and command options are available on each
screen. TiVo does a particularly good job of this.
‚Ä¢ Keep control integration in mind. Most people hate the fact that they need multiple

---

## Chunk 3784

remotes to control all the home entertainment devices connected to their TV. By
enabling control of commonly used functions on other home entertainment devices
besides the one you are designing for (ideally with minimal configuration), you will
be meeting a significant user need. This means that your product‚Äôs remote control or

---

## Chunk 3785

console needs to broadcast commands for other equipment and may need to keep track
of some of the operational state of that equipment as well. Logitech‚Äôs line of Harmony
universal remote controls does both of these things, and the remotes are configured via
a web application when connected to a computer via USB.
‚Ä¢ Keep remote controls as simple as possible. Many users find complex remote controls

---

## Chunk 3786

daunting, and most functions available from typical home entertainment remotes
remain little used. Especially when remote controls take on universal functionality,
the tendency is to cram them with buttons. It‚Äôs not unusual to see 40, 50, or even 60
buttons on a universal remote.
One way to mitigate this is to add a display to the remote. This can allow controls to

---

## Chunk 3787

appear in context, provide additional information to the user, so fewer buttons are
needed at any one time. These controls can be accessed via a touchscreen or via soft-
labeled physical buttons that lie adjacent to the screen. Each of these approaches has
drawbacks. The vast majority of touchscreens do not provide tactile feedback, so the user

---

## Chunk 3788

is forced to look away from his or her TV to actuate a touchscreen control. Soft-labeled
buttons address this problem but add back more buttons to the remote‚Äôs surface. The
addition of a display on your remote may also tempt you to allow navigation to multiple
‚Äúpages‚Äù of content or controls on the display. This may be warranted sometimes, but any

---

## Chunk 3789

design choice that divides the user‚Äôs attention between two displays (the TV and the
remote) runs the risk of creating user confusion and annoyance.
CH 19. Designing for Mobile and Other Devices 565

---

## Chunk 3790

--- Page 596 ---
‚Ä¢ Focus on user goals and activities, not on product functions. Most home entertainment
systems require users to understand the topology and system states to use it effectively.
For example, to watch a movie, the user may need to know how to turn on the TV,
how to turn on the DVD player, how to switch input on the TV to the one that the

---

## Chunk 3791

DVD player is connected to, how to turn on surround sound, and how to set the TV
to widescreen mode. Doing this may require three separate remote controls, or half a
dozen button presses on a function-oriented universal remote. Remote controls like
Logitech‚Äôs Harmony take a different approach: organizing the control around user

---

## Chunk 3792

activities (such as ‚Äúwatch a movie‚Äù) and building a detailed understanding of the user‚Äôs
entertainment setup through a very usable setup wizard. While this is much more
complex to develop, it is a clear win for the user if implemented well.
Designing for automotive interfaces
Automotive interfaces, especially those that offer sophisticated navigation and enter-

---

## Chunk 3793

tainment functionality, (called ‚Äútelematics‚Äù in the field itself) have the particular chal-
lenge of driver safety. Even mildly complex, confusing, or distracting interactions can
risk lives. Such systems require significant design effort and usability validation to avoid
such issues. Add to the risk factor the spatial limitations of the automobile dashboard,

---

## Chunk 3794

center console, and steering wheel, and you have a very particular challenge.
‚Ä¢ Minimize the amount of time hands are off the wheel. Commonly used navigation
controls such as play/pause, mute, and skip/scan should be available on the steering
wheel (driver use) as well as on the center console (passenger use).
‚Ä¢ Enforce consistent layout from screen to screen. If you maintain a consistent layout,

---

## Chunk 3795

the driver will be able to keep his bearings between context shifts.
‚Ä¢ Use direct control mappings when possible. Controls with labels on them are better
than soft-labeled controls. Touchscreen buttons with tactile feedback are also
preferable to soft labels with adjacent hard buttons, because again this requires fewer
cognitive cycles from the driver operating the system to make the mapping.

---

## Chunk 3796

‚Ä¢ Choose input mechanisms carefully. It‚Äôs much easier for drivers to select content from
knobs than from a set of buttons. There are fewer controls to clutter the interface,
knobs protrude and therefore are easier to reach, and (when properly designed) they
afford both rough and fine controls in an elegant and intuitive way.

---

## Chunk 3797

‚Ä¢ Differentiate the physical design of different controls clearly so that they can be
managed as much as possible by touch.
‚Ä¢ Use very strong contrasts in the visual design of displays and a very shallow visual
hierarchy to enable quick glances for information.
‚Ä¢ Keep mode/context switching simple and predictable. With its reviled iDrive system,

---

## Chunk 3798

BMW mapped most of the car‚Äôs entertainment, climate control, and navigation into
566 Part III: Interaction Details

---

## Chunk 3799

--- Page 597 ---
a single control that was a combination knob/joystick. The idea was to make things
simple. But by overloading the control so extensively, BMW created a danger for users
by requiring them to navigate an interface in order to switch contexts and modes.
Modes (such as switching from CD to FM or from climate control to navigation) should

---

## Chunk 3800

be directly accessible with a single touch or button press. And the location of these
mode buttons should be fixed and consistent across the interface.
‚Ä¢ Provide audible feedback. Audible confirmations of commands help reduce the need for
the driver to take his eyes off the road. However, you should ensure that this feedback

---

## Chunk 3801

is itself not too loud or distracting. For in-car navigation systems, verbal feedback
highlighting driving directions can be helpful. This is true as long as the verbal help
(such as turning instructions and street names) is delivered early enough for the driver
to react to it in time. Speech input is another possibility, using spoken commands

---

## Chunk 3802

to operate the interface. However, the automobile environment is noisy. It is unclear
whether verbalizing a command, especially if it needs to be repeated or corrected for,
is any less cognitively demanding than pressing a button. While this kind of feature
makes for great marketing, we think the jury is still out on whether it makes for a
better or safer user experience in the automobile.

---

## Chunk 3803

Designing for audible interfaces
Audible interfaces, such as those found in voice message systems and automated call
centers, involve some special challenges. Navigation is the most critical issue, because
it is easy to get lost in a tree of functionality with no means of visualizing where you
are in the hierarchy. Also, bad phone tree interactions are a common way to erode an

---

## Chunk 3804

otherwise strong brand identity. (Almost all voice interfaces are based on a tree, even if
the options are hidden behind voice recognition, which introduces a whole other set of
problems.)
The following are some simple principles for designing usable audible interfaces:
‚Ä¢ Organize and name functions according to user mental models. This is important in

---

## Chunk 3805

any design but is doubly important when functions are described only verbally and
only in the context of the current function. Be sure to examine context scenarios to
determine what the most important functions are, and make them the most easily
reachable. This means listing the most common options first.
‚Ä¢ Always signpost the currently available functions. After every user action, the system

---

## Chunk 3806

should restate the currently available activities and how to invoke them.
‚Ä¢ Always provide a way to go back one step and to return to the top level. After every
action, the system should tell the user how to go back one step in the function
structure (usually up one node in the tree) and how to get to the top level of the
function tree.
CH 19. Designing for Mobile and Other Devices 567

---

## Chunk 3807

--- Page 598 ---
‚Ä¢ Always provide a means to speak with a human. If appropriate, the interface should
give the user instructions on how to switch to a human assistant after every action,
especially if the user seems to be having trouble. Some more sophisticated systems
are trained to hear user stress and anger (parsing for curse words is common) and

---

## Chunk 3808

automatically responding by connecting to a human.
‚Ä¢ Give the user enough time to respond. Systems usually require verbal or telephone
keypad entry of information. Testing should be done to determine an appropriate
amount of time to wait. Keep in mind that phone keypads can be awkward and very
slow for entering textual information.
568 Part III: Interaction Details

---

## Chunk 3809

--- Page 599 ---
Ch 20
DEsIgnIng For ThE wEb
The advent of the World Wide Web was initially both a boon and a curse for interaction
designers. For perhaps the first time since the invention of graphical user interfaces, cor-
porate decision makers began to understand and adopt the language of user-centered
design, and the term ‚Äúuser experience‚Äù came into vogue among business executives far

---

## Chunk 3810

and wide. On the other hand, the limitations and challenges of web interactivity, which
are a result of its historical evolution, set back interaction design by nearly a decade.
When the first edition of this book was published in August 1995, the web was just begin-
ning to emerge from its roots in academic and scientific computing. At that time, the web

---

## Chunk 3811

was really only good for publishing and reading text documents that had a few links and
inline images (form elements were introduced in HTML 2.0 a few months later). When
the second edition of this book was published in 2003, the consumer and enterprise web,
including corporate intranets, had come into being (and had survived a major industry

---

## Chunk 3812

implosion a few years earlier) but was still highly limited in terms of interactivity. There
were strong conventions for navigation and basic data entry, but doing anything more
sophisticated was a miracle.
Even following the dotcom bust, the promise of the web was apparent to everyone. The
industry was flooded with fresh design school graduates, traditional graphic designers,

---

## Chunk 3813

and young enthusiasts who saw the web as an exciting and lucrative opportunity to cre-
ate compelling communication (and commerce) through new forms of interactive visual
expression. The biggest challenges involved working around the severe limitations of the
medium. Creating a user experience with even a rudimentary level of interactivity, as

---

## Chunk 3814

well as visual and logical organization, was a real challenge for early web designers.

---

## Chunk 3815

--- Page 600 ---
But by the time the third edition of About Face came out in 2007, more powerful web
technologies had come into common use. Things such as HTML5, CSS3, and AJAX had
enabled the rise of rich Internet applications (RIAs). These featured much more sophis-
ticated UI capabilities, including drag and drop, the ability to stream data into UI ele-

---

## Chunk 3816

ments, and much more robust screen structuring capabilities. Browser-based user
interfaces were starting to approach parity with many native desktop capabilities. But
in many areas of the industry, Microsoft .NET native Windows applications were still the
dominant paradigm for software creation and delivery.

---

## Chunk 3817

As we publish this fourth edition of About Face in 2014, the landscape has largely changed.
With the rise of GitHub, the open source movement has created an impressive body of
highly sophisticated HTML5 user-interface components that are highly capable and
largely interoperable (such as the Bootstrap and jQuery ecosystems). Thanks to invest-

---

## Chunk 3818

ment by companies such as Google and Apple, web browsers‚Äô ability to quickly render
and process HTML and JavaScript has become very effective, and the deeper plumbing
of the web stack has also become highly capable.
Deploying software-based experiences over the web has many advantages. It allows for
continuous deployment, and therefore continuous improvement. Network-based appli-

---

## Chunk 3819

cations can be much better suited to the social and collaborative way we live and work.
And we can accommodate much more transient, grazing usage. Installing software (and
keeping it up to date) is a commitment we don‚Äôt always want people to have to make in
order to interact with our product or service.
All of this adds up to a situation where there are very few experiences that a designer can

---

## Chunk 3820

dream up that can‚Äôt be built to perform in a modern-day web browser. It is increasingly
becoming the case that we are building native applications only to support sophisti-
cated authoring tools (for example, graphic design, 3D modeling, video editing, presen-
tation, and code editors). Furthermore, the web has become the most important and

---

## Chunk 3821

popular channel that people use to communicate and that companies use to interact
with their customers.
This means that the quality of web experiences is incredibly important, and the increased
ability to deliver complex behavior in a browser demands application-quality interaction
design. The visual designer‚Äôs focus on look and feel and the information architect‚Äôs focus

---

## Chunk 3822

on content structure are insufficient to create effective and engaging user experiences
with this new generation of the web.
It is now easy to browse GitHub for ready-coded UI components that include many inter-
action-design-friendly features (such as rich visual modeless feedback). But even with
all these rich capabilities, we are still left with the important questions of exactly what

---

## Chunk 3823

will suit the needs and desires of people interacting with a product or service, and how
to create a coherent, useful experience from these building blocks.
570 Part III: Interaction Details

---

## Chunk 3824

--- Page 601 ---
In many ways, it‚Äôs difficult to generalize about designing for the web, because it has
become a huge place. In different tabs in the same browser window, you might be look-
ing at mass media, enterprise software, e-commerce, and social networking sites.
Even though people clearly have different expectations for different kinds of web experi-

---

## Chunk 3825

ences, they must rely on convention to orient themselves to each website or application
they arrive at, especially those they may be seeing for the first time or may visit only
occasionally. While these conventions are constantly evolving, they are also largely tied
to the nature of the medium. They are important for the interaction designer to consider
when creating a browser-based experience.

---

## Chunk 3826

This chapter looks at the most important of these considerations. We should also say
that because web design is an area of rich thought, there is a sizeable body of work
worth engaging with. In particular, Steve Krug‚Äôs Don‚Äôt Make Me Think, Revisited (New
Riders, 2014) and Louis Rosenfeld and Peter Morville‚Äôs Information Architecture for the

---

## Chunk 3827

World Wide Web (O‚ÄôReilly, 2006) cover the essential elements of web design in a clear and
straightforward manner. The website called A List Apart is also a great resource, even if
it often has a more technical focus.
Page-based Interactions
The fundamental character of the medium that is the web is shaped in a huge way by

---

## Chunk 3828

the concept of the page. From its inception, the whole technology stack has been formed
around pages. Developments like AJAX and MVC frameworks for the web allow us to
get pretty fancy with how a page is structured and how pages are related to each other.
Many of the most important conventions and considerations for designing web experi-
ences are tied to the concept of the page.

---

## Chunk 3829

It‚Äôs important for designers who work in both native application software (either desktop
or mobile) and browser-based software to be aware of and intentional about the medium
they‚Äôre designing for. Native applications are usually constructed in terms of screens or
views. Although they are analogous to the page, there are some meaningful and import-

---

## Chunk 3830

ant differences between the two ways of structuring an experience, which we‚Äôll discuss
in this chapter.
navigation and wayfinding
First and foremost, while some navigation between views may occur in a native appli-
cation, this is usually nothing compared to the amount of navigation in a typical web
application. One way of thinking about it is that a native application usually has a lim-

---

## Chunk 3831

ited number of spaces or modes that the user can be in, and different pieces of content
CH 20. Designing for the Web 571

---

## Chunk 3832

--- Page 602 ---
can populate each of those spaces or modes. On the other hand, on the web, each piece
of content typically has its own place (or, rather, URL), and the trick is figuring out how
to help people get to the content they want.
This leads us to the field of information architecture. In the early days of the commercial

---

## Chunk 3833

web, people designing and building websites recognized that a new design issue resulted
from supporting numerous hyperlinked pages: the challenge of organizing and structur-
ing content across pages in a meaningful way. A new breed of designer, the information
architect, built a discipline and practice to address the nonvisual design problems of
logical structure and flow of content.

---

## Chunk 3834

It‚Äôs beyond the scope of this book to deeply address the topic of information architecture.
But this phenomenon‚Äîthat web experiences typically are constructed of numerous
diverse pages with some sort of logical organization‚Äîalso has given interaction design-
ers the challenge of creating meaningful interactions related to navigation.
Primary navigation

---

## Chunk 3835

Since the early days of the commercial web, the term primary navigation has signified
how the user gets to the major areas or sections of a website or application. For some
time, almost every website and application has included persistent links along the top
or left side.
Top navigation is a superior approach in most cases (see Figure 20-1). Side navigation

---

## Chunk 3836

makes the page crowded and occupies the page‚Äôs visual entry point, forcing the user to
scan past it to read content. The biggest limitation of top navigation‚Äîthat it can accom-
modate only a few items of limited length‚Äîmay actually be one of its greatest benefits.
Forcing designers to reduce the number of major areas of a website or application‚Äîand

---

## Chunk 3837

to keep the titles short and punchy‚Äîusually has a better chance of resulting in some-
thing that is comprehensible and useful to users.
Figure 20-1: Basecamp illustrates the common practice of placing primary navigation on the top of
the page. The topmost black bar allows the user to switch between different applications, the naviga-

---

## Chunk 3838

tion adjacent to the Basecamp logo provides access to the major areas of Basecamp itself.
As with most rules of thumb, there are exceptions. If you have a large heterogeneous
content space, reducing to items that can fit on a horizontal bar can result in navigation
terms that are meaninglessly abstract to your users. The biggest advantages of left-side

---

## Chunk 3839

navigation are that items can be longer, there can be more of them, and they are easier
572 Part III: Interaction Details

---

## Chunk 3840

--- Page 603 ---
for users to scan because they are left-aligned. Amazon, which is well known for using
analytics to optimize its page designs, and which sells almost everything known to man,
currently uses left-hand navigation for product categorization on some pages. But on
every page except the home page, this navigation is hidden until the user mouses over

---

## Chunk 3841

Show by Department to reveal it (see Figure 20-2).
Figures 20-2: Amazon uses an approach to side-navigation where it is displayed to the user on the
home page, but requires a mouseover to access on all other pages.
This brings us to another important topic in web design: dynamically hiding and show-
ing navigation controls that depend on the user‚Äôs location in the system, and even where

---

## Chunk 3842

he or she is on a page. An increasingly popular and successful pattern is to keep this top
navigation bar locked to the top of the browser window when the user scrolls. Branding
and other elements are minimized so that the bar takes up less screen real estate and
visual attention as the user engages with content lower down the page (see Figure 20-3).

---

## Chunk 3843

When considering the best approach for primary navigation, it‚Äôs important to consider
people using mobile web browsers. If this is a vital platform for you (and, in this day and
age, in most cases, it should be), make sure you think through how well your navigation
works on smaller screens. One common and utilitarian approach is not to show the navi-

---

## Chunk 3844

gation persistently and to reveal it only when the user clicks a menu or ‚Äúhamburger icon‚Äù
control (three stacked horizontal lines).
CH 20. Designing for the Web 573

---

## Chunk 3845

--- Page 604 ---
Figure 20-3: The header of Google+ is persistent, but makes itself smaller when the user scrolls
down the page
Use persistent headers to maintain context.
A healthy debate is currently under way about whether most users understand the
hamburger icon. At least one statistically significant study has shown that, for at least

---

## Chunk 3846

some users, the word ‚Äúmenu‚Äù performs better than the hamburger icon.1 Figure 20-13,
in the later section on the mobile web, shows how the Boston Globe employs a respon-
sive approach to a top navigation, reducing the number of navigation items for smaller
browser windows, ultimately shrinking to a single ‚Äúsections‚Äù menu for smartphone-sized
screens.
secondary navigation and beyond

---

## Chunk 3847

Often the entire information space of an application (or suite of applications) cannot
be meaningfully navigated to from a handful of top-level links. Even though users will
almost certainly search past this point, the content may bear secondary levels of per-
sistent navigation, and perhaps additional levels beyond that. Expert users of sovereign

---

## Chunk 3848

applications may be able to memorize navigation paths three or more layers deep. But
in our experience, most intermediate or novice users struggle to find information if it‚Äôs
buried in a three-level hierarchy. While a good search mechanism may mitigate this
574 Part III: Interaction Details

---

## Chunk 3849

--- Page 605 ---
problem, it‚Äôs best to try to keep your navigation space as flat and compact as possible
to make it easier for users to create a useful mental model of how your application is
organized.
There are several basic yet effective mechanisms for secondary and additional levels of
navigation. You can add a left-hand menu or a second stripe of horizontal navigation

---

## Chunk 3850

links (if you‚Äôre using this approach for your primary navigation; see Figure 20-4).
Figure 20-4: Room & Board‚Äôs website uses a classic left-hand secondary navigation to access sub-
pages in a major section of the site.
A useful approach to secondary navigation is fat navigation. When the user clicks the
primary navigation, it expands to reveal a much larger set of content areas choices (see

---

## Chunk 3851

Figure 20-5). This type of navigation can be effective because it flows naturally from
interactions the user may have with the primary navigation. And because it is modal and
temporary, it can be much more generous with the amount of space it uses.
To better reinforce the user‚Äôs mental model of site organization, it‚Äôs important to provide

---

## Chunk 3852

persistent feedback about where he or she currently is, regardless of the depth of your
navigation structures. Two common ways to do this are through visual feedback in the
navigation elements themselves, and through breadcrumbs ‚Äîa sequence of links that
represent the user‚Äôs path through the site hierarchy (see Figure 20-6).
CH 20. Designing for the Web 575

---

## Chunk 3853

--- Page 606 ---
Figure 20-5: Hovering over Room & Board‚Äôs primary navigation provides easily accessible links to
sub-pages, without requiring the user to navigate to the office section page first.
Figure 20-6: When you‚Äôre looking at the page for a desk on the Room & Board website, you can see
where you are in the site and navigate back up using the breadcrumbs.
576 Part III: Interaction Details

---

## Chunk 3854

--- Page 607 ---
On some sites, clicking each breadcrumb ‚Äústep‚Äù opens a pop-up menu of lateral links,
enabling users to navigate more easily to different parts of the site hierarchy without as
many clicks‚Äîa feature borrowed from recent Windows OS file browser interfaces.
Breadcrumbs with lateral links help speed navigation.
Content navigation

---

## Chunk 3855

Another important type of navigation is the navigation of content such as photos and
articles. These items often are numerous and subject to change, and the relationships
between them often are associative, rather than strictly linear or hierarchical. These
facts create a number of navigation challenges and patterns.

---

## Chunk 3856

Most commonly, items are presented in listings of some sort‚Äîsequences of headlines
and blurbs for articles, and galleries for photographs. Contemporary designs for these
listings are often inspired by the ‚Äúfeed‚Äù format, popularized by blogs and social media
like Twitter and Facebook.
Because some items may be newer, more important, or more likely to be interesting to

---

## Chunk 3857

the audience, it‚Äôs also useful to highlight featured content. This can be done by using
more prominent typography, by changing the size and position on the page, or by using
a carousel that cycles through features in a more visual format.
It is common for content to be organized in multiple ways (such as by topic, author, or

---

## Chunk 3858

date published) and for users to want to use one or more of those organization schemes
to find content they‚Äôre looking for. In these cases, it can be desirable to expose multiple
navigation schemes to browse content, or make use of the faceted search techniques
discussed in the next section.
searching
One of the most important navigation methods on the web is searching. From our obser-

---

## Chunk 3859

vations and a number of studies, it‚Äôs clear that although search algorithms continue to
improve, most people are not very good at forming queries to find what they‚Äôre looking
for. The idea that Google has somehow trained people to search instead of using naviga-
tion is largely untrue.2
What this means is that an effective search pattern for your website or application

---

## Chunk 3860

should help users go from their initial search term to a page that contains what they‚Äôre
CH 20. Designing for the Web 577

---

## Chunk 3861

--- Page 608 ---
looking for. There are a number of good strategies for doing this. Sometimes using sev-
eral of them in succession helps your audience find what they‚Äôre looking for. Chapter 19
discusses these strategies and their variants in the context of mobile apps, but these
concepts apply equally well on the web, as we‚Äôll see here.

---

## Chunk 3862

One of the most successful innovations in searching has been auto-complete, also known
as type ahead. When the user types in his or her search terms, a number of choices for
complete search terms are presented. These can be based on previous searches (as Goo-
gle does) or actual results (the Spotlight search function in Apple OS X). Auto-complete

---

## Chunk 3863

greatly increases the chances that the user will enter a search term that is likely to have
a meaningful result set (see Figure 20-7).
Figure 20-7: Google Search‚Äôs auto-complete provides a list of expanded search terms based
on what the user has already typed into the search field.
Disambiguation, or auto-suggest is another tool Google has normalized as part of search-

---

## Chunk 3864

ing. As you can see in Figure 20-8, if the searcher types a word that is spelled similarly
to a more commonly searched word (or, more often, mistypes or misspells the word they
really meant to search for), Google displays a list of suggestions along with the results. It
also provides a link to the top suggestion as part of the results.

---

## Chunk 3865

Figure 20-8: Google Search also supports auto-suggest, which provides a list of search terms based
on fuzzy matching based on what the user has typed, in essence allowing the search box to auto-
correct spelling errors.
578 Part III: Interaction Details

---

## Chunk 3866

--- Page 609 ---
That said, even if the user forms his search terms in a productive way, he still may have
a large number of items to look through. This is where faceted search ‚Äî which allows
users to specify the attributes of the item they are looking for‚Äîcan be really useful (see
Figure 20-9).
Auto-complete, auto-suggest, and faceted search help users find things faster.

---

## Chunk 3867

Allowing users to narrow their search in a structured way helps them form a query
that specifies precisely what they‚Äôre looking for. An effective faceted search mechanism
should provide users some visibility into the characteristics of the set of items they‚Äôre
searching, as well as give them ideas about how to make the result set small enough to

---

## Chunk 3868

efficiently find the desired item. Chapter 14 discusses some related approaches for attri-
bute based sorting and filtering.
Figure 20-9: Yelp provides effective faceted search mechanisms, allowing users to quickly fine-tune a
search
CH 20. Designing for the Web 579

---

## Chunk 3869

--- Page 610 ---
Categorized suggestions is yet another method of speeding the user to relevant results
when a search term is applicable across many different categories or domains. This is
achieved by the system offering a list of suggestions, each of which scopes the search to
a particular category. Amazon, with its dozens of retail departments, makes good use of

---

## Chunk 3870

categorized suggestions (see Figure 20-10).
Figure 20-10: Amazon makes good use of categorized suggestions in its main search box, which
allows both explicit scoping via a dropdown to the left of the search field, and categorized sugges-
tions once you start typing.
scrolling
One of the most obvious yet significant features of the page-based web experience is

---

## Chunk 3871

the prevalence of scrolling. Screen/view-based native experiences often have a fixed
screen layout with multiple panes. Although each of them may have scrolling content, it
is almost always good design in a native application to have key functions persistently
available. Even though people are used to seeing a document they‚Äôre editing scroll, they‚Äôd

---

## Chunk 3872

most likely be surprised and dismayed if the toolbar scrolled along with it.
With web experiences, on the other hand, critical information and functions often
must be accessed through scrolling. Web designers have long been concerned about
the ‚Äúfold‚Äù‚Äîthe vertical position on the page below which content isn‚Äôt visible upon page

---

## Chunk 3873

load. However, the rapid rise in the number of touchscreen interactions and things like
Apple‚Äôs Magic Trackpad have made scrolling much more natural and expected than it
used to be with fiddly scrollbars.
580 Part III: Interaction Details

---

## Chunk 3874

--- Page 611 ---
Furthermore, the growth in using mobile devices to access web content has given rise
to the importance of responsive design, in which a web page is designed to format itself
appropriately for the size of the user‚Äôs screen (more on this in the next section). Because
this responsiveness narrows content areas on smaller screens, it‚Äôs much more challeng-

---

## Chunk 3875

ing to try to control what fits on the screen or goes above the fold.
The result of all this is that one of the most important aspects of successful web design
is to engage the user to progress through content or functionality as he or she scrolls
down a page. This doesn‚Äôt apply only to editorial-type content, but also to more highly

---

## Chunk 3876

interactive capabilities. One example is the popular ‚Äúparallax‚Äù effect, in which different
onscreen elements respond to the user‚Äôs scrolling at different speeds.
Much of enterprise software is catching up with the era of touch interaction. Neverthe-
less, there‚Äôs a real opportunity to create more seamless engaging interactions by bring-

---

## Chunk 3877

ing together content and interactive elements that traditionally have been broken into
numerous pages and put them into a longer, scrollable page.
Make scrolling an engaging experience.
One method is to create an effective visual rhythm through the use of white space and
a strong typography system. You also should be generous with font and control sizes to

---

## Chunk 3878

improve usability for touch users and to improve scanability when the user scrolls. It‚Äôs
also important to help users stay oriented as to where they are on the long page. The Nest
website (Figure 20-11) is structured as a number of long scrolling pages. For example, the
‚ÄúLife with Nest‚Äù page is a timeline of how Nest programs itself over time, and as the user

---

## Chunk 3879

scrolls down, the primary navigation docks to the top of the page and there are visual
cues as to what day the user is looking at.
Even though it makes sense to let a single ‚Äúunit‚Äù of content scroll on a single long page,
some sites still divide it across several pages. The reasons for this most often seem not to

---

## Chunk 3880

be about minimizing either vertical scrolling or page load size, but rather maximizing
ad revenue from the multiple loads. If the content is finite, paginating it like this makes
finding, saving, and using the content a more convoluted task even with print functions.
Pagination makes sense only for very long lists of similar elements, such as search results
or news articles.

---

## Chunk 3881

CH 20. Designing for the Web 581

---

## Chunk 3882

--- Page 612 ---
Figures 20-11: The Nest website consists of a number of long scrolling
pages.
582 Part III: Interaction Details

---

## Chunk 3883

--- Page 613 ---
The header and footer
An obvious and hugely important characteristic of the scrolling page is that the top
and bottom of the page are special places with unique opportunities to improve user
flow. The top, often called the header, can be the first thing the user sees when he
arrives on a page. But in many cases, we intentionally bring the most important con-

---

## Chunk 3884

tent below the header to the forefront, allowing the header to recede into the back-
ground a bit. The header almost always includes a brand element like a logotype, and
some persistent navigation items, including the primary navigation (discussed ear-
lier). The header is also commonly the place where a website or application tells the

---

## Chunk 3885

user whether he or she is signed in. Finally, the search function often resides in
the header.
The bottom of the page, or footer, is where, if you‚Äôre lucky and wise, the user ends up,
because he‚Äôs viewed all the content that came before it on the page. This makes it a great
place to suggest where the user should go next‚Äîoften to related content. You can see

---

## Chunk 3886

this pattern used to good effect on many media websites. Another effective use of the
footer is for persistent access to more rarely visited areas of your site or application, like
legal notices, or for a complete fat navigation that includes all top-level and second-level
pages (see Figure 20-12). These can certainly be effective approaches. But it‚Äôs important

---

## Chunk 3887

to consider the circumstances under which your users might need access to these links
and whether you imagine they‚Äôll be web-savvy enough to scroll to the bottom of the page
to look for them.
Figures 20-12: The fat footer on Zappos.com contains a condensed sitemap as well as other social
and promotional content and links.
CH 20. Designing for the Web 583

---

## Chunk 3888

--- Page 614 ---
Paging versus infinite scrolling
One important scrolling-related pattern in things like social media streams and search
results is commonly called infinite scrolling. As the user scrolls down the page, the page
populates more results into the bottom. Assuming you can keep latency down, this can
be a useful and natural-feeling interaction.

---

## Chunk 3889

This is in contrast to the paging of results, in which a predefined number of results are
shown on a page, and navigational links are supplied so that the user can advance to the
next or previous page, as well as (typically) the beginning or end of the results, or to an
arbitrary page of results.
Infinite scroll and site footers are mutually exclusive idioms.

---

## Chunk 3890

It‚Äôs important to remember that if you implement infinite scrolling, your users will never
get to the bottom of the page and therefore will never see the page footer. Infinite scroll-
ing and page footers are mutually exclusive navigation idioms.
Furthermore, infinite scrolling can introduce other potential usability challenges, so it
should be used juduciously:

---

## Chunk 3891

‚Ä¢ Keyboard and screen-reader navigation typically does not work well (if at all) with
infinite scrolling, leading to accessibility issues.
‚Ä¢ Unless carefully designed and implemented, infinite scrolling may not retain its place
in the list after use of the browser back button (and subsequent use of the forward
button to return). This can take users off guard, and can lead to a laborious and

---

## Chunk 3892

frustrating experience of re-scrolling to find a lost item.
The inability to page directly and predictably to items far down in the list makes infinite
scrolling most appropriate for contexts such as news feeds, where information far down
in the list quickly loses its relevancy, and browsing recent items is the primary activity.

---

## Chunk 3893

Infinite scrolling should never be employed for interfaces in which users need to get to
the end of the list quickly, or need to return to a particular list item after navigating
elsewhere.
584 Part III: Interaction Details

---

## Chunk 3894

--- Page 615 ---
The mobile web
Since the web‚Äôs early days, design has had to contend with users who have different-sized
screens, using different browsers, on different operating systems. The huge rise of people
interacting with websites and applications on tablets and phones has made it critical
that designs render gracefully and properly on a wide variety of screen sizes.

---

## Chunk 3895

The contemporary approach for handling these different screen sizes is commonly called
responsive design. It‚Äôs a deep topic, handled well by several books and articles that have
more time to discuss it than we do here. We recommend Ethan Marcotte‚Äôs Responsive
Web Design (A Book Apart, 2011).
This method involves creating a modular layout grid in which content areas flexibly

---

## Chunk 3896

resize up to a point. At key screen widths, called breakpoints, this grid may make more
substantial changes. For example, for screens greater than 1024 pixels wide, we might
choose to show three data visualizations side by side on a page. But when the screen is
less than 1024 pixels wide, the data visualizations stack on top of each other. The Boston

---

## Chunk 3897

Globe‚Äôs website is a good example of a site that makes use of responsive techniques (see
Figure 20-13).
If you have only one version of your site, make it responsive.
The basic idea with responsive design is not to have multiple versions of a website or
application for different screen sizes, but a single version that dynamically adapts to the

---

## Chunk 3898

screen on which it‚Äôs being viewed. This approach has both pros and cons. The advantage
is that a team works within a single conceptual framework. The disadvantage is that this
single UI can be complex for developers to build, and every breakpoint means another
layout to design.
An alternative (and, sometimes, more effective) approach is to create a separate mobile

---

## Chunk 3899

version of the site or application. One of the biggest reasons for this is that screen size
is only one consideration on the mobile web. It‚Äôs also critical to think about how your
designs accommodate touch interaction and other sensors, as well as how they perform
in sunlight and other challenging lighting conditions. Because of these usage consider-

---

## Chunk 3900

ations, it is sometimes a better choice to create a separate version of your web applica-
tion or site for mobile users.
CH 20. Designing for the Web 585

---

## Chunk 3901

--- Page 616 ---
Figure 20-13: The Boston Globe‚Äôs website has several different breakpoint screen widths that change
how the content is flowed and accessed on a desktop, tablet, or phone.
586 Part III: Interaction Details

---

## Chunk 3902

--- Page 617 ---
The Future
As web technologies become more robust, and browsers continue on their trajectory
toward providing richer interaction patterns, the browser will continue to be one of the
most important UI platforms. More-sophisticated visualizations and interactions will
be possible in HTML5. Browsers are likely to improve their local data caches, breaking

---

## Chunk 3903

down one of the last remaining differences between locally installed native applications
and applications that run in a browser window.
As the web and ‚Äútraditional‚Äù media, like TV and print, continue to converge, we see many
possibilities for new content models, new ways of telling stories, and new ways for people

---

## Chunk 3904

to interact with media. Looking at stellar examples like Medium, a website that allows
collaborative content creation, and the beautiful ‚ÄúSnow Fall‚Äù multimedia journalistic
piece in the New York Times, it‚Äôs clear that the web is one of the most important places to
watch for software and media to truly converge.
Notes
1. http://exisweb.net/menu-eats-hamburger

---

## Chunk 3905

2. http://www.nngroup.com/articles/incompetent-search-skills/
CH 20. Designing for the Web 587

---

## Chunk 3906

--- Page 619 ---
Ch 21
DEsIgn DETAIls:
ConTrols AnD DIAlogs
Even though they may have somewhat different visual design trappings from platform
to platform, controls and dialogs constitute a common language for users interacting
with most of the digital products available today. These standard objects are available

---

## Chunk 3907

as part of most GUI development libraries, but this doesn‚Äôt prevent their misuse in many
software applications.
This chapter outlines the majority of common interactive GUI controls and also dis-
cusses their appropriate (and inappropriate) contexts of use.
Controls
Controls are self-contained screen objects through which people interact with digital

---

## Chunk 3908

products. Controls (also known as widgets, gadgets, and gizmos) are the primary build-
ing blocks for creating a typical graphical user interface.
Examined in light of users‚Äô goals, controls come in four basic types:
‚Ä¢ Imperative controls, used to initiate a function
‚Ä¢ Selection controls, used to select options or data

---

## Chunk 3909

--- Page 620 ---
‚Ä¢ Entry controls, used to enter data
‚Ä¢ Display controls, used to manipulate the how and where the application displays itself
and its data
Some controls span more than one of these categories.
Imperative controls
The interaction between humans and computers involves a language of nouns (some-
times called objects), verbs, adjectives, and adverbs. When we issue a command, we are

---

## Chunk 3910

specifying the verb‚Äîthe statement‚Äôs action. When we describe what or whom the action
will affect, we are specifying the sentence‚Äôs noun. Sometimes we choose a noun from an
existing list, and sometimes we enter a new one. We can modify both the noun and the
verb with adjectives and adverbs, respectively.
A control that corresponds to a verb is called an imperative control because it commands

---

## Chunk 3911

action, most often immediately. Menu bar items (discussed in Chapter 18) are also imper-
ative idioms. In the world of controls, the quintessential imperative idiom is the button.
Click the button, and the associated action‚Äîthe verb‚Äîexecutes immediately.
buttons
Buttons were once identified by their simulated-3D raised aspect. However, the trend of

---

## Chunk 3912

flattening affordances, started in the mobile world, removes the 3D cues and threatens
to degrade these controls‚Äô learnability, as shown in Figure 21-1. Generally, if the control
is rectangular (with rounded edges on some platforms), it has the visual affordance of an
imperative. It executes as soon as the user either taps it or clicks and releases it using the

---

## Chunk 3913

mouse. In dialogs (discussed later in this chapter), a default button is often highlighted
to indicate the most common action for the user to take.
Figure 21-1: Standard buttons from Microsoft Windows (top left) Apple OS X (top right),
Android (bottom left), and iOS (bottom right). Although pushbuttons were once given a

---

## Chunk 3914

3D raised affordance indicating pressability, a flatter look appears to be the growing trend.
The button is arguably the most easily discoverable idiom in the designer‚Äôs toolkit. It isn‚Äôt
surprising that it has evolved with such diversity across the user interface. The manip-
ulation affordances of faux three-dimensional buttons prompted their widespread use.
590 Part III: Interaction Details

---

## Chunk 3915

--- Page 621 ---
Part of a button‚Äôs affordance is its visual pliancy, which indicates its pressability. When
the user points to it and clicks the mouse button‚Äîor taps the button with a finger or sty-
lus‚Äîthe button control visually changes from raised to indented, indicating that it has
been activated. This is an example of dynamic visual hinting, discussed in Chapter 13.

---

## Chunk 3916

Poorly designed applications and many websites contain buttons that don‚Äôt animate
when clicked or tapped. This is disconcerting for users, because it generates a mental
question: ‚ÄúDid that actually do something?‚Äù Users expect to see the button change‚Äîthe
pliant response‚Äîand you must satisfy that expectation.

---

## Chunk 3917

Though flat design does away with this pliancy, it can only afford to do so because of the
decades of training and experience users have with the rounded-rectangle shape.
Icon buttons
The toolbar (discussed at length in Chapter 18) has grown into a de facto standard as
familiar as the menu bar. To populate the toolbar, buttons were adapted from their tra-
ditional home on the dialog.

---

## Chunk 3918

When buttons moved to the toolbar, they changed from rectangular to square, and their
text labels were replaced with iconic ones. Thus was born the icon button: half button,
half icon (see Figure 21-2).
Figure 21-2: Icon buttons from Microsoft Office. On the left are examples in Office for Windows,
and on the right are the same examples in Office for OS X. Icon buttons aren‚Äôt rendered with a

---

## Chunk 3919

button affordance until the mouse cursor passes over them.
In Windows 98, the icon button (aka the toolbar button) continued to evolve, losing its
raised affordance except when used. This move reduced visual clutter in response to the
overcrowding of toolbars. Unfortunately, this made it more difficult for newcomers to

---

## Chunk 3920

understand the idiom. Starting with Windows 2000, desktop icon buttons revealed their
affordance only when pointed at by the mouse cursor.
Icon buttons are, in theory, easy to use: They are always visible and don‚Äôt demand as
much time or dexterity as a drop-down menu. Because they are constantly visible, they
are easy to memorize, particularly in sovereign applications. The advantages of the icon

---

## Chunk 3921

button are hard to separate from the advantages of the toolbar; the two are inextricably
linked.
CH 21. Design Details: Controls and Dialogs 591

---

## Chunk 3922

--- Page 622 ---
The downside of the icon button derives not from its button part but from its icon part.
Most users have no problem understanding the visual affordance. The problem is that
the image on the face of the icon button is seldom that clear for a first-time user.
Most icons are difficult to decipher with certainty at first glance, but ToolTips can

---

## Chunk 3923

help with this. A good icon will be learned and remembered when users return to that
function frequently. This is the type of behavior we typically see from intermediate and
advanced users.
However, even the best icon designers will be hard pressed to devise an icon system that
will be usable by novice users without resorting to text labels. ToolTips will help them,

---

## Chunk 3924

but it is awkward to move the mouse cursor and then wait for the ToolTip for every icon
button in your interface. In these cases, menus with verbose textual labels are a bet-
ter approach. Microsoft‚Äôs ribbon control (also discussed in Chapter 18) takes a hybrid
approach that combines text and icons, trading some screen real estate for greater clar-

---

## Chunk 3925

ity and ease for novice users or infrequently-used commands.
hyperlinks
Hyperlinks, or links, are a web convention that has found their way into all sorts of dif-
ferent applications. Typically taking the form of blue underlined text (CSS styling can
play havoc with this standard in all sorts of ways, such as changing their default and tra-

---

## Chunk 3926

versed colors, or providing a focus highlight color on mouseover), a link is an imperative
control used for navigation. This direct and useful interaction idiom has grown beyond
its simple beginnings in taking users to a web page that provides more details about a
hyperlinked word or phrase‚Äîthe original concept behind hypertext. Links now form

---

## Chunk 3927

the navigational infrastructure of complex transactional websites such as Amazon.com
(see Figure 21-3), and, somewhat amazingly, they remain up to the task.
Figure 21-3: Complex transactional websites such as Amazon.com rely
on the simple hyperlink for much of their navigational infrastructure,
which for the most part works remarkably well.
592 Part III: Interaction Details

---

## Chunk 3928

--- Page 623 ---
Images can also be used as links. However, the lack of affordance, especially on mobile
browsers where there is no possibility of highlight on mouseover to indicate pliancy, can
be problematic.
Unfortunately, the idiom‚Äôs success and utility have given many designers the wrong idea:
They believe that replacing more common imperative controls such as buttons or icon

---

## Chunk 3929

buttons with hyperlinks will automatically result in a more usable and successful user
interface. Usually this is not the case. Because most users have learned that links are
a navigational idiom, they will be confused and disoriented if clicking a link results in
the execution of an action (such as the launching of a dialog). In general, you should use

---

## Chunk 3930

links for navigation through content, and buttons or icon buttons for other actions and
functions.
A common web tactic for dialog boxes is to present options using a combination of a
button for the ‚Äúdefault‚Äù choice and an adjacent hyperlink for the other option. This is
effective because a button has a greater visual weight and real estate for easier selection.

---

## Chunk 3931

Unfortunately, it has been used too often to trick users into not noticing the link, and,
thinking they only have one option, making an expensive choice. Because of this, the
tactic can be seen as manipulative, potentially reducing the user‚Äôs trust in the site and
the brand.
Use links for navigation and buttons for action.
selection controls

---

## Chunk 3932

Because imperative controls represent commands‚Äî verbs‚Äîthey need objects‚Äînouns‚Äî
on which to operate. Selection and entry controls are the two controls used to define
nouns (in addition to various custom direct manipulation idioms). A selection control
allows the user to choose this noun from a group of valid choices. Selection controls

---

## Chunk 3933

are also used to configure actions. The nouns may be defined by direct-manipulation
idioms, with selection controls then used to define an adjective or adverb modifying the
object or action on it. Common examples of selection controls include check boxes, list
boxes, and drop-down or pop-up lists.
Traditionally, selection controls did not directly result in actions‚Äîthey required an

---

## Chunk 3934

imperative control to activate. This is no longer always the case. In some situations, such
as the use of a drop-down or pop-up list as a navigation control on a web page, this can
be disorienting to users. In other cases, such as using a drop-down list to adjust type size
in a word processor, this can seem quite natural.
CH 21. Design Details: Controls and Dialogs 593

---

## Chunk 3935

--- Page 624 ---
As with many things in interaction design, both approaches have advantages and dis-
advantages. In cases where it is desirable to allow the user to make a series of selec-
tions before committing to the action, there should be an explicit imperative control (a
button). In cases where users would benefit from seeing the immediate impact of their

---

## Chunk 3936

actions, and those actions are easy to undo, it is completely reasonable for the selection
control to double as an imperative control.
Check boxes
The check box was one of the earliest visual control idioms. It has been a favorite for
presenting a single, binary choice or for selecting from among several choices in a short

---

## Chunk 3937

list (see Figure 21-4). The check box has a strong visual affordance for clicking; it appears
as a pliant area because of a mouseover highlight or a 3D ‚Äúrecessed‚Äù visual treatment.
(The flattening trend in mobile visual design threatens learnability here as well.) After
the user selects it and sees the checkmark appear, he has learned all he needs to know

---

## Chunk 3938

to make it work at will: Click to check; click again to uncheck. The check box is simple,
visual, and elegant.
Figure 21-4: Standard check boxes from Microsoft Windows (top left), Apple OS X (top right),
Android (bottom left), and iOS (bottom right). Again, the trend towards flatness decreases learn-
ability. iOS also breaks the standard check box idiom by using a circular control rather than a

---

## Chunk 3939

square.
The check box is, however, primarily a text-based control. The check box is a familiar,
effective idiom, but it has the same strengths and weaknesses as menus. Well-written
text can make check boxes unambiguous. However, this exacting text forces users to
slow down to read it, and it takes up a considerable amount of real estate.

---

## Chunk 3940

Traditionally, check boxes are square. Users recognize visual objects by their shape, and
the square check box is an important standard. Nothing is inherently good or bad about
squareness; it just happens to have been the shape originally chosen, and many users
594 Part III: Interaction Details

---

## Chunk 3941

--- Page 625 ---
have learned to recognize this shape. There is no good reason to deviate from this pat-
tern. Don‚Äôt make check boxes diamond-shaped, and especially not round (which con-
fuses them with the visual idiom employed by radio buttons), regardless of what your
marketing department or visual designers say.
Toggle buttons

---

## Chunk 3942

Check boxes work well to allow binary state changes, but this idiom isn‚Äôt well-suited for
toolbars. It is, however, possible to implement a more graphical approach to the unitary
check box by modifying the icon button idiom. By allowing an icon button to stay in the
pushed-in state when clicked, and then returning to the nondepressed state when it is

---

## Chunk 3943

clicked again, you create a toggle button (see Figure 21-5). The pushed-in state is no longer
momentary, but rather locks in place until clicked again. The button‚Äôs toggle behavior
has changed its character sufficiently to move it into an entirely different category of
control: from imperative to selection.
Figure 21-5: These images depict toggle buttons in their flat, mouseover,

---

## Chunk 3944

clicked, and selected states.
The toggle button is superseding the check box as a single-selection idiom. It is espe-
cially appropriate in modeless interactions that do not require interrupting the user‚Äôs
flow to make a decision. Toggle buttons are more space-efficient than check boxes. They
are smaller because they can rely on visual recognition instead of text labels to indicate

---

## Chunk 3945

their purpose. Of course, this means that they exhibit the same problem as imperative
icon buttons: the icon‚Äôs inscrutability. We are saved once again by ToolTips. Those tiny
pop-up windows give us just enough text to disambiguate the icon button without per-
manently consuming too many pixels.
state-switching buttons: an idiom to avoid

---

## Chunk 3946

State-switching buttons are an all-too-common control variant used to save interface
real estate. Unfortunately, this savings comes at the cost of considerable user confusion.
A classic example is collapsing play and pause onto the same button on an audio player.
In the paused state, the button contains the universal play triangle icon. Then, when you

---

## Chunk 3947

click it, it switches to the play state and displays the universal pause icon‚Äîtwo vertical
bars‚Äîwithout indenting the button as a regular toggle button would.
The control suggests that you can click it, so when it displays the play icon, it intends
to mean that when you click it, music will start. The button then changes to display the

---

## Chunk 3948

pause icon to indicate that clicking it again will pause playback. The problem with this
CH 21. Design Details: Controls and Dialogs 595

---

## Chunk 3949

--- Page 626 ---
approach is that the control could be interpreted as indicating the player‚Äôs state‚Äîpaused
or playing. This means that there are two very reasonable and contradictory interpreta-
tions of the icons on the button. The control can serve as either a state indicator or a
state-switching selection control, but not both (see Figure 21-6). Of course there‚Äôs music

---

## Chunk 3950

playing to confirm your selection in a music player, but there are plenty of interfaces
where such explicit confirmation is not available.
click / tap
ON OFF
The control The control
is now in the is now in the
OFF state ON state
Figure 21-6: State-switching button
controls are very efficient. They save
space by controlling two mutually exclu-
sive options with a single control. The

---

## Chunk 3951

problem with these controls is that they
fail to fulfill the second duty of every
control‚Äîto inform users of their current
state. If the button says ON when the
state is off, it is unclear what the setting
is. If it says OFF when the state is off,
however, where is the ON button? Using
switch controls makes much more sense
in this instance.

---

## Chunk 3952

The solution is to either spell out the verb‚ÄîPlay or Pause‚Äîin text on the button or, bet-
ter yet, to use some other technique altogether. For example, you could replace the but-
ton with two buttons or, as some audio players do, with icons for both states. Doing
so would make the toggle‚Äôs state-switching nature more explicit. If this last approach

---

## Chunk 3953

also included highlighting the icon representing the active state, it would work almost
perfectly. Unfortunately, however, almost every audio player app now uses the broken
state-switching idiom, toggling between the play and pause icon, and most users have
now become accustomed to it, for better or worse.
radio buttons

---

## Chunk 3954

Similar in appearance to the check box is the radio button, shown in Figure 21-7. When
radios were first put in automobiles, people discovered that tuning the radio by rotating
a knob while driving was unsafe. So, automotive radios were offered with a panel consist-
ing of a half-dozen chrome-plated buttons. When pressed, each one would mechanically

---

## Chunk 3955

dial the tuner to a preset station. Now you could tune to your favorite station‚Äîwithout
taking your eyes off the road‚Äîjust by pushing a button.
596 Part III: Interaction Details

---

## Chunk 3956

--- Page 627 ---
Figure 21-7: Standard radio buttons from Microsoft Windows (top left), Apple OS X
(top right), Android (bottom left). iOS (bottom right) doesn‚Äôt have a radio button
idiom, but makes use of the switch control for some instances where a radio button
might be used on other platforms.
The behavior of GUI radio buttons, like their mechanical forebears, is mutually exclu-

---

## Chunk 3957

sive: When one option is selected, the previously selected option automatically deselects.
Only one button can be selected at a time. Consequently, radio buttons always come in
groups of two or more, and one radio button in each group must always be selected. Pre-
senting a single radio button doesn‚Äôt make sense for the user‚Äîyou should use a check

---

## Chunk 3958

box or similar selection control in that instance.
Radio buttons use the same amount of space on-screen as check boxes‚Äîmore, even,
since radio buttons are meaningful only in groups. Radio buttons are well suited to a
pedagogical role, which means that they can be justified in infrequently used dialogs.
But drop-down lists are often a better choice on the surface of a sovereign application

---

## Chunk 3959

that must cater to daily users.
For the same reason that check boxes are traditionally square, i.e., that‚Äôs how we‚Äôve
always done it, radio buttons are almost always round.
Icon buttons have reimagined the radio button in the same way they have the check box:
If two or more latching (toggle) icon buttons are grouped and are programmed so that

---

## Chunk 3960

only one of them at a time can be activated, they form a bank of radio icon buttons. This
more modern construct ends up looking and behaving more like its mechanical ances-
tors than the traditional circular radio buttons.
The alignment controls on Word‚Äôs toolbar are an excellent example of radio icon buttons,
as shown in Figure 21-8.

---

## Chunk 3961

Just as with all icon button idioms, these are efficient consumers of space, letting expe-
rienced users rely on spatial memory and pattern recognition to identify them and let-
ting infrequent users rely on ToolTips to remind users of their purpose. First-time users
CH 21. Design Details: Controls and Dialogs 597

---

## Chunk 3962

--- Page 628 ---
either will be clever enough to learn from the ToolTips or will learn more slowly, but just
as reliably, from other, parallel, pedagogic command vectors.
Figure 21-8: Word‚Äôs alignment
controls are a bank of radio
icon buttons, which act like
traditional radio buttons. One
is always selected, and when
another is clicked, the first
one returns to its unselected

---

## Chunk 3963

state. This variant is a space-
conservative idiom that is well
suited for frequently used
options.
switches
The switch control is a more compact version of two radio buttons used together. (It is
also a more understandable version of a single check box, since both states are labeled
explicitly.) It has two states, typically on and off, which are labeled on either side of the

---

## Chunk 3964

switch, as shown in Figure 21-9. Clicking either side of the switch or, on mobile, swiping
in the appropriate direction slides the switch‚Äôs 3D affordance to the on or off position.
These are handy in Settings screens on mobile apps, where many app functions often can
be selectively turned on and off. They are less common, and somewhat more awkward to
use, in desktop and web apps.

---

## Chunk 3965

Figure 21-9: Switch controls are prevalent in mobile
apps (such as in iOS, shown here), especially on Set-
tings screens, which contain product features that can
be turned on and off.
598 Part III: Interaction Details

---

## Chunk 3966

--- Page 629 ---
Combo icon buttons
A variant of the radio icon button replaces the bank of icon buttons with a drop-down
list of icons. Because of its similarity to the combo box control (see the later section
‚ÄúCombo Boxes‚Äù), we call this a combo icon button (see Figure 21-10). Normally in Win-
dows it looks like a single icon button with a small down arrow to its right. If you click

---

## Chunk 3967

the arrow, it drops down a menu of several icon buttons from which users may choose.
The selected icon button then appears on the toolbar next to the arrow. Clicking the
icon button itself actuates the imperative indicated by the selected state. Like menus,
icon buttons also should activate if the user clicks and holds the arrow, drags, and then
releases over the desired selection.

---

## Chunk 3968

Figure 21-10: This combo icon
button from Microsoft Office
is a group of icon buttons that
behave like a combo box.
Variations on combo icon buttons include drawing a small downward- or right-pointing
triangle in the lower-right corner of the combo icon button icon in place of the separate
down arrow that is seen in Microsoft toolbars. Adobe products use this variant in their

---

## Chunk 3969

palette controls. The user must click and hold the icon button itself to bring up the menu
(which, in Adobe palette controls, unfolds to the right rather than down, as shown in
Figure 21-11). You can vary this idiom quite a bit. Creative software designers are doing
just that in the never-ending bid to cram more functions onto screens that are always
too small.

---

## Chunk 3970

CH 21. Design Details: Controls and Dialogs 599

---

## Chunk 3971

--- Page 630 ---
Figure 21-11: These combo icon buttons taken from Adobe Photoshop (left) and Mozilla Firefox
(right) show the diversity of idiom applications. In Photoshop, the combo icon button is used to
switch between various modal cursor tools, whereas in Firefox it is used to select a previously visited

---

## Chunk 3972

web page to return to. In the first example, it is used to configure the user interface, whereas in the
second it is used to perform an action.
You can see a Microsoft variant in Word, where the icon button for specifying the
colors of highlights and text show combo icon button menus that look more like little
palettes than stacks of icon buttons. As you can see from Figure 21-11, these menus

---

## Chunk 3973

can pack a lot of power and information into a compact control. This facility is defi-
nitely for frequent users, particularly mouse-heavy users, and less for first- timers.
However, for users who have at least basic familiarity with the available tools, the
idiom is instantly clear after it is discovered or demonstrated. This is an excellent

---

## Chunk 3974

control idiom for sovereign-posture applications with which users interact for long
hours. Working a menu with relatively small targets demands sufficient manual
dexterity. But this is much faster than going to the menu bar, pulling down a menu,
selecting an item, watching the dialog deploy, selecting a color on the dialog, and then
clicking the OK button.

---

## Chunk 3975

With the introduction of the ribbon control idiom, Microsoft moved away from tradi-
tional combo icon buttons and instead offered yet another variant of this idea: an icon
button attached to a more standard menu. Clicking the icon button fires off an impera-
tive command. Clicking the arrow to the right of or below the button launches a menu

---

## Chunk 3976

with related but less frequently accessed functions (see Figure 21-12).
600 Part III: Interaction Details

---

## Chunk 3977

--- Page 631 ---
Figure 21-12: Microsoft Office‚Äôs ribbon control contains a new variant of combo button icons. Click-
ing the button launches an imperative, and clicking the arrow opens a more traditional menu of
related functions.
list controls
List controls allow users to select from a finite set of text strings, each representing a

---

## Chunk 3978

command, object, or attribute. These controls are also known as list boxes or listviews,
depending on which platform and control variant you are talking about. Like radio but-
tons, list controls are powerful tools for simplifying interaction, because they eliminate
the possibility of making an invalid selection.

---

## Chunk 3979

List controls are small text areas with a vertical scrollbar on the right edge, as shown in
Figure 21-13. The application displays objects as discrete lines of text in the box, and the
scrollbar moves them up or down. The user can select a single line of text at a time by
clicking it. A list control variant allows multiple selection, in which the user can select

---

## Chunk 3980

more than one item at a time, usually by Shift-clicking for continuous or Ctrl-clicking for
discontinuous items.
Figure 21-13: On the left is a list control from Windows. The images on the right show a
Windows drop-down menu in its closed and open states.
CH 21. Design Details: Controls and Dialogs 601

---

## Chunk 3981

--- Page 632 ---
The drop-down menu, discussed previously, can also be considered a variant of the list
control. These ubiquitous controls show only the selected item in a single row, until the
control is clicked or tapped. Doing so reveals other available choices (also shown in
Figure 21-13).
Apple‚Äôs iOS operating system has introduced a gestured-based variant of the list con-

---

## Chunk 3982

trol sometimes called the ‚Äúbarrel control.‚Äù In it, the list of text items are rendered to
appear as though they are wrapped around a cylinder that you rotate by swiping until
the desired item is centered in the control. The interesting twist on this control, besides
its barrel-shaped rendering, is that it can contain independently scrolling columns.

---

## Chunk 3983

This makes it ideal for purposes such as selecting dates and times. This clever approach
merges several related list controls into a single widget, as shown in Figure 21-14.
Figure 21-14: iOS supports a gesture-based ‚Äúbarrel control‚Äù listview vari-
ant that also supports multiple independently swipable scrolling columns.

---

## Chunk 3984

The barrel control thus can merge several related list controls into a single
widget.
Early list controls handled only text. Unfortunately, that decision often affects their
behavior to this day. A list control filled with line after line of text unrelieved by visual
symbols is a dry desert indeed. However, starting with Windows 95, Microsoft has

---

## Chunk 3985

allowed each line of text in a listview control to be preceded with an icon (without the
need for custom coding). This can be useful. In many situations, users benefit from see-
ing a graphical identifier next to important text entries (see Figure 21-15). A newer con-
vention is to use the list items in a drop-down or other listview control as a preview
602 Part III: Interaction Details

---

## Chunk 3986

--- Page 633 ---
facility. This is commonly used in cases where the control functions as both a selection
control and an imperative control, such as when you select a style in Microsoft Word.
Figure 21-15: On the left is a list control with icons from Windows that allows users to visually iden-
tify the application they are looking for. On the right is the style drop-down list from Office 2010.

---

## Chunk 3987

Here, the items in the list provide a preview of the effects of their selection.
Distinguish important text items in lists with graphic icons.
Listviews are, true to their name, good for displaying lists of items and allowing users to
select one or more of them. They are also a good idiom for providing a source of dragga-

---

## Chunk 3988

ble items (though not with the drop-down variant). If the items are draggable within the
listview itself, this makes a fine tool for enabling the user to put items in a specific order.
(See the ‚ÄúOrdering Lists‚Äù section later in this chapter.)
Earmarking
Generally speaking, users select items in a list control as input to some function, such as

---

## Chunk 3989

selecting the name of a desired font from a list of several available fonts. Selection in a list
control is conventional, with a selected item shown using the highlight color.
Occasionally, however, list controls are used to select multiple items, and this can intro-
duce complications. The selection idiom in list controls is well suited for single selection

---

## Chunk 3990

but is much weaker for multiple selection. In general, the selection of multiple discrete
objects works adequately if the entire playing field is visible at once, like the icons on
a desktop. If two or more icons are selected at the same time, you can clearly see this,
because all the icons are visible at the same time.
CH 21. Design Details: Controls and Dialogs 603

---

## Chunk 3991

--- Page 634 ---
But if the pool of available discrete items is too large to fit in a single view, and some of
it must be scrolled offscreen, the selection idiom immediately becomes unwieldy. This is
the normal state of affairs for list controls. Their standard mode of selection is mutual
exclusion, so when you select one thing, the previous selected thing is deselected. Thus,

---

## Chunk 3992

it is far too easy, in the case of multiple selection, for users to select an item, scroll it into
invisibility, and then select a second item, forgetting that they have now deselected the
first item because they can no longer see it.
The alternative is equally unpalatable: The list control is programmed to disable the

---

## Chunk 3993

mutual-exclusion behavior of a standard list control in its selection algorithm. This
allows users to click as many items as they like, with all remaining selected. Things
now work perfectly (sort of): The user selects one item after another, and each one stays
selected. The fly in the ointment is that there is no visual indication that selection is

---

## Chunk 3994

behaving differently from the norm. It is just as likely that the user will select an item,
scroll it into invisibility, and then spot a more desirable second item and select it, expect-
ing the first‚Äîunseen‚Äîitem to automatically be deselected because the control is mutu-
ally exclusive. You get to choose between offending the first half of your users or the
second half.

---

## Chunk 3995

When objects can scroll off the screen, multiple selection requires a better, more distinct
idiom. A possible approach is to use an idiom different from simple selection‚Äîone that
is visually distinct. But what is it?
It just so happens that we already have another well-established idiom to indicate that
something is selected‚Äîthe check box. Check boxes communicate their purposes and

---

## Chunk 3996

settings quite clearly, and, like all good idioms, they are easy to learn. Check boxes are
also clearly disassociated from any hint of mutual exclusion. Suppose we added a check
box to every item in our problematic list control. Not only would the user clearly see
which items were selected and which were not, but he also would clearly see that the

---

## Chunk 3997

items were not mutually exclusive. This would solve both of our problems in one stroke.
This check box alternative to multiple selection is called earmarking, an example of
which is shown in Figure 21-16.
Dragging and dropping from lists
List controls can be treated as palettes of goodies to use in a direct-manipulation idiom.

---

## Chunk 3998

If the list were part of a report-writing application, for example, you could click an entry
and drag it to the surface of the report to add a column representing that field. It‚Äôs not
selection in the usual sense, because it is a completely captive operation. Without a
doubt, many applications would benefit if they used list controls that supported drag-
ging and dropping.

---

## Chunk 3999

604 Part III: Interaction Details

---

## Chunk 4000

--- Page 635 ---
Figure 21-16: Selection normally is a mutually exclusive oper-
ation. When the need arises to discard mutual exclusivity to
provide multiple selection, things can become confusing if
some of the items can be scrolled out of sight. Earmarking is a
solution. Put check boxes next to each text item, and use them
instead of selection to indicate the user‚Äôs choices. Check boxes

---

## Chunk 4001

are a clearly non-mutually exclusive idiom and a familiar GUI
idiom. Users grasp the workings of this idiom right away.
Such draggable items can help users gather items into a set. Providing two adjacent list
controls, one showing available items and the other showing chosen items, is a common
GUI idiom. One or sometimes a bidirectional pair of arrow buttons placed between them

---

## Chunk 4002

allows items to be selected and transferred from one box to the other (see Figure 21-17). It
is so much more pleasant when the idiom is buttressed with the ability to just click and
drag the desired item from one box to another, without having to go through the inter-
mediate steps of selection and function invocation.
ordering lists

---

## Chunk 4003

Sometimes the need arises to drag an item from a list control to another position in the
same list control. This need arises more often than most interaction designers seem to
think.
Many applications offer automatic sort facilities for important lists. Windows Explorer,
for example, lets you sort files by name, modification date, type, and size. That‚Äôs nice, but

---

## Chunk 4004

wouldn‚Äôt it be even better if users could order them by importance? Algorithmically, the
application could order them by frequency of user access, but that wouldn‚Äôt always get
the right results. Also adding a factor of how recently a file was accessed would get closer
but still wouldn‚Äôt be exactly right.
Why not let users move what‚Äôs important to them to a region at the top, and sort those

---

## Chunk 4005

things separately (in alphabetical or whatever order), in addition to sorting the full direc-
tory below? For example, you might want to rearrange a list of the people in your depart-
ment in descending order by where they sit. No automatic function will do this; you just
have to drag them until it‚Äôs right. This is the kind of customizing that an experienced

---

## Chunk 4006

CH 21. Design Details: Controls and Dialogs 605

---

## Chunk 4007

--- Page 636 ---
user wants to do after long hours of familiarization with an application. It takes a lot of
effort to fine-tune a directory like this, and the application must remember the exact
settings from session to session. Otherwise, the ability to reorder things is worthless.
Figure 21-17: This dialog from Microsoft Outlook Express would benefit from the

---

## Chunk 4008

ability to drag a contact from the list on the left into the To, Cc, and Bcc lists.
The arrow button functionality is a bit less clear since the lists that the contacts
are copied to are below the list being copied from, rather than adjacent to it. Note
also the unfortunate use of a horizontal scrollbar‚Äîbut luckily, the dialog can be
expanded by dragging the lower left corner.

---

## Chunk 4009

Being able to drag items from one place to another in a list control is powerful, but it
demands that autoscrolling be implemented (see Chapter 18). If you pick up an item in
the list but the place you need to drop it is currently scrolled out of view, you must be able
to scroll the listview without putting down the dragged object.
horizontal scrolling in lists

---

## Chunk 4010

List controls normally have a vertical scrollbar for moving up and down through the list.
List controls can also be made to scroll horizontally. This feature allows the developer to
put extra-long text into the list controls with a minimum of effort. However, it is a huge
pain for users.
Text should only be scrolled horizontally in large tables such as spreadsheets, where

---

## Chunk 4011

locked row and column headers can provide context for each column. When a text list
is scrolled horizontally, it hides from view one or more of the first letters of every single
606 Part III: Interaction Details

---

## Chunk 4012

--- Page 637 ---
line of text showing. This makes none of the lines readable, and the text‚Äôs continuity is
destroyed.
Avoid scrolling text horizontally.
If you find a situation that seems to call for horizontal scrolling of text, search for alter-
native solutions. Begin by asking yourself why the text in your list is so long. Can you

---

## Chunk 4013

shorten the entries? Can you wrap the text to the next line to avoid that horizontal
length? Can you allow the user to enter aliases for the longer entries? Can you use graph-
ical entries instead? Can you use ToolTips? Ideally, you also should consider whether
you can widen the control. Can you rearrange things on the window or dialog to expand
horizontally?

---

## Chunk 4014

Absent the ability to widen the control, there are two possible approaches: Wrap the text
to the next line, indenting it so that it is visually different from other entries, or truncate
with an ellipsis, and provide the full text with a ToolTip. The former means that you now
have a list control with items of variable height. The latter might be problematic if the list

---

## Chunk 4015

entries start with similar text. But either is still better than horizontal scrolling.
Remember, we‚Äôre just talking about text. For graphics or large tables, there is nothing
wrong with horizontal scrollbars or horizontally scrollable windows in general. But pro-
viding a text-based list with a required horizontal scrollbar is like providing a computer

---

## Chunk 4016

with a required hand-crank electrical generator‚Äîbad news.
Entering data into a list
Modern list and tree controls (discussed later in this chapter) offer an edit-in-place facil-
ity. Windows Explorer uses both of these controls; you can see how they work by renam-
ing a file or directory. To rename a file in OS X or Windows, you click the desired name

---

## Chunk 4017

twice‚Äîbut not too quickly, lest this action be interpreted as a double click and open the
object in question. You then enter whatever changes you want. Items that can be edited
in other circumstances should, when displayed in list controls, be editable there as well.
The edge case that makes edit-in-place a real problem is adding a new entry to the list.

---

## Chunk 4018

Most designers use other idioms to add list items. Click a button or select a menu item,
and a new, blank entry is added to the list. The user can then edit its name in place.
It would be more sensible if you could, say, double-click in the space between exist-
ing entries to create a new, blank entry right there, or at least have a perpetual open

---

## Chunk 4019

space at the beginning or end of the list with a Click to Add Entry label on it to make it
CH 21. Design Details: Controls and Dialogs 607

---

## Chunk 4020

--- Page 638 ---
discoverable. Another solution to this problem is the combo box, which we‚Äôll talk about
in a moment.
Drop-down and pop-up lists
Drop-down lists (also called pop-up lists) take the place of a stack of radio buttons. This
gives users a compact way to make a single selection from a list (see Figure 21-13). The

---

## Chunk 4021

current selection is shown when the pop-up list closes. Generally speaking, pop-up lists,
unlike their command-oriented cousins in the menu bars of desktop applications, focus
on selecting objects rather than executing commands. However, they can sometimes
immediately affect the display of information if, for example, they are used as part of a

---

## Chunk 4022

live search filter, or as the mechanism for navigating to a page on a website.
Combo boxes
The combo box is‚Äîas its name suggests‚Äîa combination of a list box and an edit field (see
Figure 21-18). It provides an unambiguous method of data entry into a list control. As
with normal list boxes, a drop-down variant has a reduced impact on screen real estate.
Figure 21-18: The Word font selection

---

## Chunk 4023

drop-down combo box allows users to
select a font from the drop-down list or
simply type the name of the desired font
into the text field.
Combo boxes clearly differentiate between the text-entry part and the list-selection part,
minimizing user confusion. For single selection, the combo box is a superb control. You

---

## Chunk 4024

can use the edit field to enter new items, and it also shows the current selection in the
list. When the current selection is showing in the edit field, the user can edit it there‚Äî
sort of a poor man‚Äôs edit-in-place.
608 Part III: Interaction Details

---

## Chunk 4025

--- Page 639 ---
Because the edit field of the combo box shows the current selection, the combo box
is by nature a single-selection control. There is no such thing as a multiple-selection
combo box. Single-selection implies mutual exclusion, which is one of the reasons why
the combo box has replaced groups of radio buttons for selection from among mutually

---

## Chunk 4026

exclusive options. Other reasons include space efficiency and the ability to add items
dynamically, something that radio buttons cannot do.
When drop-down variants of the combo box are used, the control shows the current
selection without consuming space to show the list of choices. Essentially, it becomes a
list-on-demand, much like a menu provides a list of immediate commands on demand.

---

## Chunk 4027

A combo box is a pop-up list control.
The screen efficiency of the drop-down combo box allows it to do something remarkable
for a control of such complexity: It can reasonably reside permanently on an applica-
tion‚Äôs main screen. It can even fit comfortably on a toolbar. It is an effective control for
deployment on a sovereign-posture application. Using combo boxes on the toolbar is

---

## Chunk 4028

more effective than putting the equivalent functions on menus. Combo boxes display
their current selection without requiring any action on the user‚Äôs part, such as pulling
down a menu to see the current status.
If drag-and-drop is implemented in list controls, it should also be implemented in combo
boxes. For example, being able to open a combo box, scroll to a choice, and then drag the

---

## Chunk 4029

choice onto a document under construction is a powerful idiom (the appearance of a
drag handle on mouseover could provide pliancy). Drag-and-drop functionality should
be a standard part of combo boxes.
Tree controls
Tree controls (sometimes called ‚Äútreeviews‚Äù) are listviews that can present hierarchical
data. They display a sideways ‚Äútree‚Äù of visually-connected branches of items, often with

---

## Chunk 4030

icons for each entry. The entries can be expanded or collapsed the way that many outlin-
ing applications work. Developers tend to like this control, because it often matches the
way they think about complex functions and data, and because it is easy to build. It is
often used as a file system navigator and is a highly effective way to present hierarchical
information.

---

## Chunk 4031

Unfortunately, hierarchical trees are one of the most inappropriately used controls in the
toolbox. They can be problematic for users because many people have difficulty think-
ing in terms of hierarchical data structures. We have seen countless interfaces where
developers have forced nonhierarchical data into a tree control with the rationale that

---

## Chunk 4032

trees are ‚Äúintuitive.‚Äù While they may be intuitive to developers, they neither allow users
to capitalize on other, more interesting relationships between objects, nor respect the
often messy real-world relationships between things.
CH 21. Design Details: Controls and Dialogs 609

---

## Chunk 4033

--- Page 640 ---
It only makes sense to use a tree control (no matter how tempting it may be) in the case
where what is being represented is ‚Äúnaturally‚Äù thought of as a hierarchy (such as a family
tree). Using a tree control to represent objects that are arbitrarily related is asking for big
trouble when it comes to usability.
Entry controls

---

## Chunk 4034

Entry controls enable users to supply information to or set a value in an application.
The most basic entry control is a text edit field. Like selection controls, entry controls
represent nouns to the application. Because a combo box contains an edit field, some
combo box variants qualify as entry controls too. Also, any control that lets users enter

---

## Chunk 4035

a numeric value is an entry control. Because they allow users to set numeric values, con-
trols such as spinners, gauges, sliders, and knobs fit in this category.
bounded and unbounded entry controls
Any control that restricts the available set of values that the user can enter is a bounded
entry control. A slider that moves from 1 to 100, for example, is bounded. Regardless of

---

## Chunk 4036

the user‚Äôs actions, no number outside those specified by the application can be entered
with a bounded control. This prevents users from entering an invalid value.
Conversely, a simple text field can accept any keyboard character the user types into it. This
open-ended entry idiom is an example of an unbounded entry control. With an unbounded

---

## Chunk 4037

entry control, it can be easy for users to enter values that are invalid for the application. The
application may subsequently reject the value, of course, but users can still enter it.
Simply put, bounded controls should be used wherever bounded values are needed. If
the application needs a number between 7 and 35, presenting users with a control that

---

## Chunk 4038

accepts any numeric value from ‚Äì1,000,000 to +1,000,000 doesn‚Äôt do anyone any favors.
People would much rather be presented with a control that embodies 7 as its bottom limit
and 35 as its upper limit. (Clearly indicating these limits is also useful.) Users are smart,
and they will immediately comprehend and work within the limits of their sandbox.

---

## Chunk 4039

It is important to understand that we are talking about the quality of the entry control,
not the quality of the data. To be a bounded control, it needs to clearly communicate,
preferably visually, the acceptable data boundaries to the user. A text field that rejects
the user‚Äôs input after he enters it is not a bounded control. It is a rude control.
Use bounded controls for bounded input.

---

## Chunk 4040

610 Part III: Interaction Details

---

## Chunk 4041

--- Page 641 ---
Most quantitative values needed by software are bounded, yet many applications still
permit unbounded entry within numeric fields. The poor user types 17 into a field, and
this innocent entry is rewarded with an error dialog saying, ‚ÄúYou can enter only values
between 4 and 8.‚Äù This is poor user-interface design. A much better scheme is to use a

---

## Chunk 4042

bounded control that automatically limits the input to 4, 5, 6, 7, or 8. If the bounded set
of choices is composed of text rather than numbers, you can still use a bounded slider
(sometimes called a trackbar), combo box, or list box.
Figure 21-19 shows a vertical trackbar used by Microsoft in the Windows Display Set-

---

## Chunk 4043

tings dialog. It works like a slider or scrollbar, but has several discrete positions that rep-
resent distinct resolution settings. Microsoft could easily have used a simple drop-down
list in its place. In many cases, a slider is a nice choice because it displays the range of
valid entries. A drop-down menu isn‚Äôt much smaller, but it keeps its options hidden until

---

## Chunk 4044

clicked‚Äîa less friendly stance. It‚Äôs unclear why Microsoft chose to put a slider inside a
drop-down menu.
Figure 21-19: A bounded control lets users enter only
valid values. It does not let them enter invalid values,
only to reject them when they try to move on. This fig-
ure shows a bounded slider control from the Display
Settings dialog in Windows. The slider (which, oddly, is

---

## Chunk 4045

deployed inside a drop-down menu) has several discrete
positions. As you drag the slider, the legend beside it
reflects different allowable screen resolutions, with rec-
ommended resolutions shown even when the trackbar
thumb is not on the detent.
CH 21. Design Details: Controls and Dialogs 611

---

## Chunk 4046

--- Page 642 ---
spinners
Spinner controls are a common form of numeric entry control that permit data entry
using the mouse, keyboard, or finger. Spinners on the desktop contain a small edit field
with two half-height buttons attached, as shown in Figure 21-20. On iOS they‚Äôre called
steppers and have plus or minus buttons side-by-side, making them much easier to actu-
ate with fingers.

---

## Chunk 4047

Figure 21-20: The Page Setup dialog from Microsoft Word makes
heavy use of the spinner control. By clicking either of the small,
arrowed buttons, the user may increase or decrease the specific
numeric value in small, discrete steps. If the user wants to make a
large change in one action or enter a precise setting, he can use the

---

## Chunk 4048

edit field portion for direct text entry. The arrow button portion of the
control embodies bounding, whereas the edit field portion does not.
Spinners blur the difference between bounded and unbounded controls. Using either
of the two small arrow buttons enables the user to change the value in the edit field in

---

## Chunk 4049

small, discrete steps. These steps are bounded, meaning that the value doesn‚Äôt go above
the upper limit set by the application or below the lower limit. If the user wants to make
a large change in one action or enter a specific number, he can do so by clicking in the
edit field portion and typing in it, just like entering text into any other edit field. Unfor-

---

## Chunk 4050

tunately, the edit field portion of this control is unbounded, leaving users free to enter
612 Part III: Interaction Details

---

## Chunk 4051

--- Page 643 ---
values that are out of bounds or even unintelligible. In the Page Setup dialog shown in
Figure 21-20, if the user enters an invalid value, the application behaves like most other
rude applications: It issues an error dialog explaining the upper and lower boundaries
(sometimes) and requiring the user to click the OK button to continue.

---

## Chunk 4052

Overall, the spinner is an excellent idiom and can be used in place of plain edit fields for
most bounded numeric entries.
Dials and sliders
Dials and sliders are idioms borrowed directly from Mechanical-Age metaphors of rotat-
ing knobs and sliding levers. Dials are very space-efficient. Both can do a nice job of pro-
viding visual feedback about settings, as shown in Figure 21-21.

---

## Chunk 4053

Figure 21-21: Korg‚Äôs iPolysix app, a software synthesizer, makes heavy use of dials and sliders. These
are effective interface elements because musicians and producers are familiar with them from hard-
ware. More importantly, they provide users with more visual and easy-to-comprehend feedback about
parameter settings than a long list of numbers, which aren‚Äôt that exciting to look at while making

---

## Chunk 4054

music. iPolysix dials make users move their finger in an arc, rather than up-down or left-right swipes,
which would be easier to control.
CH 21. Design Details: Controls and Dialogs 613

---

## Chunk 4055

--- Page 644 ---
Improperly implemented, dials can be extremely difficult to manipulate. Sliders are
often a better option where space isn‚Äôt at a premium, because they visually suggest the
fact that movement is along just one axis.
Sometimes developers force users to trace an arc with their mouse or finger, with mouse

---

## Chunk 4056

or finger distance from the control therefore controlling the granularity of rotation.
Proper implementation of a dial should allow linear input in two dimensions: Clicking
(or tapping) the dial and moving up or right should increase the dial‚Äôs value, and moving
down or left should decrease the value. Velocity can control granularity of adjustment.

---

## Chunk 4057

Of course, users must learn this idiom, or they try to move in an arc anyway.
Dials are best suited for specialized, sovereign applications where users become accus-
tomed to the idiom. Because of their compact size and visual qualities (not to mention
heritage), they are popular in audio software.
Although sliders and dials are both used primarily as bounded entry controls, they are

---

## Chunk 4058

sometimes used (and misused) as controls for changing the display of data. For most
purposes, scrollbars do a better job of moving data in a display, because they can easily
indicate the magnitude of the scrolling data, which sliders can‚Äôt do as well. However,
sliders are an excellent choice for zooming interactions on the desktop, such as adjusting

---

## Chunk 4059

the scale of a map or the size of photo thumbnails. Direct manipulation interfaces are
better off sticking to the pinch in/pinch out conventions of touch technology.
Thumbwheels
The thumbwheel is a variant of the dial, but it is much easier to use. Onscreen thumb-
wheels look rather like the scroll wheel on a mouse, and they behave in much the same

---

## Chunk 4060

way. They are popular with some 3D applications because they are a compact unbounded
control, which is perfect for certain kinds of panning and zooming. Unlike a scrollbar,
they need not provide any proportional feedback, because the control‚Äôs range is infinite.
It makes sense to map a control like this to unbounded movement in some direction

---

## Chunk 4061

(like zoom) or movement within data that loops back on itself.
other bounded entry controls
Breaking free from the heritage of traditional GUI controls and the baggage of mechan-
ical analogs, a new generation of more experimental user interfaces is establishing new
visual and gestural idioms. These range from a simple two-dimensional box where a

---

## Chunk 4062

click at any point defines the values for two input mechanisms (the vertical and hori-
zontal coordinates each drive a parameter‚Äôs value) to more complex direct manipula-
tion interfaces (see Figure 21-22). These controls typically are bounded, because their
implementation requires careful thought about the relationship between gesture and
614 Part III: Interaction Details

---

## Chunk 4063

--- Page 645 ---
function. Such control surfaces often provide a mechanism for visual feedback. These
controls are also most appropriate for situations where users attempt to express them-
selves in regards to a number of variables and are willing to spend some effort develop-
ing proficiency with a challenging idiom.

---

## Chunk 4064

Figure 21-22: Camel Audio‚Äôs Alchemy Pro app employs a variety of two-dimensional bounded input
controls. These provide good visual feedback, allow users to adjust multiple parameters from a single
control, and support more expressive gestural user interactions. Their bounded nature also provides
users with context about how the current settings fit within the allowable ranges and eliminates the

---

## Chunk 4065

chance that the user will make an invalid entry. No musician wants to be stopped by an error dialog!
unbounded entry: text edit controls
The primary unbounded entry control is the text edit control. This simple control allows
users to key in any alphanumeric text value. Edit fields often are small areas where the

---

## Chunk 4066

user can enter a word or two of data, but they can also be fairly sophisticated text edi-
tors. Users can edit text within them using the standard tools of contiguous selection (as
discussed in Chapter 18) with either the mouse or keyboard.
CH 21. Design Details: Controls and Dialogs 615

---

## Chunk 4067

--- Page 646 ---
Text edit controls are often used either as data-entry fields in database applications
(including websites connected to databases), as option entry fields in dialogs, or as the
entry field in a combo box. In all these roles, they are frequently called on to do the work
of a bounded entry control. However, if the desired values are finite, the text edit con-

---

## Chunk 4068

trol should not be used. If the acceptable values are numeric, use a bounded numeric
entry control such as a slider instead. If the list of acceptable values is composed of text
strings, a list control should be used so that users are not forced to type.
Sometimes the set of acceptable values is finite but too big to be practical for a list

---

## Chunk 4069

control. For example, an application may require a string of any 30 alphabetic charac-
ters excluding spaces, tabs, and punctuation marks. In this case, a text edit control is
probably unavoidable even though its use is bounded. If these are the only restrictions,
however, the text edit control can be designed to reject nonalphabetic characters and

---

## Chunk 4070

similarly disallow more than 30 characters to be entered into the field. However, this
brings up interaction issues surrounding validation.
Validated entry controls
In cases where an unbounded text-entry field is provided, but the field accepts only
entries of a certain form, it may be necessary to help users construct a ‚Äúvalid‚Äù entry.

---

## Chunk 4071

Typically you do this by evaluating the user‚Äôs entry after she finishes entering it and dis-
playing an error message if it is invalid. Obviously, this can be irritating for users and
ultimately can undermine their effectiveness. Although bounded controls can often
eliminate the need for validated entry, when the number of valid entries is large‚Äî credit

---

## Chunk 4072

card numbers, for example‚Äîvalidated entry becomes necessary.
Validation controls are a type of unbounded text-entry control with built-in validation
and feedback for the user. These controls can validate many formats, such as dates,
phone numbers, postal codes, and Social Security numbers.
Although the validated entry control is a widespread idiom, most such controls can be

---

## Chunk 4073

improved. The key to successfully designing a validated entry control is to give users gen-
erous feedback, as close to real-time as possible, so they can catch an error immediately,
understand why the input was an error, and know how to remedy it.
Another improvement is based on the design principle of visually distinguishing ele-

---

## Chunk 4074

ments that behave differently (see Chapter 17). Make validated entry controls visually
distinct from nonvalidated controls, whether through the typeface used in the text edit
field, the border color, or the background color for the field itself.
Note that password and other security inputs can‚Äôt adhere strictly to usability concerns

---

## Chunk 4075

(lest they make it usable for hackers and scammers). These kinds of inputs have their
own considerations.
616 Part III: Interaction Details

---

## Chunk 4076

--- Page 647 ---
Active and passive validation
Some controls reject users‚Äô keystrokes as they are entered. When a control actively
rejects keystrokes during the entry process, this is an example of active validation. A
text-only entry control, for example, may accept only alphabetic characters and refuse
to allow numbers to be entered. Some controls reject any keystrokes other than numeric.

---

## Chunk 4077

Other controls reject spaces, tabs, hyphens, and other punctuation in real time. Some
variants can get pretty intelligent and reject certain numbers based on live calculations.
For example, numbers might need to pass a checksum algorithm.
When an active validated entry control rejects a keystroke, it must tell the user it has

---

## Chunk 4078

done so. It also should tell the user why the rejection occurred. If an explanation is
offered, users will be less inclined to assume that the rejection is arbitrary (or the prod-
uct of a defective keyboard). They also will be in a better position to give the application
what it wants.
Sometimes the range of possible data is such that the application cannot validate it until

---

## Chunk 4079

the user has completed his entry (rather than at each individual keystroke). The valida-
tion then takes place only when the data reaches some threshold‚Äîlike a set number of
characters‚Äîor the control loses focus‚Äîthat is, when the user is done with the field and
moves on to the next one. The validation step also must take place if the user closes the

---

## Chunk 4080

dialog‚Äîor invokes another function if the control is not in a dialog (such as clicking
Place Order on a web page). If the control waits until the user finishes entering data
before it edits the value, this is passive validation.
The control may wait until an address is fully entered, such as interrogating a database

---

## Chunk 4081

to check if an address is valid. In such cases each character may be valid by itself, yet
the whole may not pass muster. Besides, while the application would know at any given
instant whether the address was valid, the user could still legitimately turn to some other
task in the form while the name was in an invalid state, intending to return to it later.

---

## Chunk 4082

A way to address this is by maintaining a countdown timer in parallel with the input and
reset it with each keystroke. If the countdown timer ever hits 0, do your validation pro-
cessing. The timer should be set to approximately half a second. The effect is that as long
as the user enters a keystroke faster than once every half-second, the system is extremely

---

## Chunk 4083

responsive. If the user pauses for more than half a second, the application reasonably
assumes that he has paused to think, so it goes ahead and analyzes the input so far.
To provide rich visual feedback, the entry field could change colors or reveal an icon to
reflect its estimate of the validity of the entered data. For example, the field could show

---

## Chunk 4084

in shades of pink until the application judged the data valid, when it would change to
white or green.
CH 21. Design Details: Controls and Dialogs 617

---

## Chunk 4085

--- Page 648 ---
hints
Another good solution to the validation control problem is the hint. This little pop-up
text looks and behaves much like a ToolTip: It explains the range of acceptable data for
a validation control. Whereas a ToolTip appears when the cursor sits for a moment on
a control, a hint appears as soon as the control detects an invalid character. (It also can

---

## Chunk 4086

appear, just like a ToolTip, if the cursor sits unmoving on the field for a second or so.) For
example, if the user enters a nonnumeric character in a numeric-only field, the applica-
tion would show the hint near the point of the offending entry, yet without obscuring it.
It would say, for example, ZIP codes can only contain numeric characters, 0‚Äì9. Yes,

---

## Chunk 4087

the user is rejected, but he is not ignored. The hint also works for passive validation, as
shown in Figure 21-23.
Figure 21-23: The ToolTip idiom is so effective that it could
easily be extended to other uses. Instead of yellow ToolTips
offering flyover labels for icon buttons, we could have pink
ones offering flyover hints for unbounded edit fields. These

---

## Chunk 4088

hints can help eliminate traditional error messages. In this
example, if the user enters a value lower than is allowed, the
application would replace the entered value with the lowest
allowable value and modelessly display a hint that explains the
reason for the substitution. The user can enter a new value or
accept the minimum without being stopped by an error dialog.
handling out-of-bounds data

---

## Chunk 4089

Typically, an edit field is used to enter a numeric value the application needs, such as
a font‚Äôs point size. The user can enter anything he wants, from 5.5 to 500, and the field
will accept it and return the value to the owning application. If the user enters garbage,
the control must make a decision. In Microsoft Word, for example, if you enter asdf as a

---

## Chunk 4090

font point size, the application issues an error dialog informing you ‚ÄúThis is not a valid
number.‚Äù It then reverts the size to its previous value. The error dialog is rather silly, but
the summary rejection of your meaningless input is perfectly appropriate. But what if
you type the value nine? The application rejects it with the same curt error message.

---

## Chunk 4091

If instead the control were programmed to think of itself as a numeric entry control,
it could perhaps behave better. It doesn‚Äôt bother us if the application refuses to accept
nonnumeric characters (especially if pop-up hints are also employed), but it is incorrect
when it says that nine is an invalid number.
618 Part III: Interaction Details

---

## Chunk 4092

--- Page 649 ---
units and measurements
It‚Äôs nice when a text edit control is smart enough to recognize appropriate units. For
example, if an application requests a measurement, and the user enters 5", 5i, 5in,
5 inches, not only should the control report the result as five, but it also should report
inches. If the user enters 5mm, the control should report it as 5 millimeters. SketchUp,

---

## Chunk 4093

an elegant architectural sketching application, supports this type of feedback. Simi-
larly, well-designed financial analytics applications should know that ‚Äú5mm‚Äù means
5 million.
Say that the field is requesting a column width. The user can enter either a number or
a number and an indicator of the measurement system, as just described. Users also

---

## Chunk 4094

could be allowed to enter the word default, and the application would set the column
width to its default value. The user could alternatively enter best fit, and the application
would measure all the entries in the column and choose the most appropriate width for
the circumstances. This scenario has a problem, however, because the words ‚Äúdefault‚Äù

---

## Chunk 4095

and ‚Äúbest fit‚Äù must be in the user‚Äôs head rather than in the application somewhere. This
is easy to solve, though. All we need to do is provide the same functionality through a
combo box. The user can drop down the box and find a few standard widths and the
words ‚Äúdefault‚Äù and ‚Äúbest fit.‚Äù Microsoft uses this idea in Word, as shown in Figure 21-24.
Figure 21-24: The drop-down

---

## Chunk 4096

combo box makes an excellent
tool for bounded entry fields
because it can accommodate
entry values other than num-
bers. The user doesn‚Äôt have to
remember or type words like
‚Äúpage width‚Äù or ‚Äúwhole page,‚Äù
because they are there to be
chosen from the drop-down list.
The application interprets the
words as the appropriate num-
ber, and everyone is satisfied.

---

## Chunk 4097

CH 21. Design Details: Controls and Dialogs 619

---

## Chunk 4098

--- Page 650 ---
The user can pull down the combo box, see items like Page Width and Whole Page, and
choose the appropriate one. With this idiom, the information has migrated from the
user‚Äôs head into the application, where it is visible and choosable.
Avoid text edit controls for output
The text edit control, with its familiar system font and visually articulated white box,

---

## Chunk 4099

encourages data entry. Yet software developers frequently use the text edit control for read-
only output fields. The edit control certainly works as an output field, but using this control
for output only is like pulling a bait and switch on your user, and he will not be amused. If
you have text data to output, use a text display control, not a text edit control. If you want

---

## Chunk 4100

to show the amount of free space on disk, for example, don‚Äôt use a text edit field, because
novice users are likely to think that they can get more free space by entering a bigger num-
ber. At least, that is what the control is telling them with its equivalent of body language.
If you want to output editable information, go ahead and output it in a fully editable text

---

## Chunk 4101

control, and wire it up internally so that it works exactly as it will appear. If not, stick to
display controls, described in the next section.
Use noneditable (display) controls for output-only text.
Display controls
Display controls are used to display and manage the visual presentation of information
onscreen. Typical examples include scrollbars and screen splitters. Controls that man-

---

## Chunk 4102

age how objects are displayed visually onscreen fall into this category, as do those that
display static, read-only information. These include paginators, rulers, guidelines, grids,
group boxes, and those 3D lines called dips and bumps. Rather than discuss all these at
length, we will focus on a few of the more problematic controls.
Text controls

---

## Chunk 4103

Probably the simplest display control is the text control, which displays a written mes-
sage at some location onscreen. The management job it performs is pretty prosaic, serv-
ing only to label other controls and to output data that users cannot or should not change.
The only significant problem with text controls is that they are often used where edit

---

## Chunk 4104

controls should be (and vice versa). Users can change most information stored in a com-
puter. Why not allow them to change it at the same point the software displays it? Why
620 Part III: Interaction Details

---

## Chunk 4105

--- Page 651 ---
should the mechanism to input a value be different from the mechanism to output that
value? In many cases, it makes no sense for the application to separate these related func-
tions. In almost all cases where the application displays a value that could be changed, it
should do so in an editable field so that a user can click it and change it directly. Special

---

## Chunk 4106

edit modes are almost always examples of excise.
For years, Adobe Photoshop insisted on opening a dialog to create formatted text in an
image. Thus, users could not see exactly how the text would look in the image, forcing
them to repeat the procedure several times to get things right. Finally Adobe fixed the
problem, letting users edit formatted text directly into an image layer, in full WYSIWYG

---

## Chunk 4107

fashion‚Äîas it should be.
scrollbars
Scrollbars serve a critical need in the modern GUI: They enable smallish rectangles (win-
dows or panes) to meaningfully contain large amounts of information. Unfortunately,
they are also typically quite frustrating, difficult to manipulate, and wasteful of pixels.
The scrollbar is, without a doubt, both overused and underexamined. In its role as a win-

---

## Chunk 4108

dow content and document navigator‚Äîa display control‚Äîits application is appropriate.
The singular advantage of the scrollbar‚Äîaside from its near-universal availability‚Äîis
that it provides useful context about where you are in the window. The scrollbar‚Äôs thumb
is the small, dragable box that indicates the current position and, often, the scale of the
‚Äúterritory‚Äù that can be scrolled.

---

## Chunk 4109

Many scrollbars are quite parsimonious in doling out information to users. The best
scrollbars use thumbs that are proportionally sized to show the percentage of the docu-
ment that is currently visible.
While scrollbars are useful for nearly all types of content, scrollbars for pages of text
should also show the following:
‚Ä¢ The total pages
‚Ä¢ The page number (record number, graphic) as we scroll

---

## Chunk 4110

‚Ä¢ A thumbnail of the page as we scroll
Additionally, many scrollbar implementations are stingy with functions. To better help
us manage navigation within documents, they should give us powerful tools for going
where we want to go quickly and easily:
‚Ä¢ Buttons for skipping ahead by pages/chapters/sections/keywords
‚Ä¢ Buttons for jumping to the beginning and end of the document

---

## Chunk 4111

CH 21. Design Details: Controls and Dialogs 621

---

## Chunk 4112

--- Page 652 ---
‚Ä¢ Tools for setting bookmarks that we can quickly return to
‚Ä¢ Annotated scrollbars that visually show the position of searched-for items on the
background of the toolbar itself (The thumb of the scrollbar must be partly transparent
for this to work well.)
Recent versions of Microsoft Word use scrollbars that exhibit many of these features.

---

## Chunk 4113

Shortcomings in contextual information aside, one of the biggest problems with scroll-
bars in a WIMP OS is that they demand a high degree of precision with the mouse. You
must position the mouse cursor with great care, taking your attention away from the
data you are scrolling. Some scrollbars put both up and down nudge arrows at each end

---

## Chunk 4114

of the scrollbar. For windows that will likely stretch across most of the screen, this can be
helpful. For smaller windows, such replication of controls is probably overkill and simply
adds to screen clutter. (See Chapter 18 for more discussion of this idiom.)
The ubiquity of scrollbars has resulted in some unfortunate misuse. Most significant

---

## Chunk 4115

here is their shortcomings in navigating time. Without getting too philosophical or theo-
logical, we can all hopefully agree that time has no meaningful beginning or end (at least
within the perception of the human mind). What, then, is the meaning of dragging the
thumb to one end of a calendar scrollbar? (See Figure 21-25.)

---

## Chunk 4116

Figure 21-25: This image shows a limitation of using a scrollbar for navigating the endless stream
of time. Dragging the thumb all the way to the end of the scrollbar takes the user one year into the
future. This seems a bit arbitrary and limiting.
622 Part III: Interaction Details

---

## Chunk 4117

--- Page 653 ---
On mobile platforms, and now even in some desktop apps, scrollbars appear only when
scrolling takes place. This makes more sense on mobile, where scrolling is performed via
gesture‚Äî although it also means that a user has to scroll when they don‚Äôt really want to,
in order to discover where in a document they are.

---

## Chunk 4118

On the desktop, trackpad gestures or mouse wheels (and their capacitive equivalents)
also allow scrollbars to be hidden on some platforms, like OS X. They are used primarily
to indicate the content‚Äôs position in its viewport pane rather than for actual scrolling.
However, hiding scrollbars on the desktop has some usability gotchas:

---

## Chunk 4119

‚Ä¢ It may not be clear to users that panes are scrollable. This can be fixed by ensuring that
some items are partially obscured at the edges of the pane, which is a strong visual cue
that scrolling is possible.
‚Ä¢ Fine control of scrolling becomes much more difficult. If scrollbars disappear when
not in use, it becomes difficult to tweak positioning, because movement is required to

---

## Chunk 4120

activate the fine controls. It‚Äôs therefore not a wise idea to use hideable scrollbars for any
application where fine-tuning scrolling is a necessity.
‚Ä¢ With large screens, it‚Äôs entirely possible that toolbars become hidden by the time the user
is able to move her mouse to them, requiring her to scroll just to summon them again.

---

## Chunk 4121

There are some viable alternatives to scrollbars. One of the best is the document naviga-
tor, which uses a thumbnail of the entire document space to provide direct navigation
to portions of the document, as shown in Figure 21-26. Many image-editing applications
(such as Photoshop) utilize these for navigating around a document when zoomed in.

---

## Chunk 4122

These also can be useful when you navigate time-based documents, such as video and
audio. Critical to the success of such idioms is that it is possible to meaningfully repre-
sent the big picture of the document in visual form. For this reason, they aren‚Äôt neces-
sarily appropriate for long text documents. In these cases, the document‚Äôs structure (in

---

## Chunk 4123

outline form) can provide a useful alternative to scrollbars. A basic example can be seen
in Microsoft Word‚Äôs Document Map.
splitters
Splitters are useful tools for dividing a sovereign application into multiple related panes
in which information can be viewed, manipulated, or transferred. Movable splitters
should always advertise their pliancy with cursor hinting. Although it is easy and tempt-

---

## Chunk 4124

ing to make all splitters movable, you should exercise care in choosing which ones to
make movable. In general, a splitter should be unable to be moved in such a way that
makes a pane‚Äôs contents unusable. In cases where panes need to collapse, a drawer may
be a better idiom.
CH 21. Design Details: Controls and Dialogs 623

---

## Chunk 4125

--- Page 654 ---
Figure 21-26: Ableton Live features a document navigator on the top of the arrangement screen that
provides an overview of the entire song. The black rectangle denotes which part of the song the work
area below is zoomed in on. The navigator provides context in a potentially confusing situation and

---

## Chunk 4126

simultaneously provides a direct navigation idiom where the user may move the rectangle to focus on
a different part of the song.
Drawers and levers
Drawers are panes in a sovereign application that can be opened and closed with a sin-
gle action. They can be used in conjunction with splitters if the user can configure the

---

## Chunk 4127

amount by which the drawer opens. You usually open a drawer by clicking a control
in the vicinity of the drawer. This control needs to be visible at all times and should be
either a latching button/icon button or a lever. A lever behaves similarly but typically
swivels to indicate an open or closed state.
Drawers are a great place to put controls and functions that are less frequently used

---

## Chunk 4128

but are most useful in the context of the application‚Äôs main work area. Drawers have
the benefit of not covering the main work area the way a dialog does. Property details,
searchable lists of objects or components, and histories are good candidates for putting
in drawers.
On mobile devices, horizontally sliding drawers with levers have been employed ubiqui-

---

## Chunk 4129

tously and successfully to stow primary navigation panes. They take users to different
functional screens (using the ‚Äúhamburger‚Äù icon and drawer idiom first popularized and
then largely abandoned by Facebook), to content picked from an ordered list as is typical
624 Part III: Interaction Details

---

## Chunk 4130

--- Page 655 ---
of many mobile mail applications, or to a UI that provides interactions with the selected
drawer item, such as the right-hand chat drawer in the iOS Facebook app.
Dialogs
Dialogs are pop-up windows superimposed over the application‚Äôs main window. A dia-
log engages users in a conversation by offering information and requesting some input.

---

## Chunk 4131

When the user has finished viewing the information or selection from options presented,
he can dismiss or accept the dialog. The dialog then disappears, returning the user to the
main application window.
Put primary interactions in the primary window.
In the modern era of modeless toolbar and ribbon controls, a hallmark of poor interac-

---

## Chunk 4132

tion design is a user interface that consists primarily of control-laden modal dialogs. It
is very difficult to create fluid interactions if you force users through a maze of pop-up
dialogs. If a user is the chef, and the application is the kitchen, a dialog is the pantry. The
pantry plays a secondary role, as should dialogs. They are supporting actors rather than

---

## Chunk 4133

lead players, and although they may move the action forward, they should not be the
engines of motion. Primary actions and controls for an application belong in its main
screen or window.
Appropriate use of dialogs
It‚Äôs sometimes useful to take users out of their flow to force them to focus on partic-
ular questions. Dialogs are appropriate for functions or features that are out of the

---

## Chunk 4134

normal course of things: Anything that is confusing, dangerous, or rarely used can be
usefully placed in a dialog. This is particularly true for actions that make immediate
and major changes to the application state. Such changes can be jarring, and should
be cordoned off from users who are unfamiliar with them. For example, a function that

---

## Chunk 4135

allows wholesale reformatting of a document should be considered a dislocating action.
The dialog helps prevent this feature from being invoked accidentally by ensuring that
a big, friendly Cancel button is always present, and also by providing the space to show
more protective and explanatory information along with the risky controls. The dialog

---

## Chunk 4136

can graphically show users the function‚Äôs potential effects with a thumbnail of what the
changes will look like. And of course, a robust Undo function (see Chapter 15) should be
provided for such actions.
CH 21. Design Details: Controls and Dialogs 625

---

## Chunk 4137

--- Page 656 ---
Dialogs are appropriate for functions that are out of the main interaction flow.
Dialogs are also well suited for concentrating information related to a single subject,
such as the properties of a domain object‚Äîan invoice or customer, for example. They
also can gather all information relevant to a function performed by an application, such

---

## Chunk 4138

as printing reports. This has obvious benefits to users: With all the information and con-
trols related to a given subject in a single place, users don‚Äôt have to search around the
interface as much for a given function, and navigation excise is reduced.
Dialogs are appropriate for organizing controls and information about a single
domain object or application function.

---

## Chunk 4139

Similar to menus, dialogs can be effective for users who are still learning an application.
Because dialogs can be more verbose and structured, they can provide an alternative,
more pedagogic interface for functions that are also accessible through direct manipu-
lation in the main application window. However, this sort of interface also can be more

---

## Chunk 4140

effectively placed in expandable, modeless control panes or contextual toolbars in mod-
ern desktop apps.
Dialogs serve two masters: the frequent user who is familiar with the application and
uses dialogs to control its more advanced or dangerous facilities, and the infrequent
user who is unfamiliar with the scope and use of the application and who uses dialogs

---

## Chunk 4141

to learn the basics. This dual nature means that dialogs must be compact and powerful,
speedy and smooth, yet clear and self-explanatory. These two goals may seem contra-
dictory, but they can actually be useful complements. A dialog‚Äôs speedy and powerful
nature can contribute directly to its power of self-explanation.
basic dialog interactions

---

## Chunk 4142

Most dialogs contain a combination of informative text, interactive controls, and asso-
ciated text labels. Although some rudimentary conventions apply, the idiom‚Äôs diverse
applications mean that there are few hard and fast rules. It is important to create dialogs
in accordance with good visual interface design practices and ensure that they use GUI

---

## Chunk 4143

controls appropriately. In particular, a dialog should exhibit a strong visual hierarchy,
visual groupings based on similarities in subject, and a layout based on the conventional
reading order (left to right and top to bottom for Western writing systems). For more
details about these visual interface design practices, see Chapter 17.
626 Part III: Interaction Details

---

## Chunk 4144

--- Page 657 ---
When instantiated, a dialog should appear on the topmost visual layer so that it is obvi-
ous to the user. Subsequent user interactions may obscure the dialog with another dialog
or application, but it should always be obvious how to restore the dialog to prominence.
A dialog should have a title that clearly identifies its purpose. If the dialog is a function

---

## Chunk 4145

dialog, the title bar should contain the function‚Äôs action‚Äîthe verb, if you will.
Use verbs in function dialog title bars.
If the dialog is used to define an object‚Äôs properties, the title bar should contain that
object‚Äôs name or description. The properties dialogs in Windows work this way. When
you request the Properties dialog for a directory named Backup, the title bar says Backup

---

## Chunk 4146

Properties. Similarly, if a dialog is operating on a selection, it can be useful to reflect a
truncated version of the selection in the title to keep users oriented.
Use object names in property dialog title bars.
Most conventional dialogs have at least one terminating command‚Äîa control that, when
activated, causes the dialog to shut down and go away (and most often some other func-

---

## Chunk 4147

tion that was the point of the dialog). Most modal dialogs offer at least two pushbuttons
as terminating commands, OK and Cancel, although the Close box in the upper-right
corner is also a terminating command idiom.
It is technically possible for dialogs not to have terminating commands. Some dialogs
are unilaterally launched and dismissed by the application‚Äîfor reporting on the prog-

---

## Chunk 4148

ress of a time-consuming function, for example‚Äîso their designers may have omitted
terminating commands. This is poor design for a variety of reasons, as we will see.
modal and modeless dialogs
Dialogs come in two flavors: modal and modeless. Modal dialogs are by far the more
common variety. After a modal dialog opens, the owner application cannot continue

---

## Chunk 4149

until the dialog is closed. It stops all proceedings in their tracks. Clicking any other
window belonging to the application only gets the user a rude beep for his trouble. All
the controls and objects on the surface of the owner application are deactivated for the
duration of the modal dialog. Of course, the user can activate other applications while a

---

## Chunk 4150

CH 21. Design Details: Controls and Dialogs 627

---

## Chunk 4151

--- Page 658 ---
modal dialog is up, but the dialog stays there indefinitely. When the user goes back to the
application, the modal dialog is still there waiting.
In general, modal dialogs are easier for users (and designers) to understand. The oper-
ation of a modal dialog is quite clear, saying to users, ‚ÄúStop what you‚Äôre doing and deal

---

## Chunk 4152

with me now. When you‚Äôre done, you can return to what you were doing.‚Äù The rigidly
defined behavior of the modal dialog means that, although it may be abused, it is rarely
misunderstood. There may be too many modal dialogs, and they may be weak or stupid,
but their purpose and scope usually are clear to users.
Some modal dialogs operate on the entire application or the entire active document.

---

## Chunk 4153

Others operate on the current selection, in which case the user can‚Äôt change the selection
after summoning the dialog. This is the most important difference between modal and
modeless dialogs.
Because modal dialogs stop only their owning applications, they are more precisely
described as application-modal. It is also possible to create a system-modal dialog that

---

## Chunk 4154

brings every application in the system to a halt. In most cases, applications should never
have one of these. Their only purpose is to forestall or report catastrophic occurrences
(such as the hard disk melting) that affect either the entire system or a real-world process.
Modeless dialogs are less common than their modal siblings. When a modeless dialog

---

## Chunk 4155

opens, the parent application continues without interruption. It does not stop the pro-
ceedings, and the application does not freeze. The various facilities and controls, menus,
and toolbars of the main window remain active and functional. Modeless dialogs have
terminating commands, too, although their conventions are far weaker and more con-
fusing than for modal dialogs.

---

## Chunk 4156

A modeless dialog is a much more difficult beast to use and understand, mostly because
the scope of its operation is unclear. It appears when you summon it, but you can go back
to operating the main window while it stays around. This means that you can change the
selection while the modeless dialog is still visible. If the dialog acts on the current selec-

---

## Chunk 4157

tion, you can select, change, select, change, select, and change all you want. For example,
Microsoft Word‚Äôs Find and Replace dialog allows you to find a word in text (which is
automatically selected), make edits to that word, and then pop back to the dialog, which
has remained open during the edit.
In some cases, you can also drag objects between the main window and a modeless dia-

---

## Chunk 4158

log. This characteristic makes them effective as tool or object palettes.
628 Part III: Interaction Details

---

## Chunk 4159

--- Page 659 ---
Differentiating modal and modeless dialogs
If you have limited time and resources to deal with interaction design issues, we recom-
mend leaving modeless dialogs pretty much the way they are, while adopting the follow-
ing guiding principles and applying them consistently.
Differentiate modeless dialogs from modal dialogs.

---

## Chunk 4160

First, modal dialogs must include one or more terminating commands, usually in the
form of large pushbuttons at the bottom of the dialog.
Second, modeless dialogs should not use terminating command buttons. Instead, they
should use the Close control in its window title bar.
Do not use terminating button commands for modeless dialogs.

---

## Chunk 4161

Third, modal dialogs should not use Close controls in their title bars, not only to help
differentiate them from their modeless brethren, but because the function executed by
the close control may be unclear to users. (Does clicking it cancel, or confirm what‚Äôs been
entered in the dialog?)
Issues with modal dialogs

---

## Chunk 4162

One particular modal dialog variation to avoid is the use of terminating buttons that
change from Cancel to Apply, or from Cancel to Close, depending on whether the user
has taken an action. This dynamic change is disconcerting, hard to interpret and, at
worst, frightening and inscrutable. These labels should never change. If the user hasn‚Äôt

---

## Chunk 4163

selected a valid option but clicks OK anyway, the dialog should assume the user means
‚ÄúDismiss the box without taking any action,‚Äù for the simple reason that this is what the
user actually did.
Don‚Äôt dynamically change the labels of terminating buttons.
CH 21. Design Details: Controls and Dialogs 629

---

## Chunk 4164

--- Page 660 ---
The cognitive strength of modal dialogs is their rigidly consistent OK and Cancel but-
tons. In modal dialogs, the OK button means ‚ÄúAccept my input and close the dialog.‚Äù In
modal dialogs, the Cancel button means ‚ÄúAbandon my input and close the dialog.‚Äù
Issues with modeless dialogs
Many modeless dialogs are implemented awkwardly. Their behavior is inconsistent and

---

## Chunk 4165

confusing. They are visually very similar to modal dialogs, but they are functionally very
different. They have few established behavioral conventions, particularly with respect to
terminating commands.
Much of the confusion arises because users are so familiar with the behavior of modal
dialogs. A modal dialog can adjust itself for the current selection at the instant it was

---

## Chunk 4166

summoned. It can do this with assurance that the current selection won‚Äôt change during
its lifetime. Conversely, the current selection can easily change during the lifetime of a
modeless dialog. What should the dialog do then? For example, if a modeless dialog
modifies text, what should it do if we now select a nontext object in the main window?

---

## Chunk 4167

Should the controls in the dialog become disabled, change, or disappear? Questions
such as this require careful analysis, as well as close examination of persona needs,
goals, and mental models. Consequently, modeless dialogs can be much more challeng-
ing to design and implement than modal dialogs, which avoid these issues by freezing
the application state.

---

## Chunk 4168

Modeless dialogs frequently have several buttons that immediately invoke various func-
tions. The dialog should not close when one of these function buttons is clicked. It is
modeless because it stays around for repetitive use and should close only when the win-
dow close control is clicked.
Modeless dialogs must also be incredibly conservative of pixels. They will be staying

---

## Chunk 4169

around on the screen, occupying the front and center location, so they must be extra
careful not to waste pixels on anything unnecessary.
modeless dialogs and undo
Because the controls on a modeless dialog are always live, the equivalent concept is
clouded in confusion. The user doesn‚Äôt conditionally configure changes in anticipation
of a terminal Execute command as he does with a modal dialog.

---

## Chunk 4170

The changes made from a modeless dialog are immediate, occurring as soon as any entry
or control in the dialog is changed. There is no concept of ‚ÄúCancel all my actions.‚Äù Doz-
ens of separate actions may have been performed on a number of selections. The proper
630 Part III: Interaction Details

---

## Chunk 4171

--- Page 661 ---
idiom for this is the Undo function, which is active application-wide for all modeless dia-
logs. This all fits together logically, because the Undo function is unavailable if a modal
dialog is up, but it is still usable with modeless ones.
The only consistent terminating action for modeless dialogs is Close, which should be

---

## Chunk 4172

accessed from the window close control on the title bar. Furthermore, if the Close button
actuates a function in addition to shutting the dialog, you have created a modal dialog
that should follow the conventions for the modal idiom instead.
modeless dialogs and sidebars
Any modeless dialog that is intended to provide persistent support to activities in the

---

## Chunk 4173

main window is a good candidate for recasting as a sidebar control pane (see Chapter
18). These have all the advantages of modeless dialogs without forcing users to manage
the set of controls within a separate floating window that must be moved out of the way
of the job at hand. As screen resolutions have increased, there is less and less reason

---

## Chunk 4174

for banks of controls intended for frequent use in the construction of a document to be
placed anywhere but in toolbars or sidebar panes.
Five purposes of dialogs
The concepts of modal and modeless dialogs are derived from developer terms. They
affect our design, but we should also examine dialogs from a more goal-directed point

---

## Chunk 4175

of view. In that light, five fundamental types of information are useful to convey with a
dialog: property, function, process, notification, and bulletin.
Property dialogs
Property dialogs allow users to view and change settings or attributes. A properties dia-
log generally modifies the current selection, but it also can be used to set application

---

## Chunk 4176

global properties. (Figure 21-31, shown later in this chapter, is a somewhat over-the-top
example.) You can think of property dialogs as control panels containing configuration
controls for the selected object.
Property dialogs typically are modeless. When you modify the properties of a selection,
these dialogs often are more useful when they are implemented as a task pane or side-

---

## Chunk 4177

bar (see Chapter 18), rather than as a standard dialog‚Äîespecially a modal one. This is
true unless they are being used for set-once-and-forget-it or other infrequently accessed
properties.
CH 21. Design Details: Controls and Dialogs 631

---

## Chunk 4178

--- Page 662 ---
Function dialogs
Function dialogs are usually launched from a menu. They are most frequently modal dia-
logs, and they control a single function such as printing, modifying large numbers of
database records, inserting objects, or spell checking.
Not only do function dialogs allow users to initiate an action, but they also often allow

---

## Chunk 4179

users to configure the details of the action‚Äôs behavior. In many applications, for example,
when the user wants to print, she uses the Print dialog to specify which pages to print,
the number of copies to print, which printer to output to, and other settings directly
relating to the print function. The terminating OK button on the dialog not only con-

---

## Chunk 4180

firms the settings and closes the dialog but also executes the print operation.
This common technique combines two functions: Configuring the function and invok-
ing it. Just because a function can be configured, however, doesn‚Äôt necessarily mean that
the user will want to configure it before every invocation. It‚Äôs often better to make these

---

## Chunk 4181

two functions separately accessible (although they should also be seamlessly linked).
Many functions available from modern software are quite flexible and have a number
of options. If you don‚Äôt segregate configuration and actuation, users can be forced to
confront considerable complexity, even if they want to perform a routine task in a simple
manner.
Process dialogs

---

## Chunk 4182

Process dialogs are launched at an application‚Äôs discretion rather than at the user‚Äôs
request. They indicate that the application is busy with some internal function and that
performance in other areas is likely to degrade.
When an application begins a process that will take perceptible quantities of time (any-

---

## Chunk 4183

thing over a second), it must make clear that it is busy, but that everything is otherwise
normal. If the application does not indicate this, the user interprets this as rudeness
at best; at worst, he assumes that the application has crashed and that he must take
drastic action.
Inform the user when the application is unresponsive.

---

## Chunk 4184

Many applications currently rely on active wait-cursor hinting, turning the cursor into
something like a spinning beach ball or hourglass, and disabling further clicks until the
process is complete. A better, more informative solution is a process dialog.
632 Part III: Interaction Details

---

## Chunk 4185

--- Page 663 ---
Each process dialog should make clear to users:
‚Ä¢ That a time-consuming process is happening
‚Ä¢ That things are completely normal
‚Ä¢ How much more time the process will take
‚Ä¢ How many more objects or items need to be operated on (when applicable)
‚Ä¢ How they can cancel the operation and regain control of the application

---

## Chunk 4186

The mere presence of the process dialog satisfies the first requirement, alerting users
to the fact that a process is occurring. Satisfying the third requirement can be accom-
plished with a progress meter of some sort, showing the relative percentage of work per-
formed and how much is yet to go. Satisfying the second requirement is the tough one.

---

## Chunk 4187

The application can crash (or lose connection with a server) and leave the dialog up,
lying mutely to the user about the operation‚Äôs status. The process dialog must continu-
ally show, via time-related movement, that things are progressing normally. The meter
should show the progress relative to the total time the process will consume rather than

---

## Chunk 4188

the total size of the process. Fifty percent of one process may be radically different in
time from 50 percent of the next process.
The user‚Äôs mental model of the computer executing a time-consuming process will quite
reasonably be that of a machine cranking along. A static dialog that merely announces
that the computer is Reading Disk may tell users that a time-consuming process is hap-

---

## Chunk 4189

pening, but it doesn‚Äôt show that this is true. The best way to show the process is by using
animation in the dialog. Users get the sense that the computer is really doing something:
The sensation that things are working normally is visceral rather than cerebral, and
users‚Äîeven expert users‚Äîare reassured.
The user may have second thoughts about how long the operation will take and decide

---

## Chunk 4190

to postpone it. However, if the user realizes he issued the wrong command and wants to
cancel the operation, not only will he want the operation to stop, but he also will want
already executed portions of the operation to be undone.
A good approach would be to have two buttons on the dialog‚Äîone labeled Cancel and
the other labeled Pause. Users could then choose the one they really want.

---

## Chunk 4191

You should think about something else when considering the need for process report-
ing. Because a dialog is a separate room, designers should question whether a process
reported by a dialog is really a function separate from what is happening in the main
window. If the function is an integral part of what is shown in the main window, the sta-

---

## Chunk 4192

tus of that function should be shown in the main window. For example, Windows uses
a Copy dialog, but isn‚Äôt copying a file fundamental to what the Explorer does? A more
subtle animation could have been built right into the main Explorer window.
CH 21. Design Details: Controls and Dialogs 633

---

## Chunk 4193

--- Page 664 ---
Process dialogs are, of course, much easier to develop than building animation right into
the main window of an application. They also provide a convenient place for the Cancel
button, so it is a reasonable compromise to fling up a process dialog for the duration of a
time-consuming task. But don‚Äôt lose sight of the fact that, by doing this, we are still going

---

## Chunk 4194

to another room for a this-room function. It is an easy solution, but not the correct one.
Web browsers such as Google Chrome and Microsoft Internet Explorer provide a much
more elegant solution. Because loading web pages is so intrinsic to their operation, the
progress indicator (an animated circle) is displayed on the currently loading browser
tab, as shown in Figure 21-27.

---

## Chunk 4195

Figure 21-27: Web browsers such as Google Chrome don‚Äôt launch a process dialog
every time they load a page. Rather, a progress indicator is displayed in the tab for
the currently loading page. Other browsers place this indicator in the URL field or
in a status bar at the bottom of the window. This allows users to easily understand

---

## Chunk 4196

what‚Äôs going on without obscuring their view of the partially loaded web page in front
of them.
notification dialogs
Notification dialogs report important messages that are either the result of triggered
events or the result of communications from other users. Alarms, appointments, and
e-mail or IM notifications are good examples. These are in contrast to system-generated

---

## Chunk 4197

alerts (discussed in the previous section) that are launched unbidden by the app purely
to communicate its own internal problems or successes.
Mobile products support heavy use of notifications, which include both communications
and other on-the-go information based on changes in time and location. Some of these
idioms have become more prevalent on the desktop and in web apps, since communica-

---

## Chunk 4198

tion apps span these platforms as well.
Mobile platforms have done a good job of collecting notifications into notification centers,
which permit viewing of notifications after the fact: Users might be unable to address a
message or triggered alarm until they have stopped driving, taken a seat on the bus they
were catching, or finished a phone call they were in.

---

## Chunk 4199

Notifications frequently appear as small pop-up windows or drawers in the periphery of
the screen, with a subtle animation to call attention to themselves. They can linger mode-
lessly or can close after a short delay, leaving behind a marker or badge in the notification
center to alert the user that something still needs his or her attention. Notifications work
634 Part III: Interaction Details

---

## Chunk 4200

--- Page 665 ---
well in this manner as long as they are also collected for review in a top-level notification
center and the arrival of new, unread notifications is clearly, noticeably, and persistently
marked in the interface.
bulletin dialogs
Bulletin dialogs, like process dialogs, are launched, unrequested, by the application. The

---

## Chunk 4201

three types of bulletin dialogs are errors, alerts, and confirmations. Each of these reports
on, or requires a user decision about, the application‚Äôs internal state. Each also suffers
from frequent misuse. Together they represent some of the worst product interactions, if
only by virtue of their vapidity and omnipresence.

---

## Chunk 4202

The ubiquitous error dialog best characterizes the bulletin dialog. Normally, the appli-
cation‚Äôs name is shown in the caption bar, and a brief text description of the problem is
displayed in the body. A graphic icon that indicates the problem‚Äôs class or severity, along
with an OK button, usually completes the ensemble. Sometimes a button to summon

---

## Chunk 4203

online help is added. An example from Word is shown in Figure 21-28.
Figure 21-28: Here‚Äôs a typical bulletin dialog. It is
never requested by the user but is always issued
unilaterally by the application when the application
fails to do its job or when it just wants to brag about
having survived the procedure. This dialog in effect
blames the user, rather than helping solve the prob-

---

## Chunk 4204

lem. Users interpret this as saying ‚ÄúThe measure-
ment must be between ‚Äì22 inches and 22 inches,
and you are a buffoon for not knowing that funda-
mental fact. You are so stupid that I won‚Äôt even try to
correct it for you!‚Äù
Bulletin dialogs normally are application-modal: They stop all further progress of the
application until the user issues a terminating command‚Äîlike tapping the OK button.

---

## Chunk 4205

This type of bulletin is blocking because the application cannot continue until the user
responds.
It is also possible for an application to launch a bulletin dialog and then unilaterally
dismiss it after a short delay. This type of bulletin is transitory because the dialog disap-
pears and the application continues without user intervention.
CH 21. Design Details: Controls and Dialogs 635

---

## Chunk 4206

--- Page 666 ---
Transitory bulletins are sometimes used for error reporting. An application that launches
an error dialog to report a problem may correct the problem itself or may detect that the
problem has disappeared via some other agency. Some developers issue an error or alert
merely as a warning‚ÄîYour disk is getting full‚Äîand dismiss it after, say, 10 seconds. This

---

## Chunk 4207

type of behavior is fraught with usability issues.
Errors, alerts, and confirmations should pause the application or, at the very least, main-
tain their presence until the user takes notice. If they don‚Äôt, the user may be unable to
read the bulletin fully, or, if he is looking away, he may not see it‚Äîor, worse yet, see only a

---

## Chunk 4208

fleeting glimpse. He will be justifiably suspicious that he has missed something import-
ant, something that will come back to haunt him, and not know how to get the message
back. He will begin to worry about what he missed. Was it an important bit of intelli-
gence that he will regret not knowing? Is something terribly wrong? This is true even if
the problem goes away by itself.

---

## Chunk 4209

If something is worth saying with a dialog, it‚Äôs worth ensuring that the user definitely
gets the message. Because a transitory notification can‚Äôt make that guarantee, it should
never be used in the role of error reporting or confirmation gathering. Error, alert, and
confirmation bulletins should almost always be blocking.
Never use transitory dialogs as error messages, alerts, or confirmations.

---

## Chunk 4210

Property, function, and even notification dialogs are intentionally requested by users‚Äî
they serve users. The application, however, issues bulletin dialogs‚Äîthey serve the appli-
cation, most often at the user‚Äôs expense. As we shall see, most of these annoying and
often useless dialogs should simply be eliminated in favor of more helpful and supportive

---

## Chunk 4211

interaction patterns. We‚Äôll discuss this in detail at the end of the chapter.
managing property and function dialogs
Even if you are conscientious about the use and organization of property and function
dialogs, they can easily become quite crowded with controls, options, and the like. There
are several common strategies for managing this crowding so that these dialogs main-

---

## Chunk 4212

tain their usefulness.
Tabbed dialogs
In the 1990s, tabbed dialogs became an established standard in the world of commercial
software. The idiom, while useful, became an unfortunately convenient way for develop-
ers to cram piles of only vaguely related functions into a single dialog.
636 Part III: Interaction Details

---

## Chunk 4213

--- Page 667 ---
On a more positive note, this idiom also allows application objects with numerous prop-
erties to have correspondingly rich property dialogs without making those boxes exces-
sively large and crowded with controls (see Figure 21-29). Many function dialogs that
were previously jam-packed with controls now make better use of their space. Before

---

## Chunk 4214

tabbed dialogs, this problem was more clumsily solved with expanding and cascading
dialogs, which we‚Äôll discuss shortly.
Figure 21-29: This is a tabbed dialog from iTunes. Combining the dif-
ferent properties of a song in one dialog is effective for users because
they have a single place to go to find such things. Note that the ter-

---

## Chunk 4215

minating controls are correctly placed outside the tabbed pane, in the
lower right.
More controls won‚Äôt necessarily mean that users will find the interface easier to use or
more powerful. The contents of the various tabs must have a meaningful rationale for
being together. Otherwise, this ability is just another way to build a product according

---

## Chunk 4216

to what is easy for developers, rather than what is good for users.
The tabs in a dialog should be organized to provide either increased depth or increased
breadth on a well-defined topic. To organize for breadth, each tab should cover parallel,
alternative aspects of the primary topic, the way song properties from iTunes, shown

---

## Chunk 4217

in Figure 21-29, address a variety of properties and settings for the song that would be
unwieldy in a single pane. In the case of organizing for more depth, each tab should
probe the same aspect of one topic in greater depth. The commonly employed Advanced
tab is an example of this strategy.
CH 21. Design Details: Controls and Dialogs 637

---

## Chunk 4218

--- Page 668 ---
Tabs are successful because the idiom follows many users‚Äô mental model of how things
are normally stored. The various controls are grouped in several parallel panes, one level
deep. But this idiom can also be abused.
Because it‚Äôs easy to cram so many controls into a tabbed dialog, the temptation is great

---

## Chunk 4219

to add more and more tabs to a dialog. The now-defunct Options dialog from Microsoft
Word, shown in Figure 21-30, illustrates this problem. The 10 tabs are far too numerous
to show in a single line, so they are stacked two deep. The problem with this idiom, called
stacked tabs, is that the user has to do a significant amount of work to find the single

---

## Chunk 4220

option she wants to change. While the labels of the tabs may give her some help, she is
still forced to scan the contents of several tabs while switching between them. And as
if that isn‚Äôt enough, when she clicks a tab in the back row, the entire row of tabs moves
forward, pushing the other two rows to the back. Few users are happy with this, because

---

## Chunk 4221

it‚Äôs disconcerting to click a tab and then have it move out from under the mouse. It‚Äôs no
wonder that Microsoft has largely abandoned this idiom.
Figure 21-30: The now-defunct Options properties dia-
log from Word was an abuse of the tabbed dialog idiom.
The problem was that users had to do a lot of work to
find the option they were looking for.

---

## Chunk 4222

Stacked tabs illustrate the following axiom of user-interface design: All idioms, regard-
less of their merits, have practical limits. A group of five radio buttons may be excellent,
but a group of 50 is ridiculous. Five or six tabs in a row is fine, but adding enough tabs to
require stacking greatly reduces the idiom‚Äôs usefulness.
638 Part III: Interaction Details

---

## Chunk 4223

--- Page 669 ---
All interaction idioms have practical limits.
A better alternative would be to use several separate dialogs with fewer tabs on each. In
Figure 21-30, Options is just too broad a category, and lumping all this functionality in
one place doesn‚Äôt do users any favors. There is little connection among the 12 panes, so

---

## Chunk 4224

there is little need to move among them. This solution may lack a certain programming
elegance, but it is much better for users.
Don‚Äôt stack tabs.
Expanding dialogs
Expanding dialogs unfold to expose more controls. The dialog shows a button marked
More, or uses a down-pointing arrow icon button that toggles to point up when the dia-

---

## Chunk 4225

log has been expanded. When the user clicks it, the dialog grows to occupy more screen
space. The newly added portion of the dialog contains added functionality, usually for
advanced users or more-complex, but related, operations. The Find and Replace dialog
in Microsoft Word, shown in Figure 21-31, is a familiar example of this idiom.

---

## Chunk 4226

Figure 21-31: The Microsoft Word Find and Replace dialog is an example of an expanding dialog. The
image on the left shows it in its original state; the one on the right is what happens after the arrow
toggle button is clicked.
CH 21. Design Details: Controls and Dialogs 639

---

## Chunk 4227

--- Page 670 ---
Expanding dialogs give infrequent or first-time users the luxury of not having to con-
front the complex facilities that more frequent users don‚Äôt find confusing or overwhelm-
ing. Think of the dialog as being in either beginner or advanced mode. However, these
types of dialogs must be designed with care. When an application has one dialog for

---

## Chunk 4228

beginners and another for experts, it all too often simultaneously insults the beginners
and hassles the experts. It‚Äôs usually a good idea for the dialog to remember what mode
it was used in the last time it was invoked. Of course, this means you should always
remember to include a Less command to return the dialog to simple beginner mode.
Cascading dialogs

---

## Chunk 4229

Cascading dialogs are a diabolical idiom whereby controls, usually pushbuttons, in one
dialog summon another dialog in a hierarchical pile. The second dialog usually covers
the first one either partially or completely. Sometimes the second dialog can summon
yet a third one. What a mess! Thankfully, cascading dialogs have fallen from grace and

---

## Chunk 4230

are hard to find anymore. Figure 21-32 shows an example taken from Windows Vista.
Figure 21-32: You can still find a few (terrible) cascading dialogs in Win-
dows. Each dialog offers a set of terminating buttons. The resulting excise
and ambiguity are not helpful.
640 Part III: Interaction Details

---

## Chunk 4231

--- Page 671 ---
It is, simply put, hard to understand what is going on with cascading dialogs. Part of the
problem is that the second dialog covers at least part of the first. That isn‚Äôt the big issue.
After all, combo boxes and pop-up menus do that, and some dialogs can be moved. The
real confusion comes from the presence of a second set of terminating buttons. What is

---

## Chunk 4232

the scope of each Cancel? What are we OKing?
If you find your application requiring cascading dialogs for anything other than really
obscure stuff that your users generally won‚Äôt need, you should take another look at your
interaction framework. It may have structural problems that could be remedied using
tabbed dialogs, sidebars, or even toolbars (from which a dialog could be launched).

---

## Chunk 4233

Dialogs can become useful assistants that help your users accomplish their goals,
instead of dreaded roadblocks that confound them at every step. By keeping your dialogs
manageable, and invoking them only when their functions are truly those that belong
in another room, you will go far toward maintaining your users‚Äô flow and ensuring their
success and gratitude.
Eliminating Errors, Alerts,

---

## Chunk 4234

and Confirmations
As we‚Äôve already discussed, bulletin dialogs‚Äîerrors, alerts, and confirmations‚Äîrepre-
sent some of the most problematic digital product interactions, enough so that websites
and blogs chronicle the worst examples of these idioms. In most cases, bulletin dialogs
can be replaced with interactions that better serve user goals and needs. We‚Äôll discuss
why and how in this section.

---

## Chunk 4235

Error dialogs
Probably no user interface idiom is more annoying‚Äîor more historically misused‚Äîthan
the error dialog. They are often poorly written, unhelpful, rude, and, worst of all, don‚Äôt
even help prevent the error. Although they are on the wane, it‚Äôs important to be vigilant
to root them out of your application whenever and wherever possible.
what‚Äôs wrong with error dialogs?

---

## Chunk 4236

Users don‚Äôt need to be told they‚Äôve made an error. Rather, they need help in avoiding
errors and their consequences. We believe that applications have a responsibility to try
to make things right for users, rather than summarily rejecting their input.
CH 21. Design Details: Controls and Dialogs 641

---

## Chunk 4237

--- Page 672 ---
Since the early days of computing, developers have largely left unexamined the notion
that the proper way for software to interact with humans was to demand input and to
complain when the human failed to meet the application‚Äôs expectations. Examples of
this unfortunate tradition exist wherever software insists that users do things its way

---

## Chunk 4238

rather than adapting machine behavior to the needs of humans. Nowhere has this been
more prevalent than in the use of error messages.
Humans have emotions and feelings; applications don‚Äôt. When one module of code
rejects the input of another, the rejected module doesn‚Äôt care; it doesn‚Äôt scowl, get hurt,
or seek counseling. Humans, on the other hand, get angry when they are flatly told they

---

## Chunk 4239

did something stupid. Make no mistake: When the user sees an error message, it is as
if someone has told her she is stupid (see Figure 21-33). Unsurprisingly, users hate this.
Despite this inevitable reaction, some developers use error messages anyway. They don‚Äôt
know how else to create reliable software.
Figure 21-33: No matter how nicely your error messages

---

## Chunk 4240

are phrased, this is how they will be interpreted.
The assumption that users need to be told when they are wrong is false in most circum-
stances. How important is it for you to know that you requested an invalid type size?
Most of the time, applications can and should make reasonable substitutions rather
than scolding users.

---

## Chunk 4241

We consider it impolite to tell people when they have committed a social faux pas. Tell-
ing someone he has a bit of lettuce stuck to his tooth or that his fly is unzipped is equally
embarrassing for both parties. Sensitive people look for ways to bring the problem to the
victim‚Äôs attention without letting others notice. Yet the default tool for broaching such a

---

## Chunk 4242

topic with the user is a big, bold box in the middle of the screen that stops all the action
and emits a scornful beep. Does that really seem appropriate?
Many designers and developers imagine that their error messages alert users to serious
problems. This is a widespread misconception. Most error messages inform users of the

---

## Chunk 4243

application‚Äôs inability to work flexibly and are an admission of stupidity on the applica-
tion‚Äôs part. In other words, to most users, error messages are seen not just as the appli-
cation stopping the proceedings, but as stopping the proceedings with idiocy. We can
significantly improve the quality of our interfaces by eliminating error dialogs.
642 Part III: Interaction Details

---

## Chunk 4244

--- Page 673 ---
Most error dialogs stop the proceedings with idiocy.
whose mistake is it, anyway?
Conventional wisdom says that error messages tell users when they have made a mis-
take. Actually, most error messages simply report when the application gets confused.
Users make far fewer substantive mistakes than imagined. Typical ‚Äúerrors‚Äù consist of

---

## Chunk 4245

issues such as the user‚Äôs inadvertently entering an out-of-range number, or entering an
alphabetic character where a number was expected.
When the user enters something unintelligible by the application‚Äôs standards, whose
fault is it? Is it the user‚Äôs fault for not knowing how to use the application properly, or is it

---

## Chunk 4246

the fault of the application for not making choices and their effects more clear to users?
Information that is entered in an unfamiliar sequence is often considered an error by
software, but people don‚Äôt have this difficulty with unfamiliar sequences. Humans know
how to wait, to bide their time until the story is complete. Software usually jumps to

---

## Chunk 4247

the erroneous conclusion that out-of-sequence input means wrong input, so it issues an
error message.
For example, when a user creates an invoice for a customer without an ID number, most
applications reject the entry. They stop the proceedings with the idiocy that the user
must enter a valid customer number right now. Alternatively, the application could

---

## Chunk 4248

accept the transaction with the expectation that a customer number will eventually be
entered, or that the user may even be trying to create a new customer. The application
could provide rich modeless visual feedback (as discussed at length in Chapter 15) show-
ing that the customer ID hasn‚Äôt been entered yet. Then it could watch to make sure that

---

## Chunk 4249

the user enters the necessary information to make that ID valid before the end of the
session, or even at the end of the month‚Äôs book closing.
If a person forgets to fully explain things to the application, it can, after some reasonable
delay, provide more insistent signals to the user. At the end of a session, the application

---

## Chunk 4250

can make sure that any irreconcilable transactions are apparent. The application doesn‚Äôt
have to bring the proceedings to a halt with an error message. After all, the application
will remember the transactions, so they can be tracked down and fixed. As long as users
remain well-informed throughout, there shouldn‚Äôt be a problem. The trick is to inform

---

## Chunk 4251

without stopping the proceedings. We‚Äôll discuss this idea a bit later in this chapter.
CH 21. Design Details: Controls and Dialogs 643

---

## Chunk 4252

--- Page 674 ---
Error messages don‚Äôt work
Error messages have a final irony: They don‚Äôt actually prevent users from making errors.
We imagine that users are staying out of trouble because our trusty error messages keep
them straight, but this is a delusion. What error messages really do is prevent the appli-

---

## Chunk 4253

cation from getting into trouble. In most software, the error messages stand like sentries
where the application is most sensitive, not where users are most vulnerable, setting in
concrete the idea that the application is more important than users. Users get into plenty
of trouble with our software regardless of the quantity or quality of its error messages.

---

## Chunk 4254

All an error dialog can do is keep me from entering letters in a numeric field. It does
nothing to protect me from entering the wrong numbers, which is a much more difficult
design task.
how to eliminate error messages
We can‚Äôt eliminate error messages by simply discarding the code that shows the actual
error bulletin dialog and letting the application crash if a problem arises. Instead, we

---

## Chunk 4255

need to redesign applications so that they are no longer susceptible to the problem. We
must replace the error dialog with more robust software that prevents error conditions
from arising, rather than having the application merely complain when things don‚Äôt
go precisely the way it wants. Like vaccinating it against a disease, we make the appli-

---

## Chunk 4256

cation immune to the problem, and then we can toss the message that reports it. To
eliminate the error message, we must first reduce the possibility of users making errors.
Instead of assuming error messages are normal, we need to think of them as abnormal
solutions to rare problems‚Äîas surgery instead of aspirin. We need to treat them as an
idiom of last resort.

---

## Chunk 4257

The software designer must reevaluate the entire concept of invalid data. When it comes
from a human, the software should assume that the input is correct, simply because the
human is more important than the code. Instead of software rejecting input, it must
work harder to understand and reconcile confusing input. An application may under-

---

## Chunk 4258

stand the state of things inside the computer, but only the user understands the state of
things in the real world. Remember, the real world is more relevant and important than
what the application thinks.
making errors impossible
Making it impossible for users to make errors is the best way to eliminate error mes-

---

## Chunk 4259

sages. By using bounded widgets (such as spinners and drop-down list boxes) for data
entry, we can prevent users from entering invalid values. Instead of forcing the user to
key in his selection, present him with a list of possible selections from which to choose.
Instead of making the user type in a zip code, for example, look it up from the entered

---

## Chunk 4260

address. In other words, make it impossible for the user to enter an erroneous state.
644 Part III: Interaction Details

---

## Chunk 4261

--- Page 675 ---
Make errors impossible.
Another excellent way to eliminate error messages is to make the application smart
enough that it no longer needs to make unnecessary demands. Many error messages
say things like ‚ÄúInvalid input. User must type xyz.‚Äù Why can‚Äôt the application, if it knows
what the user must type, just enter xyz by itself and save the user the tongue-lashing?

---

## Chunk 4262

Instead of demanding that the user find a file on a disk, introducing the chance that
the user will select the wrong file, the application should remember which files it has
accessed in the past and allow the user to select from that list. (‚ÄúRecent file‚Äù lists under
the ‚ÄúFile‚Äù menu accomplish this nicely.) Another example is designing a system that gets

---

## Chunk 4263

the date from the internal or an Internet clock instead of asking for input from users.
Undoubtedly, these solutions cause more work for developers. However, it is the develop-
er‚Äôs job to satisfy users, not vice versa. If the developer thinks of the user as just another
input device, it is easy to forget the pecking order in the world of software design.

---

## Chunk 4264

Users are unsympathetic to the difficulties developers face. They don‚Äôt see the techni-
cal rationale behind an error message. All they see is the application‚Äôs unwillingness to
deal with things in a human way. They see all error messages as some variant of the one
shown in Figure 21-34.
Figure 21-34: This is how most users
perceive error bulletin dialogs. They

---

## Chunk 4265

see them as Kafkaesque interrogations,
with each successive choice leading to
a blacker pit of retribution and regret.
One of the problems with error messages is that they are usually ex post facto reports of
failure. They say, ‚ÄúBad things just happened, and all you can do is acknowledge the catastro-
phe.‚Äù Such reports are not helpful. And these dialogs almost always come with an OK button,

---

## Chunk 4266

requiring the user to be an accessory to the crime. These error messages are reminiscent of
the scene in old war movies where an ill-fated soldier steps on a landmine while advanc-
ing across the battlefield. He and his buddies clearly hear the click of the mine‚Äôs triggering
mechanism. The soldier realizes that although he‚Äôs safe now, as soon as he removes his foot

---

## Chunk 4267

from the mine, it will explode, taking some large and useful part of his body with it. This is
likely the feeling users will get when they see your app‚Äôs ill-considered error messages.
CH 21. Design Details: Controls and Dialogs 645

---

## Chunk 4268

--- Page 676 ---
Positive feedback
One of the reasons why software is hard to learn is that it so rarely gives positive feed-
back. People learn better from positive feedback than from negative feedback. People
want to use their software correctly and effectively, and they are motivated to learn how
to make the software work for them. They don‚Äôt need to be slapped on the wrist when

---

## Chunk 4269

they fail. They do need to be rewarded, or at least acknowledged, when they succeed.
They will feel better about themselves if they get approval, and that good feeling will be
reflected to the product.
Advocates of negative feedback can cite numerous examples of its effectiveness in guid-
ing people‚Äôs behavior. This evidence is true, but almost universally, the context of effec-

---

## Chunk 4270

tive punitive feedback is getting people to refrain from doing things they want to do but
shouldn‚Äôt: things like not driving over 55 mph, not cheating on their spouses, and not
fudging their income taxes. But when it comes to helping people do what they want to
do, positive feedback is best. If you‚Äôve ever learned to ski, you know that a ski instructor
who yells at you doesn‚Äôt help the situation.

---

## Chunk 4271

Users get humiliated when software tells them they failed.
Keep in mind that we are talking about the drawbacks of negative feedback from a soft-
ware application. Negative feedback from another person, although unpleasant, can be
justified in certain circumstances. You could say that a mean coach helps your mental

---

## Chunk 4272

toughness for competition, and the imperious professor at least prepares you for the vicis-
situdes of the real world. But being given negative feedback by a machine is an insult. The
drill sergeant and professor are at least human and have bona fide experience and merit.
But to be told by software that you have failed is humiliating and degrading. Nothing

---

## Chunk 4273

that takes place inside a computer is helped by humiliating or degrading a human user.
Aren‚Äôt there exceptions?
Are there exceptions to the rule of eliminating error messages? Not many. As our tech-
nological powers have grown, the portability and flexibility of our digital systems have
grown too. Modern computers and smart devices can be connected to and disconnected

---

## Chunk 4274

from networks and peripherals without having to first power down. This means that it is
now normal for digital hardware to appear and disappear on an ad hoc basis. Printers,
speakers, and file servers can come and go like the tides. With the development of Wi-Fi
and Bluetooth wireless protocols, our devices can frequently connect to and disconnect

---

## Chunk 4275

from each other. Is it an error that the computer crashed and restarted without the user‚Äôs
selecting ‚Äúshut down‚Äù? Is it an error if you print a document, only to find that no printers
646 Part III: Interaction Details

---

## Chunk 4276

--- Page 677 ---
are connected? Is it an error if the file you are editing normally resides on a drive that is
no longer reachable?
None of these occurrences should be considered errors from the user perspective. If you
open a file on the server and begin editing it, and then you go out to a restaurant for
lunch, taking your notebook with you, the application should see that the file‚Äôs normal

---

## Chunk 4277

home is no longer available and do something intelligent. It could use a wireless network
and VPN to log on to the server remotely. Or it could just save any changes you make
locally, synchronizing with the version on the server when you return to the office from
lunch. In any case, it is normal behavior, not an error, and you shouldn‚Äôt have to tell the

---

## Chunk 4278

application what it should do every time it encounters this situation.
Almost all error messages can be eliminated. If you take the correct point of view‚Äîthat
error messages must be eliminated and that your app‚Äôs design is subject to change in
search of this objective‚Äîyou will be surprised by how little really needs to be changed

---

## Chunk 4279

to achieve this. In those rare cases where the rest of the application must be altered
dramatically, that is the time to compromise with the real world and go ahead and use
an error message. But you need to start thinking of this compromise as an admission of
failure‚Äîas a solution of last resort.
This said, there are always a few critical situations where users must be notified in an

---

## Chunk 4280

obtrusive, attention-demanding manner. For example, suppose that, during market
hours, an investment manager sets up some trades to be executed by the end of the day,
but she sends them to the trading desk after market close. She should be interrupted
from whatever else she‚Äôs working on to be warned that the trades can‚Äôt be executed until

---

## Chunk 4281

the market opens tomorrow. At that point she may no longer want to make the trades.
Improving error messages: the last resort
When it is truly infeasible to redesign your application to eliminate the need for error
dialogs, we offer here some ways to improve the quality of error messages. Use these
recommendations only as a last resort, when you run out of other reasonable options for

---

## Chunk 4282

actually eliminating the error.
An error dialog should be polite, illuminating, and helpful. Never forget that an error dia-
log is the application‚Äôs way of reporting on its failure to do its job, and that it interrupts
the user to do this. The error dialog must be unfailingly polite. It must never even hint that

---

## Chunk 4283

the user caused this problem, because that is simply not true from the user‚Äôs perspective.
The error dialog must illuminate the problem for the user. This means that it must give
him the information he needs to make an appropriate plan to solve the application‚Äôs
problem. It needs to make clear the scope of the problem, what the alternatives are, what

---

## Chunk 4284

the application will do as a default, and what information was lost, if any.
CH 21. Design Details: Controls and Dialogs 647

---

## Chunk 4285

--- Page 678 ---
It is wrong for the application to dump the problem in the user‚Äôs lap and wash its hands
of the matter. It should offer to implement at least one suggested solution right there
within the error message. It should offer buttons that will take care of the problem in
various ways. If a printer is missing, the message should offer options for deferring the

---

## Chunk 4286

printout or selecting another printer. If the database is hopelessly trashed and useless,
the application should offer to rebuild it to a working state, including telling the user
how long that process will take and what side effects it will cause.
Figure 21-35 shows an example of a reasonable error message. Notice that it is polite,

---

## Chunk 4287

illuminating, and helpful. It doesn‚Äôt suggest that the user‚Äôs behavior is anything but
impeccable.
Figure 21-35: If you must use an error
dialog, it should look something like this.
It politely and clearly illuminates the
problem and proposes a good solution.
The action buttons and resulting effects
are also clearly described.
Alerts and confirmations

---

## Chunk 4288

Like error dialogs, alerts and confirmations stop the proceedings, often with idiocy. Alerts
and confirmations do not report malfunctions. An alert notifies the user of the applica-
tion‚Äôs action, whereas a confirmation also gives the user the authority to override that
action. These dialogs pop up like weeds in most applications. They should, like error dia-

---

## Chunk 4289

logs, be eliminated in favor of more useful idioms, such as those discussed in Chapter 15.
Alerts: announcing the obvious
Alerts usually violate one of the basic design principles from Chapter 18: A dialog is
another room, and you should have a good reason to go there. Even if the user must be
informed about an action taken by the application, why go into another room to do it?

---

## Chunk 4290

648 Part III: Interaction Details

---

## Chunk 4291

--- Page 679 ---
When it comes down to it, an application should either have the courage of its convic-
tions or should not take action without the user‚Äôs direct instruction. For example, if the
application saves the user‚Äôs file to disk automatically, it should have the confidence to
know that it is doing the right thing. It should provide a means for users to find out what

---

## Chunk 4292

it did, but it doesn‚Äôt have to stop the proceedings to do so. If the application is unsure
whether it should save the file, it shouldn‚Äôt do so but should leave that operation up to
the user.
Conversely, if the user directs the application to do something‚Äîdragging a file to the
trash can, for example‚Äîit doesn‚Äôt need to stop the proceedings with idiocy to announce

---

## Chunk 4293

that the user just dragged a file to the trash can. The application should ensure that
there is adequate visual feedback regarding the action. If the user has made the gesture
in error, the application should unobtrusively offer him a robust Undo facility so that he
can backtrack.
The rationale for alerts is to keep users informed. This is a great objective, but it need not

---

## Chunk 4294

come at the expense of smooth interaction flow. The alert shown in Figure 21-36 is an
example of how alerts are more trouble than help. The Find dialog (the one underneath)
already forces the user to click Cancel when the search is completed, but the superimposed
alert box adds another flow-breaking button. To return to his work, the user first must

---

## Chunk 4295

click the OK button in the alert and then the Cancel button in the Find dialog. If the infor-
mation provided by the alert were built into the main Find dialog, the user‚Äôs burden would
be reduced by half.
Figure 21-36: A typical alert dialog. It is unnecessary and inap-
propriate and stops the proceedings with idiocy. Word has fin-
ished searching the document. Should reporting that fact be a

---

## Chunk 4296

different facility than the search mechanism itself? If not, why
does it use a different dialog?
CH 21. Design Details: Controls and Dialogs 649

---

## Chunk 4297

--- Page 680 ---
how to eliminate alerts
Alerts are so numerous because they are so easy to create. Most programming languages
offer some form of message facility in a single line of code. Conversely, building an ani-
mated status display into the face of an application might require a thousand or more
lines of code. Developers cannot be expected to make the right choice in this situation.

---

## Chunk 4298

They have a conflict of interest, so designers must be sure to specify precisely where
information is reported on the surface of an application. The designers must then follow
up to be sure that the design wasn‚Äôt compromised for the sake of rapid coding. Imagine
if the contractor on a building site decided unilaterally not to add a bathroom because

---

## Chunk 4299

it was just too much trouble to deal with the plumbing. There would be consequences.
Of course, software must keep users informed of its actions. It should have visual indica-
tors built into its main screens to make such status information immediately available
to users, should they desire it. Launching an alert to announce an unrequested action is

---

## Chunk 4300

bad enough. Launching one to announce a requested action is pathological.
Software should be flexible and forgiving, but it doesn‚Äôt need to be fawning and obse-
quious. The dialog shown in Figure 21-37 is a classic example of an alert that should be
put out of its misery. It announces that the application successfully completed a syn-

---

## Chunk 4301

chronization‚Äîits sole reason for existence. This occurs a few seconds after we told it to
synchronize. It stops the proceedings to announce the obvious. It‚Äôs as though the appli-
cation wants approval for how hard it worked. If a person interacted with us like this,
we‚Äôd be uncomfortable and find him overbearing. Of course, some feedback is appropri-

---

## Chunk 4302

ate, but is another dialog that must be dismissed really necessary?
Figure 21-37: This dialog, from AirSet
Desktop Sync, is unnecessarily obsequious.
We tell it to synchronize and are promptly
stopped in our tracks by this important mes-
sage. Do we really need the application to
waste our time demanding recognition that it
managed to do its job?
650 Part III: Interaction Details

---

## Chunk 4303

--- Page 681 ---
Confirmations: the dialog that cried wolf
When an application feels unconfident about its actions, it often asks the user for
approval with a dialog, like the one shown in Figure 21-38. This is called a confirmation.
Sometimes a confirmation is offered because the application second-guesses one of the

---

## Chunk 4304

user‚Äôs actions. Sometimes the application feels that it is not competent to make a deci-
sion it faces, and it uses a confirmation to give the user the choice instead.
Figure 21-38: Every time we delete a file in Windows, we get
this confirmation dialog asking if we‚Äôre sure. Yes, we‚Äôre sure.
We‚Äôre always sure. And if we‚Äôre wrong, we expect Windows

---

## Chunk 4305

to be able to recover the file for us. Windows lives up to that
expectation with its Recycle Bin. So, why does it still issue
the confirmation message? When a confirmation box is issued
routinely, users get used to approving it routinely. So, when it
eventually reports an impending disaster to the user, he goes
ahead and approves it anyway, because it is routine. Do your

---

## Chunk 4306

users a favor and never create another confirmation dialog.
Confirmations get written into software when a developer arrives at an impasse in her
coding. Typically, she realizes that she is about to direct the application to take some
bold action, and she feels unsure about taking responsibility for it. Sometimes the bold

---

## Chunk 4307

action is based on some condition the application detects, but more often it is based on
a command the user issues. Typically, the confirmation will be launched after the user
issues a command that is irrecoverable or whose results might cause undue alarm.
Confirmations pass the buck to users. Users trust the application to do its job, and the

---

## Chunk 4308

application should both do its job and ensure that it does its job right. The proper solu-
tion is to make the action easily reversible and provide enough modeless feedback so
that users are not caught off-guard.
Confirmations also illustrate an interesting quirk of human behavior: They work only
when they are unexpected. That doesn‚Äôt sound remarkable until you examine it in con-

---

## Chunk 4309

text. If confirmations are offered in routine places, users quickly become inured to them
and routinely dismiss them without a glance. Dismissing confirmations thus becomes
as routine as issuing them. If at some point a truly unexpected and dangerous situation
CH 21. Design Details: Controls and Dialogs 651

---

## Chunk 4310

--- Page 682 ---
arises‚Äîone that should be brought to the user‚Äôs attention‚Äîhe will, by rote, dismiss the
confirmation, exactly because it has become routine. Like the fable of the boy who cried
wolf, the confirmation box won‚Äôt work if it cries too many times when there is no danger.
For confirmation dialogs to work, they must appear only when the user will almost

---

## Chunk 4311

definitely click the No or Cancel button. They should never appear when the user is
likely to click the Yes or OK button. Seen from this perspective, they look rather point-
less, don‚Äôt they?
how to eliminate confirmations
Three design principles provide a way to eliminate confirmation dialogs. The best way is
to obey this simple dictum: Do, don‚Äôt ask. When you design your software, go ahead and

---

## Chunk 4312

give it the force of its convictions (backed up, of course, by user research, as discussed in
Chapter 2). Users will respect its brevity and confidence.
Do; don‚Äôt ask.
Of course, if an application confidently does something that the user doesn‚Äôt like, it must
be able to reverse the operation. Every aspect of the application‚Äôs action must be undo-

---

## Chunk 4313

able. Instead of asking in advance with a confirmation dialog, on those rare occasions
when the application‚Äôs actions were out of turn, let the user issue the Stop-and-Undo
command.
Most situations that we currently consider unprotectable by Undo actually can be pro-
tected fairly well. Deleting or overwriting a file is a good example. The file can be moved

---

## Chunk 4314

to a directory where it is kept for a month or so before it is physically deleted. The Win-
dows Recycle Bin uses this strategy, except for the part about automatically erasing files
after a month: Users still have to take out the garbage.
Make all actions reversible.
Even better than acting in haste and forcing users to rescue the application with Undo,

---

## Chunk 4315

you can make sure that applications offer users adequate information so that they never
issue a command (or omit a command) that leads to an undesirable result. Applications
should use rich visual feedback so that users are constantly kept informed, the same way
that dashboard instruments keep us informed of the state of our car.
652 Part III: Interaction Details

---

## Chunk 4316

--- Page 683 ---
Occasionally, a situation arises that really can‚Äôt be protected by Undo. Is this a legitimate
case for a confirmation dialog? Not necessarily. A better approach is to provide users
with protection the way we give them protection on the freeway: with consistent and
clear markings. You can often build excellent, modeless warnings right into the inter-

---

## Chunk 4317

face. For instance, look at the dialog from Adobe Photoshop shown in Figure 21-39, tell-
ing us that our document is larger than the available print area. Why has the application
waited until now to inform us of this fact? What if guides showing the actual printable
region were visible on the page at all times (unless the user hid them)? What if the parts

---

## Chunk 4318

of the picture outside the printable area were highlighted when the user moved the cur-
sor over the Print button in the toolbar? Clear, rich modeless feedback (as discussed in
Chapter 15) is the best way to address these problems.
Figure 21-39: This dialog provides too
little help too late. What if the applica-
tion could display the printable region
right in the main interface as dotted

---

## Chunk 4319

guides? There‚Äôs no reason for users to
be subjected to dialogs like these.
Provide modeless feedback to help users avoid mistakes.
Much more common than honestly irreversible actions are actions that are easily revers-
ible but still uselessly protected by routine confirmation boxes. The confirmation shown
in Figure 21-38 is an excellent specimen of this species. There is no reason to ask for

---

## Chunk 4320

confirmation of a move to the Recycle Bin. The sole reason the Recycle Bin exists is to
implement an Undo facility for deleted files.
The Devil Is in the Details
Although the big-picture principles discussed throughout this book can provide enor-
mous leverage in creating products that will please and satisfy users, it‚Äôs always impor-
tant to remember that the devil is in the details.

---

## Chunk 4321

CH 21. Design Details: Controls and Dialogs 653

---

## Chunk 4322

--- Page 684 ---
Frustrating controls and misplaced dialogs can lead to constant low-level annoyance,
even if the overall product concept is excellent. Be sure to dot your i‚Äôs and cross your t‚Äôs,
and ensure that the detailed interactions of your product support your user in his goals,
tasks, and aspirations.
If you stick to the concepts behind Goal-Directed Design and use that thinking through-

---

## Chunk 4323

out your framework down to the most minute design details, you will create products
that will surpass the competition, make devoted fans of your users, and‚Äîperhaps‚Äî
make the world a better place, one pixel at a time.
654 Part III: Interaction Details

---

## Chunk 4324

--- Page 685 ---
A
APPEnDIX
DEsIgn PrInCIPlEs
Chapter 1
‚Ä¢ User interfaces should be based on user mental models rather than implementation
models.
‚Ä¢ Goal-directed interactions reflect user mental models.
‚Ä¢ Interaction design is not guesswork.
Chapter 3
‚Ä¢ Don‚Äôt make the user feel stupid.
‚Ä¢ Focus the design for each interface on a single primary persona.
Chapter 4

---

## Chunk 4325

‚Ä¢ Define what the product will do before you design how the product will do it.
‚Ä¢ In the early stages of design, pretend the interface is magic.

---

## Chunk 4326

--- Page 686 ---
Chapter 5
‚Ä¢ Never show a design approach you‚Äôre unhappy with; stakeholders just might like it.
‚Ä¢ There is only one user experience: Form and behavior must be designed in concert.
Chapter 8
‚Ä¢ The computer does the work, and the person does the thinking.
‚Ä¢ Software should behave like a considerate human being.

---

## Chunk 4327

‚Ä¢ If it‚Äôs worth it to the user to do it, it‚Äôs worth it to the application to remember it.
Chapter 9
‚Ä¢ Decisions about technical platform are best made in concert with interaction design
efforts.
‚Ä¢ Optimize sovereign applications for full-screen use.
‚Ä¢ Sovereign interfaces should feature a conservative visual style.
‚Ä¢ Sovereign applications should exploit rich input.

---

## Chunk 4328

‚Ä¢ Maximize document views within sovereign applications.
‚Ä¢ Transient applications must be simple, clear, and to the point.
‚Ä¢ Transient applications should be limited to a single window and view.
‚Ä¢ A transient application should launch to its previous position and configuration.
‚Ä¢ Kiosks should be optimized for first-time use.
Chapter 10
‚Ä¢ Don‚Äôt weld on training wheels.

---

## Chunk 4329

‚Ä¢ Nobody wants to remain a beginner.
‚Ä¢ Optimize for intermediates.
‚Ä¢ Inflect the interface for typical navigation.
‚Ä¢ Users make commensurate effort if the rewards justify it.
‚Ä¢ Imagine users as very intelligent and very busy.
656 APPENDIX A: Design Principles

---

## Chunk 4330

--- Page 687 ---
Chapter 11
‚Ä¢ No matter how cool your interface is, less of it would be better.
‚Ä¢ Don‚Äôt use dialogs to report normalcy.
‚Ä¢ Ask forgiveness, not permission.
Chapter 12
‚Ä¢ Eliminate excise wherever possible.
‚Ä¢ Don‚Äôt stop the proceedings with idiocy.
‚Ä¢ Don‚Äôt make users ask for permission.
‚Ä¢ Allow input wherever you have output.
‚Ä¢ Significant change must be significantly better.

---

## Chunk 4331

Chapter 13
‚Ä¢ Most people would rather be successful than knowledgeable.
‚Ä¢ Never bend your interface to fit a metaphor.
‚Ä¢ All idioms must be learned; good idioms need to be learned only once.
‚Ä¢ Rich visual feedback is the key to successful direct manipulation.
‚Ä¢ Visually communicate pliancy whenever possible.
Chapter 14

---

## Chunk 4332

‚Ä¢ An error may not be your application‚Äôs fault, but it is your application‚Äôs responsibility.
‚Ä¢ Audit, don‚Äôt edit.
‚Ä¢ Save documents and settings automatically.
‚Ä¢ Put files where users can find them.
Chapter 17
‚Ä¢ Visually distinguish elements that behave differently.
‚Ä¢ Visually communicate function and behavior.
‚Ä¢ Take things away until the design breaks, and then put that last thing back in.

---

## Chunk 4333

‚Ä¢ Visually show what; textually tell which.
APPENDIX A: Design Principles 657

---

## Chunk 4334

--- Page 688 ---
‚Ä¢ Obey standards unless there is a truly superior alternative.
‚Ä¢ Consistency doesn‚Äôt imply rigidity.
Chapter 18
‚Ä¢ The utility of any interaction idiom is context-dependent.
‚Ä¢ A dialog box is another room; have a good reason to go there.
‚Ä¢ Provide functions in the window where they are used.
‚Ä¢ Use menus to provide a pedagogic vector.

---

## Chunk 4335

‚Ä¢ Disable menu items when they are not applicable.
‚Ä¢ Use consistent visual symbols on related commands.
‚Ä¢ Toolbars give experienced users fast access to frequently used functions.
‚Ä¢ Use ToolTips with all toolbar and iconic controls.
‚Ä¢ Support both mouse and keyboard use for navigation and selection tasks.
‚Ä¢ Use cursor hinting to show the meanings of metakeys.

---

## Chunk 4336

‚Ä¢ Single-clicking selects data or an object or changes the control state.
‚Ä¢ Double-clicking means single-clicking plus action.
‚Ä¢ Mouse-down over an object or data should select the object or data.
‚Ä¢ Mouse-down over controls means proposing an action; mouse-up means committing to
an action.
‚Ä¢ The selection state should be visually evident and unambiguous.

---

## Chunk 4337

‚Ä¢ Drop candidates must visually indicate their receptivity.
‚Ä¢ The drag cursor must visually identify the source object.
‚Ä¢ Any scrollable drag-and-drop target must auto-scroll.
‚Ä¢ Debounce all drags.
‚Ä¢ Any program that demands precise alignment must offer a vernier.
Chapter 19
‚Ä¢ Most mobile apps have transient posture.
‚Ä¢ Limit the number and direction of animated screen transitions.

---

## Chunk 4338

‚Ä¢ Use guided tours to orient first-time users.
‚Ä¢ Use overlays to explain gestures.
658 APPENDIX A: Design Principles

---

## Chunk 4339

--- Page 689 ---
Chapter 20
‚Ä¢ Use persistent headers to maintain context.
‚Ä¢ Breadcrumbs with lateral links help speed navigation.
‚Ä¢ Auto-complete, auto-suggest, and faceted search help users find things faster.
‚Ä¢ Make scrolling an engaging experience.
‚Ä¢ Infinite scrolling and site footers are mutually exclusive idioms.
‚Ä¢ If you have only one version of your site, make it responsive.
Chapter 21

---

## Chunk 4340

‚Ä¢ Use links for navigation and buttons for action.
‚Ä¢ Distinguish important text items in lists with graphic icons.
‚Ä¢ Avoid scrolling text horizontally.
‚Ä¢ Use bounded controls for bounded input.
‚Ä¢ Use noneditable (display) controls for output-only text.
‚Ä¢ Put primary interactions in the primary window.
‚Ä¢ Dialogs are appropriate for functions that are out of the main interaction flow.

---

## Chunk 4341

‚Ä¢ Dialogs are appropriate for organizing controls and information about a single domain
object or application function.
‚Ä¢ Use verbs in function dialog title bars.
‚Ä¢ Use object names in property dialog title bars.
‚Ä¢ Differentiate modeless dialogs from modal dialogs.
‚Ä¢ Do not use terminating button commands for modeless dialogs.
‚Ä¢ Don‚Äôt dynamically change the labels of terminating buttons.

---

## Chunk 4342

‚Ä¢ Inform the user when the application is unresponsive.
‚Ä¢ Never use transitory dialogs as error messages, alerts, or confirmations.
‚Ä¢ All interaction idioms have practical limits.
‚Ä¢ Don‚Äôt stack tabs.
‚Ä¢ Most error dialogs stop the proceedings with idiocy.
‚Ä¢ Make errors impossible.
‚Ä¢ Users get humiliated when software tells them they failed.
‚Ä¢ Do; don‚Äôt ask.
‚Ä¢ Make all actions reversible.

---

## Chunk 4343

‚Ä¢ Provide modeless feedback to help users avoid mistakes.
APPENDIX A: Design Principles 659

---

## Chunk 4344

--- Page 691 ---
b
APPEnDIX
bIblIogrAPhY
Adlin, Tamara and Pruitt, John. 2010. The Essential Persona Lifecycle. New York: Morgan Kaufmann.
Alexander, Christopher. 1964. Notes on the Synthesis of Form. Cambridge, MA: Harvard University Press.
Alexander, Christopher. 1979. The Timeless Way of Building. New York: Oxford University Press.

---

## Chunk 4345

Alexander, Christopher, et al. 1977. A Pattern Language. New York: Oxford University Press.
Bertin, Jacques. 2010. Semiology of Graphics. Redlands, CA: Ersi Press.
Beyer, Hugh and Holtzblatt, Karen. 1998. Contextual Design. New York: Morgan Kaufmann.
Borchers, Jan. 2001. A Pattern Approach to Interaction Design. Hoboken, NJ: John Wiley & Sons.

---

## Chunk 4346

Borenstein, Nathaniel S. 1994. Programming as if People Mattered. Princeton: Princeton University Press.
Buxton, Bill. 1990. ‚ÄúThe ‚ÄòNatural‚Äô Language of Interaction: A Perspective on Non-Verbal Dialogues.‚Äù Laurel,
Brenda, ed. The Art of Human-Computer Interface Design. Boston: Addison-Wesley.
Carroll, John M., ed. 1995. Scenario-Based Design. Hoboken, NJ: John Wiley & Sons.

---

## Chunk 4347

Carroll, John M. 2000. Making Use: Scenario-Based Design of Human-Computer Interactions. Cambridge,
MA: The MIT Press.
Constantine, Larry L. and Lockwood, Lucy A. D. 1999. Software for Use. Boston: Addison-Wesley.

---

## Chunk 4348

--- Page 692 ---
Constantine, Larry L. and Lockwood, Lucy A. D. 2002. forUse Newsletter #26, October.
Cooper, Alan. 1999. The Inmates Are Running the Asylum. Indianapolis: Sams.
Crampton Smith, Gillian and Tabor, Philip. 1996. ‚ÄúThe Role of the Artist-Designer.‚Äù Winograd, Terry, ed. Bring-
ing Design to Software. Boston: Addison-Wesley.

---

## Chunk 4349

Csikszentmihalyi, Mihaly. 1990. Flow: The Psychology of Optimal Experience. New York: Harper & Row.
DeMarco, Tom and Lister, Timothy. 2013. Peopleware, Third Edition. Boston: Addison-Wesley.
Dillon, Andrew. ‚ÄúBeyond Usability: Process, Outcome and Affect in Human Computer Interaction.‚Äù Paper
presented at the Lazerow Lecture at the Faculty of Information Studies, University of Toronto, March 2001.

---

## Chunk 4350

Retrieved from www.ischool.utexas.edu/~adillon/publications/beyond_usability.html.
Dreyfuss, Henry. 2003. Designing for People. New York: Allworth Press.
Gamma, Erich, et al. 1995. Design Patterns: Elements of Reusable Object-Oriented Software. Boston:
Addison-Wesley.
Garrett, Jesse James. 2011. The Elements of User Experience, Second Edition. San Francisco: New Riders.

---

## Chunk 4351

Gellerman, Saul W. 1963. Motivation and Productivity. New York: Amacom Press.
Goodman, Elizabeth, Kuniavsky, Mike, and Moed, Andrea. 2012. Observing the User Experience. New York:
Morgan Kaufmann.
Goodwin, Kim. 2001. ‚ÄúPerfecting Your Personas.‚Äù Cooper Newsletter, July/August.
Goodwin, Kim. 2002. ‚ÄúGetting from Research to Personas: Harnessing the Power of Data.‚Äù User Interface 7
West Conference.

---

## Chunk 4352

Goodwin, Kim. 2002a. Cooper U Interaction Design Practicum Notes. Cooper.
Goodwin, Kim. 2009. Designing for the Digital Age. Hoboken, NJ: John Wiley & Sons.
Grudin, J. and Pruitt, J. 2002. ‚ÄúPersonas, Participatory Design and Product Development: An Infrastructure
for Engagement.‚Äù PDC ‚Äô02: Proceedings of the Participatory Design Conference.

---

## Chunk 4353

Heckel, Paul. 1994. The Elements of Friendly Software Design. San Francisco: Sybex.
Hoober, Steven and Berkman, Eric. 2012. Designing Mobile Interfaces. Sebastopol, CA: O‚ÄôReilly.
662 APPENDIX B: Bibliography

---

## Chunk 4354

--- Page 693 ---
Horn, Robert E. 1998. Visual Language. Bainbridge Island, WA: Macro Vu Press.
Horton, William. 1994. The Icon Book: Visual Symbols for Computer Systems and Documentation.
Hoboken, NJ: John Wiley & Sons.
Johnson, Jeff. 2007. GUI Bloopers 2.0. New York: Morgan Kaufmann.
Jones, Matt and Marsden, Gary. 2006. Mobile Interaction Design. Hoboken, NJ: John Wiley & Sons.

---

## Chunk 4355

Kobara, Shiz. 1991. Visual Design with OSF/Motif. Boston: Addison-Wesley.
Korman, Jonathan. 2001. ‚ÄúPutting People Together to Create Good Products.‚Äù Cooper Newsletter, September.
Kramer, Kem-Laurin. 2012. User Experience in the Age of Sustainability. New York: Morgan Kaufmann.
Krug, Steve. 2014. Don‚Äôt Make Me Think, Revisited. San Francisco: New Riders.

---

## Chunk 4356

Kuutti, Kari. 1995. ‚ÄúWork Processes: Scenarios as a Preliminary Vocabulary.‚Äù Carroll, John M., ed.
Scenario-Based Design. Hoboken, NJ: John Wiley & Sons.
Laurel, Brenda. 2013. Computers as Theatre, Second Edition. Boston: Addison-Wesley.
Lidwell, William, Holden, Kritina, and Butler, Jill. 2010. Universal Principles of Design, Revised and Updated
Edition. Boston: Rockport Publishers.

---

## Chunk 4357

Macdonald, Nico. 2003. What Is Web Design? Brighton, UK: RotoVision.
McCloud, Scott. 1994. Understanding Comics. Northampton, MA: Kitchen Sink Press.
Mikkelson, N. and Lee, W. O. 2000. ‚ÄúIncorporating user archetypes into scenario-based design.‚Äù Proceedings
of UPA 2000.
Miller, R. B. 1968. ‚ÄúResponse time in man-computer conversational transactions.‚Äù Proceedings of the AFIPS

---

## Chunk 4358

Fall Joint Computer Conference, vol. 33, 267‚Äì277.
Mitchell, J. and Shneiderman, B. 1989. ‚ÄúDynamic versus static menus: An exploratory comparison.‚Äù SIGCHI
Bulletin, vol. 20, no. 4, 33‚Äì37.
Moggridge, Bill. 2007. Designing Interactions. Cambridge, MA: The MIT Press.
Morville, Peter. 2005. Ambient Findability. Sebastopol, CA: O‚ÄôReilly.

---

## Chunk 4359

Morville, Peter and Rosenfeld, Louis. 2007. Information Architecture for the World Wide Web, Third Edition.
Sebastopol, CA: O‚ÄôReilly.
APPENDIX B: Bibliography 663

---

## Chunk 4360

--- Page 694 ---
Mulder, Steve and Yaar, Ziv. 2006. The User Is Always Right. San Francisco: New Riders.
Mullet, Kevin and Sano, Darrell. 1995. Designing Visual Interfaces. Upper Saddle River, NJ: Prentice Hall.
Neil, Theresa. 2014. Mobile Design Pattern Gallery, Second Edition. Sebastopol, CA: O‚ÄôReilly.

---

## Chunk 4361

Nelson, Theodor Holm. 1990. ‚ÄúThe Right Way to Think About Software Design.‚Äù Laurel, Brenda, ed. The Art
of Human-Computer Interface Design. Boston: Addison-Wesley.
Newman, William M. and Lamming, Michael G. 1995. Interactive System Design. Boston: Addison-Wesley.
Nielsen, Jakob. 1993. Usability Engineering. Waltham, MA: Academic Press.

---

## Chunk 4362

Nielsen, Jakob. 2000. Designing Web Usability. San Francisco: New Riders.
Nielsen, Jakob. 2002. UseIt.com.
Norman, Don. 2013. The Design of Everyday Things, Revised and Expanded Edition. New York: Basic Books.
Norman, Donald A. 1994. Things That Make Us Smart. New York: Basic Books.
Norman, Donald A. 1998. The Invisible Computer. Cambridge, MA: The MIT Press.

---

## Chunk 4363

Norman, Donald A. 2005. Emotional Design. New York: Basic Books.
Nudelman, Greg. 2013. Android Design Patterns. Hoboken, NJ: John Wiley & Sons.
Papanek, Victor. 1984. Design for the Real World. Chicago: Academy Chicago Publishers.
Perfetti, Christine and Landesman, Lori. 2001. ‚ÄúThe Truth About Download Times.‚Äù UIE.com.
Pinker, Stephen. 1999. How the Mind Works. New York: Norton.

---

## Chunk 4364

Raskin, Jeff. 2000. The Humane Interface. Boston: Addison-Wesley.
Reimann, Robert. 2002. ‚ÄúPerspectives: Learning Curves.‚Äù edesign magazine, December.
Reimann, Robert. 2005. ‚ÄúPersonas, Scenarios, and Emotional Design.‚Äù UXMatters.com.
Reimann, Robert M. 2001. ‚ÄúSo You Want to Be an Interaction Designer.‚Äù Cooper Newsletter, June.

---

## Chunk 4365

Reimann, Robert M. 2002. ‚ÄúBridging the Gap from Research to Design.‚Äù Panel presentation, IBM Make IT
Easy Conference.
664 APPENDIX B: Bibliography

---

## Chunk 4366

--- Page 695 ---
Reimann, Robert M. and Forlizzi, Jodi. 2001. ‚ÄúRole: Interaction Designer.‚Äù Presentation to AIGA Experience
Design 2001.
Rheinfrank, John and Evenson, Shelley. 1996. ‚ÄúDesign Languages.‚Äù Winograd, Terry, ed. Bringing Design to
Software. Boston: Addison-Wesley.
Rogers, Yvonne, Sharp, Helen, and Preece, Jenny. 2011. Interaction Design, Third Edition. Hoboken, NJ: John
Wiley & Sons.

---

## Chunk 4367

Rombauer, Irma S. and Becker, Marion Rombauer. 1975. The Joy of Cooking. New York: Scribner.
Rudolf, Frank. 1998. ‚ÄúModel-Based User Interface Design: Successive Transformations of a Task/Object
Model.‚Äù Wood, Larry E., ed. User Interface Design: Bridging the Gap from User Requirements to Design.
Boca Raton, FL: CRC Press.

---

## Chunk 4368

Saffer, Dan. 2010. Designing for Interaction, Second Edition. San Francisco: New Riders.
Saffer, Dan. 2013. Microinteractions. Sebastopol, CA: O‚ÄôReilly.
Sauro, Jeff and Lewis, James R. 2012. Quantifying the User Experience. New York: Morgan Kaufmann.
Sch√∂n, D. and Bennett, J. 1996. ‚ÄúReflective Conversation with Materials.‚Äù Winograd, Terry, ed. Bringing
Design to Software. Boston: Addison-Wesley.

---

## Chunk 4369

Schumann, J., Strothotte, T., Raab, A., and Laser, S. 1996. Assessing the Effect of Non-Photorealistic
Rendered Images in CAD, CHI 1996 Papers, 35‚Äì41.
Scott, Bill and Neil, Theresa. 2009. Designing Web Interfaces. Sebastopol, CA: O‚ÄôReilly.
Shneiderman, Ben, et al. 2009. Designing the User Interface, Fifth Edition. Upper Saddle River, NJ:
Prentice Hall.

---

## Chunk 4370

Simon, Herbert A. 1996. The Sciences of the Artificial, Third Edition. Cambridge, MA: The MIT Press.
Snyder, Carolyn. 2003. Paper Prototyping. New York: Morgan Kaufmann.
Tidwell, Jennifer. 2011. Designing Interfaces. Sebastopol, CA: O‚ÄôReilly.
Tufte, Edward. 1983. The Visual Display of Quantitative Information. Cheshire, CT: Graphic Press.

---

## Chunk 4371

Van Duyne, Douglas K., Landay, James A., and Hong, Jason I. 2006. The Design of Sites, Second Edition.
Upper Saddle River, NJ: Prentice Hall.
Veen, Jeffrey. 2000. The Art and Science of Web Design. San Francisco: New Riders.
APPENDIX B: Bibliography 665

---

## Chunk 4372

--- Page 696 ---
Verplank, B., Fulton, J., Black, A., and Moggridge, B. 1993. ‚ÄúObservation and Invention: Use of Scenarios in
Interaction Design.‚Äù Tutorial Notes, InterCHI ‚Äô93, Amsterdam.
Vora, Pawan. 2009. Web Application Design Patterns. New York: Morgan Kaufmann.
Weiss, Michael J. 2000. The Clustered World: How We Live, What We Buy, and What It All Means About Who

---

## Chunk 4373

We Are. New York: Little, Brown and Company.
Wigdor, Daniel and Wixon, Dennis. 2011. Brave NUI World. New York: Morgan Kaufmann.
Winograd, Terry, ed. 1996. Bringing Design to Software. Boston: Addison-Wesley.
Wirfs-Brock, Rebecca. 1993. ‚ÄúDesigning Scenarios: Making the Case for a Use Case Framework.‚Äù Smalltalk
Report, November/December.

---

## Chunk 4374

Wixon, Dennis and Ramey, Judith, eds. 1996. Field Methods Casebook for Software Design.
Hoboken, NJ: John Wiley & Sons.
Wood, Larry E. 1996. ‚ÄúThe Ethnographic Interview in User-Centered Task/Work Analysis.‚Äù
Young, Indi. 2008. Mental Models. Brooklyn, NY: Rosenfeld Media.
666 APPENDIX B: Bibliography

---

## Chunk 4375

--- Page 697 ---
InDEX
numbers layouts, 403
output, 402
2D objects
personas, 400
connecting, 500‚Äì501
response times, 402
repositioning, 497‚Äì498
system settings, 401
reshaping, 498‚Äì500
task flow, 403
resizing, 498‚Äì500
text equivalent for visual elements, 403
3D objects, 501‚Äì502
tools, 401
baseline grids, 503
user-selected system settings, 401
bounding boxes, 504
visually impaired users, 401‚Äì403

---

## Chunk 4376

depthcueing, 503
visual-only output, 402
guidelines, 503‚Äì504
ACD (Activity-Centered Design), 14‚Äì15
input
active validation, 617
camera movement, 506
activities
drag threshold, 505
ACD (Activity-Centered Design), 14‚Äì15
picking problem, 505‚Äì506
versus goals, 14‚Äì15
rotation, 506
interview subjects, 83
zoom, 506
actors, scenario-based design, 105
parallax, 502
ad hoc personas, 97
poles, 503

---

## Chunk 4377

Addictive Synth, 317, 318
shadows, 503
additive selecting, 479
viewpoints, 502‚Äì503
affordance, 312‚Äì313
visual hints, 503‚Äì504
agents, scenario-based design, 105
wireframes, 504
agile development
10-foot interfaces, 564‚Äì566
epics, 104
team collaboration, 158‚Äì161
A
users, 69
abstractions, 69, 437 Alexander, Christopher, 27, 175‚Äì176, 430
accelerators, menus, 452‚Äì453 alignment grid, 414‚Äì417

---

## Chunk 4378

access keys, menus, 453 alternative scenarios, 130
accessibility, 400 Alto, 435
audible-only output, 402 animation, 266‚Äì268
goals, 399‚Äì400 anti-persona, 69
guidelines, 401 applications. See also desktop; Internet
keyboard access, 401 applications; mobile applications
language clarity, 402 full-screen, 441

---

## Chunk 4379

--- Page 698 ---
inter-app integration, 553‚Äì555 baseline grids, 3D objects, 503
multipaned, 441 beginners, designing for, 243‚Äì245
RIAs (rich Internet applications), 570 behavior, 4
windows Design Refinement phase, 137‚Äì138
primary, 436‚Äì438 design values and, 167‚Äì168
secondary, 437 elegance, 168
aptitudes, interview subjects, 83 ethics, 168‚Äì171
archetypes pragmatism, 168

---

## Chunk 4380

versus stereotypes, 68 purpose, 168, 171
user archetypes, 26 patterns, 24, 32‚Äì33
personas, 67 interview subjects, 84
architectural patterns, interaction design personas and, 62, 67, 84
and, 175 ranges of, personas and, 68
archiving, 336‚Äì337 scenarios and, 103‚Äì104
artifact models, 98‚Äì99 variables in interview candidates, 47‚Äì48

---

## Chunk 4381

assignable quick-dial buttons, 123 behavioral cognitive processing, 73‚Äì75
assistive interfaces behavioral patterns (interaction design), 176
galleries, 388‚Äì389 behavioral variables, personas and, 83
guided tours, 385‚Äì386 blind Undo, 367
hints, 389‚Äì390 Bertin, Jacques, 407
overlays, 386‚Äì388 Beyer, Hugh, 44, 70, 98, 111
templates, 388‚Äì389 blinking elements, visually impaired users

---

## Chunk 4382

ToolTip overlays, 392‚Äì393 and, 402
ToolTips, 391‚Äì392 blueprints, 28
wizards, 390‚Äì391 bounce, drag and drop, 489‚Äì492
associative retrieval, 348 bounded controls, 610‚Äì615
atomic grid unit, 415 bounding boxes, 3D objects, 504
attention-getting mechanisms, 422‚Äì423 brainstorming, Requirements Definition, 111‚Äì112
attitudes, interview subjects, 83 brand requirements, 117

---

## Chunk 4383

attribute-based retrieval, 348‚Äì351 branding, idioms and, 310
databases, 353‚Äì354 breadcrumbs, 575
audible feedback, 361‚Äì363 breakpoints, 585
audible interfaces, 567‚Äì568 browse controls, mobile applications
audible-only output, 402 cards, 526‚Äì528
auditing, data entry, 330‚Äì332 carousels, 523‚Äì524
auto-assigning call buttons, 123 grids, 520‚Äì523
auto-complete, searches, 544, 578 lists, 518‚Äì519

---

## Chunk 4384

automatic save, 337‚Äì338 swimlanes, 524‚Äì525
automotive interfaces, 566‚Äì567 budget, research and, 40
automotive interface posture, 232‚Äì233 bulletin dialogs, 635‚Äì636
auto-scrolling, drag and drop, 488‚Äì489 business goals, 79‚Äì80
auto-suggest in searches, 545, 578 business leads, teams and, 157
averages versus ranges, 68 business requirements, 117
buttons, 590‚Äì591
b call buttons, auto-assigning, 123

---

## Chunk 4385

icon buttons, 456‚Äì457
Backspace key as Undo function, 371
mouse, 468‚Äì469
Becker, Marion Rombauer, The Joy of Cooking, 394
toolbars, 456‚Äì457
668 Index

---

## Chunk 4386

--- Page 699 ---
C computer literacy, 16
Computers as Theatre (Laurel), 103
call buttons, auto-assigning, 123
conceptual models, 17‚Äì18
card sorting, 58
configuration
cards, mobile applications, 526‚Äì528
customizability and, 396‚Äì397
carousels
harmonious interaction and, 262‚Äì264
handhelds, 511
confirmation messages, modal excise and,
mobile applications, 523‚Äì524, 535
281‚Äì282
Carroll, John, 103

---

## Chunk 4387

considerate products, 180‚Äì190
Making Use: Scenario-Based Design of Human-
consistency, 428
Computer Interactions, 104‚Äì105
across applications, 430‚Äì431
cascading dialogs, 640‚Äì641
design language, 431‚Äì432
cascading menus, 453‚Äì454
Constantine, Larry, 69‚Äì70, 239
categorized suggestions in searches, 545, 580
Software for Use, 229
category specific Undo, 371‚Äì372
constrained drag, 497

---

## Chunk 4388

causality, visual information design, 426
constrained natural-language output, 354‚Äì355
change over time, visual interface design, 411
contacts, selecting, 123
charged cursor tools, 496
content, 4
check boxes, 594‚Äì595
content area hints, 389‚Äì390
check mark items in menus, 451
content navigation, 577
choices, harmonious interactions and, 255
content panes, 438
cluttered interfaces, 423
context

---

## Chunk 4389

cognitive work, 271
context scenario, 26‚Äì27, 106
collaboration
Requirements Definition, 113‚Äì115
agile developers, 158‚Äì161
sample, 114‚Äì115
creativity and, 162
embedded systems design, 558
industrial design framework, 135
excise and, 285
color, visual interface design
harmonious interactions and, 258‚Äì259
HSV, 408‚Äì409
visual interface design, 406
hue, 408
Contextual Design (Beyer & Holtzblatt), 98

---

## Chunk 4390

saturation, 408
contextual help, assistive interfaces
value, 407‚Äì408
galleries, 388‚Äì389
combo boxes, lists, 608‚Äì609
guided tours, 385‚Äì386
combo icon buttons, 599‚Äì601
hints, 389‚Äì390
command modalities, 379‚Äì380
overlays, 386‚Äì388
immediate commands, 380‚Äì381
templates, 388‚Äì389
information in the world versus in the head,
ToolTip overlays, 392‚Äì393
381‚Äì382
ToolTips, 391‚Äì392
invisible commands, 380‚Äì382

---

## Chunk 4391

wizards, 390‚Äì391
memorization vectors, 382‚Äì384
contextual inquiry, 44‚Äì45
pedagogic commands, 380‚Äì382
contextual requirements, 116
working sets, 384
contextual toolbars, 461
command ordering, selection and, 476‚Äì477
contiguous selecting, 477‚Äì478, 482
commands, response, 422
controls, 494, 589‚Äì590
commensurate effort, inflection and, 241
charged cursor tools, 496

---

## Chunk 4392

communication, visual interface design, 412‚Äì413
display controls
comparisons, visual, 426
drawers, 624‚Äì625
competitive audits, 38
levers, 624‚Äì625
composite user archetypes, 67
scrollbars, 621‚Äì623
Index 669

---

## Chunk 4393

--- Page 700 ---
splitters, 623‚Äì624 goals, 79
text controls, 620‚Äì621 interviews, 42
entry controls personas, 69, 89
bounded, 610‚Äì615 requirements, 117
dials, 613‚Äì614 customizability
sliders, 613‚Äì614 configuration, 396‚Äì397
spinners, 611‚Äì613 personalization, 395‚Äì396
thumbwheels, 614 toolbars, 461
unbounded, 615‚Äì616
validated, 616‚Äì620 D
hamburger icon, 574
daemonic-posture applications, 217‚Äì218

---

## Chunk 4394

imperative controls
data buffers, deleted, 372‚Äì373
buttons, 590‚Äì591
data elements, interaction framework, 122‚Äì125
hyperlinks, 592‚Äì593
data entry
icon buttons, 591‚Äì592
auditing, 330‚Äì332
lists, 601‚Äì603
data immunity, 326‚Äì328
combo boxes, 608‚Äì609
data integrity, 326‚Äì328
dragging and dropping from, 604‚Äì605
editing, 330‚Äì332
earmarking, 603‚Äì604
fudgeability, 329‚Äì330
entering data, 607‚Äì608

---

## Chunk 4395

lists, 607‚Äì608
ordering, 605‚Äì606
missing data, 328‚Äì329
scrolling, 606‚Äì607
data immunity versus data integrity, 326‚Äì328
tree controls, 609‚Äì610
data integrity, versus data immunity, 326‚Äì328
modal tools, 494‚Äì496
data requirements, 116
navigation, hiding/showing, 573
data retrieval
palettes, 494‚Äì496
natural-language processing, 354‚Äì355
proliferation, 458‚Äì459
relational databases, 351‚Äì354

---

## Chunk 4396

selection controls, 593‚Äì594
versus storage, 345‚Äì346
check boxes, 594‚Äì595
data storage, 332‚Äì333
combo icon buttons, 599‚Äì601
archiving, 336‚Äì337
radio buttons, 596‚Äì598
close without saving, 334
state-switching buttons, 595‚Äì596
versus data retrieval, 345‚Äì346
switch controls, 598
Save As command, 334‚Äì336
toggle buttons, 595
saving changes, 333‚Äì334
text editor, 620
unified file model

---

## Chunk 4397

Cooper, Alan, The Inmates are Running the Asylum,
automatic save, 337‚Äì338
xii, 93
Create a Copy function, 338‚Äì339
copying, 338‚Äì339, 481‚Äì482
discarding all changes, 341
core teams, 146
File menu, 342‚Äì343
size, 152
file type specification, 340‚Äì341
Crampton Smith, Gillian, 24
naming, 339
Create a Copy function, 338‚Äì339
positioning documents, 340
creativity, teams, 161‚Äì162
renaming, 339

---

## Chunk 4398

cursor, 475‚Äì476
reversing changes, 341
charged cursor tools, 496
status, 343‚Äì344
pointing devices, 466
versions, 341‚Äì342
customers. See also users
DeMarco, Tom, Peopleware: Productive Projects
customer journeys, 136‚Äì137
and Teams, 249
670 Index

---

## Chunk 4399

--- Page 701 ---
demographic variables, 47‚Äì48 craftsmen, 163
depthcueing, 3D objects, 503 leaders, 163
desensitizing mouse, drag and drop and, 493 as researchers, 22‚Äì23
design. See also Goal-Directed Design skill levels, 162‚Äì163
absence, 3 designer's model, 18‚Äì21
ACD (Activity-Centered Design), 14‚Äì15 Designing for the Digital Age (Goodwin), 53, 155

---

## Chunk 4400

behavioral response, 74‚Äì75 Designing Interfaces (Tidwell), 175
definition, 3‚Äì4 Designing Visual Interfaces (Mullet & Sano), 243
economy of form, 172 desirability of product, 9‚Äì10
interactive, 11 desktop
participatory, 94 drawers, 463‚Äì464
personas menus
as design tool, 64 accelerators, 452‚Äì453
pitfalls avoided, 64‚Äì66 access keys, 453
process, 9‚Äì10 cascading, 453‚Äì454

---

## Chunk 4401

product behavior, 10‚Äì13 check mark items, 451
as product definition, 21‚Äì22 disabled items, 450‚Äì451
reflective response, 75 drop-down, 448
research, quantitative data, 34‚Äì35 grayed out items, 450‚Äì451
scenario-based, 104‚Äì105 icons, 451‚Äì452
self-referential, 65 menu bar, 448
teams and, 156 mnemonics, 453
visceral response, 73‚Äì74 as pedagogic vector, 449‚Äì450
work flow models, 98 pop-up menus, 448

---

## Chunk 4402

Design Framework, 119‚Äì120 rollover effect, 448
industrial design framework, 120 toolbars and, 455
interaction framework, 120 palettes, 455, 462‚Äì463
defining, 121‚Äì130 sidebars, 455, 463‚Äì464
service framework, 120 task panes, 463‚Äì464
visual design framework, 120 toolbars, 455
design language, 431‚Äì432 buttons, 456‚Äì457
Design Refinement phase (Goal-Directed Design), contextual, 461

---

## Chunk 4403

25, 28 control proliferation, 458‚Äì459
behavior, 137‚Äì138 customizable, 461
form, 137‚Äì138 disabling controls, 458
design requirements docking, 456
versus features, 107 menus and, 455
sources, 108‚Äì109 modeless dialogs comparison, 455‚Äì456
versus specifications, 107‚Äì108 movable, 459‚Äì460
strategy, 108 pop-up, 461
Design Support phase (Goal-Directed Design), 25 ribbon control, 461‚Äì462

---

## Chunk 4404

design values, 167‚Äì168 ToolTips, 457‚Äì458
elegant interaction design, 171‚Äì172 windows, 436‚Äì438
ethical interaction design, 168‚Äì171 best use, 444‚Äì448
pragmatic interaction design, 171 full-screen applications, 441
purposeful interaction design, 171 maximized, 442
designers MDI (multiple document interface),
apprentices, 162 443‚Äì444
Index 671

---

## Chunk 4405

--- Page 702 ---
minimized, 442 discarding changes, 341
multipaned applications, 441‚Äì442 discontiguous multiple Undo, 370‚Äì371
overlapping, 439‚Äì440 discrete selecting, 477‚Äì478
pluralized, 443 display, visually impaired users, 401‚Äì402
restored, 443 display controls
room analogy, 444‚Äì448 drawers, 624‚Äì625
SDI (single document interface), 443‚Äì444 levers, 624‚Äì625

---

## Chunk 4406

session managers, 440‚Äì441 scrollbars, 621‚Äì623
tiles, 440 splitters, 623‚Äì624
virtual desktop spaces, 440‚Äì441 text controls, 620‚Äì621
desktop postures, 207‚Äì208 docking toolbars, 456
daemonic posture, 217‚Äì218 documentation
sovereign posture, 208‚Äì213 industry reports, 38
transient posture, 213‚Äì217 internal document review, 38
detailed design phase documents, sovereign-posture applications,

---

## Chunk 4407

Generators, 150 212‚Äì213
Synthesizers, 150 domain expertise, 48
device-embedded interfaces, 555‚Äì560 domain knowledge, idioms and, 312
dialogs Don‚Äôt Make Me Think, Revisited (Krug), 571
appropriate use, 625‚Äì626 double drawer design sample, 177
bulletin dialogs, 635‚Äì636 double drawers, 537‚Äì538
cascading dialogs, 640‚Äì641 drag and drop, 483‚Äì484
error dialogs, 641‚Äì648 auto-scrolling and, 488‚Äì489

---

## Chunk 4408

expanding dialogs, 639‚Äì640 bounce, 489‚Äì492
function dialogs, 632, 636‚Äì641 constrained drag, 497
interactions, basic, 626‚Äì627 desensitizing mouse, 493
modal, 627‚Äì630 drag pliancy, 486
modeless, 628‚Äì631 drag threshold, 490
notification dialogs, 634‚Äì635 3D objects, 506
process dialogs, 632‚Äì634 drop candidates, 485
property dialogs, 631, 636‚Äì641 drop pliancy, 486‚Äì487

---

## Chunk 4409

tabbed dialogs, 636‚Äì639 fine scrolling, 493‚Äì494
dials, 613‚Äì614 insertion target, 487
digital etiquette. See etiquette in lists, 604‚Äì605
digital retrieval system, 347‚Äì348 visual feedback, 484‚Äì486
associative retrieval, 348 completion, 487
attribute-based retrieval, 348‚Äì351 drag pliancy (drag and drop), 486
identity retrieval, 348 drag threshold, 490
positional retrieval, 348 3D objects, 506

---

## Chunk 4410

digression, teams, 162 drag to control, 551
direct manipulation, 255, 315‚Äì318 drag to move, 551
pliancy, 319 drag to scroll, 551
cursor hinting, 321‚Äì322 drawers, 463‚Äì464, 535‚Äì536, 624‚Äì625
dynamic hinting, 320‚Äì321 behaviors to avoid, 539‚Äì540
pliant response hinting, 321 controversy, 541
static hinting, 320 double drawers, 537‚Äì538
touchscreens, 543 item-level drawers, 538‚Äì539

---

## Chunk 4411

when to use, 318‚Äì319 secondary-action drawers, 536‚Äì537
disabled menu items, 450‚Äì451 drop candidates (drag and drop), 485
672 Index

---

## Chunk 4412

--- Page 703 ---
drop pliancy (drag and drop), 486‚Äì487 reversion, 373‚Äì374
drop-down menu, 448 single, 367‚Äì368
undoable actions, 375‚Äì376
E versioning, 373‚Äì374
what-if control, 376‚Äì377
earmarking in lists, 603‚Äì604
ethical interaction design, 168‚Äì169
economic harm, ethical interaction design and,
harm, minimizing, 169‚Äì170
169
improvement of human situations, 170‚Äì171
economy of form, 172

---

## Chunk 4413

ethnographic interviews, 44
edge cases, personas and, 65‚Äì66
candidates
edge-case scenarios, 130
behavioral variables, 47‚Äì48
editing, data entry, 330‚Äì332
business roles, 47
effortlessness ideal, 269
consumer domain roles, 47
elastic users, personas and, 65
demographic variables, 47‚Äì48
elegance, 253
domain expertise, 48
elegant interaction design, 171‚Äì172
environmental considerations, 48

---

## Chunk 4414

embedded systems design, 555‚Äì560
persona hypothesis, 46
Emotional Design (Norman), 73‚Äì76
technical expertise, 48
empathy, personas and, 66
methods, 51‚Äì55
end goals, 77
phases, 50‚Äì51
engineering, teams, 156‚Äì157
planning, 49
entry controls
teams, 50
bounded, 610‚Äì615
timing, 50
dials, 613‚Äì614
etiquette
sliders, 613‚Äì614
considerate products, 180‚Äì190
spinners, 611‚Äì613
smart products, 190‚Äì198

---

## Chunk 4415

thumbwheels, 614
social products, 199‚Äì204
unbounded, 615‚Äì616
Evenson, Shelley, 103
environment, creativity and, 161‚Äì162
excise, 272
environmental harm, ethical interaction design
context, 285
and, 169
elimination, 285
epics, 104
hierarchies and, 293‚Äì294
ergonomics of the mouse, 466‚Äì468
mapping controls, 290‚Äì293
errors, 357
mechanical age models and, 294‚Äì297
error dialogs, 641‚Äì648

---

## Chunk 4416

number of places, 286
error messages, 644‚Äì648
signposts, 286‚Äì290
modal excise and, 281‚Äì282
modal
Undo, 363‚Äì365
confirmation messages, 281‚Äì282
blind Undo, 367
errors, 281‚Äì282
category specific, 371‚Äì372
notifiers, 281‚Äì282
data buffers, deleted, 372‚Äì373
users asking permission, 283
discontiguous multiple Undo, 370‚Äì371
navigational, 273‚Äì274
explanatory Undo, 367
of information, 277‚Äì279

---

## Chunk 4417

freezing, 374‚Äì375
menus and, 276‚Äì277
group multiple Undo, 369‚Äì370
pages, 274
incremental actions, 366
panes and, 274‚Äì276
multiple, 367‚Äì368
screens, 274
procedural actions, 366‚Äì367
tools and, 276‚Äì277
Redo, 369
Index 673

---

## Chunk 4418

--- Page 704 ---
trauma, 274 fine scrolling, drag and drop, 493‚Äì494
views, 274 flashing elements, visually impaired users and,
skeuomorphic, 279‚Äì280 402
stylistic, 283‚Äì284 flickering elements, visually impaired users and,
tasks, 272 402
traps, 297 flow, 249‚Äì250
expanding dialogs, 639‚Äì640 harmonious interactions, user mental models,
251‚Äì252
expectations of personas, 112
orchestration, 250‚Äì251

---

## Chunk 4419

experience attributes
focus groups, 57
visual design framework, 131‚Äì132
footers, scrolling and, 583
visual interface design, 412‚Äì413
form, 4
experience goals, 76‚Äì77
Design Refinement phase, 137‚Äì138
experience prototypes, 137
form and behavior specification, 28
experience requirements, 117
form factors, 27
experience-level design, 243‚Äì247
industrial design framework, 135
expert review, 38

---

## Chunk 4420

interaction framework, 121‚Äì122
expert users
form language studies, 136
designing for, 245‚Äì246
formative evaluations, 141‚Äì142
SMEs, 41
formative usability testing, 142
explanatory Undo, 367
Framework Definition phase (Goal-Directed
explicit searches, 544
Design), 25, 27‚Äì28
exploration, Requirements Definition,
frameworks, 23
111‚Äì112
interaction framework, 27
explorational kiosks, 561‚Äì562

---

## Chunk 4421

visual, 28
extended teams, 146
freezing, 374‚Äì375
Synthesis-Generation model, 155‚Äì158
fudgeability, data entry, 329‚Äì330
full-screen applications, 441
F
full-text search (help), 393‚Äì394
faceted search, 579 function dialogs, 632, 636‚Äì641
failure of digital products, 6‚Äì10 function requirements, 116
fat navigation, 575 functional elements, interaction framework,
features 122‚Äì125

---

## Chunk 4422

versus goals, 29‚Äì30 functional groups, interaction framework,
versus requirements, 107 125‚Äì126
feedback
error messages, 646 g
modeless, 256‚Äì257
galleries, 388‚Äì389
rich modeless feedback, 328
Gamma, Erich, 27
sovereign-posture applications, 210‚Äì211
Generators of ideas, 147‚Äì150
File menu, 342‚Äì343
gesture sensors, 475
file type specification, 340‚Äì341
gestures
files
drag to control, 551
naming, 339

---

## Chunk 4423

drag to move, 551
renaming, 339
drag to scroll, 551
unified file model, 337‚Äì344
pinch in/out, 552
versions, 341‚Äì342
rotate, 552‚Äì553
filtering, mobile applications, 546‚Äì548
swipe, multifinger, 553
674 Index

---

## Chunk 4424

--- Page 705 ---
swipe left/right, 552 Goodwin, Kim, 81, 109, 168
swipe up/down, 551 Designing for the Digital Age, 53, 155
tap, 550 golden section of a grid, 416
tap-and-hold, 550‚Äì551 graphic design, Synthesis-Generation model, 154
global metaphors, 302‚Äì304 graphical interfaces, 308‚Äì309
globalization, 398‚Äì399 graphical objects
Goal-Directed Design, 13, 21 2D

---

## Chunk 4425

design as product definition, 21‚Äì22 connecting, 500‚Äì501
Design Framework phase, 25 repositioning, 497‚Äì498
Design Refinement phase, 25, 28 reshaping, 498‚Äì500
Design Support phase, 25, 28 resizing, 498‚Äì500
designers as researches, 22‚Äì23 3D, 501‚Äì502
Framework Definition phase, 27‚Äì28 baseline grids, 503
frameworks, 23 bounding boxes, 504
Modeling phase, 25, 26 depthcueing, 503

---

## Chunk 4426

models, 23 guidelines, 503‚Äì504
practice, 145 input, 504‚Äì506
quantitative research/qualitative research parallax, 502
relationship, 36 poles, 503
requirements, 23 shadows, 503
Requirements Definition phase, 25, 26‚Äì27 viewpoints, 502‚Äì503
research, 36‚Äì37 visual hints, 503‚Äì504
competitive audits, 38 wireframes, 504
customer interviews, 42 grayed out menu items, 450‚Äì451
kickoff meeting, 37‚Äì38 grids

---

## Chunk 4427

literature review, 38 alignment, 414‚Äì417
prototype, 38 mobile applications, 520‚Äì523
SME (subject matter expert) interviews, 41 group multiple Undo, 369‚Äì370
stakeholder interviews, 39‚Äì40 group selecting, 480
user interviews, 42‚Äì43 Grudin, Jonathan, 66
user observation, 43‚Äì44 guided tours, 385‚Äì386
Research phase, 24‚Äì25 mobile applications, 549

---

## Chunk 4428

goal-directed tasks, 272 guidelines, 3D objects, 503‚Äì504
goals. See also user goals
activities and, 14‚Äì15 h
business, 79‚Äì80
hamburger icon, 574
in context, 15‚Äì16
handheld devices, 509
customer goals, 79
applications, 509‚Äì510
versus features, 29‚Äì30
carousels, 511
organizational, 79‚Äì80
layout, 511‚Äì512
personas, defining, 85‚Äì86
orientation, 511‚Äì512
qualitative data and, 72‚Äì73
stacks, 510

---

## Chunk 4429

scenarios, 105
single-purpose, 560‚Äì561
tasks and, 14‚Äì15
handles (resizing), 498‚Äì499
technical, 80
vertex handle, 499
usage patterns and, 72
hardware-like control layout, tablet applications, 516
Goodman, Elizabeth, Observing the User
hardware/software design integration, 557
Experience, 56, 141
Index 675

---

## Chunk 4430

--- Page 706 ---
harmonious interactions, 251 imperative controls
application status, 259‚Äì261 buttons, 590‚Äì591
blank slates and, 261‚Äì262 hyperlinks, 592‚Äì593
choices, 255 icon buttons, 591‚Äì592
configuration, 262‚Äì264 implementation models, 17
contextualizing information, 258‚Äì259 persona expectations and, 112
direct manipulation, 255 implementation-centric interfaces, 300‚Äì301

---

## Chunk 4431

feedback, modeless, 256‚Äì257 improving intermediates, 239
object status, 259‚Äì261 in-app user guides, 394‚Äì395
optimization, 265‚Äì266 index panes, 438
persistent objects, 264‚Äì265 table applications, 513‚Äì514
reporting and, 261 indexed searches, 393‚Äì394
tools, 255‚Äì256 industrial design framework, 120, 134
user direction, 254‚Äì255 collaboration with designers, 135

---

## Chunk 4432

user mental models, 251‚Äì252 form factors, 135
headers, scrolling and, 583 form language studies, 136
help. See also learnability and help input methods, 135
help screens, mobile applications, 549‚Äì550 prototypes, 135
hierarchies Synthesis-Generation model, 155
excise and, 293‚Äì294 infinite scrolling, 584
interaction framework, 125‚Äì126 inflection, 240‚Äì243

---

## Chunk 4433

hints, 389‚Äì390, 618 information, navigational excise, 277‚Äì279
Holtzblatt, Karen, 70, 111 Information Architecture for the World Wide Web
Contextual Design, 44, 98 (Morville & Rosenfeld), 571
Horton, William, The Icon Book, 419 information hierarchy, visual interface design,
hotspot, 476 410‚Äì411
HSV (hue, saturation, value), 408‚Äì409 input
hue (color), 408 embedded systems design, 559‚Äì560

---

## Chunk 4434

hyperlinks, 592‚Äì593 hints, 389‚Äì390
kiosks, 563‚Äì564
I methods, 27
industrial design framework, 135
icon buttons, 591‚Äì592
interaction framework, 122
icons
sovereign-posture applications, 211‚Äì212
buttons, 456‚Äì457
text edit controls, 620
hamburger, 574
insertion, 481‚Äì482
menus, 451‚Äì452
insertion target, drag and drop, 487
ideas
integration mobile applications, 553‚Äì555
generation, 147

---

## Chunk 4435

interaction design, 11
synthesis, 147
behavioral principles, 173‚Äì174
identity retrieval, 348
conceptual principles, 173
idiomatic interfaces, 300
interface-level principles, 173‚Äì174
branding and, 310
patterns, 27, 174
graphical interfaces, 308‚Äì309
architectural, 175
idiom building, 310‚Äì312
behavioral, 176
learning idioms, 309
double drawer sample, 177

---

## Chunk 4436

idiosyncratically modal behavior, 396, 397‚Äì398
organizer-workspace sample, 177
immediate commands, 380‚Äì381
postural, 176
recording, 175‚Äì176
676 Index

---

## Chunk 4437

--- Page 707 ---
structural, 176 entry, 610‚Äì620
using, 175‚Äì176 imperative, 590‚Äì593
principles, 27 lists, 601‚Äì610
Synthesis-Generation model, 153 selection, 593‚Äì601
interaction framework, 27, 120 dialogs
data elements, 122‚Äì125 appropriate use, 625‚Äì626
definition, 27 bulletin dialogs, 635‚Äì636
form factor, 121‚Äì122 cascading dialogs, 640‚Äì641
functional elements, 122‚Äì125 error dialogs, 641‚Äì648

---

## Chunk 4438

functional groups, 125‚Äì126 expanding dialogs, 639‚Äì640
hierarchy, 125‚Äì126 function dialogs, 632
iteration, 128‚Äì129 interactions, basic, 626‚Äì627
key path scenarios, 128 modal, 627‚Äì630
posture, 122 modeless, 628‚Äì631
primary input method, 122 notification dialogs, 634‚Äì635
process variations, 128‚Äì129 process dialogs, 632‚Äì634
sketching, 126‚Äì127 property dialogs, 631

---

## Chunk 4439

storyboarding, 128 tabbed dialogs, 636‚Äì639
validation scenarios, 130 navigation
inter-app integration, 553‚Äì555 content navigation, 577
interfaces. See also visual interface design primary navigation, 572‚Äì574
cluttered, 423 searches, 577‚Äì580
command modalities, 380 secondary navigation, 574‚Äì577
device-embedded, 555‚Äì560 page-based interactions, navigation, 571‚Äì580

---

## Chunk 4440

graphical, 308‚Äì309 responsive design and, 585
idiomatic, 300 scrolling, 580‚Äì584
branding and, 310 interpersonal harm, ethical interaction design
graphical interfaces, 308‚Äì309 and, 169
idiom building, 310‚Äì312 interviews
learning idioms, 309 contextual inquiry, 44‚Äì45
implementation-centric, 300‚Äì301 improvements, 45
magic, 115 customers, 42
metaphoric, 300 ethnographic, 44

---

## Chunk 4441

global metaphors, 302‚Äì304 candidates, 46‚Äì48
inference and, 302 conducting, 49‚Äì56
instinct and, 302 SME (subject matter expert), 41
intuition and, 301‚Äì302 stakeholders, 39‚Äì40
limitations, 305 subjects
intermediates, 238‚Äì240 behavior patterns, 84
designing for, 246‚Äì247 behavior variables, 83
improving, 239 grouping by role, 82‚Äì83
perpetual, 239 mapping to behavioral variables, 83‚Äì84

---

## Chunk 4442

internal documents, 38 users, 42‚Äì43
Internet applications, 570, 589‚Äì590 invisible commands, 380‚Äì382
alerts, 648‚Äì650 item-level drawers, 538‚Äì539
breakpoints, 585 iteration, interaction frameworks, 128‚Äì129
confirmations, 651‚Äì653 Korman, Jonathan, 66, 168
controls Kramer, Kem-Laurin, User Experience in the Age of
display, 620625 Sustainability, 170
Index 677

---

## Chunk 4443

--- Page 708 ---
Krug, Steve, Don‚Äôt Make Me Think, Revisited, 571 earmarking, 603‚Äì604
Kuniavsky, Mike, Observing the User Experience, entering data, 607‚Äì608
56, 141 mobile applications, 518‚Äì519
ordering, 605‚Äì606
J scrolling, 606‚Äì607
tree controls, 609‚Äì610
Jobs, Steve, 435‚Äì436
Lister, Timothy, Peopleware: Productive Projects
journeys, 136‚Äì137
and Teams, 249
literature review, 38
k

---

## Chunk 4444

localization, 398‚Äì399
key path scenarios, 28, 106 logical mapping, 291
interaction frameworks, 128 logical path, 418
keyboard access, 401
kickoff meeting, research and, 37‚Äì38 m
kiosks, 561
Macintosh, 435‚Äì436
explorational, 561‚Äì562
magic interface, 115
input, 563‚Äì564
Making Use: Scenario-Based Design of Human-
interaction in public environment, 562‚Äì563
Computer Interactions (Carroll), 104‚Äì105

---

## Chunk 4445

kiosk posture, 230‚Äì231
manual affordances, 312‚Äì314
transactional, 561‚Äì562
mapping
excise elimination and, 290‚Äì293
l
logical, 291
Laurel, Brenda, 304 physical, 291
Computers as Theatre, 103 market research, user research and,
layout, handhelds, 511‚Äì512 35‚Äì36
learnability and help, 379‚Äì380 market segments
assistive interfaces, 385‚Äì393 versus personas, 71‚Äì72

---

## Chunk 4446

command modalities, 379‚Äì380 personas and, 95
immediate commands, 380‚Äì381 marketing, teams and, 157
information in the world versus in the master-apprentice learning model, 44
head, 381‚Äì382 maximized windows, 442
invisible commands, 380‚Äì382 MDI (multiple document interface), 443‚Äì444
memorization vectors, 382‚Äì384 mechanical age models, 294‚Äì297

---

## Chunk 4447

pedagogic commands, 380‚Äì382 memorization vectors, 382‚Äì384
contextual help, 385‚Äì393 memory work, 271
assistive interfaces, 385‚Äì393 mental models, 17‚Äì18
online help harmonious interactions and, 251‚Äì252
full-text search, 393‚Äì394 persona expectations and, 112
in-app user guides, 394‚Äì395 Undo and, 364‚Äì366
indexing, 393‚Äì394 menu bar, 448
overviews, 394 mobile applications, 535
working sets, 384 menus

---

## Chunk 4448

level of experience, designing for, 243‚Äì247 accelerators, 452‚Äì453
levers, 624‚Äì625 access keys, 453
life goals, 77‚Äì78 cascading, 453‚Äì454
Lisa computer, 435‚Äì436 check mark items, 451
list controls, 601‚Äì603 disabled items, 450‚Äì451
combo boxes, 608‚Äì609 drop-down, 448
dragging and dropping from, 604‚Äì605 grayed out items, 450‚Äì451
678 Index

---

## Chunk 4449

--- Page 709 ---
icons, 451‚Äì452 help screens, 549‚Äì550
menu bar, 448 inter-app integration, 553‚Äì555
mnemonics, 453 menu bars, 535
navigational excise, 276‚Äì277 mini-tablets, 509, 516
as pedagogic vector, 449‚Äì450 adjacent panes, 517
pop-up menus, 448 lists, 517‚Äì518
rollover effect, 448 pop-up dialogs, 518
toolbars, 437 toolbars, 517
toolbars and, 455‚Äì456 navigation

---

## Chunk 4450

message confirmation, 281‚Äì282 action bars, 532
metaphoric interfaces, 300 More... controls, 530
global metaphors, 302‚Äì304 Nav bars, 532
inference and, 302 tab bars, 529‚Äì530
instinct and, 302 tab carousels, 530‚Äì532
intuition and, 301‚Äì302 overlays, 550
limitations, 305 palettes, 533
Method acting, 66 vertical, 533
minimized windows, 442 searching
mini-tablets, 509 auto-complete, 544

---

## Chunk 4451

applications, 516 auto-suggest, 545
adjacent panes, 517 categorized suggestions, 545
lists, 517‚Äì518 explicit, 544
pop-up dialogs, 518 query building, 544‚Äì546
toolbars, 517 recent/frequent, 545
misconceptions about personas, 93‚Äì94 tap-ahead, 544
missing data, 328‚Äì329 voice search, 544
mnemonics, menus, 453 sorting, 546‚Äì548
mobile applications implicit, 544
browse controls tablets, 509, 512

---

## Chunk 4452

cards, 526‚Äì528 hardware-like control layout, 516
carousels, 523‚Äì524 index panes, 513‚Äì514
grids, 520‚Äì523 mobile versus desktop-like layout, 515‚Äì516
lists, 518‚Äì519 orientation-based layout, 515
swimlanes, 524‚Äì525 pop-up control panels, 514
drawers, 535‚Äì536 stacks, 513‚Äì514
behaviors to avoid, 539‚Äì540 tool bars for mobile, 533
controversy, 541 carousels, 533‚Äì535
double drawers, 537‚Äì538 vertical, 533

---

## Chunk 4453

item-level drawers, 538‚Äì539 ToolTip overlays, 550
secondary-action drawers, 536‚Äì537 touchscreens
filtering, 546‚Äì548 direct manipulation controls, 543
form factors, 509 tap-to-reveal controls, 541‚Äì542
gestures, multi-touch, 550‚Äì553 transient posture, 508‚Äì509
guided tours, 549 welcome screens, 549‚Äì550
handhelds, 509‚Äì510 mobile devices
carousels, 511 smartphone and handheld posture, 225

---

## Chunk 4454

layout, 511‚Äì512 satellite posture, 225‚Äì227
orientation, 511‚Äì512 standalone posture, 227‚Äì228
stacks, 510
Index 679

---

## Chunk 4455

--- Page 710 ---
mobile versus desktop-like layout, tablet pliancy, 470
applications, 515‚Äì516 point-and-click combinations, 471
modal dialogs, 627‚Äì630 pointing, 470
modal excise scroll wheels/balls, 469
confirmation messages, 281‚Äì282 movable toolbars, 459‚Äì460
errors, 281‚Äì282 Mullet, Kevin, Designing Visual Interfaces, 243,
notifiers, 281‚Äì282 406, 411

---

## Chunk 4456

users asking permission, 283 multipaned applications, 441‚Äì442
modal tools, 494‚Äì496 multiple Undo, 367‚Äì368
modeless dialogs, 628‚Äì631 discontiguous multiple Undo, 370‚Äì371
sidebars and, 631 group multiple Undo, 369‚Äì370
toolbar comparison, 455‚Äì456 limitations, 368‚Äì369
Undo and, 630‚Äì631 mutual exclusion in selecting, 478‚Äì479
modeless feedback, 256‚Äì257
Modeling phase (Goal-Directed Design), 25, 26 n

---

## Chunk 4457

models, 23. See also personas
naming files, 339
artifact models, 98‚Äì99
narratives
benefits, 61‚Äì62
personas and, 90‚Äì91
conceptual models, 17‚Äì18
scenarios, 102‚Äì103
designer's model, 18‚Äì21
natural-language processing, 354‚Äì355
implementation models, 17
navigation
mental models, 17‚Äì18
breadcrumbs, 575
physical models, 99
controls
represented models, 18‚Äì21, 344
hamburger icon, 574
sequence models, 98

---

## Chunk 4458

hiding/showing, 573
system models, 17
embedded systems design, 559‚Äì560
modes, embedded systems design, 558‚Äì559
fat navigation, 575
Moed, Andrea, Observing the User Experience, 56,
Internet applications
141
content navigation, 577
Moggridge, Bill, vi, 655
primary navigation, 572‚Äì574
Morville, Peter, 219
searches, 577‚Äì580
Information Architecture for the World Wide
secondary navigation, 574‚Äì577

---

## Chunk 4459

Web, 571
mobile applications
motion, 266‚Äì268
action bars, 532
visual interface design, 411
More... controls, 530
motivations of interview subjects, 83
Nav bars, 532
motivations of personas, 68‚Äì69
tab bars, 529‚Äì530
mouse, 466. See also drag and drop
tab carousels, 530‚Äì532
bounce, 490‚Äì491
navigational excise, 273‚Äì274
buttons, 468‚Äì469
of information, 277‚Äì279
clicking, 470‚Äì471
menus and, 276‚Äì277

---

## Chunk 4460

chord-clicking, 473
pages, 274
double-clicking, 472‚Äì473
panes and, 274‚Äì276
double-clicking and dragging, 473
screens, 274
and dragging, 472
tools and, 276‚Äì277
desensitizing, 493
views, 274
ergonomics, 466‚Äì468
navigational trauma, 274
mouse-down events, 474‚Äì475
necessary-use scenarios, 130
mouse-up events, 474‚Äì475
680 Index

---

## Chunk 4461

--- Page 711 ---
negative personas, 90 palettes, 455, 462‚Äì463, 494‚Äì496
Nelson, Theodor Holm, 308 mobile applications, 533
Nielsen, Jakob, 428 vertical, 533
Usability Engineering, 141 panes
noise, visual noise, 423 multipaned applications, 441
nonusers, personas and, 69 navigational excise, 274‚Äì276
Norman, Donald, 14, 17, 18, 97, 291, 294, 318 splitters, 441

---

## Chunk 4462

The Design of Everyday Things, 312‚Äì313, 381 stacked, 442
Emotional Design, 73‚Äì76 tabs, 442
notification dialogs, 634‚Äì635 task panes, 463‚Äì464
notifiers, modal excise and, 281‚Äì282 Papanek, Victor, 3
Paper Prototyping (Snyder), 120, 142
o parallax in 3D objects, 502
participatory design, 94
object verb ordering, selection and, 476‚Äì477
partner requirements, 117
objects
passive validation, 617

---

## Chunk 4463

connecting, 500‚Äì501
pasting, 481‚Äì482
handles, 498‚Äì499
pattern language, 175
polylines, 499‚Äì500
pattern library, 175
repositioning, 497‚Äì498
patterns
reshaping, 498‚Äì500
of behavior, 32‚Äì33
resizing, 498‚Äì500
interview subjects, 84
rubberbanding, 501
personas and, 62, 67
Observing the User Experience (Goodman,
interaction design, 174
Kuniavsky & Moed), 56, 141
architectural, 175
online help

---

## Chunk 4464

behavioral, 176
full-text search, 393‚Äì394
double drawer sample, 177
in-app user guides, 394‚Äì395
organizer-workspace sample, 177
indexing, 393‚Äì394
postural, 176
overviews, 394
recording, 175‚Äì176
orchestration, 250
structural, 176
ordered variables for position, 409
using, 175‚Äì176
ordering lists, 605‚Äì606
usage, goals and, 72
organizational goals, 79‚Äì80
pedagogic commands, 380‚Äì382

---

## Chunk 4465

organizational personas, 96
pedagogic vector, menus, 449‚Äì450
organizer-workspace design sample, 177
Peopleware: Productive Projects and Teams
orientation
(DeMarco & Lister), 249
handhelds, 511‚Äì512
permission, modal excise and, 283
visual interface design, 409
perpetual intermediates, 239
orientation-based layout, tablet applications, 515
persistent objects, 264‚Äì265
out-of-bounds data, 618

---

## Chunk 4466

persona hypothesis, 46
overlapping windows, 439‚Äì440
persona-based scenarios, 105‚Äì106
overlays, 386‚Äì388
personalization, 395‚Äì396
mobile applications, 550
personas, 24, 26, 62
overview descriptions (help), 394
accessibility personas, 400
activities, 83
P
anti-persona, 69
page-based interactions (Internet apps), 571‚Äì580 aptitudes, 83
pages, navigational excise, 274 archetypes versus stereotypes, 68

---

## Chunk 4467

Index 681

---

## Chunk 4468

--- Page 712 ---
attitudes, 83 versus user profiles, 71
behavior, ranges of, 68 versus user roles, 69‚Äì71
behavioral variables, 83 validating, 95
completeness in, 87 photos, personas and, 90‚Äì91
composite user archetypes, 67 physical harm, ethical interaction design and, 169
customer personas, 69, 89 physical mapping, 291
design pitfalls and, 64‚Äì66 physical models, 99

---

## Chunk 4469

as design tool, 64 physical work, 271
edge cases and, 65‚Äì66 picking problem with 3D objects, 506
effectiveness, 66 pinch in/out, 552
elastic users and, 65 placement in file system, 340
expectations, 112 planning, product behavior, 10‚Äì13
goals, defining, 85‚Äì86 platforms, 205‚Äì206
implementation models and, 112 versus posture, 205
interview subjects pliancy, mouse, 470

---

## Chunk 4470

behavior patterns, 84 pluralized windows, 443
grouping by role, 82‚Äì83 pointing devices, 465
mapping to behavioral variables, 83‚Äì84 gesture sensors, 475
market segments, 95 hotspot, 476
versus market segments, 71‚Äì72 touchscreens and, 466
mental models and, 112 trackballs, 475
misconceptions, 93‚Äì94 trackpads, 475
motivations, 68‚Äì69, 83 poles, 3D objects, 503
narratives, 90‚Äì91 polylines, 499‚Äì500

---

## Chunk 4471

negative, 90 poor product behavior, 4‚Äì6
nonusers, 69 pop-up control panels, tablet applications, 514
organizational, 96 pop-up menus, 448
patterns of behavior, 62, 67 pop-up toolbars, 461
persona set, 68 position, visual interface design, 409
photos, 91‚Äì92 positional retrieval, 348
primary, 88‚Äì89 postural patterns (interaction design), 176
products postures, 206‚Äì207

---

## Chunk 4472

multiple, 67 automotive interface, 232‚Äì233
specific, 67 desktop, 207‚Äì208
provisional, 97 daemonic posture, 217‚Äì218
quantifying, 95‚Äì96 sovereign posture, 208‚Äì213
versus real people, 94 transient posture, 213‚Äì217
redundancy in, 87 kiosk, 230‚Äì231
represented models and, 112 mobile devices, smartphone and handheld
research and, 66‚Äì67 posture, 225‚Äì228
secondary, 89 versus platform, 205

---

## Chunk 4473

self-referential design and, 65 smart appliance, 234‚Äì235
served personas, 69, 89 tablet device, 228‚Äì230
skills, 83 ten-foot, 231‚Äì232
social relationships and, 86‚Äì87 Web, 218‚Äì219
strengths, 62‚Äì64 information websites, 219‚Äì220
supplemental, 89 transactional websites, 221‚Äì222
tasks and, 94‚Äì95 web application, 222‚Äì224
traceability, 95 pragmatic interaction design, 171
682 Index

---

## Chunk 4474

--- Page 713 ---
preliminary product vision, 39 customer interviews, 42
primary personas, 88‚Äì89 ethnographic interviews, 44
primary windows, 436‚Äì437 candidates, 46‚Äì48
content panes, 438 methods, 51‚Äì55
index panes, 438 phases, 50‚Äì51
menus, 437 planning, 49
sidebars, 438 teams, 50
tool palettes, 438 timing, 50
toolbars, 437 focus groups, 57
problem statements, 110‚Äì111 goals and, 72‚Äì73

---

## Chunk 4475

process dialogs, 632‚Äì634 kickoff meeting, 37‚Äì38
processes, variations, interaction framework, literature review, 38
128‚Äì129 prototype, 38
products versus quantitative, 31‚Äì32
behavior, 4‚Äì6 SME (subject matter expert) interviews, 41
designing, 10‚Äì13 stakeholder interviews, 39‚Äì40
planning, 10‚Äì13 task analysis, 58‚Äì59
considerate products, 180‚Äì190 usability testing, 57‚Äì58

---

## Chunk 4476

definition, design as, 21‚Äì22 user interviews, 42‚Äì43
demands from different level users, 239 user observation, 43‚Äì44
failure, 6‚Äì10 quantifying personas, 95‚Äì96
personas quantitative data
multiple, 67 design research direction, 34‚Äì35
specific products, 67 versus qualitative, 31‚Äì32
preliminary product vision, 39 quantitative variables for position, 409

---

## Chunk 4477

pretending human, 124 query building in searches, 544‚Äì546
smart products, 190‚Äì198 quick-dial buttons, 123
social products, 199‚Äì204
user goals and, 80‚Äì81 r
profiles, user profiles, versus personas, 71
radio buttons, 596‚Äì598
progress, qualitative research and, 33
ranges of behavior, personas and, 68
progressive disclosure, inflection and, 241‚Äì243
reading order, 409
property dialogs, 631, 636‚Äì641

---

## Chunk 4478

reading versus recognizing words, 410
prototypes
recent/frequent searches, 545
audits, 38
recognizing words versus reading, 410
experience prototypes, 137
Redo, 369
industrial design framework, 135
Refinement phase. See Design Refinement phase
provisional personas, 97
(Goal-Directed Design)
Pruitt, John, 66
reflective cognitive processing, 73
psychological harm, ethical interaction design

---

## Chunk 4479

designing for, 75
and, 169
Reimann, Robert, 81, 109, 168
purposeful interaction design, 171
relational databases, 351‚Äì354
renaming files, 339
Q
replacing, 481‚Äì482
qualitative data, 36‚Äì37 reports
benefits of methods, 32‚Äì34 harmonious interactions and, 261
card sorting, 58 industry reports, 38
competitive audits, 38 repositioning 2D objects, 497‚Äì498
Index 683

---

## Chunk 4480

--- Page 714 ---
represented models, 18‚Äì21, 344 response times, 422
persona expectations and, 112 accessibility and, 402
requirements, 23 responsive design, 581, 585
Requirements Definition phase (Goal-Directed restored windows, 443
Design), 25, 26‚Äì27 retrieval system
brainstorming, 111‚Äì112 digital, 347‚Äì348
brand requirements, 117 associative retrieval, 348

---

## Chunk 4481

business requirements, 117 attribute-based retrieval, 348‚Äì351
context scenarios, 113‚Äì115 identity retrieval, 348
contextual requirements, 116 positional retrieval, 348
customer requirements, 117 physical, 346‚Äì347
data requirements, 116 relational databases, 351‚Äì354
experience requirements, 117 versus storage system, 345‚Äì346
exploration, 111‚Äì112 reversing changes, 341

---

## Chunk 4482

features versus requirements, 107 reversioning, 373‚Äì374
function requirements, 116 Rheinfrank, John, 103
magic interface, 115 RIAs (rich Internet applications), 570
partner requirements, 117 ribbon control, 461‚Äì462
personas, expectations, 112 rich modeless feedback, 328
problem statements, 110‚Äì111 audible feedback
sources, 108‚Äì109 negative, 361‚Äì362

---

## Chunk 4483

specifications versus requirements, 107‚Äì108 positive, 362‚Äì363
steps, 109 errors and, 358‚Äì363
strategy, 108 RVMF (rich visual modeless feedback),
technical requirements, 117 358‚Äì361
vision statements, 110‚Äì111 roles
"what" of interaction, 106‚Äì109 interview subjects, 82‚Äì83
research user roles, versus personas, 69‚Äì71
design, quantitative data, 34‚Äì35 rollover effect, 448

---

## Chunk 4484

designers as researchers, 22‚Äì23 Rombauer, Irma S., The Joy of Cooking, 394
Goal-Directed Design, 36‚Äì37 room analog for windows, 444‚Äì448
competitive audits, 38 Rosenfeld, Louis, Information Architecture for the
customer interviews, 42 World Wide Web, 571
internal documents, 38 rotate, 552‚Äì553
kickoff meeting, 37‚Äì38 rotation, 3D objects, 506
literature review, 38 rubber-banding, 501

---

## Chunk 4485

prototype, 38 RVMF (rich visual modeless feedback), 361
SME (subject matter expert) interviews, 41
stakeholder interviews, 39‚Äì40 s
user interviews, 42‚Äì43
Sano, Darrell, Designing Visual Interfaces, 243,
user observation, 43‚Äì44
406, 411
personas and, 66‚Äì67
saturation (color), 408
quantitative versus qualitative data, 31‚Äì32
Save As command, 334‚Äì336
usage data analytics, 35

---

## Chunk 4486

Save Changes dialog, 333‚Äì334
user research, market research and, 35‚Äì36
saving
Research phase (Goal-Directed Design), 24‚Äì25
automatic save, 337‚Äì338
reshaping 2D objects, 498‚Äì500
close without saving, 334
resizing 2D objects, 498‚Äì500
discarding changes, 341
684 Index

---

## Chunk 4487

--- Page 715 ---
reversing changes, 341 Internet applications, 577‚Äì580
Save As command, 334‚Äì336 mobile applications
Save Changes, 333‚Äì334 auto-complete, 544
scanability, 581 auto-suggest, 545
scenario-based design, 104‚Äì105 categorized suggestions, 545
scenarios, 102‚Äì103 explicit, 544
context, 106 query building, 544‚Äì546
Requirements Definition, 113‚Äì115 recent/frequent, 545

---

## Chunk 4488

sample, 114‚Äì115 tap-ahead, 544
goals, 105 voice search, 544
key path, 28, 106 secondary personas, 89
interaction frameworks, 128 secondary windows, 437
persona-based, 105‚Äì106 secondary-action drawers, 536‚Äì537
use cases and, 103‚Äì104 selecting
user stories and, 103‚Äì104 additive, 479
validation, 28, 106 command ordering and, 476‚Äì477
alternative scenarios, 130 contiguous, 477‚Äì478

---

## Chunk 4489

edge-case scenarios, 130 controls, 593‚Äì594
necessary-use scenarios, 130 check boxes, 594‚Äì595
schedule, research and, 40 combo icon buttons, 599‚Äì601
Sch√∂n, Donald, 39 radio buttons, 596‚Äì598
scope, embedded systems design, 559 state-switching buttons, 595‚Äì596
screen switch controls, 598
navigational excise, 274 toggle buttons, 595
sovereign-posture applications, 209‚Äì210 discrete, 477‚Äì478

---

## Chunk 4490

scrollbars, 621‚Äì623 exclusion, mutual, 478‚Äì479
scrolling group, 480
drag and drop visual indication, 480‚Äì481
auto-scrolling, 488‚Äì489 self-referential design, 65
fine scrolling, 488‚Äì489 sequence models, 98
infinite, 519 served personas, 69, 89
Internet applications, 580 service blueprint, 136‚Äì137
footers, 583 service design framework
headers, 583 customer journeys, 136

---

## Chunk 4491

infinite scrolling, 584 experience prototypes, 137
scanability, 581 service blueprint, 136‚Äì137
in lists, 606‚Äì607 service framework, 120
mouse, 469 service map, 28
scanability, 581 session managers, 440‚Äì441
visually impaired users and, 402 shadows, 3D objects, 503
SDI (single document interface), 443‚Äì444 shape, visual interface design, 407
search Shneiderman, Ben, 315

---

## Chunk 4492

auto-complete, 578 sidebars, 438, 455, 463‚Äì464
auto-suggest, 578 modeless dialogs and, 631
categorized suggestions, 580 signposts, excise and, 286‚Äì290
disambiguation, 578 single Undo, 367‚Äì368
faceted, 579 limitations, 368
help, full-text, 393‚Äì394 sketching interaction framework, 126‚Äì127
Index 685

---

## Chunk 4493

--- Page 716 ---
skeuomorphic excise, 279‚Äì280 storage system versus retrieval system, 345‚Äì346
skills, interview subjects, 83 storyboarding, interaction frameworks, 128
sliders, 613‚Äì614 strategy, design requirements, 108
smart appliance posture, 234‚Äì235 structural patterns (interaction design), 176
smart products, 190‚Äì198 stylistic excise, 283‚Äì284

---

## Chunk 4494

smartphone and handheld posture summative evaluations, 141‚Äì142
satellite posture, 225‚Äì227 supplemental personas, 89
standalone posture, 227‚Äì228 sustainability, ethical interaction design and,
SME (subject matter expert) interviews, 41 169‚Äì170
necessity, 41 swimlanes, mobile applications, 524‚Äì525
Snapseed photo editor, 316 swipe
Snyder, Carolyn, Paper Prototyping, 120, 142 left/right, 552

---

## Chunk 4495

social harm, ethical interaction design and, 169 multifinger, 553
social products, 199‚Äì204 up/down, 551
social relationships, personas and, 86‚Äì87 switch controls, 598
societal harm, ethical interaction design and, 169 Synthesis-Generation model, 147‚Äì153
software development, process evolution, 8 extended team, 155‚Äì158
Software for Use (Constantine & Lockwood), 229, graphic design, 154

---

## Chunk 4496

239 industrial design framework, 155
Sonos Desktop Controller, 317 interaction design, 153
sorting, mobile applications, 546‚Äì548 visual information design, 154‚Äì155
implicit, 544 visual interface design, 153‚Äì154
sovereign web applications, 223‚Äì224 Synthsizers of ideas, 147‚Äì150
sovereign-posture applications, 208‚Äì213 system models, 17
spatial relationships, 409 system settings, user-selected, 401

---

## Chunk 4497

specifications, versus requirements, 107‚Äì108
spinners, 611‚Äì613 T
splitters, 623‚Äì624
tabbed dialogs, 636‚Äì639
splitting panes, 441
tablet device posture, 228‚Äì230
stacks
tablets, 509
handhelds, 510
applications, 512
tablet applications, 513‚Äì514
hardware-like control layout, 516
stakeholder interviews, 39‚Äì40
index panes, 513‚Äì514
stakeholders, users, perceptions, 40

---

## Chunk 4498

mobile versus desktop-like layout, 515‚Äì516
standalone posture (smartphones/handhelds),
orientation-based layout, 515
227‚Äì228
pop-up control panels, 514
standards
stacks, 513‚Äì514
across applications, 430‚Äì431
Tabor, Philip, 24
benefits, 428‚Äì429
tabs, 442
design language, 431‚Äì432
tap, 550
guidelines and, 429‚Äì430
tap-ahead in searches, 544
risks, 429
tap-and-hold, 550‚Äì551
rules of thumb and, 429‚Äì430

---

## Chunk 4499

tap-to-reveal controls, touchscreens, 541‚Äì542
violating, 430
task analysis, 58‚Äì59
state-switching buttons, 595‚Äì596
task panes, 463‚Äì464
status, harmonious interactions and, 259‚Äì261
tasks
stereotypes versus archetypes, 68
excise, 272
storage. See data storage
goal-directed, 272
686 Index

---

## Chunk 4500

--- Page 717 ---
versus goals, 14‚Äì15 thumbwheels, 614
personas and, 94‚Äì95 Tidwell, Jennifer, Designing Interfaces, 175
teams tiled windows, 440
business leads and, 157 timing, 266‚Äì268
collaboration, agile developers, 158‚Äì161 toggle buttons, 595
core teams, 146 tool palettes, 438
size, 152 tool bars for mobile, 533
creative culture, 161‚Äì162 toolbars, 455
design and, 156 buttons, 456‚Äì457

---

## Chunk 4501

digression, 162 contextual, 461
engineering, 156‚Äì157 control proliferation, 458‚Äì459
extended teams, 146 customizable, 461
Synthesis-Generation model, 155‚Äì158 disabling controls, 458
Generators, 147‚Äì150 docking, 456
marketing and, 157 menus and, 455‚Äì456
switching roles, 151 mobile applications, 533
Synthesizers, 147‚Äì150 carousels, 533‚Äì535
thought partners, 146‚Äì147 vertical, 533

---

## Chunk 4502

usability and, 156 modeless dialogs comparison, 455‚Äì456
technical expertise, 48 movable, 459‚Äì460
technical goals, 80 palettes, 462‚Äì463
technical requirements, 117 pop-up, 461
templates, 388‚Äì389 ribbon control, 461‚Äì462
ten-foot posture, 231‚Äì232 ToolTips, 457‚Äì458
testing tools, navigational excise, 276‚Äì277
formative evaluations, 141‚Äì142 ToolTip overlays, 392‚Äì393

---

## Chunk 4503

summative evaluations, 141‚Äì142 mobile applications, 550
usability testing, 139‚Äì140 ToolTips, 391‚Äì392, 457‚Äì458
formative usability testing, 142 touchscreens, 466
what to test, 140‚Äì141 direct manipulation controls, 543
text tap-to-reveal controls, 541‚Äì542
controls, 620‚Äì621 trackballs, 475
edit controls, 620 trackpads, 475
recognizing words versus reading, 410 transactional kiosks, 561‚Äì562

---

## Chunk 4504

visual interface design, 410 transactional websites, 221‚Äì222
The Design of Everyday Things (Norman), 312‚Äì313, transient web applications, 224
381 transient-posture applications, 213‚Äì217
The Icon Book (Horton), 419 transitions, 266‚Äì268
The Inmates are Running the Asylum (Cooper), xii, transparency, 249‚Äì250
93 tree controls, 608‚Äì609

---

## Chunk 4505

The Joy of Cooking (Rombauer & Becker), 394 Tufte, Edward, 259, 425
texture, visual interface design, 409 The Visual Display of Quantitative Information,
The Problem of More, 152 155, 425
The Visual Display of Quantitative Information type ahead, 578
(Tufte), 155, 425 typography, visual interface design, 410
thought partners, 146‚Äì147
Generators, 151 u
switching roles, 151

---

## Chunk 4506

unbounded controls, 615‚Äì616
Synthesizers, 151
Index 687

---

## Chunk 4507

--- Page 718 ---
Undo, 363‚Äì364 users, 13‚Äì14. See also customers
Backspace key, 371 archetypes, 26
blind Undo, 367 blame for mistakes, 4‚Äì5
category specific, 371‚Äì372 demands from different levels, 239
data buffers, deleted, 372‚Äì373 direction from, 254‚Äì255
discontiguous multiple Undo, 370‚Äì371 domain expertise, 48
explanatory Undo, 367 elastic, personas and, 65

---

## Chunk 4508

freezing, 374‚Äì375 experience level-based design, 243‚Äì247
group multiple Undo, 369‚Äì370 goals, 13‚Äì14
incremental actions, 366 cognitive processing and, 73‚Äì75
mental models end goals, 77
exploration and, 364‚Äì365 experience goals, 76‚Äì77
models of mistakes, 364 life goals, 77‚Äì78
Undo facility design, 365‚Äì366 products and, 80‚Äì81
modeless dialogs and, 630‚Äì631 user motivations, 78

---

## Chunk 4509

multiple, 367‚Äì368 intermediate (See intermediates)
limitations, 368‚Äì369 interviews, 42‚Äì43
procedural actions, 366‚Äì367 motivations, 78
Redo, 369 observation, 43‚Äì44
reversion, 373‚Äì374 perception, by stakeholders, 40
single, 367‚Äì368 permission, modal excise and, 283
limitations, 368 potential users, 42
undoable actions, 375‚Äì376 profiles versus personas, 71

---

## Chunk 4510

versioning, 373‚Äì374 research, market research and, 35‚Äì36
what-if control, 376‚Äì377 roles
unified file model abstractions, 69
automatic save, 337 versus personas, 69‚Äì71
Create a Copy function, 338‚Äì339 SMEs (subject matter experts), 41
discarding changes, 341 sovereign-posture applications, 209‚Äì210
File menu, 342‚Äì343 technical expertise, 48
file type specification, 340‚Äì341
naming, 339 V

---

## Chunk 4511

positioning documents, 340
validated entry controls, 616
renaming, 339
active validation, 617
reversing changes, 341
hints, 618
status, 343‚Äì344
measurement, 619‚Äì620
versions, 341‚Äì342
out-of-bounds data, 618
usability
passive validation, 617
teams and, 156
text edit controls, 620
testing, 57‚Äì58, 139‚Äì140
units, 619‚Äì620
designer involvement, 142‚Äì143
validating personas, 95

---

## Chunk 4512

formative usability testing, 142
validation, 139‚Äì143
Usability Engineering (Nielsen), 141
validation scenarios, 28, 106
usage data analytics, 35
alternative scenarios, 130
usage patterns, goals and, 72
edge-case scenarios, 130
use cases, scenarios and, 103‚Äì104
interaction framework, 130
User Experience in the Age of Sustainability
necessary-use scenarios, 130
(Kramer), 170
value (color), 408

---

## Chunk 4513

user stories, scenarios and, 103‚Äì104
688 Index

---

## Chunk 4514

--- Page 719 ---
variables, visual information design, 426‚Äì427 communication, 412‚Äì413
verbal thinkers, 129 context, 406
versioning, 373‚Äì374 design principles, 411‚Äì424
versions, 341‚Äì342 element balance, 418
vertex handle (resizing), 499 experience attributes, 412‚Äì413
viewpoints, 3D objects, 502‚Äì503 flow, 414‚Äì418
views, navigational excise, 274 functions, 419

---

## Chunk 4515

virtual desktop spaces, 440‚Äì441 grid alignment, 414‚Äì417
virtual manual affordances, 313 icons, 418‚Äì419
visceral cognitive processing, 73 rendering, 420
designing for, 73‚Äì74 information hierarchy, 410‚Äì411
vision statements, 110‚Äì111 logical path, 418
visual art, visual design and, 405‚Äì406 motion, 411
visual comparisons, 426 orientation, 409
visual design, visual art and, 405‚Äì406 position, 409

---

## Chunk 4516

visual design framework, 120, 130‚Äì131 pre-visualizing, 420‚Äì421
experience attributes, 131‚Äì132 shape, 407
screen archetype, 134 simplicity, 423‚Äì424
visual language studies, 132‚Äì134 size, 407
visual style, 134 structure, 414‚Äì418
visual feedback, drag and drop, 484‚Äì486 Synthesis-Generation model, 153‚Äì154
completion, 487 text, 410
visual frameworks, 28 texture, 409

---

## Chunk 4517

visual indication in selecting, 480‚Äì481 tone, 412‚Äì413
visual information design typography, 410
adjacent space, 428 visual hierarchy, 413‚Äì414
animation, time and, 428 visual noise, 423
causality, 426 visual symbols/objects, 419‚Äì420
data integration, 427 visual language strategy, 28
design principles, 425‚Äì428 visual language studies, visual design framework,
graphics integration, 427 132‚Äì134

---

## Chunk 4518

integrity of content, 427 visual noise, 423
quality of content, 427 visual style, sovereign-posture applications, 210
quantifiable data, 428 visual thinkers, 129
relevance of content, 427 visual work, 271
Synthesis-Generation model, 154‚Äì155 visually impaired users, 401‚Äì403
text integration, 427 visual-only output, 402
variables, 426‚Äì427 voice activation, 123

---

## Chunk 4519

visual comparisons, 426 voice search, 544
visual interface design, 405
attention-getting, 422‚Äì423 w
change over time, 411
web application posture, 222‚Äì224
cluttered interfaces, 423
Web postures, 218‚Äì219
color, 407
information websites, 219‚Äì220
HSV, 408‚Äì409
transactional websites, 221‚Äì222
hue, 408
web application, 222‚Äì224
saturation, 408
welcome screens, mobile applications, 549‚Äì550
value, 407‚Äì408

---

## Chunk 4520

what-if control, 376‚Äì377
commands, response, 422
Index 689

---

## Chunk 4521

--- Page 720 ---
widgets, table device posture, 230 index panes, 438
WIMP (windows, icons, menus, and pointer), 435 menus, 437
windows sidebars, 438
desktop tool palettes, 438
best use, 444‚Äì448 toolbars, 437
full-screen applications, 441 secondary, 437
maximized, 442 states, 442‚Äì443
MDI (multiple document interface), wireframes, 3D objects, 504
443‚Äì444 wizards, 390‚Äì391
minimized, 442 work

---

## Chunk 4522

multipaned applications, 441‚Äì442 cognitive work, 271
overlapping, 439‚Äì440 memory work, 271
pluralized, 443 physical work, 271
restored, 443 visual work, 271
room analogy, 444‚Äì448 work flow models, 98
SDI (single document interface), 443‚Äì444 working sets, 384
session managers, 440‚Äì441
tiles, 440 XYz
virtual desktop spaces, 440‚Äì441
Xerox Alto, 435
primary, 436‚Äì437
zoom, 3D objects, 506

---

## Chunk 4523

content panes, 438
690 Index

---

## Chunk 4524

--- Page 721 ---
Designing solutions
from products and services
to process anD practice
‚Äú[Cooper U] is a great investment. ‚ÄúCooper helped us reflect on our
Both as a personal career move, business, our processes, and our
and for anyone with a budget, who product vision, elevating it in
recognizes the value of UX, but ways we didn‚Äôt imagine.‚Äù
doesn‚Äôt quite know how to put

---

## Chunk 4525

‚Äì Ian ShakIl, CEO, augmEdIx
skills and teams together to create
practical, useful, goal-directed
product designs.‚Äù
‚Äì pETTErI hIISIl√§, COOpEr u InTEraCTIOn ‚ÄúI‚Äôve been reading textbooks, tweets,
dESIgn alumnI blogs on UX for months along with
taking extended learning classes.
But nothing beats getting your hands
down and dirty with the pressures
of end-of-day deadlines.‚Äù

---

## Chunk 4526

‚ÄúWe asked Cooper to blow our socks
‚Äì danTE guInTu, ux BOOT Camp alumnI
off, and they delivered in spades.
They gave us great research and
awesome designs. Our feet are a
little cold, though!‚Äù
‚ÄúInterning at Cooper is an internship
‚Äì Vp, prOduCT dESIgn, fOrTunE 500 in name only, from day one I was put
SOfTwarE COmpany on actual, client-facing projects. This
meant that I was not only receiving

---

## Chunk 4527

mentorship from my senior design
partner, but also developing the
‚ÄúEssential to the future of how invaluable, and often intangible skills
creative work is done.‚Äù of an effective design consultant.‚Äù
‚Äì TOdd CramEr, dESIgn lEadErShIp ‚Äì BrEndan knEram, fOrmEr COOpEr
alumnI InTErn

---

## Chunk 4528

--- Page 722 ---
Master
Your craFt
We‚Äôre a team of passionate leaders,
innovators, and craftspeople.
cooper u courses our studio
We‚Äôve taught thousands of people We have top-tier designers, a
around the world. our courses don‚Äôt just world-renowned process, and visionary
teach design techniques, they develop leaders. our designers make each

---

## Chunk 4529

leadership skills so you can build the other better, while solving design
vision you imagine. challenges that create resounding
impacts for our clients and the world.
cooper.com/training cooper.com/careers
cooperu@cooper.com careers@cooper.com

---

